
PolySnake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f85c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000146c  0800fa30  0800fa30  00010a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e9c  08010e9c  000121d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010e9c  08010e9c  00011e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ea4  08010ea4  000121d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010ea4  08010ea4  00011ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08010eac  08010eac  00011eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08010eb4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000145c  200001d4  08011088  000121d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001630  08011088  00012630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002635c  00000000  00000000  00012204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047f8  00000000  00000000  00038560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  0003cd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001343  00000000  00000000  0003e5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002afcd  00000000  00000000  0003f92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dfe4  00000000  00000000  0006a8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7998  00000000  00000000  000888dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180274  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ed4  00000000  00000000  001802b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0018918c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fa14 	.word	0x0800fa14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800fa14 	.word	0x0800fa14

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <_ZNK7ELE33125Point4getXEv>:
	}

	/** @brief Returns the x coordinate.
	 * @retval The x coordinate.
	 */
	uint16_t Point::getX() const{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
		return x;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	889b      	ldrh	r3, [r3, #4]
	}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_ZNK7ELE33125Point4getYEv>:

	/** @brief Returns the y coordinate.
	 * @retval The y coordinate.
	 */
	uint16_t Point::getY() const{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
		return y;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	88db      	ldrh	r3, [r3, #6]
	}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_ZNK7ELE33124Rect8getWidthEv>:
}

/** @brief Returns the width of the rectangle.
 * @retval The width of the rectangle.
 */
uint16_t Rect::getWidth() const {
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	if (p1.getX() < p2.getX()) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3304      	adds	r3, #4
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ffdf 	bl	8000fb4 <_ZNK7ELE33125Point4getXEv>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461c      	mov	r4, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	330c      	adds	r3, #12
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffd8 	bl	8000fb4 <_ZNK7ELE33125Point4getXEv>
 8001004:	4603      	mov	r3, r0
 8001006:	429c      	cmp	r4, r3
 8001008:	bf34      	ite	cc
 800100a:	2301      	movcc	r3, #1
 800100c:	2300      	movcs	r3, #0
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00f      	beq.n	8001034 <_ZNK7ELE33124Rect8getWidthEv+0x50>
		return p2.getX() - p1.getX();
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	330c      	adds	r3, #12
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ffcb 	bl	8000fb4 <_ZNK7ELE33125Point4getXEv>
 800101e:	4603      	mov	r3, r0
 8001020:	461c      	mov	r4, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3304      	adds	r3, #4
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ffc4 	bl	8000fb4 <_ZNK7ELE33125Point4getXEv>
 800102c:	4603      	mov	r3, r0
 800102e:	1ae3      	subs	r3, r4, r3
 8001030:	b29b      	uxth	r3, r3
 8001032:	e00e      	b.n	8001052 <_ZNK7ELE33124Rect8getWidthEv+0x6e>
	} 
	return p1.getX() - p2.getX();
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3304      	adds	r3, #4
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ffbb 	bl	8000fb4 <_ZNK7ELE33125Point4getXEv>
 800103e:	4603      	mov	r3, r0
 8001040:	461c      	mov	r4, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	330c      	adds	r3, #12
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ffb4 	bl	8000fb4 <_ZNK7ELE33125Point4getXEv>
 800104c:	4603      	mov	r3, r0
 800104e:	1ae3      	subs	r3, r4, r3
 8001050:	b29b      	uxth	r3, r3
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}

0800105a <_ZNK7ELE33124Rect9getHeightEv>:

/** @brief Returns the height of the rectangle.
 * @retval The height of the object.
 */
uint16_t Rect::getHeight() const {
 800105a:	b590      	push	{r4, r7, lr}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
	if (p1.getY() < p2.getY()) {
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3304      	adds	r3, #4
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ffb0 	bl	8000fcc <_ZNK7ELE33125Point4getYEv>
 800106c:	4603      	mov	r3, r0
 800106e:	461c      	mov	r4, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	330c      	adds	r3, #12
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffa9 	bl	8000fcc <_ZNK7ELE33125Point4getYEv>
 800107a:	4603      	mov	r3, r0
 800107c:	429c      	cmp	r4, r3
 800107e:	bf34      	ite	cc
 8001080:	2301      	movcc	r3, #1
 8001082:	2300      	movcs	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00f      	beq.n	80010aa <_ZNK7ELE33124Rect9getHeightEv+0x50>
		return p2.getY() - p1.getY();
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	330c      	adds	r3, #12
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff9c 	bl	8000fcc <_ZNK7ELE33125Point4getYEv>
 8001094:	4603      	mov	r3, r0
 8001096:	461c      	mov	r4, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3304      	adds	r3, #4
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff95 	bl	8000fcc <_ZNK7ELE33125Point4getYEv>
 80010a2:	4603      	mov	r3, r0
 80010a4:	1ae3      	subs	r3, r4, r3
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	e00e      	b.n	80010c8 <_ZNK7ELE33124Rect9getHeightEv+0x6e>
	}
	return p1.getY() - p2.getY();
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3304      	adds	r3, #4
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ff8c 	bl	8000fcc <_ZNK7ELE33125Point4getYEv>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461c      	mov	r4, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	330c      	adds	r3, #12
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff85 	bl	8000fcc <_ZNK7ELE33125Point4getYEv>
 80010c2:	4603      	mov	r3, r0
 80010c4:	1ae3      	subs	r3, r4, r3
 80010c6:	b29b      	uxth	r3, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd90      	pop	{r4, r7, pc}

080010d0 <_ZNK7ELE33124Rect5getX1Ev>:

/** @brief Returns the x coordinate of the lower left corner
 * of the rectangle.
 * @retval The x coordinate of the lower left corner.
 */
uint16_t Rect::getX1() const {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	return p1.getX();
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3304      	adds	r3, #4
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff69 	bl	8000fb4 <_ZNK7ELE33125Point4getXEv>
 80010e2:	4603      	mov	r3, r0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_ZNK7ELE33124Rect5getY1Ev>:

/** @brief Returns the y coordinate of the lower left corner
 * of the rectangle.
 * @retval The y coordinate of the lower left corner.
 */
uint16_t Rect::getY1() const {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	return p1.getY();
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3304      	adds	r3, #4
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff67 	bl	8000fcc <_ZNK7ELE33125Point4getYEv>
 80010fe:	4603      	mov	r3, r0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>:
	 * @details The function is used to transform a generic color representation
	 * in the device specific color format of the ILI9341 LCD chip.
	 * @param [in] color A Color enum value.
	 * @retval A ILI9341 color enum value.
	 */
	constexpr ili9341_color_t colorToILI9341Color(Color color){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
		switch (color){
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b12      	cmp	r3, #18
 8001114:	d861      	bhi.n	80011da <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd2>
 8001116:	a201      	add	r2, pc, #4	@ (adr r2, 800111c <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x14>)
 8001118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111c:	08001169 	.word	0x08001169
 8001120:	0800116f 	.word	0x0800116f
 8001124:	08001175 	.word	0x08001175
 8001128:	0800117b 	.word	0x0800117b
 800112c:	08001181 	.word	0x08001181
 8001130:	08001187 	.word	0x08001187
 8001134:	0800118d 	.word	0x0800118d
 8001138:	08001193 	.word	0x08001193
 800113c:	08001199 	.word	0x08001199
 8001140:	0800119f 	.word	0x0800119f
 8001144:	080011a5 	.word	0x080011a5
 8001148:	080011ab 	.word	0x080011ab
 800114c:	080011b1 	.word	0x080011b1
 8001150:	080011b7 	.word	0x080011b7
 8001154:	080011bd 	.word	0x080011bd
 8001158:	080011c3 	.word	0x080011c3
 800115c:	080011c9 	.word	0x080011c9
 8001160:	080011cf 	.word	0x080011cf
 8001164:	080011d5 	.word	0x080011d5
			case Color::BLACK:
				return ILI9341_BLACK ;
 8001168:	4b20      	ldr	r3, [pc, #128]	@ (80011ec <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xe4>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	e037      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::NAVY:
				return ILI9341_NAVY;
 800116e:	4b20      	ldr	r3, [pc, #128]	@ (80011f0 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xe8>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	e034      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::DARKGREEN:
				return ILI9341_DARKGREEN;
 8001174:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xec>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	e031      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::DARKCYAN:
				return ILI9341_DARKCYAN;
 800117a:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xf0>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	e02e      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::MAROON:
				return ILI9341_MAROON;
 8001180:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xf4>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	e02b      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::PURPLE:
				return ILI9341_PURPLE;
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xf8>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	e028      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::OLIVE:
				return ILI9341_OLIVE;
 800118c:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xfc>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	e025      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::LIGHTGREY:
				return ILI9341_LIGHTGREY;
 8001192:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x100>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	e022      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::DARKGREY:
				return ILI9341_DARKGREY;
 8001198:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x104>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	e01f      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::BLUE:
				return ILI9341_BLUE;
 800119e:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x108>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	e01c      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::GREEN:
				return ILI9341_GREEN;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x10c>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	e019      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::CYAN:
				return ILI9341_CYAN;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x110>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	e016      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::RED:
				return ILI9341_RED;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x114>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	e013      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::MAGENTA:
				return ILI9341_MAGENTA;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x118>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	e010      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::YELLOW:
				return ILI9341_YELLOW;
 80011bc:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x11c>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	e00d      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::WHITE:
				return ILI9341_WHITE;
 80011c2:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x120>)
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	e00a      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::ORANGE:
				return ILI9341_ORANGE;
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x124>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	e007      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::GREENYELLOW:
				return ILI9341_GREENYELLOW;
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x128>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	e004      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::PINK:
				return ILI9341_PINK;
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x12c>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	e001      	b.n	80011de <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
		}
		// Default return black
		return ILI9341_BLACK ;
 80011da:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xe4>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
	}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	080108aa 	.word	0x080108aa
 80011f0:	080108ac 	.word	0x080108ac
 80011f4:	080108ae 	.word	0x080108ae
 80011f8:	080108b0 	.word	0x080108b0
 80011fc:	080108b2 	.word	0x080108b2
 8001200:	080108b4 	.word	0x080108b4
 8001204:	080108b6 	.word	0x080108b6
 8001208:	080108b8 	.word	0x080108b8
 800120c:	080108ba 	.word	0x080108ba
 8001210:	080108bc 	.word	0x080108bc
 8001214:	080108be 	.word	0x080108be
 8001218:	080108c0 	.word	0x080108c0
 800121c:	080108c2 	.word	0x080108c2
 8001220:	080108c4 	.word	0x080108c4
 8001224:	080108c6 	.word	0x080108c6
 8001228:	080108c8 	.word	0x080108c8
 800122c:	080108ca 	.word	0x080108ca
 8001230:	080108cc 	.word	0x080108cc
 8001234:	080108ce 	.word	0x080108ce

08001238 <_ZN7ELE33127DisplayC1Ev>:
	 * The contained methods represent a set of functions expected to be provided from a 
	 * graphical device in order to be used as an graphics output in the game application.
	 * @todo change all coordinates for unsigned values since negative values make no sense
	 * @todo add overloaded function that accept Point objects 
	 */
	class Display {
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <_ZN7ELE33127DisplayC1Ev+0x1c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	0800fb00 	.word	0x0800fb00

08001258 <_ZN7ELE331214ILI9341DisplayC1Ev>:
#include <cmath>
using namespace ELE3312;

/** @brief Default constructor for the ILI9341Display class.
  */
ILI9341Display::ILI9341Display() : ptext_attr_{nullptr}{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ffe8 	bl	8001238 <_ZN7ELE33127DisplayC1Ev>
 8001268:	4a06      	ldr	r2, [pc, #24]	@ (8001284 <_ZN7ELE331214ILI9341DisplayC1Ev+0x2c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]

}
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	0800faa4 	.word	0x0800faa4

08001288 <_ZN7ELE331214ILI9341DisplayD1Ev>:

/** @brief Destructor for the ILI9341Display class.
  */
ILI9341Display::~ILI9341Display(){
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	4a09      	ldr	r2, [pc, #36]	@ (80012b8 <_ZN7ELE331214ILI9341DisplayD1Ev+0x30>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	601a      	str	r2, [r3, #0]
	if(ptext_attr_ != nullptr){
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d007      	beq.n	80012ae <_ZN7ELE331214ILI9341DisplayD1Ev+0x26>
		delete ptext_attr_;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <_ZN7ELE331214ILI9341DisplayD1Ev+0x26>
 80012a6:	210c      	movs	r1, #12
 80012a8:	4618      	mov	r0, r3
 80012aa:	f00a fd4d 	bl	800bd48 <_ZdlPvj>
	}
}
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	0800faa4 	.word	0x0800faa4

080012bc <_ZN7ELE331214ILI9341DisplayD0Ev>:
ILI9341Display::~ILI9341Display(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
}
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ffdf 	bl	8001288 <_ZN7ELE331214ILI9341DisplayD1Ev>
 80012ca:	2110      	movs	r1, #16
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f00a fd3b 	bl	800bd48 <_ZdlPvj>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_ZN7ELE331214ILI9341Display5setupEP19__SPI_HandleTypeDef>:

/** @brief Setup routine for the ILI9341Display class.
  * @param [in] hspi Handle to the SPI interface connected to the TFT display.
  */
void  ILI9341Display::setup(SPI_HandleTypeDef *hspi){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	@ 0x30
 80012e0:	af0a      	add	r7, sp, #40	@ 0x28
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
		this->lcd_ = 	ili9341_new(
 80012e6:	2301      	movs	r3, #1
 80012e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80012ea:	2300      	movs	r3, #0
 80012ec:	9308      	str	r3, [sp, #32]
 80012ee:	2300      	movs	r3, #0
 80012f0:	9307      	str	r3, [sp, #28]
 80012f2:	2300      	movs	r3, #0
 80012f4:	9306      	str	r3, [sp, #24]
 80012f6:	2300      	movs	r3, #0
 80012f8:	9305      	str	r3, [sp, #20]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9304      	str	r3, [sp, #16]
 80012fe:	2303      	movs	r3, #3
 8001300:	9303      	str	r3, [sp, #12]
 8001302:	2380      	movs	r3, #128	@ 0x80
 8001304:	9302      	str	r3, [sp, #8]
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <_ZN7ELE331214ILI9341Display5setupEP19__SPI_HandleTypeDef+0x50>)
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	2340      	movs	r3, #64	@ 0x40
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <_ZN7ELE331214ILI9341Display5setupEP19__SPI_HandleTypeDef+0x54>)
 8001310:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001314:	4906      	ldr	r1, [pc, #24]	@ (8001330 <_ZN7ELE331214ILI9341Display5setupEP19__SPI_HandleTypeDef+0x54>)
 8001316:	6838      	ldr	r0, [r7, #0]
 8001318:	f000 fe33 	bl	8001f82 <ili9341_new>
 800131c:	4602      	mov	r2, r0
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	609a      	str	r2, [r3, #8]
				  isoLandscapeFlip,
				  NULL, 0,
				  NULL, 0,
				  itsNotSupported,
				  itnNormalized);
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40020800 	.word	0x40020800
 8001330:	40020400 	.word	0x40020400

08001334 <_ZN7ELE331214ILI9341Display11clearScreenEv>:

/** @brief Clear the screen.
 * @details The function removes all graphical objects from the screen
 * and replaces them with a homogeneous color.
 */
void ILI9341Display::clearScreen() {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	ili9341_fill_screen(lcd_, ILI9341_BLACK);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <_ZN7ELE331214ILI9341Display11clearScreenEv+0x20>)
 8001342:	8812      	ldrh	r2, [r2, #0]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f001 fe93 	bl	8003072 <ili9341_fill_screen>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	080108aa 	.word	0x080108aa

08001358 <_ZN7ELE331214ILI9341Display10fillScreenENS_5ColorE>:
 * @details The function fills the screen with the specified color so that
 * none of the previous displayed objects remain.
 *
 * @param [in] The desired color.
 */
void ILI9341Display::fillScreen(Color color) {
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	ili9341_fill_screen(lcd_, ELE3312::colorToILI9341Color(color));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689c      	ldr	r4, [r3, #8]
 8001366:	6838      	ldr	r0, [r7, #0]
 8001368:	f7ff fece 	bl	8001108 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 800136c:	4603      	mov	r3, r0
 800136e:	4619      	mov	r1, r3
 8001370:	4620      	mov	r0, r4
 8001372:	f001 fe7e 	bl	8003072 <ili9341_fill_screen>
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bd90      	pop	{r4, r7, pc}

0800137e <_ZN7ELE331214ILI9341Display9drawPixelENS_5ColorEtt>:
 *
 * @param [in] color The color of the pixel
 * @param [in] x The x position of the pixel
 * @param [in] y The y position of the pixel
 */
void ILI9341Display::drawPixel(Color color, uint16_t x, uint16_t y) {
 800137e:	b590      	push	{r4, r7, lr}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	4611      	mov	r1, r2
 800138a:	461a      	mov	r2, r3
 800138c:	460b      	mov	r3, r1
 800138e:	80fb      	strh	r3, [r7, #6]
 8001390:	4613      	mov	r3, r2
 8001392:	80bb      	strh	r3, [r7, #4]
	ili9341_draw_pixel(lcd_, ELE3312::colorToILI9341Color(color), x, y);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	689c      	ldr	r4, [r3, #8]
 8001398:	68b8      	ldr	r0, [r7, #8]
 800139a:	f7ff feb5 	bl	8001108 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 800139e:	4603      	mov	r3, r0
 80013a0:	4619      	mov	r1, r3
 80013a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013aa:	4620      	mov	r0, r4
 80013ac:	f001 fae9 	bl	8002982 <ili9341_draw_pixel>
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd90      	pop	{r4, r7, pc}

080013b8 <_ZN7ELE331214ILI9341Display8drawLineENS_5ColorEtttt>:
 * @param [in] x0 The x position of the first point.
 * @param [in] y0 The y position of the first point.
 * @param [in] x1 The x position of the second point.
 * @param [in] y1 The y position of the second point.
 */
void ILI9341Display::drawLine(Color color, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80013b8:	b5b0      	push	{r4, r5, r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af02      	add	r7, sp, #8
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	4611      	mov	r1, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	460b      	mov	r3, r1
 80013c8:	80fb      	strh	r3, [r7, #6]
 80013ca:	4613      	mov	r3, r2
 80013cc:	80bb      	strh	r3, [r7, #4]
	ili9341_draw_line(lcd_, ELE3312::colorToILI9341Color(color),  x0, y0, x1, y1);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	689c      	ldr	r4, [r3, #8]
 80013d2:	68b8      	ldr	r0, [r7, #8]
 80013d4:	f7ff fe98 	bl	8001108 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 80013d8:	4603      	mov	r3, r0
 80013da:	461d      	mov	r5, r3
 80013dc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80013e0:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80013e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80013e8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80013ec:	9201      	str	r2, [sp, #4]
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	4603      	mov	r3, r0
 80013f2:	460a      	mov	r2, r1
 80013f4:	4629      	mov	r1, r5
 80013f6:	4620      	mov	r0, r4
 80013f8:	f001 fb1c 	bl	8002a34 <ili9341_draw_line>
}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bdb0      	pop	{r4, r5, r7, pc}

08001404 <_ZN7ELE331214ILI9341Display8drawRectENS_5ColorEtttt>:
 * @param [in] x The x coordinate of the lower left corner.
 * @param [in] y The y coordinate of the lower left corner.
 * @param [in] width The width of the rectangle in pixels.
 * @param [in] height The height of the rectangle in pixels.
 */
void ILI9341Display::drawRect(Color color, uint16_t x, uint16_t y, uint16_t w, uint16_t h){
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b087      	sub	sp, #28
 8001408:	af02      	add	r7, sp, #8
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	4611      	mov	r1, r2
 8001410:	461a      	mov	r2, r3
 8001412:	460b      	mov	r3, r1
 8001414:	80fb      	strh	r3, [r7, #6]
 8001416:	4613      	mov	r3, r2
 8001418:	80bb      	strh	r3, [r7, #4]
	ili9341_draw_rect(lcd_, ELE3312::colorToILI9341Color(color), x, y, w, h);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	689c      	ldr	r4, [r3, #8]
 800141e:	68b8      	ldr	r0, [r7, #8]
 8001420:	f7ff fe72 	bl	8001108 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 8001424:	4603      	mov	r3, r0
 8001426:	4618      	mov	r0, r3
 8001428:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800142c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001430:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	8c3b      	ldrh	r3, [r7, #32]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	460b      	mov	r3, r1
 800143a:	4601      	mov	r1, r0
 800143c:	4620      	mov	r0, r4
 800143e:	f001 fbe6 	bl	8002c0e <ili9341_draw_rect>
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bd90      	pop	{r4, r7, pc}

0800144a <_ZN7ELE331214ILI9341Display8drawRectENS_5ColorERKNS_4RectE>:
 * color, dimensions, and position on the screen.
 * @param [in] color The color of the rectangle specified as an color enumeration.
 * @param [in] rect A reference to a Rect object specifying the dimensions
 * and position of the rectangle.
 */
void ILI9341Display::drawRect(Color color, const Rect &rect) {
 800144a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af02      	add	r7, sp, #8
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
	ili9341_draw_rect(lcd_, ELE3312::colorToILI9341Color(color), rect.getX1(), rect.getY1(), 
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	689c      	ldr	r4, [r3, #8]
 800145c:	68b8      	ldr	r0, [r7, #8]
 800145e:	f7ff fe53 	bl	8001108 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 8001462:	4603      	mov	r3, r0
 8001464:	4698      	mov	r8, r3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fe32 	bl	80010d0 <_ZNK7ELE33124Rect5getX1Ev>
 800146c:	4603      	mov	r3, r0
 800146e:	b21d      	sxth	r5, r3
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff fe3b 	bl	80010ec <_ZNK7ELE33124Rect5getY1Ev>
 8001476:	4603      	mov	r3, r0
 8001478:	b21e      	sxth	r6, r3
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fdb2 	bl	8000fe4 <_ZNK7ELE33124Rect8getWidthEv>
 8001480:	4603      	mov	r3, r0
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fde8 	bl	800105a <_ZNK7ELE33124Rect9getHeightEv>
 800148a:	4603      	mov	r3, r0
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	4633      	mov	r3, r6
 8001494:	462a      	mov	r2, r5
 8001496:	4641      	mov	r1, r8
 8001498:	4620      	mov	r0, r4
 800149a:	f001 fbb8 	bl	8002c0e <ili9341_draw_rect>
		   rect.getWidth(), rect.getHeight());
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080014a8 <_ZN7ELE331214ILI9341Display8fillRectENS_5ColorEtttt>:
 * @param [in] x The x position of the lower left corner.
 * @param [in] y The y position of the lower left corner.
 * @param [in] width The width of the rectangle in pixels.
 * @param [in] height The height of the rectangle in pixels.
 */
void ILI9341Display::fillRect(Color color, uint16_t x, uint16_t y, uint16_t w, uint16_t h){
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af02      	add	r7, sp, #8
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	4611      	mov	r1, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	460b      	mov	r3, r1
 80014b8:	80fb      	strh	r3, [r7, #6]
 80014ba:	4613      	mov	r3, r2
 80014bc:	80bb      	strh	r3, [r7, #4]
	ili9341_fill_rect(lcd_, ELE3312::colorToILI9341Color(color), x, y, w, h);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	689c      	ldr	r4, [r3, #8]
 80014c2:	68b8      	ldr	r0, [r7, #8]
 80014c4:	f7ff fe20 	bl	8001108 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014d0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	8c3b      	ldrh	r3, [r7, #32]
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	460b      	mov	r3, r1
 80014de:	4601      	mov	r1, r0
 80014e0:	4620      	mov	r0, r4
 80014e2:	f001 fc05 	bl	8002cf0 <ili9341_fill_rect>
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd90      	pop	{r4, r7, pc}

080014ee <_ZN7ELE331214ILI9341Display8fillRectENS_5ColorERKNS_4RectE>:
 * parameter.
 * @param [in] color The color of the filled rectangle.
 * @param [in] rect A const reference to a Rect object that specifies the
 * dimension and position of the rectangle.
 */
void ILI9341Display::fillRect(Color color, const Rect &rect){
 80014ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	ili9341_fill_rect(lcd_, ELE3312::colorToILI9341Color(color),  rect.getX1(), rect.getY1(), 
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	689c      	ldr	r4, [r3, #8]
 8001500:	68b8      	ldr	r0, [r7, #8]
 8001502:	f7ff fe01 	bl	8001108 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 8001506:	4603      	mov	r3, r0
 8001508:	4698      	mov	r8, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fde0 	bl	80010d0 <_ZNK7ELE33124Rect5getX1Ev>
 8001510:	4603      	mov	r3, r0
 8001512:	b21d      	sxth	r5, r3
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff fde9 	bl	80010ec <_ZNK7ELE33124Rect5getY1Ev>
 800151a:	4603      	mov	r3, r0
 800151c:	b21e      	sxth	r6, r3
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fd60 	bl	8000fe4 <_ZNK7ELE33124Rect8getWidthEv>
 8001524:	4603      	mov	r3, r0
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fd96 	bl	800105a <_ZNK7ELE33124Rect9getHeightEv>
 800152e:	4603      	mov	r3, r0
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4633      	mov	r3, r6
 8001538:	462a      	mov	r2, r5
 800153a:	4641      	mov	r1, r8
 800153c:	4620      	mov	r0, r4
 800153e:	f001 fbd7 	bl	8002cf0 <ili9341_fill_rect>
		   rect.getWidth(), rect.getHeight());
}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800154c <_ZN7ELE331214ILI9341Display10drawCircleENS_5ColorEttt>:
 * @param [in] color The color of the circle.
 * @param [in] x The x position of the circle's center.
 * @param [in] y The y position of the circle's center.
 * @param [in] radius The radius of the circle in pixels.
 */
void ILI9341Display::drawCircle(Color color, uint16_t x, uint16_t y, uint16_t r) {
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b087      	sub	sp, #28
 8001550:	af02      	add	r7, sp, #8
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	4611      	mov	r1, r2
 8001558:	461a      	mov	r2, r3
 800155a:	460b      	mov	r3, r1
 800155c:	80fb      	strh	r3, [r7, #6]
 800155e:	4613      	mov	r3, r2
 8001560:	80bb      	strh	r3, [r7, #4]
	ili9341_draw_circle(lcd_, ELE3312::colorToILI9341Color(color), x, y, r);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	689c      	ldr	r4, [r3, #8]
 8001566:	68b8      	ldr	r0, [r7, #8]
 8001568:	f7ff fdce 	bl	8001108 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 800156c:	4603      	mov	r3, r0
 800156e:	4618      	mov	r0, r3
 8001570:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001574:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001578:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	460b      	mov	r3, r1
 8001580:	4601      	mov	r1, r0
 8001582:	4620      	mov	r0, r4
 8001584:	f001 fc46 	bl	8002e14 <ili9341_draw_circle>
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bd90      	pop	{r4, r7, pc}

08001590 <_ZN7ELE331214ILI9341Display10fillCircleENS_5ColorEttt>:
 * @param [in] color The color of the filled circle.
 * @param [in] x The x position of the center of the circle.
 * @param [in] y The y position of the center of the circle.
 * @param [in] radius The radius of the circle in pixels.
 */
void ILI9341Display::fillCircle(Color color, uint16_t x, uint16_t y, uint16_t r) {
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b087      	sub	sp, #28
 8001594:	af02      	add	r7, sp, #8
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	4611      	mov	r1, r2
 800159c:	461a      	mov	r2, r3
 800159e:	460b      	mov	r3, r1
 80015a0:	80fb      	strh	r3, [r7, #6]
 80015a2:	4613      	mov	r3, r2
 80015a4:	80bb      	strh	r3, [r7, #4]
	ili9341_fill_circle(lcd_, ELE3312::colorToILI9341Color(color), x, y, r);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	689c      	ldr	r4, [r3, #8]
 80015aa:	68b8      	ldr	r0, [r7, #8]
 80015ac:	f7ff fdac 	bl	8001108 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015b8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	460b      	mov	r3, r1
 80015c4:	4601      	mov	r1, r0
 80015c6:	4620      	mov	r0, r4
 80015c8:	f001 fd16 	bl	8002ff8 <ili9341_fill_circle>
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}

080015d4 <_ZN7ELE331214ILI9341Display8drawCharEttc>:
 * specified coordinates on the screen.
 * @param [in] x The x position of the lower left corner of the character.
 * @param [in] y The y position of the lower left corner of the character.
 * @param [in] character The ASCII character to be drawn on the screen.
 */
void ILI9341Display::drawChar(uint16_t x, uint16_t y, char ch) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af02      	add	r7, sp, #8
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	4608      	mov	r0, r1
 80015de:	4611      	mov	r1, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	4603      	mov	r3, r0
 80015e4:	817b      	strh	r3, [r7, #10]
 80015e6:	460b      	mov	r3, r1
 80015e8:	813b      	strh	r3, [r7, #8]
 80015ea:	4613      	mov	r3, r2
 80015ec:	71fb      	strb	r3, [r7, #7]
	if (ptext_attr_ == nullptr){
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d112      	bne.n	800161c <_ZN7ELE331214ILI9341Display8drawCharEttc+0x48>
		ptext_attr_ = new ili9341_text_attr_t{&ili9341_font_11x18, ILI9341_WHITE , ILI9341_BLACK,x,y};
 80015f6:	200c      	movs	r0, #12
 80015f8:	f00a fba8 	bl	800bd4c <_Znwj>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a12      	ldr	r2, [pc, #72]	@ (8001648 <_ZN7ELE331214ILI9341Display8drawCharEttc+0x74>)
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	4a12      	ldr	r2, [pc, #72]	@ (800164c <_ZN7ELE331214ILI9341Display8drawCharEttc+0x78>)
 8001604:	8812      	ldrh	r2, [r2, #0]
 8001606:	809a      	strh	r2, [r3, #4]
 8001608:	4a11      	ldr	r2, [pc, #68]	@ (8001650 <_ZN7ELE331214ILI9341Display8drawCharEttc+0x7c>)
 800160a:	8812      	ldrh	r2, [r2, #0]
 800160c:	80da      	strh	r2, [r3, #6]
 800160e:	897a      	ldrh	r2, [r7, #10]
 8001610:	811a      	strh	r2, [r3, #8]
 8001612:	893a      	ldrh	r2, [r7, #8]
 8001614:	815a      	strh	r2, [r3, #10]
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	6053      	str	r3, [r2, #4]
 800161a:	e007      	b.n	800162c <_ZN7ELE331214ILI9341Display8drawCharEttc+0x58>
	} else {
		ptext_attr_->origin_x = x;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	897a      	ldrh	r2, [r7, #10]
 8001622:	811a      	strh	r2, [r3, #8]
		ptext_attr_->origin_y = y;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	893a      	ldrh	r2, [r7, #8]
 800162a:	815a      	strh	r2, [r3, #10]
	}
	ili9341_draw_char(lcd_, *ptext_attr_, ch);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6898      	ldr	r0, [r3, #8]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	9200      	str	r2, [sp, #0]
 8001638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163a:	f001 fd31 	bl	80030a0 <ili9341_draw_char>
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	0800fb4c 	.word	0x0800fb4c
 800164c:	080108c8 	.word	0x080108c8
 8001650:	080108aa 	.word	0x080108aa

08001654 <_ZN7ELE331214ILI9341Display10drawStringEttNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5ColorE>:
 * @param [in] x The x position of the lower left corner of the text string.
 * @param [in] y The y position of the lower left corner of the text string.
 * @param [in] text The text string that is displayed on the screen.
 * @param [in] color The color of the rendered text.
 */
void ILI9341Display::drawString(uint16_t x, uint16_t y, const std::string text, Color color) {
 8001654:	b5b0      	push	{r4, r5, r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af02      	add	r7, sp, #8
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	817b      	strh	r3, [r7, #10]
 8001662:	4613      	mov	r3, r2
 8001664:	813b      	strh	r3, [r7, #8]
	if (ptext_attr_ == nullptr){
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d115      	bne.n	800169a <_ZN7ELE331214ILI9341Display10drawStringEttNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5ColorE+0x46>
			ptext_attr_ = new ili9341_text_attr_t{&ili9341_font_11x18,  ELE3312::colorToILI9341Color(color), ILI9341_BLACK,x,y};
 800166e:	200c      	movs	r0, #12
 8001670:	f00a fb6c 	bl	800bd4c <_Znwj>
 8001674:	4603      	mov	r3, r0
 8001676:	461c      	mov	r4, r3
 8001678:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <_ZN7ELE331214ILI9341Display10drawStringEttNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5ColorE+0x88>)
 800167a:	6023      	str	r3, [r4, #0]
 800167c:	6a38      	ldr	r0, [r7, #32]
 800167e:	f7ff fd43 	bl	8001108 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 8001682:	4603      	mov	r3, r0
 8001684:	80a3      	strh	r3, [r4, #4]
 8001686:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <_ZN7ELE331214ILI9341Display10drawStringEttNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5ColorE+0x8c>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	80e3      	strh	r3, [r4, #6]
 800168c:	897b      	ldrh	r3, [r7, #10]
 800168e:	8123      	strh	r3, [r4, #8]
 8001690:	893b      	ldrh	r3, [r7, #8]
 8001692:	8163      	strh	r3, [r4, #10]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	605c      	str	r4, [r3, #4]
 8001698:	e00e      	b.n	80016b8 <_ZN7ELE331214ILI9341Display10drawStringEttNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5ColorE+0x64>
	} else {
		ptext_attr_->origin_x = x;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	897a      	ldrh	r2, [r7, #10]
 80016a0:	811a      	strh	r2, [r3, #8]
		ptext_attr_->origin_y = y;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	893a      	ldrh	r2, [r7, #8]
 80016a8:	815a      	strh	r2, [r3, #10]
		ptext_attr_->fg_color = ELE3312::colorToILI9341Color(color);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	685c      	ldr	r4, [r3, #4]
 80016ae:	6a38      	ldr	r0, [r7, #32]
 80016b0:	f7ff fd2a 	bl	8001108 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 80016b4:	4603      	mov	r3, r0
 80016b6:	80a3      	strh	r3, [r4, #4]
	}
	ili9341_draw_string(lcd_, *ptext_attr_, const_cast<char*>(text.c_str()));
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	689d      	ldr	r5, [r3, #8]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	685c      	ldr	r4, [r3, #4]
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f00a fb54 	bl	800bd6e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80016c6:	4603      	mov	r3, r0
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80016ce:	4628      	mov	r0, r5
 80016d0:	f001 fdcc 	bl	800326c <ili9341_draw_string>
}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bdb0      	pop	{r4, r5, r7, pc}
 80016dc:	0800fb4c 	.word	0x0800fb4c
 80016e0:	080108aa 	.word	0x080108aa

080016e4 <_ZN7ELE331214ILI9341Display10drawBitmapEPttttt>:
 * @param [in] x The x position of the lower left corner of the rectangular bitmap.
 * @param [in] y The y position of the lower left corner of the rectangular bitmap.
 * @param [in] width The width of the bitmap.
 * @param [in] height The height of the bitmap.
 */
void ILI9341Display::drawBitmap(uint16_t *data, uint16_t x, uint16_t y, uint16_t width, uint16_t height){
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b089      	sub	sp, #36	@ 0x24
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	4611      	mov	r1, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	460b      	mov	r3, r1
 80016f4:	80fb      	strh	r3, [r7, #6]
 80016f6:	4613      	mov	r3, r2
 80016f8:	80bb      	strh	r3, [r7, #4]
	  uint16_t size = +width*height;
 80016fa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80016fc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80016fe:	fb12 f303 	smulbb	r3, r2, r3
 8001702:	82fb      	strh	r3, [r7, #22]
	  // Set address region
	  ili9341_spi_tft_set_address_rect(lcd_, x, y, x + width-1, y + height);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6898      	ldr	r0, [r3, #8]
 8001708:	88fa      	ldrh	r2, [r7, #6]
 800170a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800170c:	4413      	add	r3, r2
 800170e:	b29b      	uxth	r3, r3
 8001710:	3b01      	subs	r3, #1
 8001712:	b29c      	uxth	r4, r3
 8001714:	88ba      	ldrh	r2, [r7, #4]
 8001716:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001718:	4413      	add	r3, r2
 800171a:	b29b      	uxth	r3, r3
 800171c:	88ba      	ldrh	r2, [r7, #4]
 800171e:	88f9      	ldrh	r1, [r7, #6]
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	4623      	mov	r3, r4
 8001724:	f001 f8a0 	bl	8002868 <ili9341_spi_tft_set_address_rect>
	  ili9341_spi_tft_select(lcd_);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fd20 	bl	8002172 <ili9341_spi_tft_select>
	  HAL_GPIO_WritePin(lcd_->data_command_port, lcd_->data_command_pin, __GPIO_PIN_SET__);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	6958      	ldr	r0, [r3, #20]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	8b1b      	ldrh	r3, [r3, #24]
 800173e:	2201      	movs	r2, #1
 8001740:	4619      	mov	r1, r3
 8001742:	f004 fdfd 	bl	8006340 <HAL_GPIO_WritePin>
	  ili9341_transmit_color(lcd_, size*2, data, ibTrue);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6898      	ldr	r0, [r3, #8]
 800174a:	8afb      	ldrh	r3, [r7, #22]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	b299      	uxth	r1, r3
 8001750:	2301      	movs	r3, #1
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f001 f8f0 	bl	8002938 <ili9341_transmit_color>
	  ili9341_spi_tft_release(lcd_);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fd18 	bl	8002192 <ili9341_spi_tft_release>
}
 8001762:	bf00      	nop
 8001764:	371c      	adds	r7, #28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd90      	pop	{r4, r7, pc}
 800176a:	0000      	movs	r0, r0
 800176c:	0000      	movs	r0, r0
	...

08001770 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft>:
 * @param [in] start
 * @param [in] end
 * @param [in] color
 */
void ILI9341Display::writeFillArcHelper(int16_t cx, uint16_t cy, uint16_t oradius, uint16_t iradius, float start, float end, uint16_t color)
{
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b09e      	sub	sp, #120	@ 0x78
 8001774:	af02      	add	r7, sp, #8
 8001776:	6178      	str	r0, [r7, #20]
 8001778:	4608      	mov	r0, r1
 800177a:	4611      	mov	r1, r2
 800177c:	461a      	mov	r2, r3
 800177e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001782:	edc7 0a01 	vstr	s1, [r7, #4]
 8001786:	4603      	mov	r3, r0
 8001788:	827b      	strh	r3, [r7, #18]
 800178a:	460b      	mov	r3, r1
 800178c:	823b      	strh	r3, [r7, #16]
 800178e:	4613      	mov	r3, r2
 8001790:	81fb      	strh	r3, [r7, #14]
	const float DEGTORAD = 0.017453292519943295769236907684886F;
 8001792:	4bcd      	ldr	r3, [pc, #820]	@ (8001ac8 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x358>)
 8001794:	657b      	str	r3, [r7, #84]	@ 0x54
  if ((start == 90.0) || (start == 180.0) || (start == 270.0) || (start == 360.0))
 8001796:	edd7 7a02 	vldr	s15, [r7, #8]
 800179a:	ed9f 7ad0 	vldr	s14, [pc, #832]	@ 8001adc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x36c>
 800179e:	eef4 7a47 	vcmp.f32	s15, s14
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	d01a      	beq.n	80017de <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x6e>
 80017a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ac:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8001ae0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 80017b0:	eef4 7a47 	vcmp.f32	s15, s14
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	d011      	beq.n	80017de <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x6e>
 80017ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80017be:	ed9f 7ac6 	vldr	s14, [pc, #792]	@ 8001ad8 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x368>
 80017c2:	eef4 7a47 	vcmp.f32	s15, s14
 80017c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ca:	d008      	beq.n	80017de <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x6e>
 80017cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80017d0:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8001acc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x35c>
 80017d4:	eef4 7a47 	vcmp.f32	s15, s14
 80017d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017dc:	d10f      	bne.n	80017fe <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x8e>
  {
    start -= 0.1;
 80017de:	68b8      	ldr	r0, [r7, #8]
 80017e0:	f7fe fed2 	bl	8000588 <__aeabi_f2d>
 80017e4:	a3b6      	add	r3, pc, #728	@ (adr r3, 8001ac0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x350>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7fe fd6d 	bl	80002c8 <__aeabi_dsub>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7ff f9f7 	bl	8000be8 <__aeabi_d2f>
 80017fa:	4603      	mov	r3, r0
 80017fc:	60bb      	str	r3, [r7, #8]
  }

  if ((end == 90.0) || (end == 180.0) || (end == 270.0) || (end == 360.0))
 80017fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001802:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 8001adc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x36c>
 8001806:	eef4 7a47 	vcmp.f32	s15, s14
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	d01a      	beq.n	8001846 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0xd6>
 8001810:	edd7 7a01 	vldr	s15, [r7, #4]
 8001814:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8001ae0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 8001818:	eef4 7a47 	vcmp.f32	s15, s14
 800181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001820:	d011      	beq.n	8001846 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0xd6>
 8001822:	edd7 7a01 	vldr	s15, [r7, #4]
 8001826:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 8001ad8 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x368>
 800182a:	eef4 7a47 	vcmp.f32	s15, s14
 800182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001832:	d008      	beq.n	8001846 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0xd6>
 8001834:	edd7 7a01 	vldr	s15, [r7, #4]
 8001838:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8001acc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x35c>
 800183c:	eef4 7a47 	vcmp.f32	s15, s14
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	d10f      	bne.n	8001866 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0xf6>
  {
    end -= 0.1;
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7fe fe9e 	bl	8000588 <__aeabi_f2d>
 800184c:	a39c      	add	r3, pc, #624	@ (adr r3, 8001ac0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x350>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fd39 	bl	80002c8 <__aeabi_dsub>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f9c3 	bl	8000be8 <__aeabi_d2f>
 8001862:	4603      	mov	r3, r0
 8001864:	607b      	str	r3, [r7, #4]
  }

  float s_cos = (cos(start * DEGTORAD));
 8001866:	edd7 7a02 	vldr	s15, [r7, #8]
 800186a:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8001ad0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x360>
 800186e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001872:	ee17 0a90 	vmov	r0, s15
 8001876:	f7fe fe87 	bl	8000588 <__aeabi_f2d>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	ec43 2b10 	vmov	d0, r2, r3
 8001882:	f00a fa81 	bl	800bd88 <cos>
 8001886:	ec53 2b10 	vmov	r2, r3, d0
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f9ab 	bl	8000be8 <__aeabi_d2f>
 8001892:	4603      	mov	r3, r0
 8001894:	653b      	str	r3, [r7, #80]	@ 0x50
  float e_cos = (cos(end * DEGTORAD));
 8001896:	edd7 7a01 	vldr	s15, [r7, #4]
 800189a:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8001ad0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x360>
 800189e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a2:	ee17 0a90 	vmov	r0, s15
 80018a6:	f7fe fe6f 	bl	8000588 <__aeabi_f2d>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	ec43 2b10 	vmov	d0, r2, r3
 80018b2:	f00a fa69 	bl	800bd88 <cos>
 80018b6:	ec53 2b10 	vmov	r2, r3, d0
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f993 	bl	8000be8 <__aeabi_d2f>
 80018c2:	4603      	mov	r3, r0
 80018c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  float sslope = s_cos / (sin(start * DEGTORAD));
 80018c6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80018c8:	f7fe fe5e 	bl	8000588 <__aeabi_f2d>
 80018cc:	4604      	mov	r4, r0
 80018ce:	460d      	mov	r5, r1
 80018d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d4:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8001ad0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x360>
 80018d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018dc:	ee17 0a90 	vmov	r0, s15
 80018e0:	f7fe fe52 	bl	8000588 <__aeabi_f2d>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	ec43 2b10 	vmov	d0, r2, r3
 80018ec:	f00a faa0 	bl	800be30 <sin>
 80018f0:	ec53 2b10 	vmov	r2, r3, d0
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe ffc8 	bl	800088c <__aeabi_ddiv>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	f7ff f970 	bl	8000be8 <__aeabi_d2f>
 8001908:	4603      	mov	r3, r0
 800190a:	64bb      	str	r3, [r7, #72]	@ 0x48
  float eslope = e_cos / (sin(end * DEGTORAD));
 800190c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800190e:	f7fe fe3b 	bl	8000588 <__aeabi_f2d>
 8001912:	4604      	mov	r4, r0
 8001914:	460d      	mov	r5, r1
 8001916:	edd7 7a01 	vldr	s15, [r7, #4]
 800191a:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001ad0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x360>
 800191e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001922:	ee17 0a90 	vmov	r0, s15
 8001926:	f7fe fe2f 	bl	8000588 <__aeabi_f2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	ec43 2b10 	vmov	d0, r2, r3
 8001932:	f00a fa7d 	bl	800be30 <sin>
 8001936:	ec53 2b10 	vmov	r2, r3, d0
 800193a:	4620      	mov	r0, r4
 800193c:	4629      	mov	r1, r5
 800193e:	f7fe ffa5 	bl	800088c <__aeabi_ddiv>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff f94d 	bl	8000be8 <__aeabi_d2f>
 800194e:	4603      	mov	r3, r0
 8001950:	647b      	str	r3, [r7, #68]	@ 0x44
  float swidth = 0.5 / s_cos;
 8001952:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001956:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800195a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  float ewidth = -0.5 / e_cos;
 8001962:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 8001966:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800196a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800196e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  --iradius;
 8001972:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8001976:	3b01      	subs	r3, #1
 8001978:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
  int32_t ir2 = iradius * iradius + iradius;
 800197c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8001980:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8001984:	fb03 f202 	mul.w	r2, r3, r2
 8001988:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800198c:	4413      	add	r3, r2
 800198e:	63bb      	str	r3, [r7, #56]	@ 0x38
  int32_t or2 = oradius * oradius + oradius;
 8001990:	89fb      	ldrh	r3, [r7, #14]
 8001992:	89fa      	ldrh	r2, [r7, #14]
 8001994:	fb03 f202 	mul.w	r2, r3, r2
 8001998:	89fb      	ldrh	r3, [r7, #14]
 800199a:	4413      	add	r3, r2
 800199c:	637b      	str	r3, [r7, #52]	@ 0x34

  uint16_t start180 = !(start < 180.0);
 800199e:	edd7 7a02 	vldr	s15, [r7, #8]
 80019a2:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001ae0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 80019a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ae:	bf4c      	ite	mi
 80019b0:	2301      	movmi	r3, #1
 80019b2:	2300      	movpl	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	f083 0301 	eor.w	r3, r3, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	867b      	strh	r3, [r7, #50]	@ 0x32
  uint16_t end180 = end < 180.0;
 80019be:	edd7 7a01 	vldr	s15, [r7, #4]
 80019c2:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001ae0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 80019c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ce:	bf4c      	ite	mi
 80019d0:	2301      	movmi	r3, #1
 80019d2:	2300      	movpl	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	863b      	strh	r3, [r7, #48]	@ 0x30
  uint16_t reversed = start + 180.0 < end || (end < start && start < end + 180.0);
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f7fe fdd5 	bl	8000588 <__aeabi_f2d>
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad4 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x364>)
 80019e4:	f7fe fc72 	bl	80002cc <__adddf3>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4614      	mov	r4, r2
 80019ee:	461d      	mov	r5, r3
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7fe fdc9 	bl	8000588 <__aeabi_f2d>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4620      	mov	r0, r4
 80019fc:	4629      	mov	r1, r5
 80019fe:	f7ff f88d 	bl	8000b1c <__aeabi_dcmplt>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d11e      	bne.n	8001a46 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x2d6>
 8001a08:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	d517      	bpl.n	8001a4a <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x2da>
 8001a1a:	68b8      	ldr	r0, [r7, #8]
 8001a1c:	f7fe fdb4 	bl	8000588 <__aeabi_f2d>
 8001a20:	4604      	mov	r4, r0
 8001a22:	460d      	mov	r5, r1
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7fe fdaf 	bl	8000588 <__aeabi_f2d>
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b29      	ldr	r3, [pc, #164]	@ (8001ad4 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x364>)
 8001a30:	f7fe fc4c 	bl	80002cc <__adddf3>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4620      	mov	r0, r4
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	f7ff f86e 	bl	8000b1c <__aeabi_dcmplt>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x2da>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x2dc>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

  int32_t xs = -oradius;
 8001a4e:	89fb      	ldrh	r3, [r7, #14]
 8001a50:	425b      	negs	r3, r3
 8001a52:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int32_t y = -oradius;
 8001a54:	89fb      	ldrh	r3, [r7, #14]
 8001a56:	425b      	negs	r3, r3
 8001a58:	66bb      	str	r3, [r7, #104]	@ 0x68
  int32_t ye = oradius;
 8001a5a:	89fb      	ldrh	r3, [r7, #14]
 8001a5c:	667b      	str	r3, [r7, #100]	@ 0x64
  int32_t xe = oradius + 1;
 8001a5e:	89fb      	ldrh	r3, [r7, #14]
 8001a60:	3301      	adds	r3, #1
 8001a62:	663b      	str	r3, [r7, #96]	@ 0x60
  if (!reversed)
 8001a64:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f040 808b 	bne.w	8001b82 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x412>
  {
    if ((end >= 270 || end < 90) && (start >= 270 || start < 90))
 8001a6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a70:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001ad8 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x368>
 8001a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7c:	da08      	bge.n	8001a90 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x320>
 8001a7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a82:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001adc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x36c>
 8001a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	d529      	bpl.n	8001ae4 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x374>
 8001a90:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a94:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001ad8 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x368>
 8001a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	da08      	bge.n	8001ab4 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x344>
 8001aa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aa6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001adc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x36c>
 8001aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab2:	d517      	bpl.n	8001ae4 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x374>
    {
      xs = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001ab8:	e03a      	b.n	8001b30 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x3c0>
 8001aba:	bf00      	nop
 8001abc:	f3af 8000 	nop.w
 8001ac0:	9999999a 	.word	0x9999999a
 8001ac4:	3fb99999 	.word	0x3fb99999
 8001ac8:	3c8efa35 	.word	0x3c8efa35
 8001acc:	43b40000 	.word	0x43b40000
 8001ad0:	3c8efa35 	.word	0x3c8efa35
 8001ad4:	40668000 	.word	0x40668000
 8001ad8:	43870000 	.word	0x43870000
 8001adc:	42b40000 	.word	0x42b40000
 8001ae0:	43340000 	.word	0x43340000
    }
    else if (end < 270 && end >= 90 && start < 270 && start >= 90)
 8001ae4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae8:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8001ad8 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x368>
 8001aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af4:	d51c      	bpl.n	8001b30 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x3c0>
 8001af6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001afa:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 8001adc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x36c>
 8001afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b06:	db13      	blt.n	8001b30 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x3c0>
 8001b08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b0c:	ed1f 7a0e 	vldr	s14, [pc, #-56]	@ 8001ad8 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x368>
 8001b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b18:	d50a      	bpl.n	8001b30 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x3c0>
 8001b1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b1e:	ed1f 7a11 	vldr	s14, [pc, #-68]	@ 8001adc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x36c>
 8001b22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	db01      	blt.n	8001b30 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x3c0>
    {
      xe = 1;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	663b      	str	r3, [r7, #96]	@ 0x60
    }
    if (end >= 180 && start >= 180)
 8001b30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b34:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 8001ae0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 8001b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b40:	db0b      	blt.n	8001b5a <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x3ea>
 8001b42:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b46:	ed1f 7a1a 	vldr	s14, [pc, #-104]	@ 8001ae0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 8001b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b52:	db02      	blt.n	8001b5a <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x3ea>
    {
      ye = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b58:	e013      	b.n	8001b82 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x412>
    }
    else if (end < 180 && start < 180)
 8001b5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b5e:	ed1f 7a20 	vldr	s14, [pc, #-128]	@ 8001ae0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 8001b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6a:	d50a      	bpl.n	8001b82 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x412>
 8001b6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b70:	ed1f 7a25 	vldr	s14, [pc, #-148]	@ 8001ae0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 8001b74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7c:	d501      	bpl.n	8001b82 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x412>
    {
      y = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
  }
  do
  {
    int32_t y2 = y * y;
 8001b82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b84:	fb03 f303 	mul.w	r3, r3, r3
 8001b88:	62bb      	str	r3, [r7, #40]	@ 0x28
    int32_t x = xs;
 8001b8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (x < 0)
 8001b8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da12      	bge.n	8001bba <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x44a>
    {
      while (x * x + y2 >= or2)
 8001b94:	e002      	b.n	8001b9c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x42c>
      {
        ++x;
 8001b96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b98:	3301      	adds	r3, #1
 8001b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
      while (x * x + y2 >= or2)
 8001b9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b9e:	fb03 f203 	mul.w	r2, r3, r3
 8001ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba4:	4413      	add	r3, r2
 8001ba6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	ddf4      	ble.n	8001b96 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x426>
      }
      if (xe != 1)
 8001bac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d003      	beq.n	8001bba <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x44a>
      {
        xe = 1 - x;
 8001bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bb4:	f1c3 0301 	rsb	r3, r3, #1
 8001bb8:	663b      	str	r3, [r7, #96]	@ 0x60
      }
    }
    float ysslope = (y + swidth) * sslope;
 8001bba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bbc:	ee07 3a90 	vmov	s15, r3
 8001bc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bcc:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float yeslope = (y + ewidth) * eslope;
 8001bd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bea:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf2:	edc7 7a08 	vstr	s15, [r7, #32]
    int32_t len = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	65bb      	str	r3, [r7, #88]	@ 0x58
    do
    {
      uint16_t flg1 = start180 != (x <= ysslope);
 8001bfa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001bfc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001bfe:	ee07 2a90 	vmov	s15, r2
 8001c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c06:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001c0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c12:	bfac      	ite	ge
 8001c14:	2201      	movge	r2, #1
 8001c16:	2200      	movlt	r2, #0
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	bf14      	ite	ne
 8001c1e:	2301      	movne	r3, #1
 8001c20:	2300      	moveq	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	83fb      	strh	r3, [r7, #30]
      uint16_t flg2 = end180 != (x <= yeslope);
 8001c26:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001c28:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001c2a:	ee07 2a90 	vmov	s15, r2
 8001c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c32:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3e:	bfac      	ite	ge
 8001c40:	2201      	movge	r2, #1
 8001c42:	2200      	movlt	r2, #0
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	4293      	cmp	r3, r2
 8001c48:	bf14      	ite	ne
 8001c4a:	2301      	movne	r3, #1
 8001c4c:	2300      	moveq	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	83bb      	strh	r3, [r7, #28]
      int32_t distance = x * x + y2;
 8001c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c54:	fb03 f303 	mul.w	r3, r3, r3
 8001c58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c5a:	4413      	add	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
      if (distance >= ir2 && ((flg1 && flg2) || (reversed && (flg1 || flg2))) && x != xe && distance < or2)
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c62:	429a      	cmp	r2, r3
 8001c64:	db1a      	blt.n	8001c9c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x52c>
 8001c66:	8bfb      	ldrh	r3, [r7, #30]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x502>
 8001c6c:	8bbb      	ldrh	r3, [r7, #28]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d108      	bne.n	8001c84 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x514>
 8001c72:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d011      	beq.n	8001c9c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x52c>
 8001c78:	8bfb      	ldrh	r3, [r7, #30]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x514>
 8001c7e:	8bbb      	ldrh	r3, [r7, #28]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00b      	beq.n	8001c9c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x52c>
 8001c84:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d007      	beq.n	8001c9c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x52c>
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c90:	429a      	cmp	r2, r3
 8001c92:	da03      	bge.n	8001c9c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x52c>
      {
        ++len;
 8001c94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c96:	3301      	adds	r3, #1
 8001c98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001c9a:	e038      	b.n	8001d0e <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x59e>
      }
      else
      {
        if (len)
 8001c9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d027      	beq.n	8001cf2 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x582>
        {
          //writeFastHLine(cx + x - len, cy + y, len, color);
          ili9341_draw_line(lcd_, color, cx + x - len, cy + y, cx + x, cy + y);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	6898      	ldr	r0, [r3, #8]
 8001ca6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	8a7b      	ldrh	r3, [r7, #18]
 8001cac:	4413      	add	r3, r2
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	b21c      	sxth	r4, r3
 8001cba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	8a3b      	ldrh	r3, [r7, #16]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b21d      	sxth	r5, r3
 8001cc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	8a7b      	ldrh	r3, [r7, #18]
 8001ccc:	4413      	add	r3, r2
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001cd4:	b291      	uxth	r1, r2
 8001cd6:	8a3a      	ldrh	r2, [r7, #16]
 8001cd8:	440a      	add	r2, r1
 8001cda:	b292      	uxth	r2, r2
 8001cdc:	b212      	sxth	r2, r2
 8001cde:	f8b7 1084 	ldrh.w	r1, [r7, #132]	@ 0x84
 8001ce2:	9201      	str	r2, [sp, #4]
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	462b      	mov	r3, r5
 8001ce8:	4622      	mov	r2, r4
 8001cea:	f000 fea3 	bl	8002a34 <ili9341_draw_line>
          len = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	65bb      	str	r3, [r7, #88]	@ 0x58
        }
        if (distance >= or2)
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	da17      	bge.n	8001d2a <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x5ba>
          break;
        if (x < 0 && distance < ir2)
 8001cfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	da06      	bge.n	8001d0e <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x59e>
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d04:	429a      	cmp	r2, r3
 8001d06:	da02      	bge.n	8001d0e <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x59e>
        {
          x = -x;
 8001d08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d0a:	425b      	negs	r3, r3
 8001d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }
      }
    } while (++x <= xe);
 8001d0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d10:	3301      	adds	r3, #1
 8001d12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d14:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001d16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	bfd4      	ite	le
 8001d1c:	2301      	movle	r3, #1
 8001d1e:	2300      	movgt	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f47f af69 	bne.w	8001bfa <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x48a>
 8001d28:	e000      	b.n	8001d2c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x5bc>
          break;
 8001d2a:	bf00      	nop
  } while (++y <= ye);
 8001d2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d2e:	3301      	adds	r3, #1
 8001d30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d32:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001d34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d36:	429a      	cmp	r2, r3
 8001d38:	bfd4      	ite	le
 8001d3a:	2301      	movle	r3, #1
 8001d3c:	2300      	movgt	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f47f af1e 	bne.w	8001b82 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x412>
}
 8001d46:	bf00      	nop
 8001d48:	bf00      	nop
 8001d4a:	3770      	adds	r7, #112	@ 0x70
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bdb0      	pop	{r4, r5, r7, pc}

08001d50 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE>:
 * @param [in] start The start of the segment in radians.
 * @param [in] end  The end of the segment in radians.
 * @param [in] color The color of the filled segment of a circle.
 */
void ILI9341Display::fillArc( uint16_t x, uint16_t y, uint16_t r1, uint16_t r2, float start, float end, Color color)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b08d      	sub	sp, #52	@ 0x34
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	6178      	str	r0, [r7, #20]
 8001d58:	4608      	mov	r0, r1
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d62:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d66:	4603      	mov	r3, r0
 8001d68:	827b      	strh	r3, [r7, #18]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	823b      	strh	r3, [r7, #16]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	81fb      	strh	r3, [r7, #14]
	const float FLT_EPSILON = 0.00001;
 8001d72:	4b47      	ldr	r3, [pc, #284]	@ (8001e90 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x140>)
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (r1 < r2)
 8001d76:	89fa      	ldrh	r2, [r7, #14]
 8001d78:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d205      	bcs.n	8001d8a <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x3a>
  {
    //_swap_int16_t(r1, r2);
	  int16_t t = r1;
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
 8001d80:	847b      	strh	r3, [r7, #34]	@ 0x22
	  r1 = r2;
 8001d82:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001d84:	81fb      	strh	r3, [r7, #14]
	  r2 = t;
 8001d86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001d88:	873b      	strh	r3, [r7, #56]	@ 0x38
  }
  if (r1 < 1)
 8001d8a:	89fb      	ldrh	r3, [r7, #14]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x44>
  {
    r1 = 1;
 8001d90:	2301      	movs	r3, #1
 8001d92:	81fb      	strh	r3, [r7, #14]
  }
  if (r2 < 1)
 8001d94:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x4e>
  {
    r2 = 1;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	873b      	strh	r3, [r7, #56]	@ 0x38
  }
  int equal = (int)( fabs(start - end) < FLT_EPSILON );
 8001d9e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001da2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001daa:	eef0 7ae7 	vabs.f32	s15, s15
 8001dae:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001e94 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x144>
 8001db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	bf4c      	ite	mi
 8001dbc:	2301      	movmi	r3, #1
 8001dbe:	2300      	movpl	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	61fb      	str	r3, [r7, #28]
  start = fmodf(start, 360);
 8001dc4:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8001e98 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x148>
 8001dc8:	ed97 0a02 	vldr	s0, [r7, #8]
 8001dcc:	f00a f884 	bl	800bed8 <fmodf>
 8001dd0:	ed87 0a02 	vstr	s0, [r7, #8]
  end = fmodf(end, 360);
 8001dd4:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8001e98 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x148>
 8001dd8:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ddc:	f00a f87c 	bl	800bed8 <fmodf>
 8001de0:	ed87 0a01 	vstr	s0, [r7, #4]
  if (start < 0)
 8001de4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001de8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df0:	d507      	bpl.n	8001e02 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0xb2>
    start += 360.0;
 8001df2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001df6:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001e98 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x148>
 8001dfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dfe:	edc7 7a02 	vstr	s15, [r7, #8]
  if (end < 0)
 8001e02:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	d507      	bpl.n	8001e20 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0xd0>
    end += 360.0;
 8001e10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e14:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001e98 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x148>
 8001e18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e1c:	edc7 7a01 	vstr	s15, [r7, #4]
  if (!equal && (fabsf(start - end) <= 0.0001))
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x108>
 8001e26:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e32:	eef0 7ae7 	vabs.f32	s15, s15
 8001e36:	ee17 0a90 	vmov	r0, s15
 8001e3a:	f7fe fba5 	bl	8000588 <__aeabi_f2d>
 8001e3e:	a312      	add	r3, pc, #72	@ (adr r3, 8001e88 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x138>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fe74 	bl	8000b30 <__aeabi_dcmple>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x108>
  {
    start = .0;
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
    end = 360.0;
 8001e54:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x14c>)
 8001e56:	607b      	str	r3, [r7, #4]
  }

  //startWrite();
  writeFillArcHelper( x, y, r1, r2, start, end, ELE3312::colorToILI9341Color(color));
 8001e58:	f9b7 4012 	ldrsh.w	r4, [r7, #18]
 8001e5c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e5e:	f7ff f953 	bl	8001108 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 8001e62:	4603      	mov	r3, r0
 8001e64:	89f9      	ldrh	r1, [r7, #14]
 8001e66:	8a3a      	ldrh	r2, [r7, #16]
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001e72:	ed97 0a02 	vldr	s0, [r7, #8]
 8001e76:	460b      	mov	r3, r1
 8001e78:	4621      	mov	r1, r4
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff fc78 	bl	8001770 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft>
  //endWrite();
}
 8001e80:	bf00      	nop
 8001e82:	372c      	adds	r7, #44	@ 0x2c
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd90      	pop	{r4, r7, pc}
 8001e88:	eb1c432d 	.word	0xeb1c432d
 8001e8c:	3f1a36e2 	.word	0x3f1a36e2
 8001e90:	3727c5ac 	.word	0x3727c5ac
 8001e94:	3727c5ac 	.word	0x3727c5ac
 8001e98:	43b40000 	.word	0x43b40000
 8001e9c:	43b40000 	.word	0x43b40000

08001ea0 <_ZNK7ELE331214ILI9341Display14getScreenWidthEv>:


/** @brief Returns the width of the screen in pixels
 * @retval The width of the screen in pixels;
 */
inline uint16_t ILI9341Display::getScreenWidth() const  {
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	return 320;
 8001ea8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_ZNK7ELE331214ILI9341Display15getScreenHeightEv>:

/** @brief Returns the height of the screen in pixels.
 * @retval The height of the screen in pixels.
 */
inline uint16_t ILI9341Display::getScreenHeight() const  {
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	return 240;
 8001ec0:	23f0      	movs	r3, #240	@ 0xf0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <_ZN7ELE331214ILI9341Display18setBackgroundColorENS_5ColorE>:

/** @brief Returns the current background color.
 * @retval The current background color.
 */
void ILI9341Display::setBackgroundColor(Color color)  {
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
	backgroundColor = color;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	60da      	str	r2, [r3, #12]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_ZNK7ELE331214ILI9341Display18getBackgroundColorEv>:
 * @details The background color is used by functions that need to
 * erase graphical objects from the screen while maintaining a uniform
 * appearance of the displayed graphics.
 * @param color The new background color.
 */
inline Color ILI9341Display::getBackgroundColor() const  {
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
	return backgroundColor;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <_ZN7ELE331214ILI9341Display10readMemoryEttttPh>:
 * @param y0 The y position of the top-left corner.
 * @param x1 The x position of the bottom-right corner.
 * @param y1 The y position of the bottom-right corner.
 * @param data An array in which the pixel data will be stored.
 */
void ILI9341Display::readMemory(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t data[]){
 8001f02:	b590      	push	{r4, r7, lr}
 8001f04:	b08d      	sub	sp, #52	@ 0x34
 8001f06:	af04      	add	r7, sp, #16
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	4608      	mov	r0, r1
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4603      	mov	r3, r0
 8001f12:	817b      	strh	r3, [r7, #10]
 8001f14:	460b      	mov	r3, r1
 8001f16:	813b      	strh	r3, [r7, #8]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	80fb      	strh	r3, [r7, #6]
	int nX = x1-x0;
 8001f1c:	88fa      	ldrh	r2, [r7, #6]
 8001f1e:	897b      	ldrh	r3, [r7, #10]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	61bb      	str	r3, [r7, #24]
	int nY = y1-y0;
 8001f24:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001f26:	893b      	ldrh	r3, [r7, #8]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	617b      	str	r3, [r7, #20]
	int size = nX*nY;
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	61fb      	str	r3, [r7, #28]
	if (size == 0 && nX > 0){
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d105      	bne.n	8001f48 <_ZN7ELE331214ILI9341Display10readMemoryEttttPh+0x46>
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	dd02      	ble.n	8001f48 <_ZN7ELE331214ILI9341Display10readMemoryEttttPh+0x46>
		size = nX;
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	e007      	b.n	8001f58 <_ZN7ELE331214ILI9341Display10readMemoryEttttPh+0x56>
	} else if (size == 0 && nY > 0){
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d104      	bne.n	8001f58 <_ZN7ELE331214ILI9341Display10readMemoryEttttPh+0x56>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	dd01      	ble.n	8001f58 <_ZN7ELE331214ILI9341Display10readMemoryEttttPh+0x56>
		size = nY;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	61fb      	str	r3, [r7, #28]
	}
	ili9341_read_memory(lcd_, x0, y0, x1, y1, data, size*3);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6898      	ldr	r0, [r3, #8]
 8001f5c:	69fa      	ldr	r2, [r7, #28]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	88fc      	ldrh	r4, [r7, #6]
 8001f66:	893a      	ldrh	r2, [r7, #8]
 8001f68:	8979      	ldrh	r1, [r7, #10]
 8001f6a:	9302      	str	r3, [sp, #8]
 8001f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	4623      	mov	r3, r4
 8001f76:	f000 fbe7 	bl	8002748 <ili9341_read_memory>
}
 8001f7a:	bf00      	nop
 8001f7c:	3724      	adds	r7, #36	@ 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd90      	pop	{r4, r7, pc}

08001f82 <ili9341_new>:
    GPIO_TypeDef *touch_select_port, uint16_t touch_select_pin,
    GPIO_TypeDef *touch_irq_port,    uint16_t touch_irq_pin,

    ili9341_touch_support_t   touch_support,
    ili9341_touch_normalize_t touch_normalize)
{
 8001f82:	b590      	push	{r4, r7, lr}
 8001f84:	b09b      	sub	sp, #108	@ 0x6c
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	80fb      	strh	r3, [r7, #6]
  ili9341_t *lcd = NULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	667b      	str	r3, [r7, #100]	@ 0x64

  if (NULL != spi_hal) {
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80e5 	beq.w	8002168 <ili9341_new+0x1e6>

    if ( (NULL != reset_port)        && IS_GPIO_PIN(reset_pin)         &&
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80e1 	beq.w	8002168 <ili9341_new+0x1e6>
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80dd 	beq.w	8002168 <ili9341_new+0x1e6>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 80d9 	beq.w	8002168 <ili9341_new+0x1e6>
         (NULL != tft_select_port)   && IS_GPIO_PIN(tft_select_pin)    &&
 8001fb6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80d4 	beq.w	8002168 <ili9341_new+0x1e6>
 8001fc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80d0 	beq.w	8002168 <ili9341_new+0x1e6>
         (NULL != data_command_port) && IS_GPIO_PIN(data_command_pin)  &&
 8001fc8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 80cb 	beq.w	8002168 <ili9341_new+0x1e6>
 8001fd2:	f997 3084 	ldrsb.w	r3, [r7, #132]	@ 0x84
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f2c0 80c6 	blt.w	8002168 <ili9341_new+0x1e6>
         (orientation > isoNONE)     && (orientation < isoCOUNT)       ) {
 8001fdc:	f997 3084 	ldrsb.w	r3, [r7, #132]	@ 0x84
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	f300 80c1 	bgt.w	8002168 <ili9341_new+0x1e6>

      // we must either NOT support the touch interface, OR we must have valid
      // touch interface parameters
      if ( itsSupported != touch_support ||
 8001fe6:	f997 3098 	ldrsb.w	r3, [r7, #152]	@ 0x98
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d113      	bne.n	8002016 <ili9341_new+0x94>
 8001fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80b8 	beq.w	8002168 <ili9341_new+0x1e6>
           ( (NULL != touch_select_port) && IS_GPIO_PIN(touch_select_pin) &&
 8001ff8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80b3 	beq.w	8002168 <ili9341_new+0x1e6>
 8002002:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 80ae 	beq.w	8002168 <ili9341_new+0x1e6>
             (NULL != touch_irq_port)    && IS_GPIO_PIN(touch_irq_pin)    )) {
 800200c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80a9 	beq.w	8002168 <ili9341_new+0x1e6>

        if (NULL != (lcd = malloc(sizeof(ili9341_t)))) {
 8002016:	2068      	movs	r0, #104	@ 0x68
 8002018:	f00a ffda 	bl	800cfd0 <malloc>
 800201c:	4603      	mov	r3, r0
 800201e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 80a0 	beq.w	8002168 <ili9341_new+0x1e6>

          lcd->spi_hal              = spi_hal;
 8002028:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	601a      	str	r2, [r3, #0]

          lcd->reset_port           = reset_port;
 800202e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	605a      	str	r2, [r3, #4]
          lcd->reset_pin            = reset_pin;
 8002034:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002036:	88fa      	ldrh	r2, [r7, #6]
 8002038:	811a      	strh	r2, [r3, #8]
          lcd->tft_select_port      = tft_select_port;
 800203a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	60da      	str	r2, [r3, #12]
          lcd->tft_select_pin       = tft_select_pin;
 8002040:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002042:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8002046:	821a      	strh	r2, [r3, #16]
          lcd->data_command_port    = data_command_port;
 8002048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800204a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800204c:	615a      	str	r2, [r3, #20]
          lcd->data_command_pin     = data_command_pin;
 800204e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002050:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8002054:	831a      	strh	r2, [r3, #24]

          lcd->orientation          = orientation;
 8002056:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002058:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 800205c:	769a      	strb	r2, [r3, #26]
          lcd->screen_size          = ili9341_screen_size(orientation);
 800205e:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 8002060:	f997 3084 	ldrsb.w	r3, [r7, #132]	@ 0x84
 8002064:	4618      	mov	r0, r3
 8002066:	f000 fb23 	bl	80026b0 <ili9341_screen_size>
 800206a:	4603      	mov	r3, r0
 800206c:	61e3      	str	r3, [r4, #28]

          if (touch_support) {
 800206e:	f997 3098 	ldrsb.w	r3, [r7, #152]	@ 0x98
 8002072:	2b00      	cmp	r3, #0
 8002074:	d03d      	beq.n	80020f2 <ili9341_new+0x170>

            lcd->touch_select_port    = touch_select_port;
 8002076:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002078:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800207c:	621a      	str	r2, [r3, #32]
            lcd->touch_select_pin     = touch_select_pin;
 800207e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002080:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8002084:	849a      	strh	r2, [r3, #36]	@ 0x24
            lcd->touch_irq_port       = touch_irq_port;
 8002086:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002088:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800208c:	629a      	str	r2, [r3, #40]	@ 0x28
            lcd->touch_irq_pin        = touch_irq_pin;
 800208e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002090:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8002094:	859a      	strh	r2, [r3, #44]	@ 0x2c

            lcd->touch_support        = touch_support;
 8002096:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002098:	f897 2098 	ldrb.w	r2, [r7, #152]	@ 0x98
 800209c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
            lcd->touch_normalize      = touch_normalize;
 80020a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020a2:	f897 209c 	ldrb.w	r2, [r7, #156]	@ 0x9c
 80020a6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 80020aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020ac:	2200      	movs	r2, #0
 80020ae:	861a      	strh	r2, [r3, #48]	@ 0x30
 80020b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020b2:	2200      	movs	r2, #0
 80020b4:	865a      	strh	r2, [r3, #50]	@ 0x32
            lcd->touch_calibration    = itcNONE;
 80020b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020b8:	22ff      	movs	r2, #255	@ 0xff
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 80020be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020c0:	3336      	adds	r3, #54	@ 0x36
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 80020c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020ca:	3340      	adds	r3, #64	@ 0x40
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
 80020d8:	615a      	str	r2, [r3, #20]
 80020da:	619a      	str	r2, [r3, #24]

            lcd->touch_pressed        = itpNotPressed;
 80020dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            lcd->touch_pressed_begin  = NULL;
 80020e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020e6:	2200      	movs	r2, #0
 80020e8:	661a      	str	r2, [r3, #96]	@ 0x60
            lcd->touch_pressed_end    = NULL;
 80020ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020ec:	2200      	movs	r2, #0
 80020ee:	665a      	str	r2, [r3, #100]	@ 0x64
 80020f0:	e037      	b.n	8002162 <ili9341_new+0x1e0>

          } else {

            lcd->touch_select_port    = NULL;
 80020f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020f4:	2200      	movs	r2, #0
 80020f6:	621a      	str	r2, [r3, #32]
            lcd->touch_select_pin     = 0;
 80020f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020fa:	2200      	movs	r2, #0
 80020fc:	849a      	strh	r2, [r3, #36]	@ 0x24
            lcd->touch_irq_port       = NULL;
 80020fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002100:	2200      	movs	r2, #0
 8002102:	629a      	str	r2, [r3, #40]	@ 0x28
            lcd->touch_irq_pin        = 0;
 8002104:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002106:	2200      	movs	r2, #0
 8002108:	859a      	strh	r2, [r3, #44]	@ 0x2c

            lcd->touch_support        = touch_support;
 800210a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800210c:	f897 2098 	ldrb.w	r2, [r7, #152]	@ 0x98
 8002110:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
            lcd->touch_normalize      = itnNONE;
 8002114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002116:	22ff      	movs	r2, #255	@ 0xff
 8002118:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 800211c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800211e:	2200      	movs	r2, #0
 8002120:	861a      	strh	r2, [r3, #48]	@ 0x30
 8002122:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002124:	2200      	movs	r2, #0
 8002126:	865a      	strh	r2, [r3, #50]	@ 0x32
            lcd->touch_calibration    = itcNONE;
 8002128:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800212a:	22ff      	movs	r2, #255	@ 0xff
 800212c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8002130:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002132:	3336      	adds	r3, #54	@ 0x36
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 800213a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800213c:	3340      	adds	r3, #64	@ 0x40
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	611a      	str	r2, [r3, #16]
 800214a:	615a      	str	r2, [r3, #20]
 800214c:	619a      	str	r2, [r3, #24]

            lcd->touch_pressed        = itpNONE;
 800214e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002150:	22ff      	movs	r2, #255	@ 0xff
 8002152:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            lcd->touch_pressed_begin  = NULL;
 8002156:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002158:	2200      	movs	r2, #0
 800215a:	661a      	str	r2, [r3, #96]	@ 0x60
            lcd->touch_pressed_end    = NULL;
 800215c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800215e:	2200      	movs	r2, #0
 8002160:	665a      	str	r2, [r3, #100]	@ 0x64
          }

          ili9341_initialize(lcd);
 8002162:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002164:	f000 f944 	bl	80023f0 <ili9341_initialize>
        }
      }
    }
  }

  return lcd;
 8002168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 800216a:	4618      	mov	r0, r3
 800216c:	376c      	adds	r7, #108	@ 0x6c
 800216e:	46bd      	mov	sp, r7
 8002170:	bd90      	pop	{r4, r7, pc}

08002172 <ili9341_spi_tft_select>:
              * (touch_a_x * touch_b_y - touch_b_x * touch_a_y) ) )
      ) / delta + 0.5;
}

void ili9341_spi_tft_select(ili9341_t *lcd)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  // clear bit indicates the TFT is -active- slave SPI device
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_CLR__);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68d8      	ldr	r0, [r3, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	8a1b      	ldrh	r3, [r3, #16]
 8002182:	2200      	movs	r2, #0
 8002184:	4619      	mov	r1, r3
 8002186:	f004 f8db 	bl	8006340 <HAL_GPIO_WritePin>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <ili9341_spi_tft_release>:

void ili9341_spi_tft_release(ili9341_t *lcd)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  // set bit indicates the TFT is -inactive- slave SPI device
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_SET__);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68d8      	ldr	r0, [r3, #12]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	8a1b      	ldrh	r3, [r3, #16]
 80021a2:	2201      	movs	r2, #1
 80021a4:	4619      	mov	r1, r3
 80021a6:	f004 f8cb 	bl	8006340 <HAL_GPIO_WritePin>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <ili9341_spi_touch_select>:

void ili9341_spi_touch_select(ili9341_t *lcd)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  // clear bit indicates the touch screen is -active- slave SPI device
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_CLR__);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a18      	ldr	r0, [r3, #32]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80021c2:	2200      	movs	r2, #0
 80021c4:	4619      	mov	r1, r3
 80021c6:	f004 f8bb 	bl	8006340 <HAL_GPIO_WritePin>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <ili9341_spi_touch_release>:

void ili9341_spi_touch_release(ili9341_t *lcd)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  // set bit indicates the touch screen is -inactive- slave SPI device
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_SET__);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a18      	ldr	r0, [r3, #32]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80021e2:	2201      	movs	r2, #1
 80021e4:	4619      	mov	r1, r3
 80021e6:	f004 f8ab 	bl	8006340 <HAL_GPIO_WritePin>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <ili9341_spi_slave_select>:

void ili9341_spi_slave_select(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	70fb      	strb	r3, [r7, #3]
  switch (spi_slave) {
 80021fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <ili9341_spi_slave_select+0x1a>
 8002206:	2b01      	cmp	r3, #1
 8002208:	d004      	beq.n	8002214 <ili9341_spi_slave_select+0x22>
    case issDisplayTFT:  ili9341_spi_tft_select(lcd);   break;
    case issTouchScreen: ili9341_spi_touch_select(lcd); break;
    default: break;
 800220a:	e007      	b.n	800221c <ili9341_spi_slave_select+0x2a>
    case issDisplayTFT:  ili9341_spi_tft_select(lcd);   break;
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ffb0 	bl	8002172 <ili9341_spi_tft_select>
 8002212:	e003      	b.n	800221c <ili9341_spi_slave_select+0x2a>
    case issTouchScreen: ili9341_spi_touch_select(lcd); break;
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ffcc 	bl	80021b2 <ili9341_spi_touch_select>
 800221a:	bf00      	nop
  }
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <ili9341_spi_slave_release>:

void ili9341_spi_slave_release(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	70fb      	strb	r3, [r7, #3]
  switch (spi_slave) {
 8002230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <ili9341_spi_slave_release+0x1a>
 8002238:	2b01      	cmp	r3, #1
 800223a:	d004      	beq.n	8002246 <ili9341_spi_slave_release+0x22>

    case issDisplayTFT:  ili9341_spi_tft_release(lcd);   break;
    case issTouchScreen: ili9341_spi_touch_release(lcd); break;
    default: break;
 800223c:	e007      	b.n	800224e <ili9341_spi_slave_release+0x2a>
    case issDisplayTFT:  ili9341_spi_tft_release(lcd);   break;
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffa7 	bl	8002192 <ili9341_spi_tft_release>
 8002244:	e003      	b.n	800224e <ili9341_spi_slave_release+0x2a>
    case issTouchScreen: ili9341_spi_touch_release(lcd); break;
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffc3 	bl	80021d2 <ili9341_spi_touch_release>
 800224c:	bf00      	nop
  }
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <ili9341_spi_write_command>:

void ili9341_spi_write_command(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint8_t command)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	460b      	mov	r3, r1
 8002260:	70fb      	strb	r3, [r7, #3]
 8002262:	4613      	mov	r3, r2
 8002264:	70bb      	strb	r3, [r7, #2]
  __SLAVE_SELECT(lcd, spi_slave);
 8002266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db09      	blt.n	8002282 <ili9341_spi_write_command+0x2c>
 800226e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002272:	2b01      	cmp	r3, #1
 8002274:	dc05      	bgt.n	8002282 <ili9341_spi_write_command+0x2c>
 8002276:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800227a:	4619      	mov	r1, r3
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ffb8 	bl	80021f2 <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6958      	ldr	r0, [r3, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	8b1b      	ldrh	r3, [r3, #24]
 800228a:	2200      	movs	r2, #0
 800228c:	4619      	mov	r1, r3
 800228e:	f004 f857 	bl	8006340 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	1cb9      	adds	r1, r7, #2
 8002298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800229c:	2201      	movs	r2, #1
 800229e:	f006 fd2c 	bl	8008cfa <HAL_SPI_Transmit>

  __SLAVE_RELEASE(lcd, spi_slave);
 80022a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	db09      	blt.n	80022be <ili9341_spi_write_command+0x68>
 80022aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	dc05      	bgt.n	80022be <ili9341_spi_write_command+0x68>
 80022b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022b6:	4619      	mov	r1, r3
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ffb3 	bl	8002224 <ili9341_spi_slave_release>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <ili9341_spi_write_data>:

void ili9341_spi_write_data(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint16_t data_sz, uint8_t data[])
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	72fb      	strb	r3, [r7, #11]
 80022d4:	4613      	mov	r3, r2
 80022d6:	813b      	strh	r3, [r7, #8]
  __SLAVE_SELECT(lcd, spi_slave);
 80022d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db09      	blt.n	80022f4 <ili9341_spi_write_data+0x2e>
 80022e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	dc05      	bgt.n	80022f4 <ili9341_spi_write_data+0x2e>
 80022e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022ec:	4619      	mov	r1, r3
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff ff7f 	bl	80021f2 <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6958      	ldr	r0, [r3, #20]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8b1b      	ldrh	r3, [r3, #24]
 80022fc:	2201      	movs	r2, #1
 80022fe:	4619      	mov	r1, r3
 8002300:	f004 f81e 	bl	8006340 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	893a      	ldrh	r2, [r7, #8]
 800230a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	f006 fcf3 	bl	8008cfa <HAL_SPI_Transmit>

  __SLAVE_RELEASE(lcd, spi_slave);
 8002314:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db09      	blt.n	8002330 <ili9341_spi_write_data+0x6a>
 800231c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002320:	2b01      	cmp	r3, #1
 8002322:	dc05      	bgt.n	8002330 <ili9341_spi_write_data+0x6a>
 8002324:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002328:	4619      	mov	r1, r3
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f7ff ff7a 	bl	8002224 <ili9341_spi_slave_release>
}
 8002330:	bf00      	nop
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <ili9341_spi_write_command_data>:
  __SLAVE_RELEASE(lcd, spi_slave);
}

void ili9341_spi_write_command_data(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint8_t command, uint16_t data_sz, uint8_t data[])
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	4608      	mov	r0, r1
 8002342:	4611      	mov	r1, r2
 8002344:	461a      	mov	r2, r3
 8002346:	4603      	mov	r3, r0
 8002348:	70fb      	strb	r3, [r7, #3]
 800234a:	460b      	mov	r3, r1
 800234c:	70bb      	strb	r3, [r7, #2]
 800234e:	4613      	mov	r3, r2
 8002350:	803b      	strh	r3, [r7, #0]
  __SLAVE_SELECT(lcd, spi_slave);
 8002352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db09      	blt.n	800236e <ili9341_spi_write_command_data+0x36>
 800235a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800235e:	2b01      	cmp	r3, #1
 8002360:	dc05      	bgt.n	800236e <ili9341_spi_write_command_data+0x36>
 8002362:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002366:	4619      	mov	r1, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff42 	bl	80021f2 <ili9341_spi_slave_select>

  ili9341_spi_write_command(lcd, issNONE, command);
 800236e:	78bb      	ldrb	r3, [r7, #2]
 8002370:	461a      	mov	r2, r3
 8002372:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ff6d 	bl	8002256 <ili9341_spi_write_command>
  ili9341_spi_write_data(lcd, issNONE, data_sz, data);
 800237c:	883a      	ldrh	r2, [r7, #0]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff9e 	bl	80022c6 <ili9341_spi_write_data>

  __SLAVE_RELEASE(lcd, spi_slave);
 800238a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800238e:	2b00      	cmp	r3, #0
 8002390:	db09      	blt.n	80023a6 <ili9341_spi_write_command_data+0x6e>
 8002392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002396:	2b01      	cmp	r3, #1
 8002398:	dc05      	bgt.n	80023a6 <ili9341_spi_write_command_data+0x6e>
 800239a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff3f 	bl	8002224 <ili9341_spi_slave_release>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <ili9341_reset>:

// -------------------------------------------------------- private functions --

static void ili9341_reset(ili9341_t *lcd)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  // the reset pin on ILI9341 is active low, so driving low temporarily will
  // reset the device (also resets the touch screen peripheral)
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_CLR__);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6858      	ldr	r0, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	891b      	ldrh	r3, [r3, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	4619      	mov	r1, r3
 80023c2:	f003 ffbd 	bl	8006340 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80023c6:	20c8      	movs	r0, #200	@ 0xc8
 80023c8:	f002 fdec 	bl	8004fa4 <HAL_Delay>
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_SET__);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6858      	ldr	r0, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	891b      	ldrh	r3, [r3, #8]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4619      	mov	r1, r3
 80023d8:	f003 ffb2 	bl	8006340 <HAL_GPIO_WritePin>

  // ensure both slave lines are open
  ili9341_spi_tft_release(lcd);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff fed8 	bl	8002192 <ili9341_spi_tft_release>
  ili9341_spi_touch_release(lcd);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff fef5 	bl	80021d2 <ili9341_spi_touch_release>
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <ili9341_initialize>:

static void ili9341_initialize(ili9341_t *lcd)
{
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b09f      	sub	sp, #124	@ 0x7c
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	6078      	str	r0, [r7, #4]
  ili9341_reset(lcd);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff ffd8 	bl	80023ae <ili9341_reset>
  ili9341_spi_tft_select(lcd);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff feb7 	bl	8002172 <ili9341_spi_tft_select>

  // command list is based on https://github.com/martnak/STM32-ILI9341

  // SOFTWARE RESET
  ili9341_spi_write_command(lcd, issNONE, 0x01);
 8002404:	2201      	movs	r2, #1
 8002406:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ff23 	bl	8002256 <ili9341_spi_write_command>
  HAL_Delay(1000);
 8002410:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002414:	f002 fdc6 	bl	8004fa4 <HAL_Delay>

  // POWER CONTROL A
  ili9341_spi_write_command_data(lcd, issNONE,
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 8002418:	4a9d      	ldr	r2, [pc, #628]	@ (8002690 <ili9341_initialize+0x2a0>)
 800241a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800241e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002422:	6018      	str	r0, [r3, #0]
 8002424:	3304      	adds	r3, #4
 8002426:	7019      	strb	r1, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8002428:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2305      	movs	r3, #5
 8002430:	22cb      	movs	r2, #203	@ 0xcb
 8002432:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ff7e 	bl	8002338 <ili9341_spi_write_command_data>

  // POWER CONTROL B
  ili9341_spi_write_command_data(lcd, issNONE,
      0xCF, 3, (uint8_t[]){ 0x00, 0xC1, 0x30 });
 800243c:	4a95      	ldr	r2, [pc, #596]	@ (8002694 <ili9341_initialize+0x2a4>)
 800243e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	4611      	mov	r1, r2
 8002446:	8019      	strh	r1, [r3, #0]
 8002448:	3302      	adds	r3, #2
 800244a:	0c12      	lsrs	r2, r2, #16
 800244c:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 800244e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2303      	movs	r3, #3
 8002456:	22cf      	movs	r2, #207	@ 0xcf
 8002458:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff ff6b 	bl	8002338 <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL A
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE8, 3, (uint8_t[]){ 0x85, 0x00, 0x78 });
 8002462:	4a8d      	ldr	r2, [pc, #564]	@ (8002698 <ili9341_initialize+0x2a8>)
 8002464:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	4611      	mov	r1, r2
 800246c:	8019      	strh	r1, [r3, #0]
 800246e:	3302      	adds	r3, #2
 8002470:	0c12      	lsrs	r2, r2, #16
 8002472:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8002474:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2303      	movs	r3, #3
 800247c:	22e8      	movs	r2, #232	@ 0xe8
 800247e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ff58 	bl	8002338 <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL B
  ili9341_spi_write_command_data(lcd, issNONE,
      0xEA, 2, (uint8_t[]){ 0x00, 0x00 });
 8002488:	2300      	movs	r3, #0
 800248a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 800248e:	2300      	movs	r3, #0
 8002490:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  ili9341_spi_write_command_data(lcd, issNONE,
 8002494:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2302      	movs	r3, #2
 800249c:	22ea      	movs	r2, #234	@ 0xea
 800249e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ff48 	bl	8002338 <ili9341_spi_write_command_data>

  // POWER ON SEQUENCE CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xED, 4, (uint8_t[]){ 0x64, 0x03, 0x12, 0x81 });
 80024a8:	4b7c      	ldr	r3, [pc, #496]	@ (800269c <ili9341_initialize+0x2ac>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  ili9341_spi_write_command_data(lcd, issNONE,
 80024ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2304      	movs	r3, #4
 80024b6:	22ed      	movs	r2, #237	@ 0xed
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff3b 	bl	8002338 <ili9341_spi_write_command_data>

  // PUMP RATIO CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xF7, 1, (uint8_t[]){ 0x20 });
 80024c2:	2320      	movs	r3, #32
 80024c4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  ili9341_spi_write_command_data(lcd, issNONE,
 80024c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2301      	movs	r3, #1
 80024d0:	22f7      	movs	r2, #247	@ 0xf7
 80024d2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ff2e 	bl	8002338 <ili9341_spi_write_command_data>

  // POWER CONTROL,VRH[5:0]
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC0, 1, (uint8_t[]){ 0x23 });
 80024dc:	2323      	movs	r3, #35	@ 0x23
 80024de:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  ili9341_spi_write_command_data(lcd, issNONE,
 80024e2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	2301      	movs	r3, #1
 80024ea:	22c0      	movs	r2, #192	@ 0xc0
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff21 	bl	8002338 <ili9341_spi_write_command_data>

  // POWER CONTROL,SAP[2:0];BT[3:0]
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC1, 1, (uint8_t[]){ 0x10 });
 80024f6:	2310      	movs	r3, #16
 80024f8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  ili9341_spi_write_command_data(lcd, issNONE,
 80024fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2301      	movs	r3, #1
 8002504:	22c1      	movs	r2, #193	@ 0xc1
 8002506:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ff14 	bl	8002338 <ili9341_spi_write_command_data>

  // VCM CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC5, 2, (uint8_t[]){ 0x3E, 0x28 });
 8002510:	4b63      	ldr	r3, [pc, #396]	@ (80026a0 <ili9341_initialize+0x2b0>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
  ili9341_spi_write_command_data(lcd, issNONE,
 8002518:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2302      	movs	r3, #2
 8002520:	22c5      	movs	r2, #197	@ 0xc5
 8002522:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ff06 	bl	8002338 <ili9341_spi_write_command_data>

  // VCM CONTROL 2
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC7, 1, (uint8_t[]){ 0x86 });
 800252c:	2386      	movs	r3, #134	@ 0x86
 800252e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  ili9341_spi_write_command_data(lcd, issNONE,
 8002532:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2301      	movs	r3, #1
 800253a:	22c7      	movs	r2, #199	@ 0xc7
 800253c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff fef9 	bl	8002338 <ili9341_spi_write_command_data>

  // MEMORY ACCESS CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0x36, 1, (uint8_t[]){ 0x48 });
 8002546:	2348      	movs	r3, #72	@ 0x48
 8002548:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
  ili9341_spi_write_command_data(lcd, issNONE,
 800254c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2301      	movs	r3, #1
 8002554:	2236      	movs	r2, #54	@ 0x36
 8002556:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff feec 	bl	8002338 <ili9341_spi_write_command_data>

  // PIXEL FORMAT
  ili9341_spi_write_command_data(lcd, issNONE,
      0x3A, 1, (uint8_t[]){ 0x55 });
 8002560:	2355      	movs	r3, #85	@ 0x55
 8002562:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  ili9341_spi_write_command_data(lcd, issNONE,
 8002566:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2301      	movs	r3, #1
 800256e:	223a      	movs	r2, #58	@ 0x3a
 8002570:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff fedf 	bl	8002338 <ili9341_spi_write_command_data>

  // FRAME RATIO CONTROL, STANDARD RGB COLOR
  ili9341_spi_write_command_data(lcd, issNONE,
      0xB1, 2, (uint8_t[]){ 0x00, 0x18 });
 800257a:	2300      	movs	r3, #0
 800257c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8002580:	2318      	movs	r3, #24
 8002582:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  ili9341_spi_write_command_data(lcd, issNONE,
 8002586:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2302      	movs	r3, #2
 800258e:	22b1      	movs	r2, #177	@ 0xb1
 8002590:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fecf 	bl	8002338 <ili9341_spi_write_command_data>

  // DISPLAY FUNCTION CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xB6, 3, (uint8_t[]){ 0x08, 0x82, 0x27 });
 800259a:	4a42      	ldr	r2, [pc, #264]	@ (80026a4 <ili9341_initialize+0x2b4>)
 800259c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4611      	mov	r1, r2
 80025a4:	8019      	strh	r1, [r3, #0]
 80025a6:	3302      	adds	r3, #2
 80025a8:	0c12      	lsrs	r2, r2, #16
 80025aa:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 80025ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	2303      	movs	r3, #3
 80025b4:	22b6      	movs	r2, #182	@ 0xb6
 80025b6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff febc 	bl	8002338 <ili9341_spi_write_command_data>

  // 3GAMMA FUNCTION DISABLE
  ili9341_spi_write_command_data(lcd, issNONE,
      0xF2, 1, (uint8_t[]){ 0x00 });
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  ili9341_spi_write_command_data(lcd, issNONE,
 80025c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2301      	movs	r3, #1
 80025ce:	22f2      	movs	r2, #242	@ 0xf2
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff feaf 	bl	8002338 <ili9341_spi_write_command_data>

  // GAMMA CURVE SELECTED
  ili9341_spi_write_command_data(lcd, issNONE,
      0x26, 1, (uint8_t[]){ 0x01 });
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  ili9341_spi_write_command_data(lcd, issNONE,
 80025e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	2301      	movs	r3, #1
 80025e8:	2226      	movs	r2, #38	@ 0x26
 80025ea:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff fea2 	bl	8002338 <ili9341_spi_write_command_data>

  // POSITIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE0, 15, (uint8_t[]){ 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80025f4:	4b2c      	ldr	r3, [pc, #176]	@ (80026a8 <ili9341_initialize+0x2b8>)
 80025f6:	f107 041c 	add.w	r4, r7, #28
 80025fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025fc:	c407      	stmia	r4!, {r0, r1, r2}
 80025fe:	8023      	strh	r3, [r4, #0]
 8002600:	3402      	adds	r4, #2
 8002602:	0c1b      	lsrs	r3, r3, #16
 8002604:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8002606:	f107 031c 	add.w	r3, r7, #28
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	230f      	movs	r3, #15
 800260e:	22e0      	movs	r2, #224	@ 0xe0
 8002610:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff fe8f 	bl	8002338 <ili9341_spi_write_command_data>
                             0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 });

  // NEGATIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE1, 15, (uint8_t[]){ 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 800261a:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <ili9341_initialize+0x2bc>)
 800261c:	f107 040c 	add.w	r4, r7, #12
 8002620:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002622:	c407      	stmia	r4!, {r0, r1, r2}
 8002624:	8023      	strh	r3, [r4, #0]
 8002626:	3402      	adds	r4, #2
 8002628:	0c1b      	lsrs	r3, r3, #16
 800262a:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 800262c:	f107 030c 	add.w	r3, r7, #12
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	230f      	movs	r3, #15
 8002634:	22e1      	movs	r2, #225	@ 0xe1
 8002636:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff fe7c 	bl	8002338 <ili9341_spi_write_command_data>
                             0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F });

  // EXIT SLEEP
  ili9341_spi_write_command(lcd, issNONE, 0x11);
 8002640:	2211      	movs	r2, #17
 8002642:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff fe05 	bl	8002256 <ili9341_spi_write_command>
  HAL_Delay(120);
 800264c:	2078      	movs	r0, #120	@ 0x78
 800264e:	f002 fca9 	bl	8004fa4 <HAL_Delay>

  // TURN ON DISPLAY
  ili9341_spi_write_command(lcd, issNONE, 0x29);
 8002652:	2229      	movs	r2, #41	@ 0x29
 8002654:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff fdfc 	bl	8002256 <ili9341_spi_write_command>

  // MADCTL
  ili9341_spi_write_command_data(lcd, issNONE,
      0x36, 1, (uint8_t[]){ ili9341_screen_rotation(lcd->orientation) });
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8002664:	4618      	mov	r0, r3
 8002666:	f000 f853 	bl	8002710 <ili9341_screen_rotation>
 800266a:	4603      	mov	r3, r0
 800266c:	723b      	strb	r3, [r7, #8]
  ili9341_spi_write_command_data(lcd, issNONE,
 800266e:	f107 0308 	add.w	r3, r7, #8
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2301      	movs	r3, #1
 8002676:	2236      	movs	r2, #54	@ 0x36
 8002678:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fe5b 	bl	8002338 <ili9341_spi_write_command_data>

  ili9341_spi_tft_release(lcd);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fd85 	bl	8002192 <ili9341_spi_tft_release>
}
 8002688:	bf00      	nop
 800268a:	3774      	adds	r7, #116	@ 0x74
 800268c:	46bd      	mov	sp, r7
 800268e:	bd90      	pop	{r4, r7, pc}
 8002690:	0800fa30 	.word	0x0800fa30
 8002694:	0800fa38 	.word	0x0800fa38
 8002698:	0800fa3c 	.word	0x0800fa3c
 800269c:	0800fa40 	.word	0x0800fa40
 80026a0:	0800fa44 	.word	0x0800fa44
 80026a4:	0800fa48 	.word	0x0800fa48
 80026a8:	0800fa4c 	.word	0x0800fa4c
 80026ac:	0800fa5c 	.word	0x0800fa5c

080026b0 <ili9341_screen_size>:

static ili9341_two_dimension_t ili9341_screen_size(
    ili9341_screen_orientation_t orientation)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	@ 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d011      	beq.n	80026e6 <ili9341_screen_size+0x36>
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	dc03      	bgt.n	80026ce <ili9341_screen_size+0x1e>
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d005      	beq.n	80026d6 <ili9341_screen_size+0x26>
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d007      	beq.n	80026de <ili9341_screen_size+0x2e>
    default:
    case isoDown:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 80026ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <ili9341_screen_size+0x58>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	e00a      	b.n	80026ec <ili9341_screen_size+0x3c>
    case isoRight:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 80026d6:	4b0d      	ldr	r3, [pc, #52]	@ (800270c <ili9341_screen_size+0x5c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	e006      	b.n	80026ec <ili9341_screen_size+0x3c>
    case isoUp:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 80026de:	4b0a      	ldr	r3, [pc, #40]	@ (8002708 <ili9341_screen_size+0x58>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	e002      	b.n	80026ec <ili9341_screen_size+0x3c>
    case isoLeft:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 80026e6:	4b09      	ldr	r3, [pc, #36]	@ (800270c <ili9341_screen_size+0x5c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	61fb      	str	r3, [r7, #28]
  }
}
 80026ec:	2300      	movs	r3, #0
 80026ee:	8bba      	ldrh	r2, [r7, #28]
 80026f0:	f362 030f 	bfi	r3, r2, #0, #16
 80026f4:	8bfa      	ldrh	r2, [r7, #30]
 80026f6:	f362 431f 	bfi	r3, r2, #16, #16
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	@ 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	0800fa6c 	.word	0x0800fa6c
 800270c:	0800fa70 	.word	0x0800fa70

08002710 <ili9341_screen_rotation>:

static uint8_t ili9341_screen_rotation(
    ili9341_screen_orientation_t orientation)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	2b03      	cmp	r3, #3
 8002720:	d00b      	beq.n	800273a <ili9341_screen_rotation+0x2a>
 8002722:	2b03      	cmp	r3, #3
 8002724:	dc03      	bgt.n	800272e <ili9341_screen_rotation+0x1e>
 8002726:	2b01      	cmp	r3, #1
 8002728:	d003      	beq.n	8002732 <ili9341_screen_rotation+0x22>
 800272a:	2b02      	cmp	r3, #2
 800272c:	d003      	beq.n	8002736 <ili9341_screen_rotation+0x26>
    default:
    case isoDown:
      return 0x40 | 0x08;
 800272e:	2348      	movs	r3, #72	@ 0x48
 8002730:	e004      	b.n	800273c <ili9341_screen_rotation+0x2c>
    case isoRight:
      return 0x40 | 0x80 | 0x20 | 0x08;
 8002732:	23e8      	movs	r3, #232	@ 0xe8
 8002734:	e002      	b.n	800273c <ili9341_screen_rotation+0x2c>
    case isoUp:
      return 0x80 | 0x08;
 8002736:	2388      	movs	r3, #136	@ 0x88
 8002738:	e000      	b.n	800273c <ili9341_screen_rotation+0x2c>
    case isoLeft:
      return 0x20 | 0x08;
 800273a:	2328      	movs	r3, #40	@ 0x28
  }
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <ili9341_read_memory>:
 * @param x1 The x position of the lower right corner
 * @param y1 The y position of the lower right corner
 * @param size The size of the data buffer
 */
void ili9341_read_memory(ili9341_t *lcd, uint16_t x0, uint16_t y0,
		uint16_t x1, uint16_t y1, uint8_t data[], size_t size){
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	@ 0x28
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	4608      	mov	r0, r1
 8002752:	4611      	mov	r1, r2
 8002754:	461a      	mov	r2, r3
 8002756:	4603      	mov	r3, r0
 8002758:	817b      	strh	r3, [r7, #10]
 800275a:	460b      	mov	r3, r1
 800275c:	813b      	strh	r3, [r7, #8]
 800275e:	4613      	mov	r3, r2
 8002760:	80fb      	strh	r3, [r7, #6]
	if (x0 > x1 || y0 > y1) {
 8002762:	897a      	ldrh	r2, [r7, #10]
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	429a      	cmp	r2, r3
 8002768:	d864      	bhi.n	8002834 <ili9341_read_memory+0xec>
 800276a:	893a      	ldrh	r2, [r7, #8]
 800276c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800276e:	429a      	cmp	r2, r3
 8002770:	d860      	bhi.n	8002834 <ili9341_read_memory+0xec>
	    }

	// Announce the area of data we are going to read
	// This is essentially copied from the set_address_rect function
	// But we need it without the ram write function
	ili9341_spi_tft_select(lcd);
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f7ff fcfd 	bl	8002172 <ili9341_spi_tft_select>

	  // column address set
	  ili9341_spi_write_command_data(lcd, issNONE,
	      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 8002778:	897b      	ldrh	r3, [r7, #10]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	b29b      	uxth	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	773b      	strb	r3, [r7, #28]
 8002782:	897b      	ldrh	r3, [r7, #10]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	777b      	strb	r3, [r7, #29]
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	0a1b      	lsrs	r3, r3, #8
 800278c:	b29b      	uxth	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	77bb      	strb	r3, [r7, #30]
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	77fb      	strb	r3, [r7, #31]
	  ili9341_spi_write_command_data(lcd, issNONE,
 8002798:	f107 031c 	add.w	r3, r7, #28
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	2304      	movs	r3, #4
 80027a0:	222a      	movs	r2, #42	@ 0x2a
 80027a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f7ff fdc6 	bl	8002338 <ili9341_spi_write_command_data>
	                            (x1 >> 8) & 0xFF, x1 & 0xFF });

	  // row address set
	  ili9341_spi_write_command_data(lcd, issNONE,
	      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 80027ac:	893b      	ldrh	r3, [r7, #8]
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	763b      	strb	r3, [r7, #24]
 80027b6:	893b      	ldrh	r3, [r7, #8]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	767b      	strb	r3, [r7, #25]
 80027bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	76bb      	strb	r3, [r7, #26]
 80027c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	76fb      	strb	r3, [r7, #27]
	  ili9341_spi_write_command_data(lcd, issNONE,
 80027cc:	f107 0318 	add.w	r3, r7, #24
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2304      	movs	r3, #4
 80027d4:	222b      	movs	r2, #43	@ 0x2b
 80027d6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f7ff fdac 	bl	8002338 <ili9341_spi_write_command_data>
	                            (y1 >> 8) & 0xFF, y1 & 0xFF });
	  // Memory Read
	  //ili9341_spi_write_command(lcd, issNONE, 0x2E);
	  __SLAVE_SELECT(lcd, issNONE);

	   HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6958      	ldr	r0, [r3, #20]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8b1b      	ldrh	r3, [r3, #24]
 80027e8:	2200      	movs	r2, #0
 80027ea:	4619      	mov	r1, r3
 80027ec:	f003 fda8 	bl	8006340 <HAL_GPIO_WritePin>
	   HAL_SPI_Transmit(lcd->spi_hal, (uint8_t[]){0x2E}, 1, __SPI_MAX_DELAY__);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	232e      	movs	r3, #46	@ 0x2e
 80027f6:	753b      	strb	r3, [r7, #20]
 80027f8:	f107 0114 	add.w	r1, r7, #20
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002800:	2201      	movs	r2, #1
 8002802:	f006 fa7a 	bl	8008cfa <HAL_SPI_Transmit>


	  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6958      	ldr	r0, [r3, #20]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8b1b      	ldrh	r3, [r3, #24]
 800280e:	2201      	movs	r2, #1
 8002810:	4619      	mov	r1, r3
 8002812:	f003 fd95 	bl	8006340 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(lcd->spi_hal, data, size +1, __SPI_MAX_DELAY__);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281c:	b29b      	uxth	r3, r3
 800281e:	3301      	adds	r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002826:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002828:	f006 fbab 	bl	8008f82 <HAL_SPI_Receive>

	  __SLAVE_RELEASE(lcd, issNONE);
	  ili9341_spi_tft_release(lcd);
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff fcb0 	bl	8002192 <ili9341_spi_tft_release>
 8002832:	e000      	b.n	8002836 <ili9341_read_memory+0xee>
	        return;
 8002834:	bf00      	nop

}
 8002836:	3720      	adds	r7, #32
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <glyph_index>:
/* nothing */

// ------------------------------------------------------- exported functions --

uint8_t glyph_index(unsigned char glyph)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	71fb      	strb	r3, [r7, #7]
  if ((glyph >= __ILI9341_FONT_FIRST_GLYPH__) &&
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	2b1f      	cmp	r3, #31
 800284a:	d906      	bls.n	800285a <glyph_index+0x1e>
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	2b7e      	cmp	r3, #126	@ 0x7e
 8002850:	d803      	bhi.n	800285a <glyph_index+0x1e>
      (glyph <= __ILI9341_FONT_LAST_GLYPH__)) {
    return glyph - __ILI9341_FONT_FIRST_GLYPH__;
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	3b20      	subs	r3, #32
 8002856:	b2db      	uxtb	r3, r3
 8002858:	e000      	b.n	800285c <glyph_index+0x20>
  }
  return 0; // on error, return index of ASCII space (0x20)
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <ili9341_spi_tft_set_address_rect>:
  return __ILI9341_COLOR565_RGB(rgb);
}

void ili9341_spi_tft_set_address_rect(ili9341_t *lcd,
    uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	4608      	mov	r0, r1
 8002872:	4611      	mov	r1, r2
 8002874:	461a      	mov	r2, r3
 8002876:	4603      	mov	r3, r0
 8002878:	817b      	strh	r3, [r7, #10]
 800287a:	460b      	mov	r3, r1
 800287c:	813b      	strh	r3, [r7, #8]
 800287e:	4613      	mov	r3, r2
 8002880:	80fb      	strh	r3, [r7, #6]
  ili9341_spi_tft_select(lcd);
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f7ff fc75 	bl	8002172 <ili9341_spi_tft_select>

  // column address set
  ili9341_spi_write_command_data(lcd, issNONE,
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 8002888:	897b      	ldrh	r3, [r7, #10]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	b29b      	uxth	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	753b      	strb	r3, [r7, #20]
 8002892:	897b      	ldrh	r3, [r7, #10]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	757b      	strb	r3, [r7, #21]
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	b29b      	uxth	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	75bb      	strb	r3, [r7, #22]
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	75fb      	strb	r3, [r7, #23]
  ili9341_spi_write_command_data(lcd, issNONE,
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	2304      	movs	r3, #4
 80028b0:	222a      	movs	r2, #42	@ 0x2a
 80028b2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f7ff fd3e 	bl	8002338 <ili9341_spi_write_command_data>
                            (x1 >> 8) & 0xFF, x1 & 0xFF });

  // row address set
  ili9341_spi_write_command_data(lcd, issNONE,
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 80028bc:	893b      	ldrh	r3, [r7, #8]
 80028be:	0a1b      	lsrs	r3, r3, #8
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	743b      	strb	r3, [r7, #16]
 80028c6:	893b      	ldrh	r3, [r7, #8]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	747b      	strb	r3, [r7, #17]
 80028cc:	8c3b      	ldrh	r3, [r7, #32]
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	74bb      	strb	r3, [r7, #18]
 80028d6:	8c3b      	ldrh	r3, [r7, #32]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	74fb      	strb	r3, [r7, #19]
  ili9341_spi_write_command_data(lcd, issNONE,
 80028dc:	f107 0310 	add.w	r3, r7, #16
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2304      	movs	r3, #4
 80028e4:	222b      	movs	r2, #43	@ 0x2b
 80028e6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f7ff fd24 	bl	8002338 <ili9341_spi_write_command_data>
                            (y1 >> 8) & 0xFF, y1 & 0xFF });

  // write to RAM
  ili9341_spi_write_command(lcd, issNONE, 0x2C);
 80028f0:	222c      	movs	r2, #44	@ 0x2c
 80028f2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f7ff fcad 	bl	8002256 <ili9341_spi_write_command>

  ili9341_spi_tft_release(lcd);
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7ff fc48 	bl	8002192 <ili9341_spi_tft_release>
}
 8002902:	bf00      	nop
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <ili9341_transmit_wait>:

void ili9341_transmit_wait(ili9341_t *lcd)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  if (NULL == lcd)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <ili9341_transmit_wait+0x26>
    { return; }

  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
 8002918:	e000      	b.n	800291c <ili9341_transmit_wait+0x12>
    { continue; }
 800291a:	bf00      	nop
  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002922:	4618      	mov	r0, r3
 8002924:	f003 fa8a 	bl	8005e3c <HAL_DMA_GetState>
 8002928:	4603      	mov	r3, r0
 800292a:	2b02      	cmp	r3, #2
 800292c:	d0f5      	beq.n	800291a <ili9341_transmit_wait+0x10>
 800292e:	e000      	b.n	8002932 <ili9341_transmit_wait+0x28>
    { return; }
 8002930:	bf00      	nop
}
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <ili9341_transmit_color>:

void ili9341_transmit_color(ili9341_t *lcd, uint16_t size,
    uint16_t color[]/* already byte-swapped (LE) */, ili9341_bool_t wait)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	461a      	mov	r2, r3
 8002944:	460b      	mov	r3, r1
 8002946:	817b      	strh	r3, [r7, #10]
 8002948:	4613      	mov	r3, r2
 800294a:	727b      	strb	r3, [r7, #9]
  if ((NULL == lcd) || (0 == size) || (NULL == color))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d013      	beq.n	800297a <ili9341_transmit_color+0x42>
 8002952:	897b      	ldrh	r3, [r7, #10]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d010      	beq.n	800297a <ili9341_transmit_color+0x42>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00d      	beq.n	800297a <ili9341_transmit_color+0x42>
    { return; }

  HAL_SPI_Transmit_DMA(lcd->spi_hal, (uint8_t *)color, size);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	897a      	ldrh	r2, [r7, #10]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4618      	mov	r0, r3
 8002968:	f006 fdce 	bl	8009508 <HAL_SPI_Transmit_DMA>

  if (ibOK(wait))
 800296c:	7a7b      	ldrb	r3, [r7, #9]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d004      	beq.n	800297c <ili9341_transmit_color+0x44>
    { ili9341_transmit_wait(lcd); }
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f7ff ffc9 	bl	800290a <ili9341_transmit_wait>
 8002978:	e000      	b.n	800297c <ili9341_transmit_color+0x44>
    { return; }
 800297a:	bf00      	nop
}
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <ili9341_draw_pixel>:

void ili9341_draw_pixel(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b088      	sub	sp, #32
 8002986:	af02      	add	r7, sp, #8
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	4608      	mov	r0, r1
 800298c:	4611      	mov	r1, r2
 800298e:	461a      	mov	r2, r3
 8002990:	4603      	mov	r3, r0
 8002992:	817b      	strh	r3, [r7, #10]
 8002994:	460b      	mov	r3, r1
 8002996:	813b      	strh	r3, [r7, #8]
 8002998:	4613      	mov	r3, r2
 800299a:	80fb      	strh	r3, [r7, #6]
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, NULL, NULL)))
 800299c:	1dba      	adds	r2, r7, #6
 800299e:	f107 0108 	add.w	r1, r7, #8
 80029a2:	2300      	movs	r3, #0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2300      	movs	r3, #0
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fcac 	bl	8003306 <ili9341_clip_rect>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d03b      	beq.n	8002a2c <ili9341_draw_pixel+0xaa>
    { return; }

  uint16_t color_le = __LEu16(&color);
 80029b4:	f107 030a 	add.w	r3, r7, #10
 80029b8:	3301      	adds	r3, #1
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	b21a      	sxth	r2, r3
 80029be:	f107 030a 	add.w	r3, r7, #10
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	b21b      	sxth	r3, r3
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	b21b      	sxth	r3, r3
 80029ca:	4313      	orrs	r3, r2
 80029cc:	b21b      	sxth	r3, r3
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	82fb      	strh	r3, [r7, #22]

  // select target region
  ili9341_spi_tft_set_address_rect(lcd, x, y, x + 1, y + 1);
 80029d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80029d6:	b299      	uxth	r1, r3
 80029d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029dc:	b29a      	uxth	r2, r3
 80029de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	3301      	adds	r3, #1
 80029e6:	b298      	uxth	r0, r3
 80029e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	4603      	mov	r3, r0
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f7ff ff36 	bl	8002868 <ili9341_spi_tft_set_address_rect>

  ili9341_spi_tft_select(lcd);
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f7ff fbb8 	bl	8002172 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6958      	ldr	r0, [r3, #20]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8b1b      	ldrh	r3, [r3, #24]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f003 fc97 	bl	8006340 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, (uint8_t *)&color_le, 2U, __SPI_MAX_DELAY__);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	f107 0116 	add.w	r1, r7, #22
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f006 f96b 	bl	8008cfa <HAL_SPI_Transmit>

  ili9341_spi_tft_release(lcd);
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7ff fbb4 	bl	8002192 <ili9341_spi_tft_release>
 8002a2a:	e000      	b.n	8002a2e <ili9341_draw_pixel+0xac>
    { return; }
 8002a2c:	bf00      	nop
}
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <ili9341_draw_line>:

void ili9341_draw_line(ili9341_t *lcd, ili9341_color_t color,
    int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b08d      	sub	sp, #52	@ 0x34
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	4608      	mov	r0, r1
 8002a3e:	4611      	mov	r1, r2
 8002a40:	461a      	mov	r2, r3
 8002a42:	4603      	mov	r3, r0
 8002a44:	817b      	strh	r3, [r7, #10]
 8002a46:	460b      	mov	r3, r1
 8002a48:	813b      	strh	r3, [r7, #8]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	80fb      	strh	r3, [r7, #6]
  int16_t dx = x1 - x0;
 8002a4e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002a50:	893b      	ldrh	r3, [r7, #8]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	83fb      	strh	r3, [r7, #30]
  int16_t dy = y1 - y0;
 8002a58:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	83bb      	strh	r3, [r7, #28]

  int16_t x, y;
  int16_t err;
  int16_t step;

  if (0 == dx) {
 8002a62:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d117      	bne.n	8002a9a <ili9341_draw_line+0x66>
    // vertical line
    if (0 == dy)
 8002a6a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80c7 	beq.w	8002c02 <ili9341_draw_line+0x1ce>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(lcd, color, x0, y0, 1, abs(dy));
 8002a74:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bfb8      	it	lt
 8002a7c:	425b      	neglt	r3, r3
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002a84:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002a88:	8979      	ldrh	r1, [r7, #10]
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	4603      	mov	r3, r0
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f92c 	bl	8002cf0 <ili9341_fill_rect>
    return;
 8002a98:	e0b6      	b.n	8002c08 <ili9341_draw_line+0x1d4>
  }
  else if (0 == dy) {
 8002a9a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d117      	bne.n	8002ad2 <ili9341_draw_line+0x9e>
    // horizontal line
    if (0 == dx)
 8002aa2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 80ad 	beq.w	8002c06 <ili9341_draw_line+0x1d2>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(lcd, color, x0, y0, abs(dx), 1);
 8002aac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bfb8      	it	lt
 8002ab4:	425b      	neglt	r3, r3
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002abc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002ac0:	8979      	ldrh	r1, [r7, #10]
 8002ac2:	2401      	movs	r4, #1
 8002ac4:	9401      	str	r4, [sp, #4]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	4603      	mov	r3, r0
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f910 	bl	8002cf0 <ili9341_fill_rect>
    return;
 8002ad0:	e09a      	b.n	8002c08 <ili9341_draw_line+0x1d4>
  }

  ili9341_bool_t is_steep = abs(dy) > abs(dx);
 8002ad2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bfb8      	it	lt
 8002ada:	425b      	neglt	r3, r3
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	bfb8      	it	lt
 8002ae6:	425b      	neglt	r3, r3
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	429a      	cmp	r2, r3
 8002aec:	bf8c      	ite	hi
 8002aee:	2301      	movhi	r3, #1
 8002af0:	2300      	movls	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	76fb      	strb	r3, [r7, #27]
  if (is_steep) {
 8002af6:	7efb      	ldrb	r3, [r7, #27]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00b      	beq.n	8002b14 <ili9341_draw_line+0xe0>
    __SWAP(int16_t, x0, y0);
 8002afc:	893b      	ldrh	r3, [r7, #8]
 8002afe:	833b      	strh	r3, [r7, #24]
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	813b      	strh	r3, [r7, #8]
 8002b04:	8b3b      	ldrh	r3, [r7, #24]
 8002b06:	80fb      	strh	r3, [r7, #6]
    __SWAP(int16_t, x1, y1);
 8002b08:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002b0a:	82fb      	strh	r3, [r7, #22]
 8002b0c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002b0e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8002b10:	8afb      	ldrh	r3, [r7, #22]
 8002b12:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  }

  if (x0 > x1) {
 8002b14:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002b18:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	dd0b      	ble.n	8002b38 <ili9341_draw_line+0x104>
    __SWAP(int16_t, x0, x1);
 8002b20:	893b      	ldrh	r3, [r7, #8]
 8002b22:	82bb      	strh	r3, [r7, #20]
 8002b24:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002b26:	813b      	strh	r3, [r7, #8]
 8002b28:	8abb      	ldrh	r3, [r7, #20]
 8002b2a:	873b      	strh	r3, [r7, #56]	@ 0x38
    __SWAP(int16_t, y0, y1);
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	827b      	strh	r3, [r7, #18]
 8002b30:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002b32:	80fb      	strh	r3, [r7, #6]
 8002b34:	8a7b      	ldrh	r3, [r7, #18]
 8002b36:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  }

  dx = x1 - x0;
 8002b38:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002b3a:	893b      	ldrh	r3, [r7, #8]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	83fb      	strh	r3, [r7, #30]
  dy = abs(y1 - y0);
 8002b42:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	@ 0x3c
 8002b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bfb8      	it	lt
 8002b50:	425b      	neglt	r3, r3
 8002b52:	83bb      	strh	r3, [r7, #28]
  err = dx >> 1;
 8002b54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b58:	105b      	asrs	r3, r3, #1
 8002b5a:	847b      	strh	r3, [r7, #34]	@ 0x22

  if (y0 < y1)
 8002b5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b60:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002b64:	429a      	cmp	r2, r3
 8002b66:	da02      	bge.n	8002b6e <ili9341_draw_line+0x13a>
    { step = 1; }
 8002b68:	2301      	movs	r3, #1
 8002b6a:	843b      	strh	r3, [r7, #32]
 8002b6c:	e042      	b.n	8002bf4 <ili9341_draw_line+0x1c0>
  else
    { step = -1; }
 8002b6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b72:	843b      	strh	r3, [r7, #32]

  while (x0 <= x1) {
 8002b74:	e03e      	b.n	8002bf4 <ili9341_draw_line+0x1c0>

    if (is_steep)
 8002b76:	7efb      	ldrb	r3, [r7, #27]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d004      	beq.n	8002b86 <ili9341_draw_line+0x152>
      { x = y0; y = x0; }
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b80:	893b      	ldrh	r3, [r7, #8]
 8002b82:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002b84:	e003      	b.n	8002b8e <ili9341_draw_line+0x15a>
    else
      { x = x0; y = y0; }
 8002b86:	893b      	ldrh	r3, [r7, #8]
 8002b88:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	84bb      	strh	r3, [r7, #36]	@ 0x24

    // continue algorithm even if current pixel is outside of screen
    // bounds, so that the line is drawn at correct position once
    // it actually enters screen bounds (if ever).
    if ( (x >= 0) && (x <= lcd->screen_size.width) &&
 8002b8e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	db17      	blt.n	8002bc6 <ili9341_draw_line+0x192>
 8002b96:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	8b92      	ldrh	r2, [r2, #28]
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	dc11      	bgt.n	8002bc6 <ili9341_draw_line+0x192>
 8002ba2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	db0d      	blt.n	8002bc6 <ili9341_draw_line+0x192>
         (y >= 0) && (y <= lcd->screen_size.height) ) {
 8002baa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	8bd2      	ldrh	r2, [r2, #30]
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	dc07      	bgt.n	8002bc6 <ili9341_draw_line+0x192>
      ili9341_draw_pixel(lcd, color, x, y);
 8002bb6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002bba:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8002bbe:	8979      	ldrh	r1, [r7, #10]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7ff fede 	bl	8002982 <ili9341_draw_pixel>
    }

    err -= dy;
 8002bc6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002bc8:	8bbb      	ldrh	r3, [r7, #28]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (err < 0) {
 8002bd0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	da09      	bge.n	8002bec <ili9341_draw_line+0x1b8>
      y0 += step;
 8002bd8:	88fa      	ldrh	r2, [r7, #6]
 8002bda:	8c3b      	ldrh	r3, [r7, #32]
 8002bdc:	4413      	add	r3, r2
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	80fb      	strh	r3, [r7, #6]
      err += dx;
 8002be2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002be4:	8bfb      	ldrh	r3, [r7, #30]
 8002be6:	4413      	add	r3, r2
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    ++x0;
 8002bec:	893b      	ldrh	r3, [r7, #8]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	813b      	strh	r3, [r7, #8]
  while (x0 <= x1) {
 8002bf4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002bf8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	ddba      	ble.n	8002b76 <ili9341_draw_line+0x142>
 8002c00:	e002      	b.n	8002c08 <ili9341_draw_line+0x1d4>
      { return; } // distance = 0, no line to draw
 8002c02:	bf00      	nop
 8002c04:	e000      	b.n	8002c08 <ili9341_draw_line+0x1d4>
      { return; } // distance = 0, no line to draw
 8002c06:	bf00      	nop
  }
}
 8002c08:	372c      	adds	r7, #44	@ 0x2c
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd90      	pop	{r4, r7, pc}

08002c0e <ili9341_draw_rect>:

void ili9341_draw_rect(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y, uint16_t w, uint16_t h)
{
 8002c0e:	b590      	push	{r4, r7, lr}
 8002c10:	b087      	sub	sp, #28
 8002c12:	af02      	add	r7, sp, #8
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	4608      	mov	r0, r1
 8002c18:	4611      	mov	r1, r2
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	817b      	strh	r3, [r7, #10]
 8002c20:	460b      	mov	r3, r1
 8002c22:	813b      	strh	r3, [r7, #8]
 8002c24:	4613      	mov	r3, r2
 8002c26:	80fb      	strh	r3, [r7, #6]
  ili9341_draw_line(lcd, color,     x,     y,   x+w,     y );
 8002c28:	893a      	ldrh	r2, [r7, #8]
 8002c2a:	8c3b      	ldrh	r3, [r7, #32]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	b21b      	sxth	r3, r3
 8002c32:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8002c36:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8002c3a:	8979      	ldrh	r1, [r7, #10]
 8002c3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c40:	9201      	str	r2, [sp, #4]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	4623      	mov	r3, r4
 8002c46:	4602      	mov	r2, r0
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff fef3 	bl	8002a34 <ili9341_draw_line>
  ili9341_draw_line(lcd, color,     x, y+h-1,   x+w, y+h-1 );
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c52:	4413      	add	r3, r2
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	b21c      	sxth	r4, r3
 8002c5c:	893a      	ldrh	r2, [r7, #8]
 8002c5e:	8c3b      	ldrh	r3, [r7, #32]
 8002c60:	4413      	add	r3, r2
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	b21b      	sxth	r3, r3
 8002c66:	88f9      	ldrh	r1, [r7, #6]
 8002c68:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c6a:	440a      	add	r2, r1
 8002c6c:	b292      	uxth	r2, r2
 8002c6e:	3a01      	subs	r2, #1
 8002c70:	b292      	uxth	r2, r2
 8002c72:	b212      	sxth	r2, r2
 8002c74:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8002c78:	8979      	ldrh	r1, [r7, #10]
 8002c7a:	9201      	str	r2, [sp, #4]
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	4623      	mov	r3, r4
 8002c80:	4602      	mov	r2, r0
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f7ff fed6 	bl	8002a34 <ili9341_draw_line>
  ili9341_draw_line(lcd, color,     x,     y,     x,   y+h );
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c8c:	4413      	add	r3, r2
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	b21b      	sxth	r3, r3
 8002c92:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002c96:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002c9a:	8979      	ldrh	r1, [r7, #10]
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f7ff fec4 	bl	8002a34 <ili9341_draw_line>
  ili9341_draw_line(lcd, color, x+w-1,     y, x+w-1,   y+h );
 8002cac:	893a      	ldrh	r2, [r7, #8]
 8002cae:	8c3b      	ldrh	r3, [r7, #32]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	b218      	sxth	r0, r3
 8002cba:	893a      	ldrh	r2, [r7, #8]
 8002cbc:	8c3b      	ldrh	r3, [r7, #32]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	88f9      	ldrh	r1, [r7, #6]
 8002cca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ccc:	440a      	add	r2, r1
 8002cce:	b292      	uxth	r2, r2
 8002cd0:	b212      	sxth	r2, r2
 8002cd2:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8002cd6:	8979      	ldrh	r1, [r7, #10]
 8002cd8:	9201      	str	r2, [sp, #4]
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	4623      	mov	r3, r4
 8002cde:	4602      	mov	r2, r0
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7ff fea7 	bl	8002a34 <ili9341_draw_line>
}
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd90      	pop	{r4, r7, pc}
	...

08002cf0 <ili9341_fill_rect>:

void ili9341_fill_rect(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y, uint16_t w, uint16_t h)
{
 8002cf0:	b590      	push	{r4, r7, lr}
 8002cf2:	b08d      	sub	sp, #52	@ 0x34
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	4608      	mov	r0, r1
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4603      	mov	r3, r0
 8002d00:	817b      	strh	r3, [r7, #10]
 8002d02:	460b      	mov	r3, r1
 8002d04:	813b      	strh	r3, [r7, #8]
 8002d06:	4613      	mov	r3, r2
 8002d08:	80fb      	strh	r3, [r7, #6]
  // verify we have something within screen dimensions to be drawn
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, &w, &h)))
 8002d0a:	1dba      	adds	r2, r7, #6
 8002d0c:	f107 0108 	add.w	r1, r7, #8
 8002d10:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 faf3 	bl	8003306 <ili9341_clip_rect>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d070      	beq.n	8002e08 <ili9341_fill_rect+0x118>
    { return; }

  uint32_t num_pixels = w * h;
 8002d26:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002d28:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	617b      	str	r3, [r7, #20]
  uint32_t rect_wc    = num_pixels;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t block_wc = rect_wc;
 8002d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d36:	623b      	str	r3, [r7, #32]
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d3e:	d902      	bls.n	8002d46 <ili9341_fill_rect+0x56>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 8002d40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d44:	623b      	str	r3, [r7, #32]

  // fill entire block with ordered color data
  uint16_t color_le = __LEu16(&color);
 8002d46:	f107 030a 	add.w	r3, r7, #10
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	b21a      	sxth	r2, r3
 8002d50:	f107 030a 	add.w	r3, r7, #10
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b21b      	sxth	r3, r3
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	b21b      	sxth	r3, r3
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	b21b      	sxth	r3, r3
 8002d60:	827b      	strh	r3, [r7, #18]
  for (uint16_t i = 0; i < block_wc; ++i)
 8002d62:	2300      	movs	r3, #0
 8002d64:	83fb      	strh	r3, [r7, #30]
 8002d66:	e007      	b.n	8002d78 <ili9341_fill_rect+0x88>
    { spi_tx_block[i] = color_le; }
 8002d68:	8bfb      	ldrh	r3, [r7, #30]
 8002d6a:	4929      	ldr	r1, [pc, #164]	@ (8002e10 <ili9341_fill_rect+0x120>)
 8002d6c:	8a7a      	ldrh	r2, [r7, #18]
 8002d6e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint16_t i = 0; i < block_wc; ++i)
 8002d72:	8bfb      	ldrh	r3, [r7, #30]
 8002d74:	3301      	adds	r3, #1
 8002d76:	83fb      	strh	r3, [r7, #30]
 8002d78:	8bfb      	ldrh	r3, [r7, #30]
 8002d7a:	6a3a      	ldr	r2, [r7, #32]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d8f3      	bhi.n	8002d68 <ili9341_fill_rect+0x78>

  // select target region
  ili9341_spi_tft_set_address_rect(lcd, x, y, (x + w - 1), (y + h - 1));
 8002d80:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d84:	b299      	uxth	r1, r3
 8002d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d8a:	b298      	uxth	r0, r3
 8002d8c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002d94:	4413      	add	r3, r2
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29c      	uxth	r4, r3
 8002d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002da4:	4413      	add	r3, r2
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	4623      	mov	r3, r4
 8002db0:	4602      	mov	r2, r0
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f7ff fd58 	bl	8002868 <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select(lcd);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7ff f9da 	bl	8002172 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6958      	ldr	r0, [r3, #20]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8b1b      	ldrh	r3, [r3, #24]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f003 fab9 	bl	8006340 <HAL_GPIO_WritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 8002dce:	e014      	b.n	8002dfa <ili9341_fill_rect+0x10a>
    curr_wc = rect_wc;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd2:	61bb      	str	r3, [r7, #24]
    if (curr_wc > block_wc)
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d901      	bls.n	8002de0 <ili9341_fill_rect+0xf0>
      { curr_wc = block_wc; }
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	61bb      	str	r3, [r7, #24]
    ili9341_transmit_color(lcd, curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	b299      	uxth	r1, r3
 8002de8:	2301      	movs	r3, #1
 8002dea:	4a09      	ldr	r2, [pc, #36]	@ (8002e10 <ili9341_fill_rect+0x120>)
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7ff fda3 	bl	8002938 <ili9341_transmit_color>
    rect_wc -= curr_wc;
 8002df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (rect_wc > 0) {
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1e7      	bne.n	8002dd0 <ili9341_fill_rect+0xe0>
  }

  ili9341_spi_tft_release(lcd);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff f9c6 	bl	8002192 <ili9341_spi_tft_release>
 8002e06:	e000      	b.n	8002e0a <ili9341_fill_rect+0x11a>
    { return; }
 8002e08:	bf00      	nop
}
 8002e0a:	372c      	adds	r7, #44	@ 0x2c
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd90      	pop	{r4, r7, pc}
 8002e10:	200001f0 	.word	0x200001f0

08002e14 <ili9341_draw_circle>:

void ili9341_draw_circle(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y, int16_t r)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	4608      	mov	r0, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	461a      	mov	r2, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	817b      	strh	r3, [r7, #10]
 8002e26:	460b      	mov	r3, r1
 8002e28:	813b      	strh	r3, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	80fb      	strh	r3, [r7, #6]
  int16_t f = 1 - r;
 8002e2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e30:	f1c3 0301 	rsb	r3, r3, #1
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	83fb      	strh	r3, [r7, #30]
  int16_t fx = 1;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	83bb      	strh	r3, [r7, #28]
  int16_t fy = -2 * r;
 8002e3c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e3e:	461a      	mov	r2, r3
 8002e40:	03d2      	lsls	r2, r2, #15
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	837b      	strh	r3, [r7, #26]
  int16_t ix = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	833b      	strh	r3, [r7, #24]
  int16_t iy = r;
 8002e4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e50:	82fb      	strh	r3, [r7, #22]

  ili9341_draw_pixel(lcd, color, x, y + r);
 8002e52:	88fa      	ldrh	r2, [r7, #6]
 8002e54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e56:	4413      	add	r3, r2
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	b21b      	sxth	r3, r3
 8002e5c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e60:	8979      	ldrh	r1, [r7, #10]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f7ff fd8d 	bl	8002982 <ili9341_draw_pixel>
  ili9341_draw_pixel(lcd, color, x, y - r);
 8002e68:	88fa      	ldrh	r2, [r7, #6]
 8002e6a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e76:	8979      	ldrh	r1, [r7, #10]
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff fd82 	bl	8002982 <ili9341_draw_pixel>
  ili9341_draw_pixel(lcd, color, x + r, y);
 8002e7e:	893a      	ldrh	r2, [r7, #8]
 8002e80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e82:	4413      	add	r3, r2
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	b21a      	sxth	r2, r3
 8002e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e8c:	8979      	ldrh	r1, [r7, #10]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f7ff fd77 	bl	8002982 <ili9341_draw_pixel>
  ili9341_draw_pixel(lcd, color, x - r, y);
 8002e94:	893a      	ldrh	r2, [r7, #8]
 8002e96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	b21a      	sxth	r2, r3
 8002e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ea2:	8979      	ldrh	r1, [r7, #10]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f7ff fd6c 	bl	8002982 <ili9341_draw_pixel>

  while (ix < iy) {
 8002eaa:	e099      	b.n	8002fe0 <ili9341_draw_circle+0x1cc>

    if (f >= 0) {
 8002eac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	db0e      	blt.n	8002ed2 <ili9341_draw_circle+0xbe>
      iy--;
 8002eb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	82fb      	strh	r3, [r7, #22]
      fy += 2;
 8002ec0:	8b7b      	ldrh	r3, [r7, #26]
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	837b      	strh	r3, [r7, #26]
      f += fy;
 8002ec8:	8bfa      	ldrh	r2, [r7, #30]
 8002eca:	8b7b      	ldrh	r3, [r7, #26]
 8002ecc:	4413      	add	r3, r2
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	83fb      	strh	r3, [r7, #30]
    }

    ix++;
 8002ed2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3301      	adds	r3, #1
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	833b      	strh	r3, [r7, #24]
    fx += 2;
 8002ede:	8bbb      	ldrh	r3, [r7, #28]
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	83bb      	strh	r3, [r7, #28]
    f += fx;
 8002ee6:	8bfa      	ldrh	r2, [r7, #30]
 8002ee8:	8bbb      	ldrh	r3, [r7, #28]
 8002eea:	4413      	add	r3, r2
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	83fb      	strh	r3, [r7, #30]

    ili9341_draw_pixel(lcd, color, x + ix, y + iy);
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	8b3b      	ldrh	r3, [r7, #24]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	b218      	sxth	r0, r3
 8002efa:	88fa      	ldrh	r2, [r7, #6]
 8002efc:	8afb      	ldrh	r3, [r7, #22]
 8002efe:	4413      	add	r3, r2
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b21b      	sxth	r3, r3
 8002f04:	8979      	ldrh	r1, [r7, #10]
 8002f06:	4602      	mov	r2, r0
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f7ff fd3a 	bl	8002982 <ili9341_draw_pixel>
    ili9341_draw_pixel(lcd, color, x - ix, y + iy);
 8002f0e:	893a      	ldrh	r2, [r7, #8]
 8002f10:	8b3b      	ldrh	r3, [r7, #24]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	b218      	sxth	r0, r3
 8002f18:	88fa      	ldrh	r2, [r7, #6]
 8002f1a:	8afb      	ldrh	r3, [r7, #22]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	b21b      	sxth	r3, r3
 8002f22:	8979      	ldrh	r1, [r7, #10]
 8002f24:	4602      	mov	r2, r0
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7ff fd2b 	bl	8002982 <ili9341_draw_pixel>
    ili9341_draw_pixel(lcd, color, x + ix, y - iy);
 8002f2c:	893a      	ldrh	r2, [r7, #8]
 8002f2e:	8b3b      	ldrh	r3, [r7, #24]
 8002f30:	4413      	add	r3, r2
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	b218      	sxth	r0, r3
 8002f36:	88fa      	ldrh	r2, [r7, #6]
 8002f38:	8afb      	ldrh	r3, [r7, #22]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	b21b      	sxth	r3, r3
 8002f40:	8979      	ldrh	r1, [r7, #10]
 8002f42:	4602      	mov	r2, r0
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f7ff fd1c 	bl	8002982 <ili9341_draw_pixel>
    ili9341_draw_pixel(lcd, color, x - ix, y - iy);
 8002f4a:	893a      	ldrh	r2, [r7, #8]
 8002f4c:	8b3b      	ldrh	r3, [r7, #24]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	b218      	sxth	r0, r3
 8002f54:	88fa      	ldrh	r2, [r7, #6]
 8002f56:	8afb      	ldrh	r3, [r7, #22]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	b21b      	sxth	r3, r3
 8002f5e:	8979      	ldrh	r1, [r7, #10]
 8002f60:	4602      	mov	r2, r0
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7ff fd0d 	bl	8002982 <ili9341_draw_pixel>
    ili9341_draw_pixel(lcd, color, x + iy, y + ix);
 8002f68:	893a      	ldrh	r2, [r7, #8]
 8002f6a:	8afb      	ldrh	r3, [r7, #22]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	b218      	sxth	r0, r3
 8002f72:	88fa      	ldrh	r2, [r7, #6]
 8002f74:	8b3b      	ldrh	r3, [r7, #24]
 8002f76:	4413      	add	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	b21b      	sxth	r3, r3
 8002f7c:	8979      	ldrh	r1, [r7, #10]
 8002f7e:	4602      	mov	r2, r0
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f7ff fcfe 	bl	8002982 <ili9341_draw_pixel>
    ili9341_draw_pixel(lcd, color, x - iy, y + ix);
 8002f86:	893a      	ldrh	r2, [r7, #8]
 8002f88:	8afb      	ldrh	r3, [r7, #22]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	b218      	sxth	r0, r3
 8002f90:	88fa      	ldrh	r2, [r7, #6]
 8002f92:	8b3b      	ldrh	r3, [r7, #24]
 8002f94:	4413      	add	r3, r2
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	b21b      	sxth	r3, r3
 8002f9a:	8979      	ldrh	r1, [r7, #10]
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7ff fcef 	bl	8002982 <ili9341_draw_pixel>
    ili9341_draw_pixel(lcd, color, x + iy, y - ix);
 8002fa4:	893a      	ldrh	r2, [r7, #8]
 8002fa6:	8afb      	ldrh	r3, [r7, #22]
 8002fa8:	4413      	add	r3, r2
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	b218      	sxth	r0, r3
 8002fae:	88fa      	ldrh	r2, [r7, #6]
 8002fb0:	8b3b      	ldrh	r3, [r7, #24]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	b21b      	sxth	r3, r3
 8002fb8:	8979      	ldrh	r1, [r7, #10]
 8002fba:	4602      	mov	r2, r0
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff fce0 	bl	8002982 <ili9341_draw_pixel>
    ili9341_draw_pixel(lcd, color, x - iy, y - ix);
 8002fc2:	893a      	ldrh	r2, [r7, #8]
 8002fc4:	8afb      	ldrh	r3, [r7, #22]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	b218      	sxth	r0, r3
 8002fcc:	88fa      	ldrh	r2, [r7, #6]
 8002fce:	8b3b      	ldrh	r3, [r7, #24]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	b21b      	sxth	r3, r3
 8002fd6:	8979      	ldrh	r1, [r7, #10]
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7ff fcd1 	bl	8002982 <ili9341_draw_pixel>
  while (ix < iy) {
 8002fe0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002fe4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	f6ff af5f 	blt.w	8002eac <ili9341_draw_circle+0x98>
  }
}
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	3720      	adds	r7, #32
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <ili9341_fill_circle>:

void ili9341_fill_circle(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y, int16_t r)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af04      	add	r7, sp, #16
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	4608      	mov	r0, r1
 8003002:	4611      	mov	r1, r2
 8003004:	461a      	mov	r2, r3
 8003006:	4603      	mov	r3, r0
 8003008:	817b      	strh	r3, [r7, #10]
 800300a:	460b      	mov	r3, r1
 800300c:	813b      	strh	r3, [r7, #8]
 800300e:	4613      	mov	r3, r2
 8003010:	80fb      	strh	r3, [r7, #6]
  ili9341_draw_line(lcd, color, x, y - r, x, (y - r) + (2 * r) + 1);
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	8b3b      	ldrh	r3, [r7, #24]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	b29b      	uxth	r3, r3
 800301a:	b218      	sxth	r0, r3
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	8b3b      	ldrh	r3, [r7, #24]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	b29a      	uxth	r2, r3
 8003024:	8b3b      	ldrh	r3, [r7, #24]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	b29b      	uxth	r3, r3
 800302a:	4413      	add	r3, r2
 800302c:	b29b      	uxth	r3, r3
 800302e:	3301      	adds	r3, #1
 8003030:	b29b      	uxth	r3, r3
 8003032:	b21b      	sxth	r3, r3
 8003034:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003038:	8979      	ldrh	r1, [r7, #10]
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	4603      	mov	r3, r0
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff fcf5 	bl	8002a34 <ili9341_draw_line>
  ili9341_fill_quarter_circle(lcd, color, x, y, r, 3, 0);
 800304a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800304e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003052:	8979      	ldrh	r1, [r7, #10]
 8003054:	2300      	movs	r3, #0
 8003056:	9302      	str	r3, [sp, #8]
 8003058:	2303      	movs	r3, #3
 800305a:	9301      	str	r3, [sp, #4]
 800305c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	4603      	mov	r3, r0
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f9ed 	bl	8003444 <ili9341_fill_quarter_circle>
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <ili9341_fill_screen>:

void ili9341_fill_screen(ili9341_t *lcd, ili9341_color_t color)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af02      	add	r7, sp, #8
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	460b      	mov	r3, r1
 800307c:	807b      	strh	r3, [r7, #2]
  ili9341_fill_rect(lcd, color,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	8b9b      	ldrh	r3, [r3, #28]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	8bd2      	ldrh	r2, [r2, #30]
 8003086:	8879      	ldrh	r1, [r7, #2]
 8003088:	9201      	str	r2, [sp, #4]
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2300      	movs	r3, #0
 800308e:	2200      	movs	r2, #0
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff fe2d 	bl	8002cf0 <ili9341_fill_rect>
      0, 0, lcd->screen_size.width, lcd->screen_size.height);
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <ili9341_draw_char>:
  ili9341_spi_tft_release(lcd);
  ili9341_transmit_wait(lcd);
}

void ili9341_draw_char(ili9341_t *lcd, ili9341_text_attr_t attr, char ch)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b093      	sub	sp, #76	@ 0x4c
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	4638      	mov	r0, r7
 80030aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  // verify we have something within screen dimensions to be drawn
  int16_t  _x = attr.origin_x;
 80030ae:	893b      	ldrh	r3, [r7, #8]
 80030b0:	b21b      	sxth	r3, r3
 80030b2:	837b      	strh	r3, [r7, #26]
  int16_t  _y = attr.origin_y;
 80030b4:	897b      	ldrh	r3, [r7, #10]
 80030b6:	b21b      	sxth	r3, r3
 80030b8:	833b      	strh	r3, [r7, #24]
  uint16_t _w = attr.font->width;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	82fb      	strh	r3, [r7, #22]
  uint16_t _h = attr.font->height;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	785b      	ldrb	r3, [r3, #1]
 80030c4:	82bb      	strh	r3, [r7, #20]
  if (ibNOT(ili9341_clip_rect(lcd, &_x, &_y, &_w, &_h)))
 80030c6:	f107 0016 	add.w	r0, r7, #22
 80030ca:	f107 0218 	add.w	r2, r7, #24
 80030ce:	f107 011a 	add.w	r1, r7, #26
 80030d2:	f107 0314 	add.w	r3, r7, #20
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	4603      	mov	r3, r0
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f913 	bl	8003306 <ili9341_clip_rect>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80bc 	beq.w	8003260 <ili9341_draw_char+0x1c0>
    { return; }

  // 16-bit color, so need 2 bytes for each pixel being filled
  uint32_t num_pixels = attr.font->width * attr.font->height;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	785b      	ldrb	r3, [r3, #1]
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t rect_wc    = num_pixels;
 80030f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint16_t fg_le = __LEu16(&(attr.fg_color));
 80030fc:	463b      	mov	r3, r7
 80030fe:	3304      	adds	r3, #4
 8003100:	3301      	adds	r3, #1
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	b21a      	sxth	r2, r3
 8003106:	463b      	mov	r3, r7
 8003108:	3304      	adds	r3, #4
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	b21b      	sxth	r3, r3
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	b21b      	sxth	r3, r3
 8003112:	4313      	orrs	r3, r2
 8003114:	b21b      	sxth	r3, r3
 8003116:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t bg_le = __LEu16(&(attr.bg_color));
 8003118:	463b      	mov	r3, r7
 800311a:	3306      	adds	r3, #6
 800311c:	3301      	adds	r3, #1
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b21a      	sxth	r2, r3
 8003122:	463b      	mov	r3, r7
 8003124:	3306      	adds	r3, #6
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	b21b      	sxth	r3, r3
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	b21b      	sxth	r3, r3
 800312e:	4313      	orrs	r3, r2
 8003130:	b21b      	sxth	r3, r3
 8003132:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint32_t block_wc = rect_wc;
 8003134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003136:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 8003138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800313a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800313e:	d902      	bls.n	8003146 <ili9341_draw_char+0xa6>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 8003140:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003144:	63bb      	str	r3, [r7, #56]	@ 0x38

  // initialize the buffer with glyph from selected font
  uint8_t ch_index = glyph_index(ch);
 8003146:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fb76 	bl	800283c <glyph_index>
 8003150:	4603      	mov	r3, r0
 8003152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 8003156:	2300      	movs	r3, #0
 8003158:	637b      	str	r3, [r7, #52]	@ 0x34
 800315a:	e03d      	b.n	80031d8 <ili9341_draw_char+0x138>
    uint32_t gl = (uint32_t)attr.font->glyph[ch_index * attr.font->height + yi];
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003162:	6839      	ldr	r1, [r7, #0]
 8003164:	7849      	ldrb	r1, [r1, #1]
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4619      	mov	r1, r3
 800316c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316e:	440b      	add	r3, r1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	885b      	ldrh	r3, [r3, #2]
 8003176:	61fb      	str	r3, [r7, #28]
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 8003178:	2300      	movs	r3, #0
 800317a:	633b      	str	r3, [r7, #48]	@ 0x30
 800317c:	e023      	b.n	80031c6 <ili9341_draw_char+0x126>
      if ((gl << xi) & 0x8000)
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <ili9341_draw_char+0x108>
        { spi_tx_block[yi * attr.font->width + xi] = fg_le; }
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003196:	fb03 f202 	mul.w	r2, r3, r2
 800319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319c:	4413      	add	r3, r2
 800319e:	4932      	ldr	r1, [pc, #200]	@ (8003268 <ili9341_draw_char+0x1c8>)
 80031a0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80031a2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80031a6:	e00b      	b.n	80031c0 <ili9341_draw_char+0x120>
      else
        { spi_tx_block[yi * attr.font->width + xi] = bg_le; }
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b0:	fb03 f202 	mul.w	r2, r3, r2
 80031b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b6:	4413      	add	r3, r2
 80031b8:	492b      	ldr	r1, [pc, #172]	@ (8003268 <ili9341_draw_char+0x1c8>)
 80031ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80031bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 80031c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c2:	3301      	adds	r3, #1
 80031c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d3d5      	bcc.n	800317e <ili9341_draw_char+0xde>
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 80031d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d4:	3301      	adds	r3, #1
 80031d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	785b      	ldrb	r3, [r3, #1]
 80031dc:	461a      	mov	r2, r3
 80031de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d3bb      	bcc.n	800315c <ili9341_draw_char+0xbc>
    }
  }

  // select target region
  ili9341_spi_tft_set_address_rect(lcd,
 80031e4:	8939      	ldrh	r1, [r7, #8]
 80031e6:	8978      	ldrh	r0, [r7, #10]
      attr.origin_x, attr.origin_y,
      attr.origin_x + attr.font->width - 1, attr.origin_y + attr.font->height - 1);
 80031e8:	893b      	ldrh	r3, [r7, #8]
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	7812      	ldrb	r2, [r2, #0]
 80031ee:	4413      	add	r3, r2
 80031f0:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(lcd,
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29c      	uxth	r4, r3
      attr.origin_x + attr.font->width - 1, attr.origin_y + attr.font->height - 1);
 80031f6:	897b      	ldrh	r3, [r7, #10]
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	7852      	ldrb	r2, [r2, #1]
 80031fc:	4413      	add	r3, r2
 80031fe:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(lcd,
 8003200:	3b01      	subs	r3, #1
 8003202:	b29b      	uxth	r3, r3
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	4623      	mov	r3, r4
 8003208:	4602      	mov	r2, r0
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7ff fb2c 	bl	8002868 <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select(lcd);
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f7fe ffae 	bl	8002172 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6958      	ldr	r0, [r3, #20]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8b1b      	ldrh	r3, [r3, #24]
 800321e:	2201      	movs	r2, #1
 8003220:	4619      	mov	r1, r3
 8003222:	f003 f88d 	bl	8006340 <HAL_GPIO_WritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 8003226:	e014      	b.n	8003252 <ili9341_draw_char+0x1b2>
    curr_wc = rect_wc;
 8003228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800322a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (curr_wc > block_wc)
 800322c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800322e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003230:	429a      	cmp	r2, r3
 8003232:	d901      	bls.n	8003238 <ili9341_draw_char+0x198>
      { curr_wc = block_wc; }
 8003234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ili9341_transmit_color(lcd, curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 8003238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323a:	b29b      	uxth	r3, r3
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	b299      	uxth	r1, r3
 8003240:	2301      	movs	r3, #1
 8003242:	4a09      	ldr	r2, [pc, #36]	@ (8003268 <ili9341_draw_char+0x1c8>)
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7ff fb77 	bl	8002938 <ili9341_transmit_color>
    rect_wc -= curr_wc;
 800324a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800324c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while (rect_wc > 0) {
 8003252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e7      	bne.n	8003228 <ili9341_draw_char+0x188>
  }

  ili9341_spi_tft_release(lcd);
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7fe ff9a 	bl	8002192 <ili9341_spi_tft_release>
 800325e:	e000      	b.n	8003262 <ili9341_draw_char+0x1c2>
    { return; }
 8003260:	bf00      	nop
}
 8003262:	3744      	adds	r7, #68	@ 0x44
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}
 8003268:	200001f0 	.word	0x200001f0

0800326c <ili9341_draw_string>:

void ili9341_draw_string(ili9341_t *lcd, ili9341_text_attr_t attr, char str[])
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	4638      	mov	r0, r7
 8003276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  int16_t curr_x = attr.origin_x;
 800327a:	893b      	ldrh	r3, [r7, #8]
 800327c:	82fb      	strh	r3, [r7, #22]
  int16_t curr_y = attr.origin_y;
 800327e:	897b      	ldrh	r3, [r7, #10]
 8003280:	82bb      	strh	r3, [r7, #20]
  int16_t start_x = attr.origin_x;
 8003282:	893b      	ldrh	r3, [r7, #8]
 8003284:	827b      	strh	r3, [r7, #18]

  while ('\0' != *str) {
 8003286:	e036      	b.n	80032f6 <ili9341_draw_string+0x8a>
    if('\r' == *str)
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b0d      	cmp	r3, #13
 800328e:	d102      	bne.n	8003296 <ili9341_draw_string+0x2a>
    {
      curr_x = start_x;
 8003290:	8a7b      	ldrh	r3, [r7, #18]
 8003292:	82fb      	strh	r3, [r7, #22]
 8003294:	e02c      	b.n	80032f0 <ili9341_draw_string+0x84>
    }
    else if('\n' == *str)
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b0a      	cmp	r3, #10
 800329c:	d109      	bne.n	80032b2 <ili9341_draw_string+0x46>
    {
      curr_y += attr.font->height;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	785b      	ldrb	r3, [r3, #1]
 80032a2:	461a      	mov	r2, r3
 80032a4:	8abb      	ldrh	r3, [r7, #20]
 80032a6:	4413      	add	r3, r2
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	82bb      	strh	r3, [r7, #20]
      curr_x = start_x;
 80032ac:	8a7b      	ldrh	r3, [r7, #18]
 80032ae:	82fb      	strh	r3, [r7, #22]
 80032b0:	e01e      	b.n	80032f0 <ili9341_draw_string+0x84>
    }
    else
    {
      if ( (curr_x > lcd->screen_size.width) ||
 80032b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	8b92      	ldrh	r2, [r2, #28]
 80032ba:	4293      	cmp	r3, r2
 80032bc:	dc1f      	bgt.n	80032fe <ili9341_draw_string+0x92>
          (curr_y > lcd->screen_size.height) )
 80032be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	8bd2      	ldrh	r2, [r2, #30]
      if ( (curr_x > lcd->screen_size.width) ||
 80032c6:	4293      	cmp	r3, r2
 80032c8:	dc19      	bgt.n	80032fe <ili9341_draw_string+0x92>
        { break; }

      attr.origin_x = curr_x;
 80032ca:	8afb      	ldrh	r3, [r7, #22]
 80032cc:	813b      	strh	r3, [r7, #8]
      attr.origin_y = curr_y;
 80032ce:	8abb      	ldrh	r3, [r7, #20]
 80032d0:	817b      	strh	r3, [r7, #10]

      ili9341_draw_char(lcd, attr, *str);
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	463b      	mov	r3, r7
 80032da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f7ff fedf 	bl	80030a0 <ili9341_draw_char>

      curr_x += attr.font->width;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	8afb      	ldrh	r3, [r7, #22]
 80032ea:	4413      	add	r3, r2
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	82fb      	strh	r3, [r7, #22]
    }
    ++str;
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	3301      	adds	r3, #1
 80032f4:	623b      	str	r3, [r7, #32]
  while ('\0' != *str) {
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1c4      	bne.n	8003288 <ili9341_draw_string+0x1c>
  }
}
 80032fe:	bf00      	nop
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <ili9341_clip_rect>:

// ------------------------------------------------------- private functions --

static ili9341_bool_t ili9341_clip_rect(ili9341_t *lcd,
    int16_t *x, int16_t *y, uint16_t *w, uint16_t *h)
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	603b      	str	r3, [r7, #0]
  // must have an origin to do anything
  if ((NULL == x) || (NULL == y))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <ili9341_clip_rect+0x1a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <ili9341_clip_rect+0x1e>
    { return ibFalse; }
 8003320:	2300      	movs	r3, #0
 8003322:	e089      	b.n	8003438 <ili9341_clip_rect+0x132>

  //  1. rect origin beyond screen dimensions, nothing to draw
  if ((*x >= lcd->screen_size.width) || (*y >= lcd->screen_size.height))
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800332a:	461a      	mov	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8b9b      	ldrh	r3, [r3, #28]
 8003330:	429a      	cmp	r2, r3
 8003332:	da07      	bge.n	8003344 <ili9341_clip_rect+0x3e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8bdb      	ldrh	r3, [r3, #30]
 8003340:	429a      	cmp	r2, r3
 8003342:	db01      	blt.n	8003348 <ili9341_clip_rect+0x42>
    { return ibFalse; }
 8003344:	2300      	movs	r3, #0
 8003346:	e077      	b.n	8003438 <ili9341_clip_rect+0x132>

  //  2. rect width or height is 0, nothing to draw
  if ((NULL != w) && (NULL != h)) {
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00c      	beq.n	8003368 <ili9341_clip_rect+0x62>
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d009      	beq.n	8003368 <ili9341_clip_rect+0x62>
    if ((0U == *w) || (0U == *h))
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <ili9341_clip_rect+0x5e>
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <ili9341_clip_rect+0x62>
      { return ibFalse; }
 8003364:	2300      	movs	r3, #0
 8003366:	e067      	b.n	8003438 <ili9341_clip_rect+0x132>
  }

  // 3. rect origin has negative component, adjust origin and dimensions
  if (*x < 0) {
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800336e:	2b00      	cmp	r3, #0
 8003370:	da0f      	bge.n	8003392 <ili9341_clip_rect+0x8c>
    if (NULL != w)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d009      	beq.n	800338c <ili9341_clip_rect+0x86>
      { *w -= *x; }
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	881a      	ldrh	r2, [r3, #0]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003382:	b29b      	uxth	r3, r3
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	b29a      	uxth	r2, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	801a      	strh	r2, [r3, #0]
    *x = 0;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2200      	movs	r2, #0
 8003390:	801a      	strh	r2, [r3, #0]
  }
  if (*y < 0) {
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003398:	2b00      	cmp	r3, #0
 800339a:	da0f      	bge.n	80033bc <ili9341_clip_rect+0xb6>
    if (NULL != h)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d009      	beq.n	80033b6 <ili9341_clip_rect+0xb0>
      { *h -= *y; }
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	881a      	ldrh	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	801a      	strh	r2, [r3, #0]
    *y = 0;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	801a      	strh	r2, [r3, #0]
  }

  if ((NULL != w) && (NULL != h)) {
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d039      	beq.n	8003436 <ili9341_clip_rect+0x130>
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d036      	beq.n	8003436 <ili9341_clip_rect+0x130>

    //  4. rect width beyond screen width, reduce rect width
    if ((*x + *w - 1) >= lcd->screen_size.width)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ce:	461a      	mov	r2, r3
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	4413      	add	r3, r2
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	8b92      	ldrh	r2, [r2, #28]
 80033da:	4293      	cmp	r3, r2
 80033dc:	dd09      	ble.n	80033f2 <ili9341_clip_rect+0xec>
      { *w = lcd->screen_size.width - *x; }
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8b9a      	ldrh	r2, [r3, #28]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	801a      	strh	r2, [r3, #0]

    //  5. rect height beyond screen height, reduce rect height
    if ((*y + *h - 1) >= lcd->screen_size.height)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033f8:	461a      	mov	r2, r3
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	4413      	add	r3, r2
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	8bd2      	ldrh	r2, [r2, #30]
 8003404:	4293      	cmp	r3, r2
 8003406:	dd09      	ble.n	800341c <ili9341_clip_rect+0x116>
      { *h = lcd->screen_size.height - *y; }
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8bda      	ldrh	r2, [r3, #30]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003412:	b29b      	uxth	r3, r3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	b29a      	uxth	r2, r3
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	801a      	strh	r2, [r3, #0]

    return (*w > 0U) && (*h > 0U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <ili9341_clip_rect+0x12a>
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <ili9341_clip_rect+0x12a>
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <ili9341_clip_rect+0x12c>
 8003430:	2300      	movs	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	e000      	b.n	8003438 <ili9341_clip_rect+0x132>
  }

  return ibTrue;
 8003436:	2301      	movs	r3, #1
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <ili9341_fill_quarter_circle>:

static void ili9341_fill_quarter_circle(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y, int16_t r, uint8_t corners, int16_t delta)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	@ 0x30
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	461a      	mov	r2, r3
 8003452:	4603      	mov	r3, r0
 8003454:	817b      	strh	r3, [r7, #10]
 8003456:	460b      	mov	r3, r1
 8003458:	813b      	strh	r3, [r7, #8]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]
  int16_t f = 1 - r;
 800345e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003460:	f1c3 0301 	rsb	r3, r3, #1
 8003464:	b29b      	uxth	r3, r3
 8003466:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t fx = 1;
 8003468:	2301      	movs	r3, #1
 800346a:	84bb      	strh	r3, [r7, #36]	@ 0x24
  int16_t fy = -2 * r;
 800346c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800346e:	461a      	mov	r2, r3
 8003470:	03d2      	lsls	r2, r2, #15
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	b29b      	uxth	r3, r3
 8003478:	847b      	strh	r3, [r7, #34]	@ 0x22
  int16_t ix = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	843b      	strh	r3, [r7, #32]
  int16_t iy = r;
 800347e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003480:	83fb      	strh	r3, [r7, #30]
  int16_t px = ix;
 8003482:	8c3b      	ldrh	r3, [r7, #32]
 8003484:	83bb      	strh	r3, [r7, #28]
  int16_t py = iy;
 8003486:	8bfb      	ldrh	r3, [r7, #30]
 8003488:	837b      	strh	r3, [r7, #26]
  int16_t tx;
  int16_t ty;

  delta += 1;
 800348a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800348c:	3301      	adds	r3, #1
 800348e:	b29b      	uxth	r3, r3
 8003490:	873b      	strh	r3, [r7, #56]	@ 0x38

  while (ix < iy) {
 8003492:	e0cd      	b.n	8003630 <ili9341_fill_quarter_circle+0x1ec>

    if (f >= 0) {
 8003494:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003498:	2b00      	cmp	r3, #0
 800349a:	db0e      	blt.n	80034ba <ili9341_fill_quarter_circle+0x76>
      iy--;
 800349c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	83fb      	strh	r3, [r7, #30]
      fy += 2;
 80034a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80034aa:	3302      	adds	r3, #2
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	847b      	strh	r3, [r7, #34]	@ 0x22
      f += fy;
 80034b0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80034b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80034b4:	4413      	add	r3, r2
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    ix++;
 80034ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3301      	adds	r3, #1
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	843b      	strh	r3, [r7, #32]
    fx += 2;
 80034c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80034c8:	3302      	adds	r3, #2
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
    f += fx;
 80034ce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80034d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80034d2:	4413      	add	r3, r2
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	84fb      	strh	r3, [r7, #38]	@ 0x26


    if (ix < (iy + 1)) {
 80034d8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80034dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	db4d      	blt.n	8003580 <ili9341_fill_quarter_circle+0x13c>
      if (corners & 1) {
 80034e4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <ili9341_fill_quarter_circle+0xee>
        tx = x + ix;
 80034f0:	893a      	ldrh	r2, [r7, #8]
 80034f2:	8c3b      	ldrh	r3, [r7, #32]
 80034f4:	4413      	add	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	833b      	strh	r3, [r7, #24]
        ty = y - iy;
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	8bfb      	ldrh	r3, [r7, #30]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	b29b      	uxth	r3, r3
 8003502:	82fb      	strh	r3, [r7, #22]
        ili9341_draw_line(lcd, color, tx, ty, tx, ty + 2 * iy + delta);
 8003504:	8bfb      	ldrh	r3, [r7, #30]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	8afb      	ldrh	r3, [r7, #22]
 800350c:	4413      	add	r3, r2
 800350e:	b29a      	uxth	r2, r3
 8003510:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003512:	4413      	add	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	b21b      	sxth	r3, r3
 8003518:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 800351c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003520:	8979      	ldrh	r1, [r7, #10]
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	4603      	mov	r3, r0
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff fa81 	bl	8002a34 <ili9341_draw_line>
      }
      if (corners & 2) {
 8003532:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d020      	beq.n	8003580 <ili9341_fill_quarter_circle+0x13c>
        tx = x - ix;
 800353e:	893a      	ldrh	r2, [r7, #8]
 8003540:	8c3b      	ldrh	r3, [r7, #32]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	b29b      	uxth	r3, r3
 8003546:	833b      	strh	r3, [r7, #24]
        ty = y - iy;
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	8bfb      	ldrh	r3, [r7, #30]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	b29b      	uxth	r3, r3
 8003550:	82fb      	strh	r3, [r7, #22]
        ili9341_draw_line(lcd, color, tx, ty, tx, ty + 2 * iy + delta);
 8003552:	8bfb      	ldrh	r3, [r7, #30]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	8afb      	ldrh	r3, [r7, #22]
 800355a:	4413      	add	r3, r2
 800355c:	b29a      	uxth	r2, r3
 800355e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003560:	4413      	add	r3, r2
 8003562:	b29b      	uxth	r3, r3
 8003564:	b21b      	sxth	r3, r3
 8003566:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 800356a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800356e:	8979      	ldrh	r1, [r7, #10]
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	4603      	mov	r3, r0
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f7ff fa5a 	bl	8002a34 <ili9341_draw_line>
      }
    }

    if (iy != py) {
 8003580:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003584:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003588:	429a      	cmp	r2, r3
 800358a:	d04f      	beq.n	800362c <ili9341_fill_quarter_circle+0x1e8>
      if (corners & 1) {
 800358c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d020      	beq.n	80035da <ili9341_fill_quarter_circle+0x196>
        tx = x + py;
 8003598:	893a      	ldrh	r2, [r7, #8]
 800359a:	8b7b      	ldrh	r3, [r7, #26]
 800359c:	4413      	add	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	833b      	strh	r3, [r7, #24]
        ty = y - px;
 80035a2:	88fa      	ldrh	r2, [r7, #6]
 80035a4:	8bbb      	ldrh	r3, [r7, #28]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	82fb      	strh	r3, [r7, #22]
        ili9341_draw_line(lcd, color, tx, ty, tx, ty + 2 * px + delta);
 80035ac:	8bbb      	ldrh	r3, [r7, #28]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	8afb      	ldrh	r3, [r7, #22]
 80035b4:	4413      	add	r3, r2
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80035ba:	4413      	add	r3, r2
 80035bc:	b29b      	uxth	r3, r3
 80035be:	b21b      	sxth	r3, r3
 80035c0:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80035c4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80035c8:	8979      	ldrh	r1, [r7, #10]
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	4603      	mov	r3, r0
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f7ff fa2d 	bl	8002a34 <ili9341_draw_line>
      }
      if (corners & 2) {
 80035da:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d020      	beq.n	8003628 <ili9341_fill_quarter_circle+0x1e4>
        tx = x - py;
 80035e6:	893a      	ldrh	r2, [r7, #8]
 80035e8:	8b7b      	ldrh	r3, [r7, #26]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	833b      	strh	r3, [r7, #24]
        ty = y - px;
 80035f0:	88fa      	ldrh	r2, [r7, #6]
 80035f2:	8bbb      	ldrh	r3, [r7, #28]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	82fb      	strh	r3, [r7, #22]
        ili9341_draw_line(lcd, color, tx, ty, tx, ty + 2 * px + delta);
 80035fa:	8bbb      	ldrh	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	8afb      	ldrh	r3, [r7, #22]
 8003602:	4413      	add	r3, r2
 8003604:	b29a      	uxth	r2, r3
 8003606:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003608:	4413      	add	r3, r2
 800360a:	b29b      	uxth	r3, r3
 800360c:	b21b      	sxth	r3, r3
 800360e:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8003612:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003616:	8979      	ldrh	r1, [r7, #10]
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	4603      	mov	r3, r0
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f7ff fa06 	bl	8002a34 <ili9341_draw_line>
      }
      py = iy;
 8003628:	8bfb      	ldrh	r3, [r7, #30]
 800362a:	837b      	strh	r3, [r7, #26]
    }

    px = ix;
 800362c:	8c3b      	ldrh	r3, [r7, #32]
 800362e:	83bb      	strh	r3, [r7, #28]
  while (ix < iy) {
 8003630:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003634:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003638:	429a      	cmp	r2, r3
 800363a:	f6ff af2b 	blt.w	8003494 <ili9341_fill_quarter_circle+0x50>
  }
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	3728      	adds	r7, #40	@ 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <_ZN7ELE33124tile7idColorENS_8tileTypeE>:
	uint16_t x; // horizontal position
	uint16_t y; // vertical position
	tileType id; // corresponding tile to display

	// method to match an id to a color
	Color idColor(tileType id){
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]

		Color color = Color::BLACK;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]

		switch (id){
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d81c      	bhi.n	8003696 <_ZN7ELE33124tile7idColorENS_8tileTypeE+0x4e>
 800365c:	a201      	add	r2, pc, #4	@ (adr r2, 8003664 <_ZN7ELE33124tile7idColorENS_8tileTypeE+0x1c>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003679 	.word	0x08003679
 8003668:	0800367f 	.word	0x0800367f
 800366c:	08003685 	.word	0x08003685
 8003670:	0800368b 	.word	0x0800368b
 8003674:	08003691 	.word	0x08003691
			case tileType::BACKGROUND: color = Color::BLACK; break;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	e00b      	b.n	8003696 <_ZN7ELE33124tile7idColorENS_8tileTypeE+0x4e>
			case tileType::SNAKE_HEAD: color = Color::YELLOW;break;
 800367e:	230e      	movs	r3, #14
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e008      	b.n	8003696 <_ZN7ELE33124tile7idColorENS_8tileTypeE+0x4e>
			case tileType::SNAKE_BODY: color = Color::GREEN; break;
 8003684:	230a      	movs	r3, #10
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e005      	b.n	8003696 <_ZN7ELE33124tile7idColorENS_8tileTypeE+0x4e>
			case tileType::FRUIT_1: color = Color::RED; break;
 800368a:	230c      	movs	r3, #12
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	e002      	b.n	8003696 <_ZN7ELE33124tile7idColorENS_8tileTypeE+0x4e>
			case tileType::FRUIT_2: color = Color::CYAN; break;
 8003690:	230b      	movs	r3, #11
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	bf00      	nop
		}

		return color;
 8003696:	68fb      	ldr	r3, [r7, #12]
	};
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_ZN7ELE33124tile4dispERNS_14ILI9341DisplayE>:

	// method to display a single tile
	void disp(ILI9341Display& display){
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
		display.fillRect( this->idColor(this->id) , this->x , this->y , tileWidth , tileHeight );
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3318      	adds	r3, #24
 80036b4:	681c      	ldr	r4, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ffc3 	bl	8003648 <_ZN7ELE33124tile7idColorENS_8tileTypeE>
 80036c2:	4601      	mov	r1, r0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	881a      	ldrh	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	885b      	ldrh	r3, [r3, #2]
 80036cc:	200a      	movs	r0, #10
 80036ce:	9001      	str	r0, [sp, #4]
 80036d0:	200a      	movs	r0, #10
 80036d2:	9000      	str	r0, [sp, #0]
 80036d4:	6838      	ldr	r0, [r7, #0]
 80036d6:	47a0      	blx	r4
	}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd90      	pop	{r4, r7, pc}

080036e0 <_Z15generate_fruitsRN7ELE331214ILI9341DisplayEPNS_4tileE>:

using namespace ELE3312;


// generating random fruits and displaying them on the screen
void generate_fruits(ILI9341Display& display, tile fruits[]){
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]

std::srand(std::time(nullptr)); // seed with current time
 80036ea:	2000      	movs	r0, #0
 80036ec:	f00a fb2e 	bl	800dd4c <time>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4613      	mov	r3, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f009 fd28 	bl	800d14c <srand>
int randomNumber = std::rand() % 100 + 1; // range [1, 100]
 80036fc:	f009 fd54 	bl	800d1a8 <rand>
 8003700:	4602      	mov	r2, r0
 8003702:	4b3b      	ldr	r3, [pc, #236]	@ (80037f0 <_Z15generate_fruitsRN7ELE331214ILI9341DisplayEPNS_4tileE+0x110>)
 8003704:	fb83 1302 	smull	r1, r3, r3, r2
 8003708:	1159      	asrs	r1, r3, #5
 800370a:	17d3      	asrs	r3, r2, #31
 800370c:	1acb      	subs	r3, r1, r3
 800370e:	2164      	movs	r1, #100	@ 0x64
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	3301      	adds	r3, #1
 8003718:	61bb      	str	r3, [r7, #24]

int x{0};
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
int y{0};
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
int color{0};
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]

for(uint16_t i = 0; i < randomNumber; i++){
 8003726:	2300      	movs	r3, #0
 8003728:	83fb      	strh	r3, [r7, #30]
 800372a:	e057      	b.n	80037dc <_Z15generate_fruitsRN7ELE331214ILI9341DisplayEPNS_4tileE+0xfc>

	x = std::rand() % 24; // range [0,23]
 800372c:	f009 fd3c 	bl	800d1a8 <rand>
 8003730:	4602      	mov	r2, r0
 8003732:	4b30      	ldr	r3, [pc, #192]	@ (80037f4 <_Z15generate_fruitsRN7ELE331214ILI9341DisplayEPNS_4tileE+0x114>)
 8003734:	fb83 1302 	smull	r1, r3, r3, r2
 8003738:	1099      	asrs	r1, r3, #2
 800373a:	17d3      	asrs	r3, r2, #31
 800373c:	1ac9      	subs	r1, r1, r3
 800373e:	460b      	mov	r3, r1
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	440b      	add	r3, r1
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	617b      	str	r3, [r7, #20]
	y = std::rand() % 32; // range [0,31]
 800374a:	f009 fd2d 	bl	800d1a8 <rand>
 800374e:	4603      	mov	r3, r0
 8003750:	425a      	negs	r2, r3
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	f002 021f 	and.w	r2, r2, #31
 800375a:	bf58      	it	pl
 800375c:	4253      	negpl	r3, r2
 800375e:	613b      	str	r3, [r7, #16]

	color = std::rand() % 2;
 8003760:	f009 fd22 	bl	800d1a8 <rand>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	bfb8      	it	lt
 800376e:	425b      	neglt	r3, r3
 8003770:	60fb      	str	r3, [r7, #12]

	fruits[i].x = x*10;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	b299      	uxth	r1, r3
 8003776:	8bfb      	ldrh	r3, [r7, #30]
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	4413      	add	r3, r2
 800377e:	460a      	mov	r2, r1
 8003780:	4611      	mov	r1, r2
 8003782:	0089      	lsls	r1, r1, #2
 8003784:	440a      	add	r2, r1
 8003786:	0052      	lsls	r2, r2, #1
 8003788:	b292      	uxth	r2, r2
 800378a:	801a      	strh	r2, [r3, #0]
	fruits[i].y = y*10;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	b299      	uxth	r1, r3
 8003790:	8bfb      	ldrh	r3, [r7, #30]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	4413      	add	r3, r2
 8003798:	460a      	mov	r2, r1
 800379a:	4611      	mov	r1, r2
 800379c:	0089      	lsls	r1, r1, #2
 800379e:	440a      	add	r2, r1
 80037a0:	0052      	lsls	r2, r2, #1
 80037a2:	b292      	uxth	r2, r2
 80037a4:	805a      	strh	r2, [r3, #2]

	if(color == 0)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d106      	bne.n	80037ba <_Z15generate_fruitsRN7ELE331214ILI9341DisplayEPNS_4tileE+0xda>
		fruits[i].id = tileType::FRUIT_1;
 80037ac:	8bfb      	ldrh	r3, [r7, #30]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	4413      	add	r3, r2
 80037b4:	2203      	movs	r2, #3
 80037b6:	605a      	str	r2, [r3, #4]
 80037b8:	e005      	b.n	80037c6 <_Z15generate_fruitsRN7ELE331214ILI9341DisplayEPNS_4tileE+0xe6>
	else
		fruits[i].id = tileType::FRUIT_2;
 80037ba:	8bfb      	ldrh	r3, [r7, #30]
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	4413      	add	r3, r2
 80037c2:	2204      	movs	r2, #4
 80037c4:	605a      	str	r2, [r3, #4]

	fruits[i].disp(display);
 80037c6:	8bfb      	ldrh	r3, [r7, #30]
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	4413      	add	r3, r2
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff ff67 	bl	80036a4 <_ZN7ELE33124tile4dispERNS_14ILI9341DisplayE>
for(uint16_t i = 0; i < randomNumber; i++){
 80037d6:	8bfb      	ldrh	r3, [r7, #30]
 80037d8:	3301      	adds	r3, #1
 80037da:	83fb      	strh	r3, [r7, #30]
 80037dc:	8bfb      	ldrh	r3, [r7, #30]
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	dca3      	bgt.n	800372c <_Z15generate_fruitsRN7ELE331214ILI9341DisplayEPNS_4tileE+0x4c>

}
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	51eb851f 	.word	0x51eb851f
 80037f4:	2aaaaaab 	.word	0x2aaaaaab

080037f8 <_Z14generate_snakeRN7ELE331214ILI9341DisplayEPNS_4tileE>:

void generate_snake(ILI9341Display& display, tile snake[]){
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]

	std::srand(std::time(nullptr)); // seed with current time
 8003802:	2000      	movs	r0, #0
 8003804:	f00a faa2 	bl	800dd4c <time>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4613      	mov	r3, r2
 800380e:	4618      	mov	r0, r3
 8003810:	f009 fc9c 	bl	800d14c <srand>
	int randomNumber = std::rand() % 100 + 1; // range [1, 100]
 8003814:	f009 fcc8 	bl	800d1a8 <rand>
 8003818:	4602      	mov	r2, r0
 800381a:	4b57      	ldr	r3, [pc, #348]	@ (8003978 <_Z14generate_snakeRN7ELE331214ILI9341DisplayEPNS_4tileE+0x180>)
 800381c:	fb83 1302 	smull	r1, r3, r3, r2
 8003820:	1159      	asrs	r1, r3, #5
 8003822:	17d3      	asrs	r3, r2, #31
 8003824:	1acb      	subs	r3, r1, r3
 8003826:	2164      	movs	r1, #100	@ 0x64
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	3301      	adds	r3, #1
 8003830:	61bb      	str	r3, [r7, #24]

	int x{0};
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
	int y{0};
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
	int direction{0}; //  represents the cardinal directions: north, east, west, south
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]

	snake[0].id = tileType::SNAKE_HEAD; // display the first tile as the snake head
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2201      	movs	r2, #1
 8003842:	605a      	str	r2, [r3, #4]

	x = std::rand() % 24; // range [0, 23]
 8003844:	f009 fcb0 	bl	800d1a8 <rand>
 8003848:	4602      	mov	r2, r0
 800384a:	4b4c      	ldr	r3, [pc, #304]	@ (800397c <_Z14generate_snakeRN7ELE331214ILI9341DisplayEPNS_4tileE+0x184>)
 800384c:	fb83 1302 	smull	r1, r3, r3, r2
 8003850:	1099      	asrs	r1, r3, #2
 8003852:	17d3      	asrs	r3, r2, #31
 8003854:	1ac9      	subs	r1, r1, r3
 8003856:	460b      	mov	r3, r1
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	440b      	add	r3, r1
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	617b      	str	r3, [r7, #20]
	y = std::rand() % 32; // range [0, 31]
 8003862:	f009 fca1 	bl	800d1a8 <rand>
 8003866:	4603      	mov	r3, r0
 8003868:	425a      	negs	r2, r3
 800386a:	f003 031f 	and.w	r3, r3, #31
 800386e:	f002 021f 	and.w	r2, r2, #31
 8003872:	bf58      	it	pl
 8003874:	4253      	negpl	r3, r2
 8003876:	613b      	str	r3, [r7, #16]

	snake[0].x = x*10; // normalizing coordinates to fit in 24x32 tile grid
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	b29b      	uxth	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	0092      	lsls	r2, r2, #2
 8003880:	4413      	add	r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	801a      	strh	r2, [r3, #0]
	snake[0].y = y*10;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	b29b      	uxth	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	0092      	lsls	r2, r2, #2
 8003892:	4413      	add	r3, r2
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	805a      	strh	r2, [r3, #2]

	snake[0].disp(display); // display the snake head
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	6838      	ldr	r0, [r7, #0]
 80038a0:	f7ff ff00 	bl	80036a4 <_ZN7ELE33124tile4dispERNS_14ILI9341DisplayE>

	for(uint16_t i = 1; i < randomNumber; i++){
 80038a4:	2301      	movs	r3, #1
 80038a6:	83fb      	strh	r3, [r7, #30]
 80038a8:	e05d      	b.n	8003966 <_Z14generate_snakeRN7ELE331214ILI9341DisplayEPNS_4tileE+0x16e>

		direction = std::rand() % 2; // range [0, 2]
 80038aa:	f009 fc7d 	bl	800d1a8 <rand>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	bfb8      	it	lt
 80038b8:	425b      	neglt	r3, r3
 80038ba:	60fb      	str	r3, [r7, #12]

		snake[i] = snake[i-1];
 80038bc:	8bfb      	ldrh	r3, [r7, #30]
 80038be:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80038c2:	3b01      	subs	r3, #1
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	18d1      	adds	r1, r2, r3
 80038ca:	8bfb      	ldrh	r3, [r7, #30]
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	4413      	add	r3, r2
 80038d2:	460a      	mov	r2, r1
 80038d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038d8:	e883 0003 	stmia.w	r3, {r0, r1}
		snake[i].id = tileType::SNAKE_BODY;
 80038dc:	8bfb      	ldrh	r3, [r7, #30]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	4413      	add	r3, r2
 80038e4:	2202      	movs	r2, #2
 80038e6:	605a      	str	r2, [r3, #4]

		switch(direction){ // adding the direction to the next snake body part
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d023      	beq.n	8003936 <_Z14generate_snakeRN7ELE331214ILI9341DisplayEPNS_4tileE+0x13e>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	dc2d      	bgt.n	8003950 <_Z14generate_snakeRN7ELE331214ILI9341DisplayEPNS_4tileE+0x158>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <_Z14generate_snakeRN7ELE331214ILI9341DisplayEPNS_4tileE+0x10a>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d00d      	beq.n	800391c <_Z14generate_snakeRN7ELE331214ILI9341DisplayEPNS_4tileE+0x124>
 8003900:	e026      	b.n	8003950 <_Z14generate_snakeRN7ELE331214ILI9341DisplayEPNS_4tileE+0x158>
		case 0: snake[i].x = snake[i].x + 10; break;
 8003902:	8bfb      	ldrh	r3, [r7, #30]
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	4413      	add	r3, r2
 800390a:	881a      	ldrh	r2, [r3, #0]
 800390c:	8bfb      	ldrh	r3, [r7, #30]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	440b      	add	r3, r1
 8003914:	320a      	adds	r2, #10
 8003916:	b292      	uxth	r2, r2
 8003918:	801a      	strh	r2, [r3, #0]
 800391a:	e019      	b.n	8003950 <_Z14generate_snakeRN7ELE331214ILI9341DisplayEPNS_4tileE+0x158>
		case 1: snake[i].y = snake[i].y + 10; break;
 800391c:	8bfb      	ldrh	r3, [r7, #30]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	4413      	add	r3, r2
 8003924:	885a      	ldrh	r2, [r3, #2]
 8003926:	8bfb      	ldrh	r3, [r7, #30]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	6839      	ldr	r1, [r7, #0]
 800392c:	440b      	add	r3, r1
 800392e:	320a      	adds	r2, #10
 8003930:	b292      	uxth	r2, r2
 8003932:	805a      	strh	r2, [r3, #2]
 8003934:	e00c      	b.n	8003950 <_Z14generate_snakeRN7ELE331214ILI9341DisplayEPNS_4tileE+0x158>
		case 2: snake[i].y = snake[i].y - 10; break;
 8003936:	8bfb      	ldrh	r3, [r7, #30]
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	4413      	add	r3, r2
 800393e:	885a      	ldrh	r2, [r3, #2]
 8003940:	8bfb      	ldrh	r3, [r7, #30]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	6839      	ldr	r1, [r7, #0]
 8003946:	440b      	add	r3, r1
 8003948:	3a0a      	subs	r2, #10
 800394a:	b292      	uxth	r2, r2
 800394c:	805a      	strh	r2, [r3, #2]
 800394e:	bf00      	nop

		}

		snake[i].disp(display); // display the element in a table
 8003950:	8bfb      	ldrh	r3, [r7, #30]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	4413      	add	r3, r2
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fea2 	bl	80036a4 <_ZN7ELE33124tile4dispERNS_14ILI9341DisplayE>
	for(uint16_t i = 1; i < randomNumber; i++){
 8003960:	8bfb      	ldrh	r3, [r7, #30]
 8003962:	3301      	adds	r3, #1
 8003964:	83fb      	strh	r3, [r7, #30]
 8003966:	8bfb      	ldrh	r3, [r7, #30]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	429a      	cmp	r2, r3
 800396c:	dc9d      	bgt.n	80038aa <_Z14generate_snakeRN7ELE331214ILI9341DisplayEPNS_4tileE+0xb2>

	}


}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	3720      	adds	r7, #32
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	51eb851f 	.word	0x51eb851f
 800397c:	2aaaaaab 	.word	0x2aaaaaab

08003980 <cpp_main>:


/** @brief main function of the game.
  * @param [in] handles A pointer to a structure with peripheral handles from the HAL.
  */
 void cpp_main(peripheral_handles *handles) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

	 display.setup(handles->hspi_tft);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4619      	mov	r1, r3
 800398e:	4808      	ldr	r0, [pc, #32]	@ (80039b0 <cpp_main+0x30>)
 8003990:	f7fd fca4 	bl	80012dc <_ZN7ELE331214ILI9341Display5setupEP19__SPI_HandleTypeDef>
	 display.clearScreen();
 8003994:	4806      	ldr	r0, [pc, #24]	@ (80039b0 <cpp_main+0x30>)
 8003996:	f7fd fccd 	bl	8001334 <_ZN7ELE331214ILI9341Display11clearScreenEv>
	 generate_fruits(display, fruits); // generate and display fruits
 800399a:	4906      	ldr	r1, [pc, #24]	@ (80039b4 <cpp_main+0x34>)
 800399c:	4804      	ldr	r0, [pc, #16]	@ (80039b0 <cpp_main+0x30>)
 800399e:	f7ff fe9f 	bl	80036e0 <_Z15generate_fruitsRN7ELE331214ILI9341DisplayEPNS_4tileE>
	 generate_snake(display, snake); // generate and display snake
 80039a2:	4905      	ldr	r1, [pc, #20]	@ (80039b8 <cpp_main+0x38>)
 80039a4:	4802      	ldr	r0, [pc, #8]	@ (80039b0 <cpp_main+0x30>)
 80039a6:	f7ff ff27 	bl	80037f8 <_Z14generate_snakeRN7ELE331214ILI9341DisplayEPNS_4tileE>
	 while(1) {
 80039aa:	bf00      	nop
 80039ac:	e7fd      	b.n	80039aa <cpp_main+0x2a>
 80039ae:	bf00      	nop
 80039b0:	200009f0 	.word	0x200009f0
 80039b4:	20000a00 	.word	0x20000a00
 80039b8:	20000d20 	.word	0x20000d20

080039bc <_Z41__static_initialization_and_destruction_0v>:
		 //Your infinite CPP loop
	 }
}
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
ILI9341Display display;
 80039c0:	4802      	ldr	r0, [pc, #8]	@ (80039cc <_Z41__static_initialization_and_destruction_0v+0x10>)
 80039c2:	f7fd fc49 	bl	8001258 <_ZN7ELE331214ILI9341DisplayC1Ev>
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	200009f0 	.word	0x200009f0

080039d0 <_Z41__static_initialization_and_destruction_1v>:
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
ILI9341Display display;
 80039d4:	4802      	ldr	r0, [pc, #8]	@ (80039e0 <_Z41__static_initialization_and_destruction_1v+0x10>)
 80039d6:	f7fd fc57 	bl	8001288 <_ZN7ELE331214ILI9341DisplayD1Ev>
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	200009f0 	.word	0x200009f0

080039e4 <_GLOBAL__sub_I__Z15generate_fruitsRN7ELE331214ILI9341DisplayEPNS_4tileE>:
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	f7ff ffe8 	bl	80039bc <_Z41__static_initialization_and_destruction_0v>
 80039ec:	bd80      	pop	{r7, pc}

080039ee <_GLOBAL__sub_D__Z15generate_fruitsRN7ELE331214ILI9341DisplayEPNS_4tileE>:
 80039ee:	b580      	push	{r7, lr}
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	f7ff ffed 	bl	80039d0 <_Z41__static_initialization_and_destruction_1v>
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b08a      	sub	sp, #40	@ 0x28
 80039fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039fe:	f001 fa5f 	bl	8004ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a02:	f000 f82b 	bl	8003a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a06:	f000 fbed 	bl	80041e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a0a:	f000 fb9d 	bl	8004148 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003a0e:	f000 fb71 	bl	80040f4 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8003a12:	f000 f8e3 	bl	8003bdc <MX_DAC_Init>
  MX_TIM6_Init();
 8003a16:	f000 fb0d 	bl	8004034 <MX_TIM6_Init>
  MX_TIM2_Init();
 8003a1a:	f000 fa25 	bl	8003e68 <MX_TIM2_Init>
  MX_TIM4_Init();
 8003a1e:	f000 fabd 	bl	8003f9c <MX_TIM4_Init>
  MX_SPI1_Init();
 8003a22:	f000 f933 	bl	8003c8c <MX_SPI1_Init>
  MX_UART5_Init();
 8003a26:	f000 fb3b 	bl	80040a0 <MX_UART5_Init>
  MX_I2C3_Init();
 8003a2a:	f000 f901 	bl	8003c30 <MX_I2C3_Init>
  MX_ADC1_Init();
 8003a2e:	f000 f883 	bl	8003b38 <MX_ADC1_Init>
  MX_TIM1_Init();
 8003a32:	f000 f961 	bl	8003cf8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  peripheral_handles handles = {
 8003a36:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <main+0x60>)
 8003a38:	463c      	mov	r4, r7
 8003a3a:	461d      	mov	r5, r3
 8003a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003a48:	e884 0003 	stmia.w	r4, {r0, r1}
  	  .hadc = &hadc1,
  	  .gpio_keypad = GPIOC
    };

  // Run CPP main
  cpp_main(&handles);
 8003a4c:	463b      	mov	r3, r7
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff ff96 	bl	8003980 <cpp_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003a54:	bf00      	nop
 8003a56:	e7fd      	b.n	8003a54 <main+0x5c>
 8003a58:	0800fa74 	.word	0x0800fa74

08003a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b094      	sub	sp, #80	@ 0x50
 8003a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a62:	f107 031c 	add.w	r3, r7, #28
 8003a66:	2234      	movs	r2, #52	@ 0x34
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f00a f935 	bl	800dcda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a70:	f107 0308 	add.w	r3, r7, #8
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a80:	2300      	movs	r3, #0
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	4b2a      	ldr	r3, [pc, #168]	@ (8003b30 <SystemClock_Config+0xd4>)
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	4a29      	ldr	r2, [pc, #164]	@ (8003b30 <SystemClock_Config+0xd4>)
 8003a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a90:	4b27      	ldr	r3, [pc, #156]	@ (8003b30 <SystemClock_Config+0xd4>)
 8003a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a98:	607b      	str	r3, [r7, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	4b24      	ldr	r3, [pc, #144]	@ (8003b34 <SystemClock_Config+0xd8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003aa8:	4a22      	ldr	r2, [pc, #136]	@ (8003b34 <SystemClock_Config+0xd8>)
 8003aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b20      	ldr	r3, [pc, #128]	@ (8003b34 <SystemClock_Config+0xd8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003abc:	2302      	movs	r3, #2
 8003abe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003acc:	2300      	movs	r3, #0
 8003ace:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003ad4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003ad8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003ada:	2304      	movs	r3, #4
 8003adc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ae6:	f107 031c 	add.w	r3, r7, #28
 8003aea:	4618      	mov	r0, r3
 8003aec:	f004 fdde 	bl	80086ac <HAL_RCC_OscConfig>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003af6:	f000 fc23 	bl	8004340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003afa:	230f      	movs	r3, #15
 8003afc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003afe:	2302      	movs	r3, #2
 8003b00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b02:	2300      	movs	r3, #0
 8003b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b10:	f107 0308 	add.w	r3, r7, #8
 8003b14:	2102      	movs	r1, #2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f004 fa7e 	bl	8008018 <HAL_RCC_ClockConfig>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003b22:	f000 fc0d 	bl	8004340 <Error_Handler>
  }
}
 8003b26:	bf00      	nop
 8003b28:	3750      	adds	r7, #80	@ 0x50
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40023800 	.word	0x40023800
 8003b34:	40007000 	.word	0x40007000

08003b38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b3e:	463b      	mov	r3, r7
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003b4a:	4b21      	ldr	r3, [pc, #132]	@ (8003bd0 <MX_ADC1_Init+0x98>)
 8003b4c:	4a21      	ldr	r2, [pc, #132]	@ (8003bd4 <MX_ADC1_Init+0x9c>)
 8003b4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003b50:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd0 <MX_ADC1_Init+0x98>)
 8003b52:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b58:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd0 <MX_ADC1_Init+0x98>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd0 <MX_ADC1_Init+0x98>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003b64:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd0 <MX_ADC1_Init+0x98>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b6a:	4b19      	ldr	r3, [pc, #100]	@ (8003bd0 <MX_ADC1_Init+0x98>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b72:	4b17      	ldr	r3, [pc, #92]	@ (8003bd0 <MX_ADC1_Init+0x98>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b78:	4b15      	ldr	r3, [pc, #84]	@ (8003bd0 <MX_ADC1_Init+0x98>)
 8003b7a:	4a17      	ldr	r2, [pc, #92]	@ (8003bd8 <MX_ADC1_Init+0xa0>)
 8003b7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b7e:	4b14      	ldr	r3, [pc, #80]	@ (8003bd0 <MX_ADC1_Init+0x98>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003b84:	4b12      	ldr	r3, [pc, #72]	@ (8003bd0 <MX_ADC1_Init+0x98>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003b8a:	4b11      	ldr	r3, [pc, #68]	@ (8003bd0 <MX_ADC1_Init+0x98>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b92:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd0 <MX_ADC1_Init+0x98>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b98:	480d      	ldr	r0, [pc, #52]	@ (8003bd0 <MX_ADC1_Init+0x98>)
 8003b9a:	f001 fa27 	bl	8004fec <HAL_ADC_Init>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003ba4:	f000 fbcc 	bl	8004340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003ba8:	2308      	movs	r3, #8
 8003baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003bac:	2301      	movs	r3, #1
 8003bae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4805      	ldr	r0, [pc, #20]	@ (8003bd0 <MX_ADC1_Init+0x98>)
 8003bba:	f001 fa5b 	bl	8005074 <HAL_ADC_ConfigChannel>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003bc4:	f000 fbbc 	bl	8004340 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003bc8:	bf00      	nop
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20001040 	.word	0x20001040
 8003bd4:	40012000 	.word	0x40012000
 8003bd8:	0f000001 	.word	0x0f000001

08003bdc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003be2:	463b      	mov	r3, r7
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003bea:	4b0f      	ldr	r3, [pc, #60]	@ (8003c28 <MX_DAC_Init+0x4c>)
 8003bec:	4a0f      	ldr	r2, [pc, #60]	@ (8003c2c <MX_DAC_Init+0x50>)
 8003bee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003bf0:	480d      	ldr	r0, [pc, #52]	@ (8003c28 <MX_DAC_Init+0x4c>)
 8003bf2:	f001 fd85 	bl	8005700 <HAL_DAC_Init>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003bfc:	f000 fba0 	bl	8004340 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8003c00:	232c      	movs	r3, #44	@ 0x2c
 8003c02:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003c08:	463b      	mov	r3, r7
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4806      	ldr	r0, [pc, #24]	@ (8003c28 <MX_DAC_Init+0x4c>)
 8003c10:	f001 fd98 	bl	8005744 <HAL_DAC_ConfigChannel>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003c1a:	f000 fb91 	bl	8004340 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20001088 	.word	0x20001088
 8003c2c:	40007400 	.word	0x40007400

08003c30 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003c34:	4b12      	ldr	r3, [pc, #72]	@ (8003c80 <MX_I2C3_Init+0x50>)
 8003c36:	4a13      	ldr	r2, [pc, #76]	@ (8003c84 <MX_I2C3_Init+0x54>)
 8003c38:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003c3a:	4b11      	ldr	r3, [pc, #68]	@ (8003c80 <MX_I2C3_Init+0x50>)
 8003c3c:	4a12      	ldr	r2, [pc, #72]	@ (8003c88 <MX_I2C3_Init+0x58>)
 8003c3e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c40:	4b0f      	ldr	r3, [pc, #60]	@ (8003c80 <MX_I2C3_Init+0x50>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003c46:	4b0e      	ldr	r3, [pc, #56]	@ (8003c80 <MX_I2C3_Init+0x50>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c80 <MX_I2C3_Init+0x50>)
 8003c4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c52:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c54:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <MX_I2C3_Init+0x50>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003c5a:	4b09      	ldr	r3, [pc, #36]	@ (8003c80 <MX_I2C3_Init+0x50>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c60:	4b07      	ldr	r3, [pc, #28]	@ (8003c80 <MX_I2C3_Init+0x50>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c66:	4b06      	ldr	r3, [pc, #24]	@ (8003c80 <MX_I2C3_Init+0x50>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003c6c:	4804      	ldr	r0, [pc, #16]	@ (8003c80 <MX_I2C3_Init+0x50>)
 8003c6e:	f002 fb81 	bl	8006374 <HAL_I2C_Init>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003c78:	f000 fb62 	bl	8004340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003c7c:	bf00      	nop
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	200010fc 	.word	0x200010fc
 8003c84:	40005c00 	.word	0x40005c00
 8003c88:	000186a0 	.word	0x000186a0

08003c8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003c90:	4b17      	ldr	r3, [pc, #92]	@ (8003cf0 <MX_SPI1_Init+0x64>)
 8003c92:	4a18      	ldr	r2, [pc, #96]	@ (8003cf4 <MX_SPI1_Init+0x68>)
 8003c94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c96:	4b16      	ldr	r3, [pc, #88]	@ (8003cf0 <MX_SPI1_Init+0x64>)
 8003c98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003c9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c9e:	4b14      	ldr	r3, [pc, #80]	@ (8003cf0 <MX_SPI1_Init+0x64>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ca4:	4b12      	ldr	r3, [pc, #72]	@ (8003cf0 <MX_SPI1_Init+0x64>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003caa:	4b11      	ldr	r3, [pc, #68]	@ (8003cf0 <MX_SPI1_Init+0x64>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf0 <MX_SPI1_Init+0x64>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf0 <MX_SPI1_Init+0x64>)
 8003cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf0 <MX_SPI1_Init+0x64>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf0 <MX_SPI1_Init+0x64>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cca:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <MX_SPI1_Init+0x64>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd0:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <MX_SPI1_Init+0x64>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cd6:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <MX_SPI1_Init+0x64>)
 8003cd8:	220a      	movs	r2, #10
 8003cda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003cdc:	4804      	ldr	r0, [pc, #16]	@ (8003cf0 <MX_SPI1_Init+0x64>)
 8003cde:	f004 ff83 	bl	8008be8 <HAL_SPI_Init>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003ce8:	f000 fb2a 	bl	8004340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003cec:	bf00      	nop
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20001150 	.word	0x20001150
 8003cf4:	40013000 	.word	0x40013000

08003cf8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b096      	sub	sp, #88	@ 0x58
 8003cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cfe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	609a      	str	r2, [r3, #8]
 8003d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d0c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	605a      	str	r2, [r3, #4]
 8003d20:	609a      	str	r2, [r3, #8]
 8003d22:	60da      	str	r2, [r3, #12]
 8003d24:	611a      	str	r2, [r3, #16]
 8003d26:	615a      	str	r2, [r3, #20]
 8003d28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d2a:	1d3b      	adds	r3, r7, #4
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f009 ffd2 	bl	800dcda <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d36:	4b4a      	ldr	r3, [pc, #296]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003d38:	4a4a      	ldr	r2, [pc, #296]	@ (8003e64 <MX_TIM1_Init+0x16c>)
 8003d3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003d3c:	4b48      	ldr	r3, [pc, #288]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d42:	4b47      	ldr	r3, [pc, #284]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003d48:	4b45      	ldr	r3, [pc, #276]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003d4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d50:	4b43      	ldr	r3, [pc, #268]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d56:	4b42      	ldr	r3, [pc, #264]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d5c:	4b40      	ldr	r3, [pc, #256]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003d5e:	2280      	movs	r2, #128	@ 0x80
 8003d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003d62:	483f      	ldr	r0, [pc, #252]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003d64:	f005 ff78 	bl	8009c58 <HAL_TIM_Base_Init>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003d6e:	f000 fae7 	bl	8004340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d76:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003d78:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4838      	ldr	r0, [pc, #224]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003d80:	f006 faba 	bl	800a2f8 <HAL_TIM_ConfigClockSource>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003d8a:	f000 fad9 	bl	8004340 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003d8e:	4834      	ldr	r0, [pc, #208]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003d90:	f005 ffb1 	bl	8009cf6 <HAL_TIM_PWM_Init>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003d9a:	f000 fad1 	bl	8004340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003da2:	2300      	movs	r3, #0
 8003da4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003da6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003daa:	4619      	mov	r1, r3
 8003dac:	482c      	ldr	r0, [pc, #176]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003dae:	f006 ffb7 	bl	800ad20 <HAL_TIMEx_MasterConfigSynchronization>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003db8:	f000 fac2 	bl	8004340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dbc:	2360      	movs	r3, #96	@ 0x60
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ddc:	2204      	movs	r2, #4
 8003dde:	4619      	mov	r1, r3
 8003de0:	481f      	ldr	r0, [pc, #124]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003de2:	f006 f9c7 	bl	800a174 <HAL_TIM_PWM_ConfigChannel>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003dec:	f000 faa8 	bl	8004340 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003df4:	2208      	movs	r2, #8
 8003df6:	4619      	mov	r1, r3
 8003df8:	4819      	ldr	r0, [pc, #100]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003dfa:	f006 f9bb 	bl	800a174 <HAL_TIM_PWM_ConfigChannel>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003e04:	f000 fa9c 	bl	8004340 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e0c:	220c      	movs	r2, #12
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4813      	ldr	r0, [pc, #76]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003e12:	f006 f9af 	bl	800a174 <HAL_TIM_PWM_ConfigChannel>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003e1c:	f000 fa90 	bl	8004340 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e3e:	1d3b      	adds	r3, r7, #4
 8003e40:	4619      	mov	r1, r3
 8003e42:	4807      	ldr	r0, [pc, #28]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003e44:	f006 ffe8 	bl	800ae18 <HAL_TIMEx_ConfigBreakDeadTime>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8003e4e:	f000 fa77 	bl	8004340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003e52:	4803      	ldr	r0, [pc, #12]	@ (8003e60 <MX_TIM1_Init+0x168>)
 8003e54:	f000 fd20 	bl	8004898 <HAL_TIM_MspPostInit>

}
 8003e58:	bf00      	nop
 8003e5a:	3758      	adds	r7, #88	@ 0x58
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20001268 	.word	0x20001268
 8003e64:	40010000 	.word	0x40010000

08003e68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b092      	sub	sp, #72	@ 0x48
 8003e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e6e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	605a      	str	r2, [r3, #4]
 8003e78:	609a      	str	r2, [r3, #8]
 8003e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003e86:	f107 0320 	add.w	r3, r7, #32
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	605a      	str	r2, [r3, #4]
 8003e90:	609a      	str	r2, [r3, #8]
 8003e92:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e94:	1d3b      	adds	r3, r7, #4
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	605a      	str	r2, [r3, #4]
 8003e9c:	609a      	str	r2, [r3, #8]
 8003e9e:	60da      	str	r2, [r3, #12]
 8003ea0:	611a      	str	r2, [r3, #16]
 8003ea2:	615a      	str	r2, [r3, #20]
 8003ea4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8003f94 <MX_TIM2_Init+0x12c>)
 8003ea8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003eac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8003eae:	4b39      	ldr	r3, [pc, #228]	@ (8003f94 <MX_TIM2_Init+0x12c>)
 8003eb0:	2253      	movs	r2, #83	@ 0x53
 8003eb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb4:	4b37      	ldr	r3, [pc, #220]	@ (8003f94 <MX_TIM2_Init+0x12c>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199999;
 8003eba:	4b36      	ldr	r3, [pc, #216]	@ (8003f94 <MX_TIM2_Init+0x12c>)
 8003ebc:	4a36      	ldr	r2, [pc, #216]	@ (8003f98 <MX_TIM2_Init+0x130>)
 8003ebe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ec0:	4b34      	ldr	r3, [pc, #208]	@ (8003f94 <MX_TIM2_Init+0x12c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ec6:	4b33      	ldr	r3, [pc, #204]	@ (8003f94 <MX_TIM2_Init+0x12c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ecc:	4831      	ldr	r0, [pc, #196]	@ (8003f94 <MX_TIM2_Init+0x12c>)
 8003ece:	f005 fec3 	bl	8009c58 <HAL_TIM_Base_Init>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003ed8:	f000 fa32 	bl	8004340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ee2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	482a      	ldr	r0, [pc, #168]	@ (8003f94 <MX_TIM2_Init+0x12c>)
 8003eea:	f006 fa05 	bl	800a2f8 <HAL_TIM_ConfigClockSource>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003ef4:	f000 fa24 	bl	8004340 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003ef8:	4826      	ldr	r0, [pc, #152]	@ (8003f94 <MX_TIM2_Init+0x12c>)
 8003efa:	f005 ff55 	bl	8009da8 <HAL_TIM_IC_Init>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003f04:	f000 fa1c 	bl	8004340 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003f08:	4822      	ldr	r0, [pc, #136]	@ (8003f94 <MX_TIM2_Init+0x12c>)
 8003f0a:	f005 fef4 	bl	8009cf6 <HAL_TIM_PWM_Init>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8003f14:	f000 fa14 	bl	8004340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	633b      	str	r3, [r7, #48]	@ 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f20:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003f24:	4619      	mov	r1, r3
 8003f26:	481b      	ldr	r0, [pc, #108]	@ (8003f94 <MX_TIM2_Init+0x12c>)
 8003f28:	f006 fefa 	bl	800ad20 <HAL_TIMEx_MasterConfigSynchronization>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8003f32:	f000 fa05 	bl	8004340 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003f36:	230a      	movs	r3, #10
 8003f38:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigIC.ICFilter = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003f46:	f107 0320 	add.w	r3, r7, #32
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4811      	ldr	r0, [pc, #68]	@ (8003f94 <MX_TIM2_Init+0x12c>)
 8003f50:	f006 f873 	bl	800a03a <HAL_TIM_IC_ConfigChannel>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8003f5a:	f000 f9f1 	bl	8004340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f5e:	2360      	movs	r3, #96	@ 0x60
 8003f60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8003f62:	230a      	movs	r3, #10
 8003f64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f6e:	1d3b      	adds	r3, r7, #4
 8003f70:	2204      	movs	r2, #4
 8003f72:	4619      	mov	r1, r3
 8003f74:	4807      	ldr	r0, [pc, #28]	@ (8003f94 <MX_TIM2_Init+0x12c>)
 8003f76:	f006 f8fd 	bl	800a174 <HAL_TIM_PWM_ConfigChannel>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8003f80:	f000 f9de 	bl	8004340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003f84:	4803      	ldr	r0, [pc, #12]	@ (8003f94 <MX_TIM2_Init+0x12c>)
 8003f86:	f000 fc87 	bl	8004898 <HAL_TIM_MspPostInit>

}
 8003f8a:	bf00      	nop
 8003f8c:	3748      	adds	r7, #72	@ 0x48
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	200012b0 	.word	0x200012b0
 8003f98:	00030d3f 	.word	0x00030d3f

08003f9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fa2:	f107 0308 	add.w	r3, r7, #8
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	605a      	str	r2, [r3, #4]
 8003fac:	609a      	str	r2, [r3, #8]
 8003fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fb0:	463b      	mov	r3, r7
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800402c <MX_TIM4_Init+0x90>)
 8003fba:	4a1d      	ldr	r2, [pc, #116]	@ (8004030 <MX_TIM4_Init+0x94>)
 8003fbc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8003fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800402c <MX_TIM4_Init+0x90>)
 8003fc0:	2253      	movs	r2, #83	@ 0x53
 8003fc2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc4:	4b19      	ldr	r3, [pc, #100]	@ (800402c <MX_TIM4_Init+0x90>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24;
 8003fca:	4b18      	ldr	r3, [pc, #96]	@ (800402c <MX_TIM4_Init+0x90>)
 8003fcc:	2218      	movs	r2, #24
 8003fce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fd0:	4b16      	ldr	r3, [pc, #88]	@ (800402c <MX_TIM4_Init+0x90>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fd6:	4b15      	ldr	r3, [pc, #84]	@ (800402c <MX_TIM4_Init+0x90>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003fdc:	4813      	ldr	r0, [pc, #76]	@ (800402c <MX_TIM4_Init+0x90>)
 8003fde:	f005 fe3b 	bl	8009c58 <HAL_TIM_Base_Init>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8003fe8:	f000 f9aa 	bl	8004340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003ff2:	f107 0308 	add.w	r3, r7, #8
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	480c      	ldr	r0, [pc, #48]	@ (800402c <MX_TIM4_Init+0x90>)
 8003ffa:	f006 f97d 	bl	800a2f8 <HAL_TIM_ConfigClockSource>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8004004:	f000 f99c 	bl	8004340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004008:	2320      	movs	r3, #32
 800400a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800400c:	2300      	movs	r3, #0
 800400e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004010:	463b      	mov	r3, r7
 8004012:	4619      	mov	r1, r3
 8004014:	4805      	ldr	r0, [pc, #20]	@ (800402c <MX_TIM4_Init+0x90>)
 8004016:	f006 fe83 	bl	800ad20 <HAL_TIMEx_MasterConfigSynchronization>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8004020:	f000 f98e 	bl	8004340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004024:	bf00      	nop
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	200012f8 	.word	0x200012f8
 8004030:	40000800 	.word	0x40000800

08004034 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800403a:	463b      	mov	r3, r7
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004042:	4b15      	ldr	r3, [pc, #84]	@ (8004098 <MX_TIM6_Init+0x64>)
 8004044:	4a15      	ldr	r2, [pc, #84]	@ (800409c <MX_TIM6_Init+0x68>)
 8004046:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8004048:	4b13      	ldr	r3, [pc, #76]	@ (8004098 <MX_TIM6_Init+0x64>)
 800404a:	2200      	movs	r2, #0
 800404c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800404e:	4b12      	ldr	r3, [pc, #72]	@ (8004098 <MX_TIM6_Init+0x64>)
 8004050:	2200      	movs	r2, #0
 8004052:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8004054:	4b10      	ldr	r3, [pc, #64]	@ (8004098 <MX_TIM6_Init+0x64>)
 8004056:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800405a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800405c:	4b0e      	ldr	r3, [pc, #56]	@ (8004098 <MX_TIM6_Init+0x64>)
 800405e:	2200      	movs	r2, #0
 8004060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004062:	480d      	ldr	r0, [pc, #52]	@ (8004098 <MX_TIM6_Init+0x64>)
 8004064:	f005 fdf8 	bl	8009c58 <HAL_TIM_Base_Init>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800406e:	f000 f967 	bl	8004340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004072:	2300      	movs	r3, #0
 8004074:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004076:	2300      	movs	r3, #0
 8004078:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800407a:	463b      	mov	r3, r7
 800407c:	4619      	mov	r1, r3
 800407e:	4806      	ldr	r0, [pc, #24]	@ (8004098 <MX_TIM6_Init+0x64>)
 8004080:	f006 fe4e 	bl	800ad20 <HAL_TIMEx_MasterConfigSynchronization>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800408a:	f000 f959 	bl	8004340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20001340 	.word	0x20001340
 800409c:	40001000 	.word	0x40001000

080040a0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80040a4:	4b11      	ldr	r3, [pc, #68]	@ (80040ec <MX_UART5_Init+0x4c>)
 80040a6:	4a12      	ldr	r2, [pc, #72]	@ (80040f0 <MX_UART5_Init+0x50>)
 80040a8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80040aa:	4b10      	ldr	r3, [pc, #64]	@ (80040ec <MX_UART5_Init+0x4c>)
 80040ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80040b0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80040b2:	4b0e      	ldr	r3, [pc, #56]	@ (80040ec <MX_UART5_Init+0x4c>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80040b8:	4b0c      	ldr	r3, [pc, #48]	@ (80040ec <MX_UART5_Init+0x4c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80040be:	4b0b      	ldr	r3, [pc, #44]	@ (80040ec <MX_UART5_Init+0x4c>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80040c4:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <MX_UART5_Init+0x4c>)
 80040c6:	220c      	movs	r2, #12
 80040c8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ca:	4b08      	ldr	r3, [pc, #32]	@ (80040ec <MX_UART5_Init+0x4c>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80040d0:	4b06      	ldr	r3, [pc, #24]	@ (80040ec <MX_UART5_Init+0x4c>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80040d6:	4805      	ldr	r0, [pc, #20]	@ (80040ec <MX_UART5_Init+0x4c>)
 80040d8:	f006 ff04 	bl	800aee4 <HAL_UART_Init>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80040e2:	f000 f92d 	bl	8004340 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20001388 	.word	0x20001388
 80040f0:	40005000 	.word	0x40005000

080040f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040f8:	4b11      	ldr	r3, [pc, #68]	@ (8004140 <MX_USART2_UART_Init+0x4c>)
 80040fa:	4a12      	ldr	r2, [pc, #72]	@ (8004144 <MX_USART2_UART_Init+0x50>)
 80040fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80040fe:	4b10      	ldr	r3, [pc, #64]	@ (8004140 <MX_USART2_UART_Init+0x4c>)
 8004100:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004104:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004106:	4b0e      	ldr	r3, [pc, #56]	@ (8004140 <MX_USART2_UART_Init+0x4c>)
 8004108:	2200      	movs	r2, #0
 800410a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800410c:	4b0c      	ldr	r3, [pc, #48]	@ (8004140 <MX_USART2_UART_Init+0x4c>)
 800410e:	2200      	movs	r2, #0
 8004110:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004112:	4b0b      	ldr	r3, [pc, #44]	@ (8004140 <MX_USART2_UART_Init+0x4c>)
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004118:	4b09      	ldr	r3, [pc, #36]	@ (8004140 <MX_USART2_UART_Init+0x4c>)
 800411a:	220c      	movs	r2, #12
 800411c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800411e:	4b08      	ldr	r3, [pc, #32]	@ (8004140 <MX_USART2_UART_Init+0x4c>)
 8004120:	2200      	movs	r2, #0
 8004122:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004124:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <MX_USART2_UART_Init+0x4c>)
 8004126:	2200      	movs	r2, #0
 8004128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800412a:	4805      	ldr	r0, [pc, #20]	@ (8004140 <MX_USART2_UART_Init+0x4c>)
 800412c:	f006 feda 	bl	800aee4 <HAL_UART_Init>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004136:	f000 f903 	bl	8004340 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	200013d0 	.word	0x200013d0
 8004144:	40004400 	.word	0x40004400

08004148 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	607b      	str	r3, [r7, #4]
 8004152:	4b23      	ldr	r3, [pc, #140]	@ (80041e0 <MX_DMA_Init+0x98>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	4a22      	ldr	r2, [pc, #136]	@ (80041e0 <MX_DMA_Init+0x98>)
 8004158:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800415c:	6313      	str	r3, [r2, #48]	@ 0x30
 800415e:	4b20      	ldr	r3, [pc, #128]	@ (80041e0 <MX_DMA_Init+0x98>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004166:	607b      	str	r3, [r7, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	4b1c      	ldr	r3, [pc, #112]	@ (80041e0 <MX_DMA_Init+0x98>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	4a1b      	ldr	r2, [pc, #108]	@ (80041e0 <MX_DMA_Init+0x98>)
 8004174:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004178:	6313      	str	r3, [r2, #48]	@ 0x30
 800417a:	4b19      	ldr	r3, [pc, #100]	@ (80041e0 <MX_DMA_Init+0x98>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004186:	2200      	movs	r2, #0
 8004188:	2100      	movs	r1, #0
 800418a:	200b      	movs	r0, #11
 800418c:	f001 fa7b 	bl	8005686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004190:	200b      	movs	r0, #11
 8004192:	f001 fa94 	bl	80056be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004196:	2200      	movs	r2, #0
 8004198:	2100      	movs	r1, #0
 800419a:	2010      	movs	r0, #16
 800419c:	f001 fa73 	bl	8005686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80041a0:	2010      	movs	r0, #16
 80041a2:	f001 fa8c 	bl	80056be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80041a6:	2200      	movs	r2, #0
 80041a8:	2100      	movs	r1, #0
 80041aa:	202f      	movs	r0, #47	@ 0x2f
 80041ac:	f001 fa6b 	bl	8005686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80041b0:	202f      	movs	r0, #47	@ 0x2f
 80041b2:	f001 fa84 	bl	80056be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80041b6:	2200      	movs	r2, #0
 80041b8:	2100      	movs	r1, #0
 80041ba:	2038      	movs	r0, #56	@ 0x38
 80041bc:	f001 fa63 	bl	8005686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80041c0:	2038      	movs	r0, #56	@ 0x38
 80041c2:	f001 fa7c 	bl	80056be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80041c6:	2200      	movs	r2, #0
 80041c8:	2100      	movs	r1, #0
 80041ca:	203b      	movs	r0, #59	@ 0x3b
 80041cc:	f001 fa5b 	bl	8005686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80041d0:	203b      	movs	r0, #59	@ 0x3b
 80041d2:	f001 fa74 	bl	80056be <HAL_NVIC_EnableIRQ>

}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40023800 	.word	0x40023800

080041e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	@ 0x28
 80041e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ea:	f107 0314 	add.w	r3, r7, #20
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	609a      	str	r2, [r3, #8]
 80041f6:	60da      	str	r2, [r3, #12]
 80041f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004334 <MX_GPIO_Init+0x150>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004202:	4a4c      	ldr	r2, [pc, #304]	@ (8004334 <MX_GPIO_Init+0x150>)
 8004204:	f043 0304 	orr.w	r3, r3, #4
 8004208:	6313      	str	r3, [r2, #48]	@ 0x30
 800420a:	4b4a      	ldr	r3, [pc, #296]	@ (8004334 <MX_GPIO_Init+0x150>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	4b46      	ldr	r3, [pc, #280]	@ (8004334 <MX_GPIO_Init+0x150>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	4a45      	ldr	r2, [pc, #276]	@ (8004334 <MX_GPIO_Init+0x150>)
 8004220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004224:	6313      	str	r3, [r2, #48]	@ 0x30
 8004226:	4b43      	ldr	r3, [pc, #268]	@ (8004334 <MX_GPIO_Init+0x150>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	4b3f      	ldr	r3, [pc, #252]	@ (8004334 <MX_GPIO_Init+0x150>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423a:	4a3e      	ldr	r2, [pc, #248]	@ (8004334 <MX_GPIO_Init+0x150>)
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	6313      	str	r3, [r2, #48]	@ 0x30
 8004242:	4b3c      	ldr	r3, [pc, #240]	@ (8004334 <MX_GPIO_Init+0x150>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	607b      	str	r3, [r7, #4]
 8004252:	4b38      	ldr	r3, [pc, #224]	@ (8004334 <MX_GPIO_Init+0x150>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004256:	4a37      	ldr	r2, [pc, #220]	@ (8004334 <MX_GPIO_Init+0x150>)
 8004258:	f043 0302 	orr.w	r3, r3, #2
 800425c:	6313      	str	r3, [r2, #48]	@ 0x30
 800425e:	4b35      	ldr	r3, [pc, #212]	@ (8004334 <MX_GPIO_Init+0x150>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	603b      	str	r3, [r7, #0]
 800426e:	4b31      	ldr	r3, [pc, #196]	@ (8004334 <MX_GPIO_Init+0x150>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004272:	4a30      	ldr	r2, [pc, #192]	@ (8004334 <MX_GPIO_Init+0x150>)
 8004274:	f043 0308 	orr.w	r3, r3, #8
 8004278:	6313      	str	r3, [r2, #48]	@ 0x30
 800427a:	4b2e      	ldr	r3, [pc, #184]	@ (8004334 <MX_GPIO_Init+0x150>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW1_Pin|ROW2_Pin|ROW3_Pin|TFT_DC_Pin
 8004286:	2200      	movs	r2, #0
 8004288:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800428c:	482a      	ldr	r0, [pc, #168]	@ (8004338 <MX_GPIO_Init+0x154>)
 800428e:	f002 f857 	bl	8006340 <HAL_GPIO_WritePin>
                          |ROW4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Void_Display_Reset_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8004292:	2200      	movs	r2, #0
 8004294:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8004298:	4828      	ldr	r0, [pc, #160]	@ (800433c <MX_GPIO_Init+0x158>)
 800429a:	f002 f851 	bl	8006340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800429e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80042a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80042a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80042ae:	f107 0314 	add.w	r3, r7, #20
 80042b2:	4619      	mov	r1, r3
 80042b4:	4820      	ldr	r0, [pc, #128]	@ (8004338 <MX_GPIO_Init+0x154>)
 80042b6:	f001 feaf 	bl	8006018 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin;
 80042ba:	230f      	movs	r3, #15
 80042bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042be:	2300      	movs	r3, #0
 80042c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042c2:	2301      	movs	r3, #1
 80042c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042c6:	f107 0314 	add.w	r3, r7, #20
 80042ca:	4619      	mov	r1, r3
 80042cc:	481a      	ldr	r0, [pc, #104]	@ (8004338 <MX_GPIO_Init+0x154>)
 80042ce:	f001 fea3 	bl	8006018 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin;
 80042d2:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80042d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80042d8:	2311      	movs	r3, #17
 80042da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e0:	2300      	movs	r3, #0
 80042e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	4619      	mov	r1, r3
 80042ea:	4813      	ldr	r0, [pc, #76]	@ (8004338 <MX_GPIO_Init+0x154>)
 80042ec:	f001 fe94 	bl	8006018 <HAL_GPIO_Init>

  /*Configure GPIO pins : Void_Display_Reset_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = Void_Display_Reset_Pin|TFT_CS_Pin;
 80042f0:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80042f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042f6:	2301      	movs	r3, #1
 80042f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fe:	2300      	movs	r3, #0
 8004300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004302:	f107 0314 	add.w	r3, r7, #20
 8004306:	4619      	mov	r1, r3
 8004308:	480c      	ldr	r0, [pc, #48]	@ (800433c <MX_GPIO_Init+0x158>)
 800430a:	f001 fe85 	bl	8006018 <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin;
 800430e:	2380      	movs	r3, #128	@ 0x80
 8004310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004312:	2301      	movs	r3, #1
 8004314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431a:	2300      	movs	r3, #0
 800431c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_DC_GPIO_Port, &GPIO_InitStruct);
 800431e:	f107 0314 	add.w	r3, r7, #20
 8004322:	4619      	mov	r1, r3
 8004324:	4804      	ldr	r0, [pc, #16]	@ (8004338 <MX_GPIO_Init+0x154>)
 8004326:	f001 fe77 	bl	8006018 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800432a:	bf00      	nop
 800432c:	3728      	adds	r7, #40	@ 0x28
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40023800 	.word	0x40023800
 8004338:	40020800 	.word	0x40020800
 800433c:	40020400 	.word	0x40020400

08004340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004344:	b672      	cpsid	i
}
 8004346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004348:	bf00      	nop
 800434a:	e7fd      	b.n	8004348 <Error_Handler+0x8>

0800434c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	4b10      	ldr	r3, [pc, #64]	@ (8004398 <HAL_MspInit+0x4c>)
 8004358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435a:	4a0f      	ldr	r2, [pc, #60]	@ (8004398 <HAL_MspInit+0x4c>)
 800435c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004360:	6453      	str	r3, [r2, #68]	@ 0x44
 8004362:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <HAL_MspInit+0x4c>)
 8004364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	603b      	str	r3, [r7, #0]
 8004372:	4b09      	ldr	r3, [pc, #36]	@ (8004398 <HAL_MspInit+0x4c>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	4a08      	ldr	r2, [pc, #32]	@ (8004398 <HAL_MspInit+0x4c>)
 8004378:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800437c:	6413      	str	r3, [r2, #64]	@ 0x40
 800437e:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <HAL_MspInit+0x4c>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800438a:	2007      	movs	r0, #7
 800438c:	f001 f970 	bl	8005670 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40023800 	.word	0x40023800

0800439c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08a      	sub	sp, #40	@ 0x28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a4:	f107 0314 	add.w	r3, r7, #20
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	609a      	str	r2, [r3, #8]
 80043b0:	60da      	str	r2, [r3, #12]
 80043b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a17      	ldr	r2, [pc, #92]	@ (8004418 <HAL_ADC_MspInit+0x7c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d127      	bne.n	800440e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	4b16      	ldr	r3, [pc, #88]	@ (800441c <HAL_ADC_MspInit+0x80>)
 80043c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c6:	4a15      	ldr	r2, [pc, #84]	@ (800441c <HAL_ADC_MspInit+0x80>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80043ce:	4b13      	ldr	r3, [pc, #76]	@ (800441c <HAL_ADC_MspInit+0x80>)
 80043d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	4b0f      	ldr	r3, [pc, #60]	@ (800441c <HAL_ADC_MspInit+0x80>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	4a0e      	ldr	r2, [pc, #56]	@ (800441c <HAL_ADC_MspInit+0x80>)
 80043e4:	f043 0302 	orr.w	r3, r3, #2
 80043e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ea:	4b0c      	ldr	r3, [pc, #48]	@ (800441c <HAL_ADC_MspInit+0x80>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 80043f6:	2301      	movs	r3, #1
 80043f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043fa:	2303      	movs	r3, #3
 80043fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8004402:	f107 0314 	add.w	r3, r7, #20
 8004406:	4619      	mov	r1, r3
 8004408:	4805      	ldr	r0, [pc, #20]	@ (8004420 <HAL_ADC_MspInit+0x84>)
 800440a:	f001 fe05 	bl	8006018 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800440e:	bf00      	nop
 8004410:	3728      	adds	r7, #40	@ 0x28
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40012000 	.word	0x40012000
 800441c:	40023800 	.word	0x40023800
 8004420:	40020400 	.word	0x40020400

08004424 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08a      	sub	sp, #40	@ 0x28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800442c:	f107 0314 	add.w	r3, r7, #20
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	605a      	str	r2, [r3, #4]
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	60da      	str	r2, [r3, #12]
 800443a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a30      	ldr	r2, [pc, #192]	@ (8004504 <HAL_DAC_MspInit+0xe0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d159      	bne.n	80044fa <HAL_DAC_MspInit+0xd6>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	4b2f      	ldr	r3, [pc, #188]	@ (8004508 <HAL_DAC_MspInit+0xe4>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	4a2e      	ldr	r2, [pc, #184]	@ (8004508 <HAL_DAC_MspInit+0xe4>)
 8004450:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004454:	6413      	str	r3, [r2, #64]	@ 0x40
 8004456:	4b2c      	ldr	r3, [pc, #176]	@ (8004508 <HAL_DAC_MspInit+0xe4>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	4b28      	ldr	r3, [pc, #160]	@ (8004508 <HAL_DAC_MspInit+0xe4>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446a:	4a27      	ldr	r2, [pc, #156]	@ (8004508 <HAL_DAC_MspInit+0xe4>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	6313      	str	r3, [r2, #48]	@ 0x30
 8004472:	4b25      	ldr	r3, [pc, #148]	@ (8004508 <HAL_DAC_MspInit+0xe4>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800447e:	2310      	movs	r3, #16
 8004480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004482:	2303      	movs	r3, #3
 8004484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800448a:	f107 0314 	add.w	r3, r7, #20
 800448e:	4619      	mov	r1, r3
 8004490:	481e      	ldr	r0, [pc, #120]	@ (800450c <HAL_DAC_MspInit+0xe8>)
 8004492:	f001 fdc1 	bl	8006018 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8004496:	4b1e      	ldr	r3, [pc, #120]	@ (8004510 <HAL_DAC_MspInit+0xec>)
 8004498:	4a1e      	ldr	r2, [pc, #120]	@ (8004514 <HAL_DAC_MspInit+0xf0>)
 800449a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800449c:	4b1c      	ldr	r3, [pc, #112]	@ (8004510 <HAL_DAC_MspInit+0xec>)
 800449e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80044a2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004510 <HAL_DAC_MspInit+0xec>)
 80044a6:	2240      	movs	r2, #64	@ 0x40
 80044a8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80044aa:	4b19      	ldr	r3, [pc, #100]	@ (8004510 <HAL_DAC_MspInit+0xec>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80044b0:	4b17      	ldr	r3, [pc, #92]	@ (8004510 <HAL_DAC_MspInit+0xec>)
 80044b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044b6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80044b8:	4b15      	ldr	r3, [pc, #84]	@ (8004510 <HAL_DAC_MspInit+0xec>)
 80044ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80044be:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80044c0:	4b13      	ldr	r3, [pc, #76]	@ (8004510 <HAL_DAC_MspInit+0xec>)
 80044c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80044c6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80044c8:	4b11      	ldr	r3, [pc, #68]	@ (8004510 <HAL_DAC_MspInit+0xec>)
 80044ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044ce:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 80044d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004510 <HAL_DAC_MspInit+0xec>)
 80044d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80044d6:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <HAL_DAC_MspInit+0xec>)
 80044da:	2200      	movs	r2, #0
 80044dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80044de:	480c      	ldr	r0, [pc, #48]	@ (8004510 <HAL_DAC_MspInit+0xec>)
 80044e0:	f001 f98a 	bl	80057f8 <HAL_DMA_Init>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80044ea:	f7ff ff29 	bl	8004340 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a07      	ldr	r2, [pc, #28]	@ (8004510 <HAL_DAC_MspInit+0xec>)
 80044f2:	609a      	str	r2, [r3, #8]
 80044f4:	4a06      	ldr	r2, [pc, #24]	@ (8004510 <HAL_DAC_MspInit+0xec>)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80044fa:	bf00      	nop
 80044fc:	3728      	adds	r7, #40	@ 0x28
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40007400 	.word	0x40007400
 8004508:	40023800 	.word	0x40023800
 800450c:	40020000 	.word	0x40020000
 8004510:	2000109c 	.word	0x2000109c
 8004514:	40026088 	.word	0x40026088

08004518 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	@ 0x28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004520:	f107 0314 	add.w	r3, r7, #20
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	609a      	str	r2, [r3, #8]
 800452c:	60da      	str	r2, [r3, #12]
 800452e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a31      	ldr	r2, [pc, #196]	@ (80045fc <HAL_I2C_MspInit+0xe4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d15b      	bne.n	80045f2 <HAL_I2C_MspInit+0xda>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	4b30      	ldr	r3, [pc, #192]	@ (8004600 <HAL_I2C_MspInit+0xe8>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004542:	4a2f      	ldr	r2, [pc, #188]	@ (8004600 <HAL_I2C_MspInit+0xe8>)
 8004544:	f043 0304 	orr.w	r3, r3, #4
 8004548:	6313      	str	r3, [r2, #48]	@ 0x30
 800454a:	4b2d      	ldr	r3, [pc, #180]	@ (8004600 <HAL_I2C_MspInit+0xe8>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	4b29      	ldr	r3, [pc, #164]	@ (8004600 <HAL_I2C_MspInit+0xe8>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455e:	4a28      	ldr	r2, [pc, #160]	@ (8004600 <HAL_I2C_MspInit+0xe8>)
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	6313      	str	r3, [r2, #48]	@ 0x30
 8004566:	4b26      	ldr	r3, [pc, #152]	@ (8004600 <HAL_I2C_MspInit+0xe8>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004572:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004578:	2312      	movs	r3, #18
 800457a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004580:	2303      	movs	r3, #3
 8004582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004584:	2304      	movs	r3, #4
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004588:	f107 0314 	add.w	r3, r7, #20
 800458c:	4619      	mov	r1, r3
 800458e:	481d      	ldr	r0, [pc, #116]	@ (8004604 <HAL_I2C_MspInit+0xec>)
 8004590:	f001 fd42 	bl	8006018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004594:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800459a:	2312      	movs	r3, #18
 800459c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a2:	2303      	movs	r3, #3
 80045a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80045a6:	2304      	movs	r3, #4
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045aa:	f107 0314 	add.w	r3, r7, #20
 80045ae:	4619      	mov	r1, r3
 80045b0:	4815      	ldr	r0, [pc, #84]	@ (8004608 <HAL_I2C_MspInit+0xf0>)
 80045b2:	f001 fd31 	bl	8006018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	4b11      	ldr	r3, [pc, #68]	@ (8004600 <HAL_I2C_MspInit+0xe8>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	4a10      	ldr	r2, [pc, #64]	@ (8004600 <HAL_I2C_MspInit+0xe8>)
 80045c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <HAL_I2C_MspInit+0xe8>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	68bb      	ldr	r3, [r7, #8]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80045d2:	2200      	movs	r2, #0
 80045d4:	2100      	movs	r1, #0
 80045d6:	2048      	movs	r0, #72	@ 0x48
 80045d8:	f001 f855 	bl	8005686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80045dc:	2048      	movs	r0, #72	@ 0x48
 80045de:	f001 f86e 	bl	80056be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80045e2:	2200      	movs	r2, #0
 80045e4:	2100      	movs	r1, #0
 80045e6:	2049      	movs	r0, #73	@ 0x49
 80045e8:	f001 f84d 	bl	8005686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80045ec:	2049      	movs	r0, #73	@ 0x49
 80045ee:	f001 f866 	bl	80056be <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80045f2:	bf00      	nop
 80045f4:	3728      	adds	r7, #40	@ 0x28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40005c00 	.word	0x40005c00
 8004600:	40023800 	.word	0x40023800
 8004604:	40020800 	.word	0x40020800
 8004608:	40020000 	.word	0x40020000

0800460c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	@ 0x28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004614:	f107 0314 	add.w	r3, r7, #20
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	605a      	str	r2, [r3, #4]
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	60da      	str	r2, [r3, #12]
 8004622:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a4c      	ldr	r2, [pc, #304]	@ (800475c <HAL_SPI_MspInit+0x150>)
 800462a:	4293      	cmp	r3, r2
 800462c:	f040 8092 	bne.w	8004754 <HAL_SPI_MspInit+0x148>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004630:	2300      	movs	r3, #0
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	4b4a      	ldr	r3, [pc, #296]	@ (8004760 <HAL_SPI_MspInit+0x154>)
 8004636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004638:	4a49      	ldr	r2, [pc, #292]	@ (8004760 <HAL_SPI_MspInit+0x154>)
 800463a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800463e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004640:	4b47      	ldr	r3, [pc, #284]	@ (8004760 <HAL_SPI_MspInit+0x154>)
 8004642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004644:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	4b43      	ldr	r3, [pc, #268]	@ (8004760 <HAL_SPI_MspInit+0x154>)
 8004652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004654:	4a42      	ldr	r2, [pc, #264]	@ (8004760 <HAL_SPI_MspInit+0x154>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6313      	str	r3, [r2, #48]	@ 0x30
 800465c:	4b40      	ldr	r3, [pc, #256]	@ (8004760 <HAL_SPI_MspInit+0x154>)
 800465e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004668:	23e0      	movs	r3, #224	@ 0xe0
 800466a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466c:	2302      	movs	r3, #2
 800466e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004670:	2300      	movs	r3, #0
 8004672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004674:	2303      	movs	r3, #3
 8004676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004678:	2305      	movs	r3, #5
 800467a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800467c:	f107 0314 	add.w	r3, r7, #20
 8004680:	4619      	mov	r1, r3
 8004682:	4838      	ldr	r0, [pc, #224]	@ (8004764 <HAL_SPI_MspInit+0x158>)
 8004684:	f001 fcc8 	bl	8006018 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8004688:	4b37      	ldr	r3, [pc, #220]	@ (8004768 <HAL_SPI_MspInit+0x15c>)
 800468a:	4a38      	ldr	r2, [pc, #224]	@ (800476c <HAL_SPI_MspInit+0x160>)
 800468c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800468e:	4b36      	ldr	r3, [pc, #216]	@ (8004768 <HAL_SPI_MspInit+0x15c>)
 8004690:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8004694:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004696:	4b34      	ldr	r3, [pc, #208]	@ (8004768 <HAL_SPI_MspInit+0x15c>)
 8004698:	2200      	movs	r2, #0
 800469a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800469c:	4b32      	ldr	r3, [pc, #200]	@ (8004768 <HAL_SPI_MspInit+0x15c>)
 800469e:	2200      	movs	r2, #0
 80046a0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046a2:	4b31      	ldr	r3, [pc, #196]	@ (8004768 <HAL_SPI_MspInit+0x15c>)
 80046a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046a8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004768 <HAL_SPI_MspInit+0x15c>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004768 <HAL_SPI_MspInit+0x15c>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80046b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004768 <HAL_SPI_MspInit+0x15c>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80046bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004768 <HAL_SPI_MspInit+0x15c>)
 80046be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80046c2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046c4:	4b28      	ldr	r3, [pc, #160]	@ (8004768 <HAL_SPI_MspInit+0x15c>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80046ca:	4827      	ldr	r0, [pc, #156]	@ (8004768 <HAL_SPI_MspInit+0x15c>)
 80046cc:	f001 f894 	bl	80057f8 <HAL_DMA_Init>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80046d6:	f7ff fe33 	bl	8004340 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a22      	ldr	r2, [pc, #136]	@ (8004768 <HAL_SPI_MspInit+0x15c>)
 80046de:	64da      	str	r2, [r3, #76]	@ 0x4c
 80046e0:	4a21      	ldr	r2, [pc, #132]	@ (8004768 <HAL_SPI_MspInit+0x15c>)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80046e6:	4b22      	ldr	r3, [pc, #136]	@ (8004770 <HAL_SPI_MspInit+0x164>)
 80046e8:	4a22      	ldr	r2, [pc, #136]	@ (8004774 <HAL_SPI_MspInit+0x168>)
 80046ea:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80046ec:	4b20      	ldr	r3, [pc, #128]	@ (8004770 <HAL_SPI_MspInit+0x164>)
 80046ee:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80046f2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004770 <HAL_SPI_MspInit+0x164>)
 80046f6:	2240      	movs	r2, #64	@ 0x40
 80046f8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004770 <HAL_SPI_MspInit+0x164>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004700:	4b1b      	ldr	r3, [pc, #108]	@ (8004770 <HAL_SPI_MspInit+0x164>)
 8004702:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004706:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004708:	4b19      	ldr	r3, [pc, #100]	@ (8004770 <HAL_SPI_MspInit+0x164>)
 800470a:	2200      	movs	r2, #0
 800470c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800470e:	4b18      	ldr	r3, [pc, #96]	@ (8004770 <HAL_SPI_MspInit+0x164>)
 8004710:	2200      	movs	r2, #0
 8004712:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004714:	4b16      	ldr	r3, [pc, #88]	@ (8004770 <HAL_SPI_MspInit+0x164>)
 8004716:	2200      	movs	r2, #0
 8004718:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800471a:	4b15      	ldr	r3, [pc, #84]	@ (8004770 <HAL_SPI_MspInit+0x164>)
 800471c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004720:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004722:	4b13      	ldr	r3, [pc, #76]	@ (8004770 <HAL_SPI_MspInit+0x164>)
 8004724:	2200      	movs	r2, #0
 8004726:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004728:	4811      	ldr	r0, [pc, #68]	@ (8004770 <HAL_SPI_MspInit+0x164>)
 800472a:	f001 f865 	bl	80057f8 <HAL_DMA_Init>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8004734:	f7ff fe04 	bl	8004340 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a0d      	ldr	r2, [pc, #52]	@ (8004770 <HAL_SPI_MspInit+0x164>)
 800473c:	649a      	str	r2, [r3, #72]	@ 0x48
 800473e:	4a0c      	ldr	r2, [pc, #48]	@ (8004770 <HAL_SPI_MspInit+0x164>)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004744:	2200      	movs	r2, #0
 8004746:	2100      	movs	r1, #0
 8004748:	2023      	movs	r0, #35	@ 0x23
 800474a:	f000 ff9c 	bl	8005686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800474e:	2023      	movs	r0, #35	@ 0x23
 8004750:	f000 ffb5 	bl	80056be <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004754:	bf00      	nop
 8004756:	3728      	adds	r7, #40	@ 0x28
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40013000 	.word	0x40013000
 8004760:	40023800 	.word	0x40023800
 8004764:	40020000 	.word	0x40020000
 8004768:	200011a8 	.word	0x200011a8
 800476c:	40026410 	.word	0x40026410
 8004770:	20001208 	.word	0x20001208
 8004774:	40026458 	.word	0x40026458

08004778 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08c      	sub	sp, #48	@ 0x30
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004780:	f107 031c 	add.w	r3, r7, #28
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	60da      	str	r2, [r3, #12]
 800478e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a3b      	ldr	r2, [pc, #236]	@ (8004884 <HAL_TIM_Base_MspInit+0x10c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d10e      	bne.n	80047b8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	61bb      	str	r3, [r7, #24]
 800479e:	4b3a      	ldr	r3, [pc, #232]	@ (8004888 <HAL_TIM_Base_MspInit+0x110>)
 80047a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a2:	4a39      	ldr	r2, [pc, #228]	@ (8004888 <HAL_TIM_Base_MspInit+0x110>)
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80047aa:	4b37      	ldr	r3, [pc, #220]	@ (8004888 <HAL_TIM_Base_MspInit+0x110>)
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 80047b6:	e060      	b.n	800487a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c0:	d134      	bne.n	800482c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	4b30      	ldr	r3, [pc, #192]	@ (8004888 <HAL_TIM_Base_MspInit+0x110>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004888 <HAL_TIM_Base_MspInit+0x110>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80047d2:	4b2d      	ldr	r3, [pc, #180]	@ (8004888 <HAL_TIM_Base_MspInit+0x110>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	4b29      	ldr	r3, [pc, #164]	@ (8004888 <HAL_TIM_Base_MspInit+0x110>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e6:	4a28      	ldr	r2, [pc, #160]	@ (8004888 <HAL_TIM_Base_MspInit+0x110>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ee:	4b26      	ldr	r3, [pc, #152]	@ (8004888 <HAL_TIM_Base_MspInit+0x110>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_INPUT_CAPTURE_Pin;
 80047fa:	2301      	movs	r3, #1
 80047fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047fe:	2302      	movs	r3, #2
 8004800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004802:	2300      	movs	r3, #0
 8004804:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004806:	2300      	movs	r3, #0
 8004808:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800480a:	2301      	movs	r3, #1
 800480c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ECHO_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 800480e:	f107 031c 	add.w	r3, r7, #28
 8004812:	4619      	mov	r1, r3
 8004814:	481d      	ldr	r0, [pc, #116]	@ (800488c <HAL_TIM_Base_MspInit+0x114>)
 8004816:	f001 fbff 	bl	8006018 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800481a:	2200      	movs	r2, #0
 800481c:	2100      	movs	r1, #0
 800481e:	201c      	movs	r0, #28
 8004820:	f000 ff31 	bl	8005686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004824:	201c      	movs	r0, #28
 8004826:	f000 ff4a 	bl	80056be <HAL_NVIC_EnableIRQ>
}
 800482a:	e026      	b.n	800487a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM4)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a17      	ldr	r2, [pc, #92]	@ (8004890 <HAL_TIM_Base_MspInit+0x118>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d10e      	bne.n	8004854 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	4b13      	ldr	r3, [pc, #76]	@ (8004888 <HAL_TIM_Base_MspInit+0x110>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	4a12      	ldr	r2, [pc, #72]	@ (8004888 <HAL_TIM_Base_MspInit+0x110>)
 8004840:	f043 0304 	orr.w	r3, r3, #4
 8004844:	6413      	str	r3, [r2, #64]	@ 0x40
 8004846:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <HAL_TIM_Base_MspInit+0x110>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
}
 8004852:	e012      	b.n	800487a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM6)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a0e      	ldr	r2, [pc, #56]	@ (8004894 <HAL_TIM_Base_MspInit+0x11c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d10d      	bne.n	800487a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	4b09      	ldr	r3, [pc, #36]	@ (8004888 <HAL_TIM_Base_MspInit+0x110>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004866:	4a08      	ldr	r2, [pc, #32]	@ (8004888 <HAL_TIM_Base_MspInit+0x110>)
 8004868:	f043 0310 	orr.w	r3, r3, #16
 800486c:	6413      	str	r3, [r2, #64]	@ 0x40
 800486e:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <HAL_TIM_Base_MspInit+0x110>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	68bb      	ldr	r3, [r7, #8]
}
 800487a:	bf00      	nop
 800487c:	3730      	adds	r7, #48	@ 0x30
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40010000 	.word	0x40010000
 8004888:	40023800 	.word	0x40023800
 800488c:	40020000 	.word	0x40020000
 8004890:	40000800 	.word	0x40000800
 8004894:	40001000 	.word	0x40001000

08004898 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	@ 0x28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a0:	f107 0314 	add.w	r3, r7, #20
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	605a      	str	r2, [r3, #4]
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	60da      	str	r2, [r3, #12]
 80048ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a24      	ldr	r2, [pc, #144]	@ (8004948 <HAL_TIM_MspPostInit+0xb0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d11f      	bne.n	80048fa <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	4b23      	ldr	r3, [pc, #140]	@ (800494c <HAL_TIM_MspPostInit+0xb4>)
 80048c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c2:	4a22      	ldr	r2, [pc, #136]	@ (800494c <HAL_TIM_MspPostInit+0xb4>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80048ca:	4b20      	ldr	r3, [pc, #128]	@ (800494c <HAL_TIM_MspPostInit+0xb4>)
 80048cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 80048d6:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 80048da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048dc:	2302      	movs	r3, #2
 80048de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e4:	2300      	movs	r3, #0
 80048e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80048e8:	2301      	movs	r3, #1
 80048ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ec:	f107 0314 	add.w	r3, r7, #20
 80048f0:	4619      	mov	r1, r3
 80048f2:	4817      	ldr	r0, [pc, #92]	@ (8004950 <HAL_TIM_MspPostInit+0xb8>)
 80048f4:	f001 fb90 	bl	8006018 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80048f8:	e022      	b.n	8004940 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004902:	d11d      	bne.n	8004940 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	4b10      	ldr	r3, [pc, #64]	@ (800494c <HAL_TIM_MspPostInit+0xb4>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490c:	4a0f      	ldr	r2, [pc, #60]	@ (800494c <HAL_TIM_MspPostInit+0xb4>)
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	6313      	str	r3, [r2, #48]	@ 0x30
 8004914:	4b0d      	ldr	r3, [pc, #52]	@ (800494c <HAL_TIM_MspPostInit+0xb4>)
 8004916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004920:	2302      	movs	r3, #2
 8004922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004924:	2302      	movs	r3, #2
 8004926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004928:	2300      	movs	r3, #0
 800492a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800492c:	2300      	movs	r3, #0
 800492e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004930:	2301      	movs	r3, #1
 8004932:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004934:	f107 0314 	add.w	r3, r7, #20
 8004938:	4619      	mov	r1, r3
 800493a:	4805      	ldr	r0, [pc, #20]	@ (8004950 <HAL_TIM_MspPostInit+0xb8>)
 800493c:	f001 fb6c 	bl	8006018 <HAL_GPIO_Init>
}
 8004940:	bf00      	nop
 8004942:	3728      	adds	r7, #40	@ 0x28
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40010000 	.word	0x40010000
 800494c:	40023800 	.word	0x40023800
 8004950:	40020000 	.word	0x40020000

08004954 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08c      	sub	sp, #48	@ 0x30
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495c:	f107 031c 	add.w	r3, r7, #28
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a78      	ldr	r2, [pc, #480]	@ (8004b54 <HAL_UART_MspInit+0x200>)
 8004972:	4293      	cmp	r3, r2
 8004974:	f040 80b1 	bne.w	8004ada <HAL_UART_MspInit+0x186>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004978:	2300      	movs	r3, #0
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	4b76      	ldr	r3, [pc, #472]	@ (8004b58 <HAL_UART_MspInit+0x204>)
 800497e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004980:	4a75      	ldr	r2, [pc, #468]	@ (8004b58 <HAL_UART_MspInit+0x204>)
 8004982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004986:	6413      	str	r3, [r2, #64]	@ 0x40
 8004988:	4b73      	ldr	r3, [pc, #460]	@ (8004b58 <HAL_UART_MspInit+0x204>)
 800498a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	4b6f      	ldr	r3, [pc, #444]	@ (8004b58 <HAL_UART_MspInit+0x204>)
 800499a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499c:	4a6e      	ldr	r2, [pc, #440]	@ (8004b58 <HAL_UART_MspInit+0x204>)
 800499e:	f043 0304 	orr.w	r3, r3, #4
 80049a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80049a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004b58 <HAL_UART_MspInit+0x204>)
 80049a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80049b0:	2300      	movs	r3, #0
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	4b68      	ldr	r3, [pc, #416]	@ (8004b58 <HAL_UART_MspInit+0x204>)
 80049b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b8:	4a67      	ldr	r2, [pc, #412]	@ (8004b58 <HAL_UART_MspInit+0x204>)
 80049ba:	f043 0308 	orr.w	r3, r3, #8
 80049be:	6313      	str	r3, [r2, #48]	@ 0x30
 80049c0:	4b65      	ldr	r3, [pc, #404]	@ (8004b58 <HAL_UART_MspInit+0x204>)
 80049c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80049cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d2:	2302      	movs	r3, #2
 80049d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049da:	2303      	movs	r3, #3
 80049dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80049de:	2308      	movs	r3, #8
 80049e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049e2:	f107 031c 	add.w	r3, r7, #28
 80049e6:	4619      	mov	r1, r3
 80049e8:	485c      	ldr	r0, [pc, #368]	@ (8004b5c <HAL_UART_MspInit+0x208>)
 80049ea:	f001 fb15 	bl	8006018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80049ee:	2304      	movs	r3, #4
 80049f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f2:	2302      	movs	r3, #2
 80049f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049fa:	2303      	movs	r3, #3
 80049fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80049fe:	2308      	movs	r3, #8
 8004a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a02:	f107 031c 	add.w	r3, r7, #28
 8004a06:	4619      	mov	r1, r3
 8004a08:	4855      	ldr	r0, [pc, #340]	@ (8004b60 <HAL_UART_MspInit+0x20c>)
 8004a0a:	f001 fb05 	bl	8006018 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8004a0e:	4b55      	ldr	r3, [pc, #340]	@ (8004b64 <HAL_UART_MspInit+0x210>)
 8004a10:	4a55      	ldr	r2, [pc, #340]	@ (8004b68 <HAL_UART_MspInit+0x214>)
 8004a12:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8004a14:	4b53      	ldr	r3, [pc, #332]	@ (8004b64 <HAL_UART_MspInit+0x210>)
 8004a16:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004a1a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a1c:	4b51      	ldr	r3, [pc, #324]	@ (8004b64 <HAL_UART_MspInit+0x210>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a22:	4b50      	ldr	r3, [pc, #320]	@ (8004b64 <HAL_UART_MspInit+0x210>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a28:	4b4e      	ldr	r3, [pc, #312]	@ (8004b64 <HAL_UART_MspInit+0x210>)
 8004a2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a2e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a30:	4b4c      	ldr	r3, [pc, #304]	@ (8004b64 <HAL_UART_MspInit+0x210>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a36:	4b4b      	ldr	r3, [pc, #300]	@ (8004b64 <HAL_UART_MspInit+0x210>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8004a3c:	4b49      	ldr	r3, [pc, #292]	@ (8004b64 <HAL_UART_MspInit+0x210>)
 8004a3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a42:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a44:	4b47      	ldr	r3, [pc, #284]	@ (8004b64 <HAL_UART_MspInit+0x210>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a4a:	4b46      	ldr	r3, [pc, #280]	@ (8004b64 <HAL_UART_MspInit+0x210>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004a50:	4844      	ldr	r0, [pc, #272]	@ (8004b64 <HAL_UART_MspInit+0x210>)
 8004a52:	f000 fed1 	bl	80057f8 <HAL_DMA_Init>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004a5c:	f7ff fc70 	bl	8004340 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a40      	ldr	r2, [pc, #256]	@ (8004b64 <HAL_UART_MspInit+0x210>)
 8004a64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a66:	4a3f      	ldr	r2, [pc, #252]	@ (8004b64 <HAL_UART_MspInit+0x210>)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8004a6c:	4b3f      	ldr	r3, [pc, #252]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a6e:	4a40      	ldr	r2, [pc, #256]	@ (8004b70 <HAL_UART_MspInit+0x21c>)
 8004a70:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8004a72:	4b3e      	ldr	r3, [pc, #248]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a74:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004a78:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a7c:	2240      	movs	r2, #64	@ 0x40
 8004a7e:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a80:	4b3a      	ldr	r3, [pc, #232]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a86:	4b39      	ldr	r3, [pc, #228]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a8c:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a8e:	4b37      	ldr	r3, [pc, #220]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a94:	4b35      	ldr	r3, [pc, #212]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8004a9a:	4b34      	ldr	r3, [pc, #208]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004aa0:	4b32      	ldr	r3, [pc, #200]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004aa6:	4b31      	ldr	r3, [pc, #196]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004aac:	482f      	ldr	r0, [pc, #188]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004aae:	f000 fea3 	bl	80057f8 <HAL_DMA_Init>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8004ab8:	f7ff fc42 	bl	8004340 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a2b      	ldr	r2, [pc, #172]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004ac0:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8004b6c <HAL_UART_MspInit+0x218>)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2100      	movs	r1, #0
 8004acc:	2035      	movs	r0, #53	@ 0x35
 8004ace:	f000 fdda 	bl	8005686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004ad2:	2035      	movs	r0, #53	@ 0x35
 8004ad4:	f000 fdf3 	bl	80056be <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8004ad8:	e038      	b.n	8004b4c <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a25      	ldr	r2, [pc, #148]	@ (8004b74 <HAL_UART_MspInit+0x220>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d133      	bne.n	8004b4c <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b58 <HAL_UART_MspInit+0x204>)
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	4a1a      	ldr	r2, [pc, #104]	@ (8004b58 <HAL_UART_MspInit+0x204>)
 8004aee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004af2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004af4:	4b18      	ldr	r3, [pc, #96]	@ (8004b58 <HAL_UART_MspInit+0x204>)
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b00:	2300      	movs	r3, #0
 8004b02:	60bb      	str	r3, [r7, #8]
 8004b04:	4b14      	ldr	r3, [pc, #80]	@ (8004b58 <HAL_UART_MspInit+0x204>)
 8004b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b08:	4a13      	ldr	r2, [pc, #76]	@ (8004b58 <HAL_UART_MspInit+0x204>)
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b10:	4b11      	ldr	r3, [pc, #68]	@ (8004b58 <HAL_UART_MspInit+0x204>)
 8004b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004b1c:	230c      	movs	r3, #12
 8004b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b20:	2302      	movs	r3, #2
 8004b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b2c:	2307      	movs	r3, #7
 8004b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b30:	f107 031c 	add.w	r3, r7, #28
 8004b34:	4619      	mov	r1, r3
 8004b36:	4810      	ldr	r0, [pc, #64]	@ (8004b78 <HAL_UART_MspInit+0x224>)
 8004b38:	f001 fa6e 	bl	8006018 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2100      	movs	r1, #0
 8004b40:	2026      	movs	r0, #38	@ 0x26
 8004b42:	f000 fda0 	bl	8005686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b46:	2026      	movs	r0, #38	@ 0x26
 8004b48:	f000 fdb9 	bl	80056be <HAL_NVIC_EnableIRQ>
}
 8004b4c:	bf00      	nop
 8004b4e:	3730      	adds	r7, #48	@ 0x30
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40005000 	.word	0x40005000
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	40020800 	.word	0x40020800
 8004b60:	40020c00 	.word	0x40020c00
 8004b64:	20001418 	.word	0x20001418
 8004b68:	40026010 	.word	0x40026010
 8004b6c:	20001478 	.word	0x20001478
 8004b70:	400260b8 	.word	0x400260b8
 8004b74:	40004400 	.word	0x40004400
 8004b78:	40020000 	.word	0x40020000

08004b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004b80:	bf00      	nop
 8004b82:	e7fd      	b.n	8004b80 <NMI_Handler+0x4>

08004b84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b88:	bf00      	nop
 8004b8a:	e7fd      	b.n	8004b88 <HardFault_Handler+0x4>

08004b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b90:	bf00      	nop
 8004b92:	e7fd      	b.n	8004b90 <MemManage_Handler+0x4>

08004b94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b98:	bf00      	nop
 8004b9a:	e7fd      	b.n	8004b98 <BusFault_Handler+0x4>

08004b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ba0:	bf00      	nop
 8004ba2:	e7fd      	b.n	8004ba0 <UsageFault_Handler+0x4>

08004ba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ba8:	bf00      	nop
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bb6:	bf00      	nop
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bd2:	f000 f9c7 	bl	8004f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8004bd6:	f000 fd8c 	bl	80056f2 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004bda:	bf00      	nop
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004be4:	4802      	ldr	r0, [pc, #8]	@ (8004bf0 <DMA1_Stream0_IRQHandler+0x10>)
 8004be6:	f000 ff9f 	bl	8005b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004bea:	bf00      	nop
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20001418 	.word	0x20001418

08004bf4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8004bf8:	4802      	ldr	r0, [pc, #8]	@ (8004c04 <DMA1_Stream5_IRQHandler+0x10>)
 8004bfa:	f000 ff95 	bl	8005b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	2000109c 	.word	0x2000109c

08004c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004c0c:	4802      	ldr	r0, [pc, #8]	@ (8004c18 <TIM2_IRQHandler+0x10>)
 8004c0e:	f005 f924 	bl	8009e5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004c12:	bf00      	nop
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	200012b0 	.word	0x200012b0

08004c1c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004c20:	4802      	ldr	r0, [pc, #8]	@ (8004c2c <SPI1_IRQHandler+0x10>)
 8004c22:	f004 fd23 	bl	800966c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004c26:	bf00      	nop
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20001150 	.word	0x20001150

08004c30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004c34:	4802      	ldr	r0, [pc, #8]	@ (8004c40 <USART2_IRQHandler+0x10>)
 8004c36:	f006 f9a5 	bl	800af84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	200013d0 	.word	0x200013d0

08004c44 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004c48:	4802      	ldr	r0, [pc, #8]	@ (8004c54 <DMA1_Stream7_IRQHandler+0x10>)
 8004c4a:	f000 ff6d 	bl	8005b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004c4e:	bf00      	nop
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20001478 	.word	0x20001478

08004c58 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004c5c:	4802      	ldr	r0, [pc, #8]	@ (8004c68 <UART5_IRQHandler+0x10>)
 8004c5e:	f006 f991 	bl	800af84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004c62:	bf00      	nop
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20001388 	.word	0x20001388

08004c6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004c70:	4802      	ldr	r0, [pc, #8]	@ (8004c7c <DMA2_Stream0_IRQHandler+0x10>)
 8004c72:	f000 ff59 	bl	8005b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004c76:	bf00      	nop
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	200011a8 	.word	0x200011a8

08004c80 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004c84:	4802      	ldr	r0, [pc, #8]	@ (8004c90 <DMA2_Stream3_IRQHandler+0x10>)
 8004c86:	f000 ff4f 	bl	8005b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004c8a:	bf00      	nop
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20001208 	.word	0x20001208

08004c94 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8004c98:	4802      	ldr	r0, [pc, #8]	@ (8004ca4 <I2C3_EV_IRQHandler+0x10>)
 8004c9a:	f001 fcc4 	bl	8006626 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	200010fc 	.word	0x200010fc

08004ca8 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8004cac:	4802      	ldr	r0, [pc, #8]	@ (8004cb8 <I2C3_ER_IRQHandler+0x10>)
 8004cae:	f001 fe2b 	bl	8006908 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200010fc 	.word	0x200010fc

08004cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return 1;
 8004cc0:	2301      	movs	r3, #1
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <_kill>:

int _kill(int pid, int sig)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004cd6:	f009 f8d5 	bl	800de84 <__errno>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2216      	movs	r2, #22
 8004cde:	601a      	str	r2, [r3, #0]
  return -1;
 8004ce0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <_exit>:

void _exit (int status)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004cf4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff ffe7 	bl	8004ccc <_kill>
  while (1) {}    /* Make sure we hang here */
 8004cfe:	bf00      	nop
 8004d00:	e7fd      	b.n	8004cfe <_exit+0x12>

08004d02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b086      	sub	sp, #24
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	e00a      	b.n	8004d2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004d14:	f3af 8000 	nop.w
 8004d18:	4601      	mov	r1, r0
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	60ba      	str	r2, [r7, #8]
 8004d20:	b2ca      	uxtb	r2, r1
 8004d22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	3301      	adds	r3, #1
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	dbf0      	blt.n	8004d14 <_read+0x12>
  }

  return len;
 8004d32:	687b      	ldr	r3, [r7, #4]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	e009      	b.n	8004d62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	60ba      	str	r2, [r7, #8]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	dbf1      	blt.n	8004d4e <_write+0x12>
  }
  return len;
 8004d6a:	687b      	ldr	r3, [r7, #4]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <_close>:

int _close(int file)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004d7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d9c:	605a      	str	r2, [r3, #4]
  return 0;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <_isatty>:

int _isatty(int file)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004db4:	2301      	movs	r3, #1
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b085      	sub	sp, #20
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004de4:	4a14      	ldr	r2, [pc, #80]	@ (8004e38 <_sbrk+0x5c>)
 8004de6:	4b15      	ldr	r3, [pc, #84]	@ (8004e3c <_sbrk+0x60>)
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004df0:	4b13      	ldr	r3, [pc, #76]	@ (8004e40 <_sbrk+0x64>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d102      	bne.n	8004dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004df8:	4b11      	ldr	r3, [pc, #68]	@ (8004e40 <_sbrk+0x64>)
 8004dfa:	4a12      	ldr	r2, [pc, #72]	@ (8004e44 <_sbrk+0x68>)
 8004dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dfe:	4b10      	ldr	r3, [pc, #64]	@ (8004e40 <_sbrk+0x64>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4413      	add	r3, r2
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d207      	bcs.n	8004e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e0c:	f009 f83a 	bl	800de84 <__errno>
 8004e10:	4603      	mov	r3, r0
 8004e12:	220c      	movs	r2, #12
 8004e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e1a:	e009      	b.n	8004e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e1c:	4b08      	ldr	r3, [pc, #32]	@ (8004e40 <_sbrk+0x64>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e22:	4b07      	ldr	r3, [pc, #28]	@ (8004e40 <_sbrk+0x64>)
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4413      	add	r3, r2
 8004e2a:	4a05      	ldr	r2, [pc, #20]	@ (8004e40 <_sbrk+0x64>)
 8004e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20020000 	.word	0x20020000
 8004e3c:	00000400 	.word	0x00000400
 8004e40:	200014d8 	.word	0x200014d8
 8004e44:	20001630 	.word	0x20001630

08004e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e4c:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <SystemInit+0x20>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e52:	4a05      	ldr	r2, [pc, #20]	@ (8004e68 <SystemInit+0x20>)
 8004e54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e5c:	bf00      	nop
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	e000ed00 	.word	0xe000ed00

08004e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004e6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004ea4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004e70:	f7ff ffea 	bl	8004e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e74:	480c      	ldr	r0, [pc, #48]	@ (8004ea8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e76:	490d      	ldr	r1, [pc, #52]	@ (8004eac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e78:	4a0d      	ldr	r2, [pc, #52]	@ (8004eb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e7c:	e002      	b.n	8004e84 <LoopCopyDataInit>

08004e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e82:	3304      	adds	r3, #4

08004e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e88:	d3f9      	bcc.n	8004e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e8c:	4c0a      	ldr	r4, [pc, #40]	@ (8004eb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e90:	e001      	b.n	8004e96 <LoopFillZerobss>

08004e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e94:	3204      	adds	r2, #4

08004e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e98:	d3fb      	bcc.n	8004e92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004e9a:	f008 fff9 	bl	800de90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e9e:	f7fe fdab 	bl	80039f8 <main>
  bx  lr    
 8004ea2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ea4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004eac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004eb0:	08010eb4 	.word	0x08010eb4
  ldr r2, =_sbss
 8004eb4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004eb8:	20001630 	.word	0x20001630

08004ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ebc:	e7fe      	b.n	8004ebc <ADC_IRQHandler>
	...

08004ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8004f00 <HAL_Init+0x40>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8004f00 <HAL_Init+0x40>)
 8004eca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f00 <HAL_Init+0x40>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8004f00 <HAL_Init+0x40>)
 8004ed6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004edc:	4b08      	ldr	r3, [pc, #32]	@ (8004f00 <HAL_Init+0x40>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a07      	ldr	r2, [pc, #28]	@ (8004f00 <HAL_Init+0x40>)
 8004ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ee8:	2003      	movs	r0, #3
 8004eea:	f000 fbc1 	bl	8005670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f000 f808 	bl	8004f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ef4:	f7ff fa2a 	bl	800434c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40023c00 	.word	0x40023c00

08004f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f0c:	4b12      	ldr	r3, [pc, #72]	@ (8004f58 <HAL_InitTick+0x54>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	4b12      	ldr	r3, [pc, #72]	@ (8004f5c <HAL_InitTick+0x58>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	4619      	mov	r1, r3
 8004f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fbd9 	bl	80056da <HAL_SYSTICK_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e00e      	b.n	8004f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b0f      	cmp	r3, #15
 8004f36:	d80a      	bhi.n	8004f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f38:	2200      	movs	r2, #0
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f40:	f000 fba1 	bl	8005686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f44:	4a06      	ldr	r2, [pc, #24]	@ (8004f60 <HAL_InitTick+0x5c>)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e000      	b.n	8004f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	20000000 	.word	0x20000000
 8004f5c:	20000008 	.word	0x20000008
 8004f60:	20000004 	.word	0x20000004

08004f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f68:	4b06      	ldr	r3, [pc, #24]	@ (8004f84 <HAL_IncTick+0x20>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4b06      	ldr	r3, [pc, #24]	@ (8004f88 <HAL_IncTick+0x24>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4413      	add	r3, r2
 8004f74:	4a04      	ldr	r2, [pc, #16]	@ (8004f88 <HAL_IncTick+0x24>)
 8004f76:	6013      	str	r3, [r2, #0]
}
 8004f78:	bf00      	nop
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20000008 	.word	0x20000008
 8004f88:	200014dc 	.word	0x200014dc

08004f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8004f90:	4b03      	ldr	r3, [pc, #12]	@ (8004fa0 <HAL_GetTick+0x14>)
 8004f92:	681b      	ldr	r3, [r3, #0]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	200014dc 	.word	0x200014dc

08004fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fac:	f7ff ffee 	bl	8004f8c <HAL_GetTick>
 8004fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fbc:	d005      	beq.n	8004fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe8 <HAL_Delay+0x44>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004fca:	bf00      	nop
 8004fcc:	f7ff ffde 	bl	8004f8c <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d8f7      	bhi.n	8004fcc <HAL_Delay+0x28>
  {
  }
}
 8004fdc:	bf00      	nop
 8004fde:	bf00      	nop
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000008 	.word	0x20000008

08004fec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e033      	b.n	800506a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff f9c6 	bl	800439c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b00      	cmp	r3, #0
 8005028:	d118      	bne.n	800505c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005032:	f023 0302 	bic.w	r3, r3, #2
 8005036:	f043 0202 	orr.w	r2, r3, #2
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f94a 	bl	80052d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	f023 0303 	bic.w	r3, r3, #3
 8005052:	f043 0201 	orr.w	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	641a      	str	r2, [r3, #64]	@ 0x40
 800505a:	e001      	b.n	8005060 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005068:	7bfb      	ldrb	r3, [r7, #15]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_ADC_ConfigChannel+0x1c>
 800508c:	2302      	movs	r3, #2
 800508e:	e113      	b.n	80052b8 <HAL_ADC_ConfigChannel+0x244>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b09      	cmp	r3, #9
 800509e:	d925      	bls.n	80050ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68d9      	ldr	r1, [r3, #12]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	4613      	mov	r3, r2
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	4413      	add	r3, r2
 80050b4:	3b1e      	subs	r3, #30
 80050b6:	2207      	movs	r2, #7
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	43da      	mvns	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	400a      	ands	r2, r1
 80050c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68d9      	ldr	r1, [r3, #12]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	4618      	mov	r0, r3
 80050d8:	4603      	mov	r3, r0
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	4403      	add	r3, r0
 80050de:	3b1e      	subs	r3, #30
 80050e0:	409a      	lsls	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	60da      	str	r2, [r3, #12]
 80050ea:	e022      	b.n	8005132 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6919      	ldr	r1, [r3, #16]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	461a      	mov	r2, r3
 80050fa:	4613      	mov	r3, r2
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	4413      	add	r3, r2
 8005100:	2207      	movs	r2, #7
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	43da      	mvns	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	400a      	ands	r2, r1
 800510e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6919      	ldr	r1, [r3, #16]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	4618      	mov	r0, r3
 8005122:	4603      	mov	r3, r0
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	4403      	add	r3, r0
 8005128:	409a      	lsls	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b06      	cmp	r3, #6
 8005138:	d824      	bhi.n	8005184 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	3b05      	subs	r3, #5
 800514c:	221f      	movs	r2, #31
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43da      	mvns	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	400a      	ands	r2, r1
 800515a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	4618      	mov	r0, r3
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	3b05      	subs	r3, #5
 8005176:	fa00 f203 	lsl.w	r2, r0, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	635a      	str	r2, [r3, #52]	@ 0x34
 8005182:	e04c      	b.n	800521e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b0c      	cmp	r3, #12
 800518a:	d824      	bhi.n	80051d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	3b23      	subs	r3, #35	@ 0x23
 800519e:	221f      	movs	r2, #31
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	43da      	mvns	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	400a      	ands	r2, r1
 80051ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	4618      	mov	r0, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	3b23      	subs	r3, #35	@ 0x23
 80051c8:	fa00 f203 	lsl.w	r2, r0, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80051d4:	e023      	b.n	800521e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	3b41      	subs	r3, #65	@ 0x41
 80051e8:	221f      	movs	r2, #31
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	43da      	mvns	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	400a      	ands	r2, r1
 80051f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	4618      	mov	r0, r3
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	4613      	mov	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	3b41      	subs	r3, #65	@ 0x41
 8005212:	fa00 f203 	lsl.w	r2, r0, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800521e:	4b29      	ldr	r3, [pc, #164]	@ (80052c4 <HAL_ADC_ConfigChannel+0x250>)
 8005220:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a28      	ldr	r2, [pc, #160]	@ (80052c8 <HAL_ADC_ConfigChannel+0x254>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10f      	bne.n	800524c <HAL_ADC_ConfigChannel+0x1d8>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b12      	cmp	r3, #18
 8005232:	d10b      	bne.n	800524c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1d      	ldr	r2, [pc, #116]	@ (80052c8 <HAL_ADC_ConfigChannel+0x254>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d12b      	bne.n	80052ae <HAL_ADC_ConfigChannel+0x23a>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1c      	ldr	r2, [pc, #112]	@ (80052cc <HAL_ADC_ConfigChannel+0x258>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <HAL_ADC_ConfigChannel+0x1f4>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b11      	cmp	r3, #17
 8005266:	d122      	bne.n	80052ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a11      	ldr	r2, [pc, #68]	@ (80052cc <HAL_ADC_ConfigChannel+0x258>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d111      	bne.n	80052ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800528a:	4b11      	ldr	r3, [pc, #68]	@ (80052d0 <HAL_ADC_ConfigChannel+0x25c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a11      	ldr	r2, [pc, #68]	@ (80052d4 <HAL_ADC_ConfigChannel+0x260>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	0c9a      	lsrs	r2, r3, #18
 8005296:	4613      	mov	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80052a0:	e002      	b.n	80052a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f9      	bne.n	80052a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	40012300 	.word	0x40012300
 80052c8:	40012000 	.word	0x40012000
 80052cc:	10000012 	.word	0x10000012
 80052d0:	20000000 	.word	0x20000000
 80052d4:	431bde83 	.word	0x431bde83

080052d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052e0:	4b79      	ldr	r3, [pc, #484]	@ (80054c8 <ADC_Init+0x1f0>)
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	431a      	orrs	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800530c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6859      	ldr	r1, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	021a      	lsls	r2, r3, #8
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6859      	ldr	r1, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005352:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6899      	ldr	r1, [r3, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	4a58      	ldr	r2, [pc, #352]	@ (80054cc <ADC_Init+0x1f4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d022      	beq.n	80053b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800537e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6899      	ldr	r1, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80053a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6899      	ldr	r1, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	609a      	str	r2, [r3, #8]
 80053b4:	e00f      	b.n	80053d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80053c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80053d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0202 	bic.w	r2, r2, #2
 80053e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6899      	ldr	r1, [r3, #8]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	7e1b      	ldrb	r3, [r3, #24]
 80053f0:	005a      	lsls	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01b      	beq.n	800543c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005412:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005422:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6859      	ldr	r1, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	3b01      	subs	r3, #1
 8005430:	035a      	lsls	r2, r3, #13
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
 800543a:	e007      	b.n	800544c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800544a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800545a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	3b01      	subs	r3, #1
 8005468:	051a      	lsls	r2, r3, #20
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6899      	ldr	r1, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800548e:	025a      	lsls	r2, r3, #9
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6899      	ldr	r1, [r3, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	029a      	lsls	r2, r3, #10
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	609a      	str	r2, [r3, #8]
}
 80054bc:	bf00      	nop
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	40012300 	.word	0x40012300
 80054cc:	0f000001 	.word	0x0f000001

080054d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005514 <__NVIC_SetPriorityGrouping+0x44>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054ec:	4013      	ands	r3, r2
 80054ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80054fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005502:	4a04      	ldr	r2, [pc, #16]	@ (8005514 <__NVIC_SetPriorityGrouping+0x44>)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	60d3      	str	r3, [r2, #12]
}
 8005508:	bf00      	nop
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	e000ed00 	.word	0xe000ed00

08005518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800551c:	4b04      	ldr	r3, [pc, #16]	@ (8005530 <__NVIC_GetPriorityGrouping+0x18>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	0a1b      	lsrs	r3, r3, #8
 8005522:	f003 0307 	and.w	r3, r3, #7
}
 8005526:	4618      	mov	r0, r3
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	e000ed00 	.word	0xe000ed00

08005534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	4603      	mov	r3, r0
 800553c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800553e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005542:	2b00      	cmp	r3, #0
 8005544:	db0b      	blt.n	800555e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005546:	79fb      	ldrb	r3, [r7, #7]
 8005548:	f003 021f 	and.w	r2, r3, #31
 800554c:	4907      	ldr	r1, [pc, #28]	@ (800556c <__NVIC_EnableIRQ+0x38>)
 800554e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005552:	095b      	lsrs	r3, r3, #5
 8005554:	2001      	movs	r0, #1
 8005556:	fa00 f202 	lsl.w	r2, r0, r2
 800555a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	e000e100 	.word	0xe000e100

08005570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	6039      	str	r1, [r7, #0]
 800557a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800557c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005580:	2b00      	cmp	r3, #0
 8005582:	db0a      	blt.n	800559a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	b2da      	uxtb	r2, r3
 8005588:	490c      	ldr	r1, [pc, #48]	@ (80055bc <__NVIC_SetPriority+0x4c>)
 800558a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558e:	0112      	lsls	r2, r2, #4
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	440b      	add	r3, r1
 8005594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005598:	e00a      	b.n	80055b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	b2da      	uxtb	r2, r3
 800559e:	4908      	ldr	r1, [pc, #32]	@ (80055c0 <__NVIC_SetPriority+0x50>)
 80055a0:	79fb      	ldrb	r3, [r7, #7]
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	3b04      	subs	r3, #4
 80055a8:	0112      	lsls	r2, r2, #4
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	440b      	add	r3, r1
 80055ae:	761a      	strb	r2, [r3, #24]
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	e000e100 	.word	0xe000e100
 80055c0:	e000ed00 	.word	0xe000ed00

080055c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b089      	sub	sp, #36	@ 0x24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f1c3 0307 	rsb	r3, r3, #7
 80055de:	2b04      	cmp	r3, #4
 80055e0:	bf28      	it	cs
 80055e2:	2304      	movcs	r3, #4
 80055e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	3304      	adds	r3, #4
 80055ea:	2b06      	cmp	r3, #6
 80055ec:	d902      	bls.n	80055f4 <NVIC_EncodePriority+0x30>
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	3b03      	subs	r3, #3
 80055f2:	e000      	b.n	80055f6 <NVIC_EncodePriority+0x32>
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	43da      	mvns	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	401a      	ands	r2, r3
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800560c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	fa01 f303 	lsl.w	r3, r1, r3
 8005616:	43d9      	mvns	r1, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800561c:	4313      	orrs	r3, r2
         );
}
 800561e:	4618      	mov	r0, r3
 8005620:	3724      	adds	r7, #36	@ 0x24
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3b01      	subs	r3, #1
 8005638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800563c:	d301      	bcc.n	8005642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800563e:	2301      	movs	r3, #1
 8005640:	e00f      	b.n	8005662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005642:	4a0a      	ldr	r2, [pc, #40]	@ (800566c <SysTick_Config+0x40>)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3b01      	subs	r3, #1
 8005648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800564a:	210f      	movs	r1, #15
 800564c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005650:	f7ff ff8e 	bl	8005570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005654:	4b05      	ldr	r3, [pc, #20]	@ (800566c <SysTick_Config+0x40>)
 8005656:	2200      	movs	r2, #0
 8005658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800565a:	4b04      	ldr	r3, [pc, #16]	@ (800566c <SysTick_Config+0x40>)
 800565c:	2207      	movs	r2, #7
 800565e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	e000e010 	.word	0xe000e010

08005670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff ff29 	bl	80054d0 <__NVIC_SetPriorityGrouping>
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005686:	b580      	push	{r7, lr}
 8005688:	b086      	sub	sp, #24
 800568a:	af00      	add	r7, sp, #0
 800568c:	4603      	mov	r3, r0
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	607a      	str	r2, [r7, #4]
 8005692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005698:	f7ff ff3e 	bl	8005518 <__NVIC_GetPriorityGrouping>
 800569c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	6978      	ldr	r0, [r7, #20]
 80056a4:	f7ff ff8e 	bl	80055c4 <NVIC_EncodePriority>
 80056a8:	4602      	mov	r2, r0
 80056aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ae:	4611      	mov	r1, r2
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff ff5d 	bl	8005570 <__NVIC_SetPriority>
}
 80056b6:	bf00      	nop
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	4603      	mov	r3, r0
 80056c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff ff31 	bl	8005534 <__NVIC_EnableIRQ>
}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff ffa2 	bl	800562c <SysTick_Config>
 80056e8:	4603      	mov	r3, r0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80056f2:	b480      	push	{r7}
 80056f4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e014      	b.n	800573c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	791b      	ldrb	r3, [r3, #4]
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fe fe7e 	bl	8004424 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005744:	b480      	push	{r7}
 8005746:	b089      	sub	sp, #36	@ 0x24
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_DAC_ConfigChannel+0x1c>
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e042      	b.n	80057ea <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	795b      	ldrb	r3, [r3, #5]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_DAC_ConfigChannel+0x2c>
 800576c:	2302      	movs	r3, #2
 800576e:	e03c      	b.n	80057ea <HAL_DAC_ConfigChannel+0xa6>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2202      	movs	r2, #2
 800577a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8005792:	43db      	mvns	r3, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4013      	ands	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6819      	ldr	r1, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	22c0      	movs	r2, #192	@ 0xc0
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43da      	mvns	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	400a      	ands	r2, r1
 80057da:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80057e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3724      	adds	r7, #36	@ 0x24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
	...

080057f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005804:	f7ff fbc2 	bl	8004f8c <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e099      	b.n	8005948 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0201 	bic.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005834:	e00f      	b.n	8005856 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005836:	f7ff fba9 	bl	8004f8c <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b05      	cmp	r3, #5
 8005842:	d908      	bls.n	8005856 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2203      	movs	r2, #3
 800584e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e078      	b.n	8005948 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e8      	bne.n	8005836 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	4b38      	ldr	r3, [pc, #224]	@ (8005950 <HAL_DMA_Init+0x158>)
 8005870:	4013      	ands	r3, r2
 8005872:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005882:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800588e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800589a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d107      	bne.n	80058c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b8:	4313      	orrs	r3, r2
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 0307 	bic.w	r3, r3, #7
 80058d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d117      	bne.n	800591a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00e      	beq.n	800591a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fb0f 	bl	8005f20 <DMA_CheckFifoParam>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2240      	movs	r2, #64	@ 0x40
 800590c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005916:	2301      	movs	r3, #1
 8005918:	e016      	b.n	8005948 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fac6 	bl	8005eb4 <DMA_CalcBaseAndBitshift>
 8005928:	4603      	mov	r3, r0
 800592a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005930:	223f      	movs	r2, #63	@ 0x3f
 8005932:	409a      	lsls	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	f010803f 	.word	0xf010803f

08005954 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800596a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_DMA_Start_IT+0x26>
 8005976:	2302      	movs	r3, #2
 8005978:	e040      	b.n	80059fc <HAL_DMA_Start_IT+0xa8>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b01      	cmp	r3, #1
 800598c:	d12f      	bne.n	80059ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2202      	movs	r2, #2
 8005992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 fa58 	bl	8005e58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ac:	223f      	movs	r2, #63	@ 0x3f
 80059ae:	409a      	lsls	r2, r3
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0216 	orr.w	r2, r2, #22
 80059c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0208 	orr.w	r2, r2, #8
 80059da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	e005      	b.n	80059fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80059f6:	2302      	movs	r3, #2
 80059f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80059fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a12:	f7ff fabb 	bl	8004f8c <HAL_GetTick>
 8005a16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d008      	beq.n	8005a36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2280      	movs	r2, #128	@ 0x80
 8005a28:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e052      	b.n	8005adc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0216 	bic.w	r2, r2, #22
 8005a44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d103      	bne.n	8005a66 <HAL_DMA_Abort+0x62>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0208 	bic.w	r2, r2, #8
 8005a74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0201 	bic.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a86:	e013      	b.n	8005ab0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a88:	f7ff fa80 	bl	8004f8c <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b05      	cmp	r3, #5
 8005a94:	d90c      	bls.n	8005ab0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e015      	b.n	8005adc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e4      	bne.n	8005a88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac2:	223f      	movs	r2, #63	@ 0x3f
 8005ac4:	409a      	lsls	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d004      	beq.n	8005b02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2280      	movs	r2, #128	@ 0x80
 8005afc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e00c      	b.n	8005b1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2205      	movs	r2, #5
 8005b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0201 	bic.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b34:	4b8e      	ldr	r3, [pc, #568]	@ (8005d70 <HAL_DMA_IRQHandler+0x248>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a8e      	ldr	r2, [pc, #568]	@ (8005d74 <HAL_DMA_IRQHandler+0x24c>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	0a9b      	lsrs	r3, r3, #10
 8005b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b52:	2208      	movs	r2, #8
 8005b54:	409a      	lsls	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d01a      	beq.n	8005b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d013      	beq.n	8005b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0204 	bic.w	r2, r2, #4
 8005b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b80:	2208      	movs	r2, #8
 8005b82:	409a      	lsls	r2, r3
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8c:	f043 0201 	orr.w	r2, r3, #1
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b98:	2201      	movs	r2, #1
 8005b9a:	409a      	lsls	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d012      	beq.n	8005bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00b      	beq.n	8005bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	409a      	lsls	r2, r3
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc2:	f043 0202 	orr.w	r2, r3, #2
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bce:	2204      	movs	r2, #4
 8005bd0:	409a      	lsls	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d012      	beq.n	8005c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00b      	beq.n	8005c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bec:	2204      	movs	r2, #4
 8005bee:	409a      	lsls	r2, r3
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf8:	f043 0204 	orr.w	r2, r3, #4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c04:	2210      	movs	r2, #16
 8005c06:	409a      	lsls	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d043      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d03c      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c22:	2210      	movs	r2, #16
 8005c24:	409a      	lsls	r2, r3
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d018      	beq.n	8005c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d108      	bne.n	8005c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d024      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4798      	blx	r3
 8005c56:	e01f      	b.n	8005c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01b      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	4798      	blx	r3
 8005c68:	e016      	b.n	8005c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d107      	bne.n	8005c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0208 	bic.w	r2, r2, #8
 8005c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	409a      	lsls	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 808f 	beq.w	8005dc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 8087 	beq.w	8005dc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b05      	cmp	r3, #5
 8005cd0:	d136      	bne.n	8005d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0216 	bic.w	r2, r2, #22
 8005ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695a      	ldr	r2, [r3, #20]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d103      	bne.n	8005d02 <HAL_DMA_IRQHandler+0x1da>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0208 	bic.w	r2, r2, #8
 8005d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d16:	223f      	movs	r2, #63	@ 0x3f
 8005d18:	409a      	lsls	r2, r3
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d07e      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	4798      	blx	r3
        }
        return;
 8005d3e:	e079      	b.n	8005e34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d01d      	beq.n	8005d8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10d      	bne.n	8005d78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d031      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	4798      	blx	r3
 8005d6c:	e02c      	b.n	8005dc8 <HAL_DMA_IRQHandler+0x2a0>
 8005d6e:	bf00      	nop
 8005d70:	20000000 	.word	0x20000000
 8005d74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d023      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	4798      	blx	r3
 8005d88:	e01e      	b.n	8005dc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10f      	bne.n	8005db8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0210 	bic.w	r2, r2, #16
 8005da6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d032      	beq.n	8005e36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d022      	beq.n	8005e22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2205      	movs	r2, #5
 8005de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0201 	bic.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	3301      	adds	r3, #1
 8005df8:	60bb      	str	r3, [r7, #8]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d307      	bcc.n	8005e10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f2      	bne.n	8005df4 <HAL_DMA_IRQHandler+0x2cc>
 8005e0e:	e000      	b.n	8005e12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d005      	beq.n	8005e36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	4798      	blx	r3
 8005e32:	e000      	b.n	8005e36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005e34:	bf00      	nop
    }
  }
}
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e4a:	b2db      	uxtb	r3, r3
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005e74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	2b40      	cmp	r3, #64	@ 0x40
 8005e84:	d108      	bne.n	8005e98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e96:	e007      	b.n	8005ea8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	60da      	str	r2, [r3, #12]
}
 8005ea8:	bf00      	nop
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	3b10      	subs	r3, #16
 8005ec4:	4a14      	ldr	r2, [pc, #80]	@ (8005f18 <DMA_CalcBaseAndBitshift+0x64>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	091b      	lsrs	r3, r3, #4
 8005ecc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ece:	4a13      	ldr	r2, [pc, #76]	@ (8005f1c <DMA_CalcBaseAndBitshift+0x68>)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d909      	bls.n	8005ef6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005eea:	f023 0303 	bic.w	r3, r3, #3
 8005eee:	1d1a      	adds	r2, r3, #4
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ef4:	e007      	b.n	8005f06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	aaaaaaab 	.word	0xaaaaaaab
 8005f1c:	080108e8 	.word	0x080108e8

08005f20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d11f      	bne.n	8005f7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d856      	bhi.n	8005fee <DMA_CheckFifoParam+0xce>
 8005f40:	a201      	add	r2, pc, #4	@ (adr r2, 8005f48 <DMA_CheckFifoParam+0x28>)
 8005f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f46:	bf00      	nop
 8005f48:	08005f59 	.word	0x08005f59
 8005f4c:	08005f6b 	.word	0x08005f6b
 8005f50:	08005f59 	.word	0x08005f59
 8005f54:	08005fef 	.word	0x08005fef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d046      	beq.n	8005ff2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f68:	e043      	b.n	8005ff2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005f72:	d140      	bne.n	8005ff6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f78:	e03d      	b.n	8005ff6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f82:	d121      	bne.n	8005fc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d837      	bhi.n	8005ffa <DMA_CheckFifoParam+0xda>
 8005f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f90 <DMA_CheckFifoParam+0x70>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fa1 	.word	0x08005fa1
 8005f94:	08005fa7 	.word	0x08005fa7
 8005f98:	08005fa1 	.word	0x08005fa1
 8005f9c:	08005fb9 	.word	0x08005fb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa4:	e030      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005faa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d025      	beq.n	8005ffe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb6:	e022      	b.n	8005ffe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005fc0:	d11f      	bne.n	8006002 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005fc6:	e01c      	b.n	8006002 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d903      	bls.n	8005fd6 <DMA_CheckFifoParam+0xb6>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d003      	beq.n	8005fdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005fd4:	e018      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8005fda:	e015      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00e      	beq.n	8006006 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
      break;
 8005fec:	e00b      	b.n	8006006 <DMA_CheckFifoParam+0xe6>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e00a      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e008      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e006      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      break;
 8005ffa:	bf00      	nop
 8005ffc:	e004      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      break;
 8005ffe:	bf00      	nop
 8006000:	e002      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      break;   
 8006002:	bf00      	nop
 8006004:	e000      	b.n	8006008 <DMA_CheckFifoParam+0xe8>
      break;
 8006006:	bf00      	nop
    }
  } 
  
  return status; 
 8006008:	7bfb      	ldrb	r3, [r7, #15]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop

08006018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006018:	b480      	push	{r7}
 800601a:	b089      	sub	sp, #36	@ 0x24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006026:	2300      	movs	r3, #0
 8006028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800602a:	2300      	movs	r3, #0
 800602c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800602e:	2300      	movs	r3, #0
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	e165      	b.n	8006300 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006034:	2201      	movs	r2, #1
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	fa02 f303 	lsl.w	r3, r2, r3
 800603c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4013      	ands	r3, r2
 8006046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	429a      	cmp	r2, r3
 800604e:	f040 8154 	bne.w	80062fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	2b01      	cmp	r3, #1
 800605c:	d005      	beq.n	800606a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006066:	2b02      	cmp	r3, #2
 8006068:	d130      	bne.n	80060cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	2203      	movs	r2, #3
 8006076:	fa02 f303 	lsl.w	r3, r2, r3
 800607a:	43db      	mvns	r3, r3
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	4013      	ands	r3, r2
 8006080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	fa02 f303 	lsl.w	r3, r2, r3
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	4313      	orrs	r3, r2
 8006092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060a0:	2201      	movs	r2, #1
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	43db      	mvns	r3, r3
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	4013      	ands	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	091b      	lsrs	r3, r3, #4
 80060b6:	f003 0201 	and.w	r2, r3, #1
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d017      	beq.n	8006108 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	2203      	movs	r2, #3
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	43db      	mvns	r3, r3
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	4013      	ands	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4313      	orrs	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f003 0303 	and.w	r3, r3, #3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d123      	bne.n	800615c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	08da      	lsrs	r2, r3, #3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3208      	adds	r2, #8
 800611c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006120:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	220f      	movs	r2, #15
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	43db      	mvns	r3, r3
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	4013      	ands	r3, r2
 8006136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4313      	orrs	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	08da      	lsrs	r2, r3, #3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3208      	adds	r2, #8
 8006156:	69b9      	ldr	r1, [r7, #24]
 8006158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	2203      	movs	r2, #3
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	43db      	mvns	r3, r3
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	4013      	ands	r3, r2
 8006172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f003 0203 	and.w	r2, r3, #3
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	4313      	orrs	r3, r2
 8006188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 80ae 	beq.w	80062fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	4b5d      	ldr	r3, [pc, #372]	@ (8006318 <HAL_GPIO_Init+0x300>)
 80061a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a6:	4a5c      	ldr	r2, [pc, #368]	@ (8006318 <HAL_GPIO_Init+0x300>)
 80061a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80061ae:	4b5a      	ldr	r3, [pc, #360]	@ (8006318 <HAL_GPIO_Init+0x300>)
 80061b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061ba:	4a58      	ldr	r2, [pc, #352]	@ (800631c <HAL_GPIO_Init+0x304>)
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	089b      	lsrs	r3, r3, #2
 80061c0:	3302      	adds	r3, #2
 80061c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	220f      	movs	r2, #15
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	43db      	mvns	r3, r3
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	4013      	ands	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a4f      	ldr	r2, [pc, #316]	@ (8006320 <HAL_GPIO_Init+0x308>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d025      	beq.n	8006232 <HAL_GPIO_Init+0x21a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a4e      	ldr	r2, [pc, #312]	@ (8006324 <HAL_GPIO_Init+0x30c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d01f      	beq.n	800622e <HAL_GPIO_Init+0x216>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a4d      	ldr	r2, [pc, #308]	@ (8006328 <HAL_GPIO_Init+0x310>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d019      	beq.n	800622a <HAL_GPIO_Init+0x212>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a4c      	ldr	r2, [pc, #304]	@ (800632c <HAL_GPIO_Init+0x314>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d013      	beq.n	8006226 <HAL_GPIO_Init+0x20e>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a4b      	ldr	r2, [pc, #300]	@ (8006330 <HAL_GPIO_Init+0x318>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00d      	beq.n	8006222 <HAL_GPIO_Init+0x20a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a4a      	ldr	r2, [pc, #296]	@ (8006334 <HAL_GPIO_Init+0x31c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d007      	beq.n	800621e <HAL_GPIO_Init+0x206>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a49      	ldr	r2, [pc, #292]	@ (8006338 <HAL_GPIO_Init+0x320>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d101      	bne.n	800621a <HAL_GPIO_Init+0x202>
 8006216:	2306      	movs	r3, #6
 8006218:	e00c      	b.n	8006234 <HAL_GPIO_Init+0x21c>
 800621a:	2307      	movs	r3, #7
 800621c:	e00a      	b.n	8006234 <HAL_GPIO_Init+0x21c>
 800621e:	2305      	movs	r3, #5
 8006220:	e008      	b.n	8006234 <HAL_GPIO_Init+0x21c>
 8006222:	2304      	movs	r3, #4
 8006224:	e006      	b.n	8006234 <HAL_GPIO_Init+0x21c>
 8006226:	2303      	movs	r3, #3
 8006228:	e004      	b.n	8006234 <HAL_GPIO_Init+0x21c>
 800622a:	2302      	movs	r3, #2
 800622c:	e002      	b.n	8006234 <HAL_GPIO_Init+0x21c>
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <HAL_GPIO_Init+0x21c>
 8006232:	2300      	movs	r3, #0
 8006234:	69fa      	ldr	r2, [r7, #28]
 8006236:	f002 0203 	and.w	r2, r2, #3
 800623a:	0092      	lsls	r2, r2, #2
 800623c:	4093      	lsls	r3, r2
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	4313      	orrs	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006244:	4935      	ldr	r1, [pc, #212]	@ (800631c <HAL_GPIO_Init+0x304>)
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	089b      	lsrs	r3, r3, #2
 800624a:	3302      	adds	r3, #2
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006252:	4b3a      	ldr	r3, [pc, #232]	@ (800633c <HAL_GPIO_Init+0x324>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	43db      	mvns	r3, r3
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	4013      	ands	r3, r2
 8006260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006276:	4a31      	ldr	r2, [pc, #196]	@ (800633c <HAL_GPIO_Init+0x324>)
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800627c:	4b2f      	ldr	r3, [pc, #188]	@ (800633c <HAL_GPIO_Init+0x324>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	43db      	mvns	r3, r3
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	4013      	ands	r3, r2
 800628a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	4313      	orrs	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062a0:	4a26      	ldr	r2, [pc, #152]	@ (800633c <HAL_GPIO_Init+0x324>)
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062a6:	4b25      	ldr	r3, [pc, #148]	@ (800633c <HAL_GPIO_Init+0x324>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	43db      	mvns	r3, r3
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	4013      	ands	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062ca:	4a1c      	ldr	r2, [pc, #112]	@ (800633c <HAL_GPIO_Init+0x324>)
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062d0:	4b1a      	ldr	r3, [pc, #104]	@ (800633c <HAL_GPIO_Init+0x324>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	43db      	mvns	r3, r3
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	4013      	ands	r3, r2
 80062de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062f4:	4a11      	ldr	r2, [pc, #68]	@ (800633c <HAL_GPIO_Init+0x324>)
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	3301      	adds	r3, #1
 80062fe:	61fb      	str	r3, [r7, #28]
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b0f      	cmp	r3, #15
 8006304:	f67f ae96 	bls.w	8006034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	3724      	adds	r7, #36	@ 0x24
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40023800 	.word	0x40023800
 800631c:	40013800 	.word	0x40013800
 8006320:	40020000 	.word	0x40020000
 8006324:	40020400 	.word	0x40020400
 8006328:	40020800 	.word	0x40020800
 800632c:	40020c00 	.word	0x40020c00
 8006330:	40021000 	.word	0x40021000
 8006334:	40021400 	.word	0x40021400
 8006338:	40021800 	.word	0x40021800
 800633c:	40013c00 	.word	0x40013c00

08006340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	807b      	strh	r3, [r7, #2]
 800634c:	4613      	mov	r3, r2
 800634e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006350:	787b      	ldrb	r3, [r7, #1]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006356:	887a      	ldrh	r2, [r7, #2]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800635c:	e003      	b.n	8006366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800635e:	887b      	ldrh	r3, [r7, #2]
 8006360:	041a      	lsls	r2, r3, #16
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	619a      	str	r2, [r3, #24]
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
	...

08006374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e12b      	b.n	80065de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d106      	bne.n	80063a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fe f8bc 	bl	8004518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2224      	movs	r2, #36	@ 0x24
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0201 	bic.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063d8:	f001 ff10 	bl	80081fc <HAL_RCC_GetPCLK1Freq>
 80063dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	4a81      	ldr	r2, [pc, #516]	@ (80065e8 <HAL_I2C_Init+0x274>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d807      	bhi.n	80063f8 <HAL_I2C_Init+0x84>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4a80      	ldr	r2, [pc, #512]	@ (80065ec <HAL_I2C_Init+0x278>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	bf94      	ite	ls
 80063f0:	2301      	movls	r3, #1
 80063f2:	2300      	movhi	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	e006      	b.n	8006406 <HAL_I2C_Init+0x92>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4a7d      	ldr	r2, [pc, #500]	@ (80065f0 <HAL_I2C_Init+0x27c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	bf94      	ite	ls
 8006400:	2301      	movls	r3, #1
 8006402:	2300      	movhi	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e0e7      	b.n	80065de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4a78      	ldr	r2, [pc, #480]	@ (80065f4 <HAL_I2C_Init+0x280>)
 8006412:	fba2 2303 	umull	r2, r3, r2, r3
 8006416:	0c9b      	lsrs	r3, r3, #18
 8006418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	4a6a      	ldr	r2, [pc, #424]	@ (80065e8 <HAL_I2C_Init+0x274>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d802      	bhi.n	8006448 <HAL_I2C_Init+0xd4>
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	3301      	adds	r3, #1
 8006446:	e009      	b.n	800645c <HAL_I2C_Init+0xe8>
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800644e:	fb02 f303 	mul.w	r3, r2, r3
 8006452:	4a69      	ldr	r2, [pc, #420]	@ (80065f8 <HAL_I2C_Init+0x284>)
 8006454:	fba2 2303 	umull	r2, r3, r2, r3
 8006458:	099b      	lsrs	r3, r3, #6
 800645a:	3301      	adds	r3, #1
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6812      	ldr	r2, [r2, #0]
 8006460:	430b      	orrs	r3, r1
 8006462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800646e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	495c      	ldr	r1, [pc, #368]	@ (80065e8 <HAL_I2C_Init+0x274>)
 8006478:	428b      	cmp	r3, r1
 800647a:	d819      	bhi.n	80064b0 <HAL_I2C_Init+0x13c>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	1e59      	subs	r1, r3, #1
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	fbb1 f3f3 	udiv	r3, r1, r3
 800648a:	1c59      	adds	r1, r3, #1
 800648c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006490:	400b      	ands	r3, r1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <HAL_I2C_Init+0x138>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	1e59      	subs	r1, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80064a4:	3301      	adds	r3, #1
 80064a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064aa:	e051      	b.n	8006550 <HAL_I2C_Init+0x1dc>
 80064ac:	2304      	movs	r3, #4
 80064ae:	e04f      	b.n	8006550 <HAL_I2C_Init+0x1dc>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d111      	bne.n	80064dc <HAL_I2C_Init+0x168>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	1e58      	subs	r0, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6859      	ldr	r1, [r3, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	440b      	add	r3, r1
 80064c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80064ca:	3301      	adds	r3, #1
 80064cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	bf0c      	ite	eq
 80064d4:	2301      	moveq	r3, #1
 80064d6:	2300      	movne	r3, #0
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	e012      	b.n	8006502 <HAL_I2C_Init+0x18e>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	1e58      	subs	r0, r3, #1
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6859      	ldr	r1, [r3, #4]
 80064e4:	460b      	mov	r3, r1
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	440b      	add	r3, r1
 80064ea:	0099      	lsls	r1, r3, #2
 80064ec:	440b      	add	r3, r1
 80064ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80064f2:	3301      	adds	r3, #1
 80064f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	bf0c      	ite	eq
 80064fc:	2301      	moveq	r3, #1
 80064fe:	2300      	movne	r3, #0
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <HAL_I2C_Init+0x196>
 8006506:	2301      	movs	r3, #1
 8006508:	e022      	b.n	8006550 <HAL_I2C_Init+0x1dc>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10e      	bne.n	8006530 <HAL_I2C_Init+0x1bc>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	1e58      	subs	r0, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6859      	ldr	r1, [r3, #4]
 800651a:	460b      	mov	r3, r1
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	440b      	add	r3, r1
 8006520:	fbb0 f3f3 	udiv	r3, r0, r3
 8006524:	3301      	adds	r3, #1
 8006526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800652a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800652e:	e00f      	b.n	8006550 <HAL_I2C_Init+0x1dc>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	1e58      	subs	r0, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6859      	ldr	r1, [r3, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	440b      	add	r3, r1
 800653e:	0099      	lsls	r1, r3, #2
 8006540:	440b      	add	r3, r1
 8006542:	fbb0 f3f3 	udiv	r3, r0, r3
 8006546:	3301      	adds	r3, #1
 8006548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800654c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	6809      	ldr	r1, [r1, #0]
 8006554:	4313      	orrs	r3, r2
 8006556:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	69da      	ldr	r2, [r3, #28]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800657e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6911      	ldr	r1, [r2, #16]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	68d2      	ldr	r2, [r2, #12]
 800658a:	4311      	orrs	r1, r2
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6812      	ldr	r2, [r2, #0]
 8006590:	430b      	orrs	r3, r1
 8006592:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	695a      	ldr	r2, [r3, #20]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0201 	orr.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	000186a0 	.word	0x000186a0
 80065ec:	001e847f 	.word	0x001e847f
 80065f0:	003d08ff 	.word	0x003d08ff
 80065f4:	431bde83 	.word	0x431bde83
 80065f8:	10624dd3 	.word	0x10624dd3

080065fc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660e:	2b80      	cmp	r3, #128	@ 0x80
 8006610:	d103      	bne.n	800661a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2200      	movs	r2, #0
 8006618:	611a      	str	r2, [r3, #16]
  }
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b088      	sub	sp, #32
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663e:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006646:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800664e:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	2b10      	cmp	r3, #16
 8006654:	d003      	beq.n	800665e <HAL_I2C_EV_IRQHandler+0x38>
 8006656:	7bfb      	ldrb	r3, [r7, #15]
 8006658:	2b40      	cmp	r3, #64	@ 0x40
 800665a:	f040 80c1 	bne.w	80067e0 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10d      	bne.n	8006694 <HAL_I2C_EV_IRQHandler+0x6e>
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800667e:	d003      	beq.n	8006688 <HAL_I2C_EV_IRQHandler+0x62>
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006686:	d101      	bne.n	800668c <HAL_I2C_EV_IRQHandler+0x66>
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <HAL_I2C_EV_IRQHandler+0x68>
 800668c:	2300      	movs	r3, #0
 800668e:	2b01      	cmp	r3, #1
 8006690:	f000 8132 	beq.w	80068f8 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00c      	beq.n	80066b8 <HAL_I2C_EV_IRQHandler+0x92>
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	0a5b      	lsrs	r3, r3, #9
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d006      	beq.n	80066b8 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f001 fc98 	bl	8007fe0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fd9b 	bl	80071ec <I2C_Master_SB>
 80066b6:	e092      	b.n	80067de <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	08db      	lsrs	r3, r3, #3
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d009      	beq.n	80066d8 <HAL_I2C_EV_IRQHandler+0xb2>
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	0a5b      	lsrs	r3, r3, #9
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fe11 	bl	80072f8 <I2C_Master_ADD10>
 80066d6:	e082      	b.n	80067de <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	085b      	lsrs	r3, r3, #1
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d009      	beq.n	80066f8 <HAL_I2C_EV_IRQHandler+0xd2>
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	0a5b      	lsrs	r3, r3, #9
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fe2b 	bl	800734c <I2C_Master_ADDR>
 80066f6:	e072      	b.n	80067de <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	089b      	lsrs	r3, r3, #2
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d03b      	beq.n	800677c <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800670e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006712:	f000 80f3 	beq.w	80068fc <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	09db      	lsrs	r3, r3, #7
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00f      	beq.n	8006742 <HAL_I2C_EV_IRQHandler+0x11c>
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	0a9b      	lsrs	r3, r3, #10
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d009      	beq.n	8006742 <HAL_I2C_EV_IRQHandler+0x11c>
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	089b      	lsrs	r3, r3, #2
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d103      	bne.n	8006742 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f9f3 	bl	8006b26 <I2C_MasterTransmit_TXE>
 8006740:	e04d      	b.n	80067de <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	089b      	lsrs	r3, r3, #2
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 80d6 	beq.w	80068fc <HAL_I2C_EV_IRQHandler+0x2d6>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	0a5b      	lsrs	r3, r3, #9
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 80cf 	beq.w	80068fc <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800675e:	7bbb      	ldrb	r3, [r7, #14]
 8006760:	2b21      	cmp	r3, #33	@ 0x21
 8006762:	d103      	bne.n	800676c <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fa7a 	bl	8006c5e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800676a:	e0c7      	b.n	80068fc <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	2b40      	cmp	r3, #64	@ 0x40
 8006770:	f040 80c4 	bne.w	80068fc <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fae8 	bl	8006d4a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800677a:	e0bf      	b.n	80068fc <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800678a:	f000 80b7 	beq.w	80068fc <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	099b      	lsrs	r3, r3, #6
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00f      	beq.n	80067ba <HAL_I2C_EV_IRQHandler+0x194>
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	0a9b      	lsrs	r3, r3, #10
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d009      	beq.n	80067ba <HAL_I2C_EV_IRQHandler+0x194>
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	089b      	lsrs	r3, r3, #2
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d103      	bne.n	80067ba <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fb61 	bl	8006e7a <I2C_MasterReceive_RXNE>
 80067b8:	e011      	b.n	80067de <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	089b      	lsrs	r3, r3, #2
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 809a 	beq.w	80068fc <HAL_I2C_EV_IRQHandler+0x2d6>
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	0a5b      	lsrs	r3, r3, #9
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 8093 	beq.w	80068fc <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fc17 	bl	800700a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067dc:	e08e      	b.n	80068fc <HAL_I2C_EV_IRQHandler+0x2d6>
 80067de:	e08d      	b.n	80068fc <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d004      	beq.n	80067f2 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	61fb      	str	r3, [r7, #28]
 80067f0:	e007      	b.n	8006802 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	085b      	lsrs	r3, r3, #1
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d012      	beq.n	8006834 <HAL_I2C_EV_IRQHandler+0x20e>
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	0a5b      	lsrs	r3, r3, #9
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00c      	beq.n	8006834 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800682a:	69b9      	ldr	r1, [r7, #24]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 ffdc 	bl	80077ea <I2C_Slave_ADDR>
 8006832:	e066      	b.n	8006902 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	091b      	lsrs	r3, r3, #4
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d009      	beq.n	8006854 <HAL_I2C_EV_IRQHandler+0x22e>
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	0a5b      	lsrs	r3, r3, #9
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f001 f817 	bl	8007880 <I2C_Slave_STOPF>
 8006852:	e056      	b.n	8006902 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006854:	7bbb      	ldrb	r3, [r7, #14]
 8006856:	2b21      	cmp	r3, #33	@ 0x21
 8006858:	d002      	beq.n	8006860 <HAL_I2C_EV_IRQHandler+0x23a>
 800685a:	7bbb      	ldrb	r3, [r7, #14]
 800685c:	2b29      	cmp	r3, #41	@ 0x29
 800685e:	d125      	bne.n	80068ac <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	09db      	lsrs	r3, r3, #7
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00f      	beq.n	800688c <HAL_I2C_EV_IRQHandler+0x266>
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	0a9b      	lsrs	r3, r3, #10
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d009      	beq.n	800688c <HAL_I2C_EV_IRQHandler+0x266>
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	089b      	lsrs	r3, r3, #2
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b00      	cmp	r3, #0
 8006882:	d103      	bne.n	800688c <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fef2 	bl	800766e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800688a:	e039      	b.n	8006900 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	089b      	lsrs	r3, r3, #2
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d033      	beq.n	8006900 <HAL_I2C_EV_IRQHandler+0x2da>
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	0a5b      	lsrs	r3, r3, #9
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d02d      	beq.n	8006900 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 ff1f 	bl	80076e8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068aa:	e029      	b.n	8006900 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	099b      	lsrs	r3, r3, #6
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00f      	beq.n	80068d8 <HAL_I2C_EV_IRQHandler+0x2b2>
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	0a9b      	lsrs	r3, r3, #10
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d009      	beq.n	80068d8 <HAL_I2C_EV_IRQHandler+0x2b2>
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	089b      	lsrs	r3, r3, #2
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d103      	bne.n	80068d8 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 ff2a 	bl	800772a <I2C_SlaveReceive_RXNE>
 80068d6:	e014      	b.n	8006902 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	089b      	lsrs	r3, r3, #2
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00e      	beq.n	8006902 <HAL_I2C_EV_IRQHandler+0x2dc>
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	0a5b      	lsrs	r3, r3, #9
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d008      	beq.n	8006902 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 ff58 	bl	80077a6 <I2C_SlaveReceive_BTF>
 80068f6:	e004      	b.n	8006902 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80068f8:	bf00      	nop
 80068fa:	e002      	b.n	8006902 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068fc:	bf00      	nop
 80068fe:	e000      	b.n	8006902 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006900:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006902:	3720      	adds	r7, #32
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	@ 0x28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006920:	2300      	movs	r3, #0
 8006922:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800692a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	0a1b      	lsrs	r3, r3, #8
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00e      	beq.n	8006956 <HAL_I2C_ER_IRQHandler+0x4e>
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	0a1b      	lsrs	r3, r3, #8
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d008      	beq.n	8006956 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006946:	f043 0301 	orr.w	r3, r3, #1
 800694a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006954:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	0a5b      	lsrs	r3, r3, #9
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00e      	beq.n	8006980 <HAL_I2C_ER_IRQHandler+0x78>
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	0a1b      	lsrs	r3, r3, #8
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d008      	beq.n	8006980 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	f043 0302 	orr.w	r3, r3, #2
 8006974:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800697e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	0a9b      	lsrs	r3, r3, #10
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d03f      	beq.n	8006a0c <HAL_I2C_ER_IRQHandler+0x104>
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	0a1b      	lsrs	r3, r3, #8
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d039      	beq.n	8006a0c <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006998:	7efb      	ldrb	r3, [r7, #27]
 800699a:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069aa:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80069b2:	7ebb      	ldrb	r3, [r7, #26]
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d112      	bne.n	80069de <HAL_I2C_ER_IRQHandler+0xd6>
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10f      	bne.n	80069de <HAL_I2C_ER_IRQHandler+0xd6>
 80069be:	7cfb      	ldrb	r3, [r7, #19]
 80069c0:	2b21      	cmp	r3, #33	@ 0x21
 80069c2:	d008      	beq.n	80069d6 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80069c4:	7cfb      	ldrb	r3, [r7, #19]
 80069c6:	2b29      	cmp	r3, #41	@ 0x29
 80069c8:	d005      	beq.n	80069d6 <HAL_I2C_ER_IRQHandler+0xce>
 80069ca:	7cfb      	ldrb	r3, [r7, #19]
 80069cc:	2b28      	cmp	r3, #40	@ 0x28
 80069ce:	d106      	bne.n	80069de <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b21      	cmp	r3, #33	@ 0x21
 80069d4:	d103      	bne.n	80069de <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 f882 	bl	8007ae0 <I2C_Slave_AF>
 80069dc:	e016      	b.n	8006a0c <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80069e6:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80069e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ea:	f043 0304 	orr.w	r3, r3, #4
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80069f0:	7efb      	ldrb	r3, [r7, #27]
 80069f2:	2b10      	cmp	r3, #16
 80069f4:	d002      	beq.n	80069fc <HAL_I2C_ER_IRQHandler+0xf4>
 80069f6:	7efb      	ldrb	r3, [r7, #27]
 80069f8:	2b40      	cmp	r3, #64	@ 0x40
 80069fa:	d107      	bne.n	8006a0c <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a0a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	0adb      	lsrs	r3, r3, #11
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00e      	beq.n	8006a36 <HAL_I2C_ER_IRQHandler+0x12e>
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	0a1b      	lsrs	r3, r3, #8
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d008      	beq.n	8006a36 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a26:	f043 0308 	orr.w	r3, r3, #8
 8006a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8006a34:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d008      	beq.n	8006a4e <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 f8bd 	bl	8007bc8 <I2C_ITError>
  }
}
 8006a4e:	bf00      	nop
 8006a50:	3728      	adds	r7, #40	@ 0x28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	70fb      	strb	r3, [r7, #3]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006ab6:	bf00      	nop
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006b06:	bf00      	nop
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b34:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b3c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b42:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d150      	bne.n	8006bee <I2C_MasterTransmit_TXE+0xc8>
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
 8006b4e:	2b21      	cmp	r3, #33	@ 0x21
 8006b50:	d14d      	bne.n	8006bee <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d01d      	beq.n	8006b94 <I2C_MasterTransmit_TXE+0x6e>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d01a      	beq.n	8006b94 <I2C_MasterTransmit_TXE+0x6e>
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b64:	d016      	beq.n	8006b94 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b74:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2211      	movs	r2, #17
 8006b7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff ff62 	bl	8006a56 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b92:	e060      	b.n	8006c56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ba2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bb2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b40      	cmp	r3, #64	@ 0x40
 8006bcc:	d107      	bne.n	8006bde <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7ff ff7d 	bl	8006ad6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bdc:	e03b      	b.n	8006c56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7ff ff35 	bl	8006a56 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bec:	e033      	b.n	8006c56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	2b21      	cmp	r3, #33	@ 0x21
 8006bf2:	d005      	beq.n	8006c00 <I2C_MasterTransmit_TXE+0xda>
 8006bf4:	7bbb      	ldrb	r3, [r7, #14]
 8006bf6:	2b40      	cmp	r3, #64	@ 0x40
 8006bf8:	d12d      	bne.n	8006c56 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	2b22      	cmp	r3, #34	@ 0x22
 8006bfe:	d12a      	bne.n	8006c56 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d108      	bne.n	8006c1c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c18:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006c1a:	e01c      	b.n	8006c56 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b40      	cmp	r3, #64	@ 0x40
 8006c26:	d103      	bne.n	8006c30 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f88e 	bl	8006d4a <I2C_MemoryTransmit_TXE_BTF>
}
 8006c2e:	e012      	b.n	8006c56 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c34:	781a      	ldrb	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006c54:	e7ff      	b.n	8006c56 <I2C_MasterTransmit_TXE+0x130>
 8006c56:	bf00      	nop
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b21      	cmp	r3, #33	@ 0x21
 8006c76:	d164      	bne.n	8006d42 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d012      	beq.n	8006ca8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c86:	781a      	ldrb	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006ca6:	e04c      	b.n	8006d42 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d01d      	beq.n	8006cea <I2C_MasterTransmit_BTF+0x8c>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	d01a      	beq.n	8006cea <I2C_MasterTransmit_BTF+0x8c>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006cba:	d016      	beq.n	8006cea <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006cca:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2211      	movs	r2, #17
 8006cd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff feb7 	bl	8006a56 <HAL_I2C_MasterTxCpltCallback>
}
 8006ce8:	e02b      	b.n	8006d42 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006cf8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d08:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b40      	cmp	r3, #64	@ 0x40
 8006d22:	d107      	bne.n	8006d34 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff fed2 	bl	8006ad6 <HAL_I2C_MemTxCpltCallback>
}
 8006d32:	e006      	b.n	8006d42 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff fe8a 	bl	8006a56 <HAL_I2C_MasterTxCpltCallback>
}
 8006d42:	bf00      	nop
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d58:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d11d      	bne.n	8006d9e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d10b      	bne.n	8006d82 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d7a:	1c9a      	adds	r2, r3, #2
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006d80:	e077      	b.n	8006e72 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	121b      	asrs	r3, r3, #8
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006d9c:	e069      	b.n	8006e72 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d10b      	bne.n	8006dbe <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006dbc:	e059      	b.n	8006e72 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d152      	bne.n	8006e6c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	2b22      	cmp	r3, #34	@ 0x22
 8006dca:	d10d      	bne.n	8006de8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006dda:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006de6:	e044      	b.n	8006e72 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d015      	beq.n	8006e1e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	2b21      	cmp	r3, #33	@ 0x21
 8006df6:	d112      	bne.n	8006e1e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfc:	781a      	ldrb	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	3b01      	subs	r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006e1c:	e029      	b.n	8006e72 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d124      	bne.n	8006e72 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	2b21      	cmp	r3, #33	@ 0x21
 8006e2c:	d121      	bne.n	8006e72 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e3c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e4c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2220      	movs	r2, #32
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff fe36 	bl	8006ad6 <HAL_I2C_MemTxCpltCallback>
}
 8006e6a:	e002      	b.n	8006e72 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff fbc5 	bl	80065fc <I2C_Flush_DR>
}
 8006e72:	bf00      	nop
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b22      	cmp	r3, #34	@ 0x22
 8006e8c:	f040 80b9 	bne.w	8007002 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e94:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d921      	bls.n	8006ee8 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691a      	ldr	r2, [r3, #16]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	f040 8096 	bne.w	8007002 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ee4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006ee6:	e08c      	b.n	8007002 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d07f      	beq.n	8006ff0 <I2C_MasterReceive_RXNE+0x176>
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d002      	beq.n	8006efc <I2C_MasterReceive_RXNE+0x82>
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d179      	bne.n	8006ff0 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 f83d 	bl	8007f7c <I2C_WaitOnSTOPRequestThroughIT>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d14c      	bne.n	8006fa2 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f16:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006f26:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	691a      	ldr	r2, [r3, #16]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3b01      	subs	r3, #1
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b40      	cmp	r3, #64	@ 0x40
 8006f60:	d10a      	bne.n	8006f78 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff fdba 	bl	8006aea <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f76:	e044      	b.n	8007002 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b08      	cmp	r3, #8
 8006f84:	d002      	beq.n	8006f8c <I2C_MasterReceive_RXNE+0x112>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d103      	bne.n	8006f94 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f92:	e002      	b.n	8006f9a <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2212      	movs	r2, #18
 8006f98:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff fd65 	bl	8006a6a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006fa0:	e02f      	b.n	8007002 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006fb0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	691a      	ldr	r2, [r3, #16]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff fd88 	bl	8006afe <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006fee:	e008      	b.n	8007002 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ffe:	605a      	str	r2, [r3, #4]
}
 8007000:	e7ff      	b.n	8007002 <I2C_MasterReceive_RXNE+0x188>
 8007002:	bf00      	nop
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b084      	sub	sp, #16
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007016:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b04      	cmp	r3, #4
 8007020:	d11b      	bne.n	800705a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007030:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	691a      	ldr	r2, [r3, #16]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703c:	b2d2      	uxtb	r2, r2
 800703e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800704e:	b29b      	uxth	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007058:	e0c4      	b.n	80071e4 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b03      	cmp	r3, #3
 8007062:	d129      	bne.n	80070b8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007072:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b04      	cmp	r3, #4
 8007078:	d00a      	beq.n	8007090 <I2C_MasterReceive_BTF+0x86>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d007      	beq.n	8007090 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800708e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	3b01      	subs	r3, #1
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80070b6:	e095      	b.n	80071e4 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070bc:	b29b      	uxth	r3, r3
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d17d      	bne.n	80071be <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d002      	beq.n	80070ce <I2C_MasterReceive_BTF+0xc4>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b10      	cmp	r3, #16
 80070cc:	d108      	bne.n	80070e0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	e016      	b.n	800710e <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d002      	beq.n	80070ec <I2C_MasterReceive_BTF+0xe2>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d108      	bne.n	80070fe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	e007      	b.n	800710e <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800710c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691a      	ldr	r2, [r3, #16]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007118:	b2d2      	uxtb	r2, r2
 800711a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	691a      	ldr	r2, [r3, #16]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007168:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b40      	cmp	r3, #64	@ 0x40
 800717c:	d10a      	bne.n	8007194 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff fcac 	bl	8006aea <HAL_I2C_MemRxCpltCallback>
}
 8007192:	e027      	b.n	80071e4 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b08      	cmp	r3, #8
 80071a0:	d002      	beq.n	80071a8 <I2C_MasterReceive_BTF+0x19e>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	d103      	bne.n	80071b0 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80071ae:	e002      	b.n	80071b6 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2212      	movs	r2, #18
 80071b4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7ff fc57 	bl	8006a6a <HAL_I2C_MasterRxCpltCallback>
}
 80071bc:	e012      	b.n	80071e4 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c8:	b2d2      	uxtb	r2, r2
 80071ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80071e4:	bf00      	nop
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b40      	cmp	r3, #64	@ 0x40
 80071fe:	d117      	bne.n	8007230 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007204:	2b00      	cmp	r3, #0
 8007206:	d109      	bne.n	800721c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720c:	b2db      	uxtb	r3, r3
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007218:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800721a:	e067      	b.n	80072ec <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007220:	b2db      	uxtb	r3, r3
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	b2da      	uxtb	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	611a      	str	r2, [r3, #16]
}
 800722e:	e05d      	b.n	80072ec <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007238:	d133      	bne.n	80072a2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b21      	cmp	r3, #33	@ 0x21
 8007244:	d109      	bne.n	800725a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800724a:	b2db      	uxtb	r3, r3
 800724c:	461a      	mov	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007256:	611a      	str	r2, [r3, #16]
 8007258:	e008      	b.n	800726c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800725e:	b2db      	uxtb	r3, r3
 8007260:	f043 0301 	orr.w	r3, r3, #1
 8007264:	b2da      	uxtb	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007270:	2b00      	cmp	r3, #0
 8007272:	d004      	beq.n	800727e <I2C_Master_SB+0x92>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800727a:	2b00      	cmp	r3, #0
 800727c:	d108      	bne.n	8007290 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007282:	2b00      	cmp	r3, #0
 8007284:	d032      	beq.n	80072ec <I2C_Master_SB+0x100>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d02d      	beq.n	80072ec <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800729e:	605a      	str	r2, [r3, #4]
}
 80072a0:	e024      	b.n	80072ec <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10e      	bne.n	80072c8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	11db      	asrs	r3, r3, #7
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f003 0306 	and.w	r3, r3, #6
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	f063 030f 	orn	r3, r3, #15
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	611a      	str	r2, [r3, #16]
}
 80072c6:	e011      	b.n	80072ec <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d10d      	bne.n	80072ec <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	11db      	asrs	r3, r3, #7
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	f003 0306 	and.w	r3, r3, #6
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f063 030e 	orn	r3, r3, #14
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	611a      	str	r2, [r3, #16]
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007304:	b2da      	uxtb	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007310:	2b00      	cmp	r3, #0
 8007312:	d004      	beq.n	800731e <I2C_Master_ADD10+0x26>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d108      	bne.n	8007330 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00c      	beq.n	8007340 <I2C_Master_ADD10+0x48>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732c:	2b00      	cmp	r3, #0
 800732e:	d007      	beq.n	8007340 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800733e:	605a      	str	r2, [r3, #4]
  }
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800734c:	b480      	push	{r7}
 800734e:	b091      	sub	sp, #68	@ 0x44
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800735a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007362:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007368:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b22      	cmp	r3, #34	@ 0x22
 8007374:	f040 8169 	bne.w	800764a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10f      	bne.n	80073a0 <I2C_Master_ADDR+0x54>
 8007380:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007384:	2b40      	cmp	r3, #64	@ 0x40
 8007386:	d10b      	bne.n	80073a0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007388:	2300      	movs	r3, #0
 800738a:	633b      	str	r3, [r7, #48]	@ 0x30
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	633b      	str	r3, [r7, #48]	@ 0x30
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	633b      	str	r3, [r7, #48]	@ 0x30
 800739c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739e:	e160      	b.n	8007662 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d11d      	bne.n	80073e4 <I2C_Master_ADDR+0x98>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80073b0:	d118      	bne.n	80073e4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b2:	2300      	movs	r3, #0
 80073b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073d6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80073e2:	e13e      	b.n	8007662 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d113      	bne.n	8007416 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ee:	2300      	movs	r3, #0
 80073f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007402:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	e115      	b.n	8007642 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b01      	cmp	r3, #1
 800741e:	f040 808a 	bne.w	8007536 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007424:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007428:	d137      	bne.n	800749a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007438:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007448:	d113      	bne.n	8007472 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007458:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800745a:	2300      	movs	r3, #0
 800745c:	627b      	str	r3, [r7, #36]	@ 0x24
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	627b      	str	r3, [r7, #36]	@ 0x24
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	627b      	str	r3, [r7, #36]	@ 0x24
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	e0e7      	b.n	8007642 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007472:	2300      	movs	r3, #0
 8007474:	623b      	str	r3, [r7, #32]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	623b      	str	r3, [r7, #32]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	623b      	str	r3, [r7, #32]
 8007486:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	e0d3      	b.n	8007642 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800749a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749c:	2b08      	cmp	r3, #8
 800749e:	d02e      	beq.n	80074fe <I2C_Master_ADDR+0x1b2>
 80074a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	d02b      	beq.n	80074fe <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80074a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a8:	2b12      	cmp	r3, #18
 80074aa:	d102      	bne.n	80074b2 <I2C_Master_ADDR+0x166>
 80074ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d125      	bne.n	80074fe <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80074b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b4:	2b04      	cmp	r3, #4
 80074b6:	d00e      	beq.n	80074d6 <I2C_Master_ADDR+0x18a>
 80074b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d00b      	beq.n	80074d6 <I2C_Master_ADDR+0x18a>
 80074be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c0:	2b10      	cmp	r3, #16
 80074c2:	d008      	beq.n	80074d6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	e007      	b.n	80074e6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80074e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074e6:	2300      	movs	r3, #0
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	61fb      	str	r3, [r7, #28]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	e0a1      	b.n	8007642 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800750c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800750e:	2300      	movs	r3, #0
 8007510:	61bb      	str	r3, [r7, #24]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	61bb      	str	r3, [r7, #24]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	61bb      	str	r3, [r7, #24]
 8007522:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	e085      	b.n	8007642 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800753a:	b29b      	uxth	r3, r3
 800753c:	2b02      	cmp	r3, #2
 800753e:	d14d      	bne.n	80075dc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007542:	2b04      	cmp	r3, #4
 8007544:	d016      	beq.n	8007574 <I2C_Master_ADDR+0x228>
 8007546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007548:	2b02      	cmp	r3, #2
 800754a:	d013      	beq.n	8007574 <I2C_Master_ADDR+0x228>
 800754c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754e:	2b10      	cmp	r3, #16
 8007550:	d010      	beq.n	8007574 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007560:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	e007      	b.n	8007584 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007582:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800758e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007592:	d117      	bne.n	80075c4 <I2C_Master_ADDR+0x278>
 8007594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007596:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800759a:	d00b      	beq.n	80075b4 <I2C_Master_ADDR+0x268>
 800759c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d008      	beq.n	80075b4 <I2C_Master_ADDR+0x268>
 80075a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a4:	2b08      	cmp	r3, #8
 80075a6:	d005      	beq.n	80075b4 <I2C_Master_ADDR+0x268>
 80075a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075aa:	2b10      	cmp	r3, #16
 80075ac:	d002      	beq.n	80075b4 <I2C_Master_ADDR+0x268>
 80075ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b0:	2b20      	cmp	r3, #32
 80075b2:	d107      	bne.n	80075c4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80075c2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075c4:	2300      	movs	r3, #0
 80075c6:	617b      	str	r3, [r7, #20]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	617b      	str	r3, [r7, #20]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	e032      	b.n	8007642 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80075ea:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075fa:	d117      	bne.n	800762c <I2C_Master_ADDR+0x2e0>
 80075fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007602:	d00b      	beq.n	800761c <I2C_Master_ADDR+0x2d0>
 8007604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007606:	2b01      	cmp	r3, #1
 8007608:	d008      	beq.n	800761c <I2C_Master_ADDR+0x2d0>
 800760a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760c:	2b08      	cmp	r3, #8
 800760e:	d005      	beq.n	800761c <I2C_Master_ADDR+0x2d0>
 8007610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007612:	2b10      	cmp	r3, #16
 8007614:	d002      	beq.n	800761c <I2C_Master_ADDR+0x2d0>
 8007616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007618:	2b20      	cmp	r3, #32
 800761a:	d107      	bne.n	800762c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800762a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800762c:	2300      	movs	r3, #0
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	613b      	str	r3, [r7, #16]
 8007640:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007648:	e00b      	b.n	8007662 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	60fb      	str	r3, [r7, #12]
 800765e:	68fb      	ldr	r3, [r7, #12]
}
 8007660:	e7ff      	b.n	8007662 <I2C_Master_ADDR+0x316>
 8007662:	bf00      	nop
 8007664:	3744      	adds	r7, #68	@ 0x44
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800767c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007682:	b29b      	uxth	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d02b      	beq.n	80076e0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768c:	781a      	ldrb	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d114      	bne.n	80076e0 <I2C_SlaveTransmit_TXE+0x72>
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	2b29      	cmp	r3, #41	@ 0x29
 80076ba:	d111      	bne.n	80076e0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076ca:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2221      	movs	r2, #33	@ 0x21
 80076d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2228      	movs	r2, #40	@ 0x28
 80076d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff f9cf 	bl	8006a7e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80076e0:	bf00      	nop
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d011      	beq.n	800771e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fe:	781a      	ldrb	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007714:	b29b      	uxth	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b084      	sub	sp, #16
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007738:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800773e:	b29b      	uxth	r3, r3
 8007740:	2b00      	cmp	r3, #0
 8007742:	d02c      	beq.n	800779e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	691a      	ldr	r2, [r3, #16]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007760:	b29b      	uxth	r3, r3
 8007762:	3b01      	subs	r3, #1
 8007764:	b29a      	uxth	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800776e:	b29b      	uxth	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	d114      	bne.n	800779e <I2C_SlaveReceive_RXNE+0x74>
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	2b2a      	cmp	r3, #42	@ 0x2a
 8007778:	d111      	bne.n	800779e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007788:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2222      	movs	r2, #34	@ 0x22
 800778e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2228      	movs	r2, #40	@ 0x28
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7ff f97a 	bl	8006a92 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800779e:	bf00      	nop
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d012      	beq.n	80077de <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691a      	ldr	r2, [r3, #16]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	3b01      	subs	r3, #1
 80077d8:	b29a      	uxth	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80077f4:	2300      	movs	r3, #0
 80077f6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007804:	2b28      	cmp	r3, #40	@ 0x28
 8007806:	d127      	bne.n	8007858 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007816:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	089b      	lsrs	r3, r3, #2
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007824:	2301      	movs	r3, #1
 8007826:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	09db      	lsrs	r3, r3, #7
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b00      	cmp	r3, #0
 8007832:	d103      	bne.n	800783c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	81bb      	strh	r3, [r7, #12]
 800783a:	e002      	b.n	8007842 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800784a:	89ba      	ldrh	r2, [r7, #12]
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff f928 	bl	8006aa6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007856:	e00e      	b.n	8007876 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007858:	2300      	movs	r3, #0
 800785a:	60bb      	str	r3, [r7, #8]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	60bb      	str	r3, [r7, #8]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	60bb      	str	r3, [r7, #8]
 800786c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8007876:	bf00      	nop
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800788e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800789e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80078a0:	2300      	movs	r3, #0
 80078a2:	60bb      	str	r3, [r7, #8]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	60bb      	str	r3, [r7, #8]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0201 	orr.w	r2, r2, #1
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078cc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078dc:	d172      	bne.n	80079c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b22      	cmp	r3, #34	@ 0x22
 80078e2:	d002      	beq.n	80078ea <I2C_Slave_STOPF+0x6a>
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80078e8:	d135      	bne.n	8007956 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007906:	f043 0204 	orr.w	r2, r3, #4
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800791c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe fa8a 	bl	8005e3c <HAL_DMA_GetState>
 8007928:	4603      	mov	r3, r0
 800792a:	2b01      	cmp	r3, #1
 800792c:	d049      	beq.n	80079c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007932:	4a69      	ldr	r2, [pc, #420]	@ (8007ad8 <I2C_Slave_STOPF+0x258>)
 8007934:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793a:	4618      	mov	r0, r3
 800793c:	f7fe f8d2 	bl	8005ae4 <HAL_DMA_Abort_IT>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d03d      	beq.n	80079c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800794a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007950:	4610      	mov	r0, r2
 8007952:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007954:	e035      	b.n	80079c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	b29a      	uxth	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d005      	beq.n	800797a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007972:	f043 0204 	orr.w	r2, r3, #4
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007988:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe fa54 	bl	8005e3c <HAL_DMA_GetState>
 8007994:	4603      	mov	r3, r0
 8007996:	2b01      	cmp	r3, #1
 8007998:	d014      	beq.n	80079c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800799e:	4a4e      	ldr	r2, [pc, #312]	@ (8007ad8 <I2C_Slave_STOPF+0x258>)
 80079a0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe f89c 	bl	8005ae4 <HAL_DMA_Abort_IT>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d008      	beq.n	80079c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80079bc:	4610      	mov	r0, r2
 80079be:	4798      	blx	r3
 80079c0:	e000      	b.n	80079c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d03e      	beq.n	8007a4c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b04      	cmp	r3, #4
 80079da:	d112      	bne.n	8007a02 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	691a      	ldr	r2, [r3, #16]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e6:	b2d2      	uxtb	r2, r2
 80079e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a0c:	2b40      	cmp	r3, #64	@ 0x40
 8007a0e:	d112      	bne.n	8007a36 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691a      	ldr	r2, [r3, #16]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d005      	beq.n	8007a4c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a44:	f043 0204 	orr.w	r2, r3, #4
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d003      	beq.n	8007a5c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f8b7 	bl	8007bc8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007a5a:	e039      	b.n	8007ad0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a60:	d109      	bne.n	8007a76 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2228      	movs	r2, #40	@ 0x28
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff f80e 	bl	8006a92 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b28      	cmp	r3, #40	@ 0x28
 8007a80:	d111      	bne.n	8007aa6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a15      	ldr	r2, [pc, #84]	@ (8007adc <I2C_Slave_STOPF+0x25c>)
 8007a86:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff f80f 	bl	8006ac2 <HAL_I2C_ListenCpltCallback>
}
 8007aa4:	e014      	b.n	8007ad0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aaa:	2b22      	cmp	r3, #34	@ 0x22
 8007aac:	d002      	beq.n	8007ab4 <I2C_Slave_STOPF+0x234>
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
 8007ab0:	2b22      	cmp	r3, #34	@ 0x22
 8007ab2:	d10d      	bne.n	8007ad0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7fe ffe1 	bl	8006a92 <HAL_I2C_SlaveRxCpltCallback>
}
 8007ad0:	bf00      	nop
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	08007e2d 	.word	0x08007e2d
 8007adc:	ffff0000 	.word	0xffff0000

08007ae0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2b08      	cmp	r3, #8
 8007afa:	d002      	beq.n	8007b02 <I2C_Slave_AF+0x22>
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2b20      	cmp	r3, #32
 8007b00:	d129      	bne.n	8007b56 <I2C_Slave_AF+0x76>
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	2b28      	cmp	r3, #40	@ 0x28
 8007b06:	d126      	bne.n	8007b56 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8007bc4 <I2C_Slave_AF+0xe4>)
 8007b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007b1c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007b26:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b36:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7fe ffb7 	bl	8006ac2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007b54:	e031      	b.n	8007bba <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
 8007b58:	2b21      	cmp	r3, #33	@ 0x21
 8007b5a:	d129      	bne.n	8007bb0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a19      	ldr	r2, [pc, #100]	@ (8007bc4 <I2C_Slave_AF+0xe4>)
 8007b60:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2221      	movs	r2, #33	@ 0x21
 8007b66:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007b86:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007b90:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ba0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7fe fd2a 	bl	80065fc <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7fe ff68 	bl	8006a7e <HAL_I2C_SlaveTxCpltCallback>
}
 8007bae:	e004      	b.n	8007bba <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007bb8:	615a      	str	r2, [r3, #20]
}
 8007bba:	bf00      	nop
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	ffff0000 	.word	0xffff0000

08007bc8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bd6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bde:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	2b10      	cmp	r3, #16
 8007be4:	d002      	beq.n	8007bec <I2C_ITError+0x24>
 8007be6:	7bbb      	ldrb	r3, [r7, #14]
 8007be8:	2b40      	cmp	r3, #64	@ 0x40
 8007bea:	d10a      	bne.n	8007c02 <I2C_ITError+0x3a>
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	2b22      	cmp	r3, #34	@ 0x22
 8007bf0:	d107      	bne.n	8007c02 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c00:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007c08:	2b28      	cmp	r3, #40	@ 0x28
 8007c0a:	d107      	bne.n	8007c1c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2228      	movs	r2, #40	@ 0x28
 8007c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007c1a:	e015      	b.n	8007c48 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c2a:	d00a      	beq.n	8007c42 <I2C_ITError+0x7a>
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	2b60      	cmp	r3, #96	@ 0x60
 8007c30:	d007      	beq.n	8007c42 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c56:	d162      	bne.n	8007d1e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c66:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d020      	beq.n	8007cb8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c7a:	4a6a      	ldr	r2, [pc, #424]	@ (8007e24 <I2C_ITError+0x25c>)
 8007c7c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fd ff2e 	bl	8005ae4 <HAL_DMA_Abort_IT>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 8089 	beq.w	8007da2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 0201 	bic.w	r2, r2, #1
 8007c9e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	4798      	blx	r3
 8007cb6:	e074      	b.n	8007da2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cbc:	4a59      	ldr	r2, [pc, #356]	@ (8007e24 <I2C_ITError+0x25c>)
 8007cbe:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fd ff0d 	bl	8005ae4 <HAL_DMA_Abort_IT>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d068      	beq.n	8007da2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cda:	2b40      	cmp	r3, #64	@ 0x40
 8007cdc:	d10b      	bne.n	8007cf6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	691a      	ldr	r2, [r3, #16]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce8:	b2d2      	uxtb	r2, r2
 8007cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 0201 	bic.w	r2, r2, #1
 8007d04:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007d18:	4610      	mov	r0, r2
 8007d1a:	4798      	blx	r3
 8007d1c:	e041      	b.n	8007da2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b60      	cmp	r3, #96	@ 0x60
 8007d28:	d125      	bne.n	8007d76 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d42:	2b40      	cmp	r3, #64	@ 0x40
 8007d44:	d10b      	bne.n	8007d5e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	691a      	ldr	r2, [r3, #16]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d50:	b2d2      	uxtb	r2, r2
 8007d52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d58:	1c5a      	adds	r2, r3, #1
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 0201 	bic.w	r2, r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7fe fecf 	bl	8006b12 <HAL_I2C_AbortCpltCallback>
 8007d74:	e015      	b.n	8007da2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d80:	2b40      	cmp	r3, #64	@ 0x40
 8007d82:	d10b      	bne.n	8007d9c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	691a      	ldr	r2, [r3, #16]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8e:	b2d2      	uxtb	r2, r2
 8007d90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d96:	1c5a      	adds	r2, r3, #1
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7fe feae 	bl	8006afe <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10e      	bne.n	8007dd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d109      	bne.n	8007dd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d104      	bne.n	8007dd0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d007      	beq.n	8007de0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007dde:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007de6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b04      	cmp	r3, #4
 8007df2:	d113      	bne.n	8007e1c <I2C_ITError+0x254>
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
 8007df6:	2b28      	cmp	r3, #40	@ 0x28
 8007df8:	d110      	bne.n	8007e1c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8007e28 <I2C_ITError+0x260>)
 8007dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7fe fe53 	bl	8006ac2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007e1c:	bf00      	nop
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	08007e2d 	.word	0x08007e2d
 8007e28:	ffff0000 	.word	0xffff0000

08007e2c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e44:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007e46:	4b4b      	ldr	r3, [pc, #300]	@ (8007f74 <I2C_DMAAbort+0x148>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	08db      	lsrs	r3, r3, #3
 8007e4c:	4a4a      	ldr	r2, [pc, #296]	@ (8007f78 <I2C_DMAAbort+0x14c>)
 8007e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e52:	0a1a      	lsrs	r2, r3, #8
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	00da      	lsls	r2, r3, #3
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d106      	bne.n	8007e74 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e6a:	f043 0220 	orr.w	r2, r3, #32
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007e72:	e00a      	b.n	8007e8a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3b01      	subs	r3, #1
 8007e78:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e88:	d0ea      	beq.n	8007e60 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d003      	beq.n	8007e9a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e96:	2200      	movs	r2, #0
 8007e98:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007eb8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ecc:	2200      	movs	r2, #0
 8007ece:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007edc:	2200      	movs	r2, #0
 8007ede:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0201 	bic.w	r2, r2, #1
 8007eee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b60      	cmp	r3, #96	@ 0x60
 8007efa:	d10e      	bne.n	8007f1a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2220      	movs	r2, #32
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f12:	6978      	ldr	r0, [r7, #20]
 8007f14:	f7fe fdfd 	bl	8006b12 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f18:	e027      	b.n	8007f6a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f1a:	7cfb      	ldrb	r3, [r7, #19]
 8007f1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f20:	2b28      	cmp	r3, #40	@ 0x28
 8007f22:	d117      	bne.n	8007f54 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0201 	orr.w	r2, r2, #1
 8007f32:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f42:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2200      	movs	r2, #0
 8007f48:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2228      	movs	r2, #40	@ 0x28
 8007f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007f52:	e007      	b.n	8007f64 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2220      	movs	r2, #32
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007f64:	6978      	ldr	r0, [r7, #20]
 8007f66:	f7fe fdca 	bl	8006afe <HAL_I2C_ErrorCallback>
}
 8007f6a:	bf00      	nop
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20000000 	.word	0x20000000
 8007f78:	14f8b589 	.word	0x14f8b589

08007f7c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007f88:	4b13      	ldr	r3, [pc, #76]	@ (8007fd8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	08db      	lsrs	r3, r3, #3
 8007f8e:	4a13      	ldr	r2, [pc, #76]	@ (8007fdc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007f90:	fba2 2303 	umull	r2, r3, r2, r3
 8007f94:	0a1a      	lsrs	r2, r3, #8
 8007f96:	4613      	mov	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d107      	bne.n	8007fba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fae:	f043 0220 	orr.w	r2, r3, #32
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e008      	b.n	8007fcc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fc8:	d0e9      	beq.n	8007f9e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	20000000 	.word	0x20000000
 8007fdc:	14f8b589 	.word	0x14f8b589

08007fe0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fec:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007ff0:	d103      	bne.n	8007ffa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007ff8:	e007      	b.n	800800a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffe:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008002:	d102      	bne.n	800800a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2208      	movs	r2, #8
 8008008:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
	...

08008018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e0cc      	b.n	80081c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800802c:	4b68      	ldr	r3, [pc, #416]	@ (80081d0 <HAL_RCC_ClockConfig+0x1b8>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 030f 	and.w	r3, r3, #15
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	429a      	cmp	r2, r3
 8008038:	d90c      	bls.n	8008054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800803a:	4b65      	ldr	r3, [pc, #404]	@ (80081d0 <HAL_RCC_ClockConfig+0x1b8>)
 800803c:	683a      	ldr	r2, [r7, #0]
 800803e:	b2d2      	uxtb	r2, r2
 8008040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008042:	4b63      	ldr	r3, [pc, #396]	@ (80081d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 030f 	and.w	r3, r3, #15
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d001      	beq.n	8008054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e0b8      	b.n	80081c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0302 	and.w	r3, r3, #2
 800805c:	2b00      	cmp	r3, #0
 800805e:	d020      	beq.n	80080a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0304 	and.w	r3, r3, #4
 8008068:	2b00      	cmp	r3, #0
 800806a:	d005      	beq.n	8008078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800806c:	4b59      	ldr	r3, [pc, #356]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	4a58      	ldr	r2, [pc, #352]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008072:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008076:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0308 	and.w	r3, r3, #8
 8008080:	2b00      	cmp	r3, #0
 8008082:	d005      	beq.n	8008090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008084:	4b53      	ldr	r3, [pc, #332]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	4a52      	ldr	r2, [pc, #328]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 800808a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800808e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008090:	4b50      	ldr	r3, [pc, #320]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	494d      	ldr	r1, [pc, #308]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d044      	beq.n	8008138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d107      	bne.n	80080c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080b6:	4b47      	ldr	r3, [pc, #284]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d119      	bne.n	80080f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e07f      	b.n	80081c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d003      	beq.n	80080d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d107      	bne.n	80080e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080d6:	4b3f      	ldr	r3, [pc, #252]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d109      	bne.n	80080f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e06f      	b.n	80081c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080e6:	4b3b      	ldr	r3, [pc, #236]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0302 	and.w	r3, r3, #2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e067      	b.n	80081c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080f6:	4b37      	ldr	r3, [pc, #220]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f023 0203 	bic.w	r2, r3, #3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	4934      	ldr	r1, [pc, #208]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008104:	4313      	orrs	r3, r2
 8008106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008108:	f7fc ff40 	bl	8004f8c <HAL_GetTick>
 800810c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800810e:	e00a      	b.n	8008126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008110:	f7fc ff3c 	bl	8004f8c <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800811e:	4293      	cmp	r3, r2
 8008120:	d901      	bls.n	8008126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e04f      	b.n	80081c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008126:	4b2b      	ldr	r3, [pc, #172]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f003 020c 	and.w	r2, r3, #12
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	429a      	cmp	r2, r3
 8008136:	d1eb      	bne.n	8008110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008138:	4b25      	ldr	r3, [pc, #148]	@ (80081d0 <HAL_RCC_ClockConfig+0x1b8>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 030f 	and.w	r3, r3, #15
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d20c      	bcs.n	8008160 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008146:	4b22      	ldr	r3, [pc, #136]	@ (80081d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	b2d2      	uxtb	r2, r2
 800814c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800814e:	4b20      	ldr	r3, [pc, #128]	@ (80081d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 030f 	and.w	r3, r3, #15
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	d001      	beq.n	8008160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e032      	b.n	80081c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b00      	cmp	r3, #0
 800816a:	d008      	beq.n	800817e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800816c:	4b19      	ldr	r3, [pc, #100]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	4916      	ldr	r1, [pc, #88]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 800817a:	4313      	orrs	r3, r2
 800817c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0308 	and.w	r3, r3, #8
 8008186:	2b00      	cmp	r3, #0
 8008188:	d009      	beq.n	800819e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800818a:	4b12      	ldr	r3, [pc, #72]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	00db      	lsls	r3, r3, #3
 8008198:	490e      	ldr	r1, [pc, #56]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 800819a:	4313      	orrs	r3, r2
 800819c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800819e:	f000 f855 	bl	800824c <HAL_RCC_GetSysClockFreq>
 80081a2:	4602      	mov	r2, r0
 80081a4:	4b0b      	ldr	r3, [pc, #44]	@ (80081d4 <HAL_RCC_ClockConfig+0x1bc>)
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	091b      	lsrs	r3, r3, #4
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	490a      	ldr	r1, [pc, #40]	@ (80081d8 <HAL_RCC_ClockConfig+0x1c0>)
 80081b0:	5ccb      	ldrb	r3, [r1, r3]
 80081b2:	fa22 f303 	lsr.w	r3, r2, r3
 80081b6:	4a09      	ldr	r2, [pc, #36]	@ (80081dc <HAL_RCC_ClockConfig+0x1c4>)
 80081b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80081ba:	4b09      	ldr	r3, [pc, #36]	@ (80081e0 <HAL_RCC_ClockConfig+0x1c8>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fc fea0 	bl	8004f04 <HAL_InitTick>

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	40023c00 	.word	0x40023c00
 80081d4:	40023800 	.word	0x40023800
 80081d8:	080108d0 	.word	0x080108d0
 80081dc:	20000000 	.word	0x20000000
 80081e0:	20000004 	.word	0x20000004

080081e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081e4:	b480      	push	{r7}
 80081e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081e8:	4b03      	ldr	r3, [pc, #12]	@ (80081f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80081ea:	681b      	ldr	r3, [r3, #0]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	20000000 	.word	0x20000000

080081fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008200:	f7ff fff0 	bl	80081e4 <HAL_RCC_GetHCLKFreq>
 8008204:	4602      	mov	r2, r0
 8008206:	4b05      	ldr	r3, [pc, #20]	@ (800821c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	0a9b      	lsrs	r3, r3, #10
 800820c:	f003 0307 	and.w	r3, r3, #7
 8008210:	4903      	ldr	r1, [pc, #12]	@ (8008220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008212:	5ccb      	ldrb	r3, [r1, r3]
 8008214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008218:	4618      	mov	r0, r3
 800821a:	bd80      	pop	{r7, pc}
 800821c:	40023800 	.word	0x40023800
 8008220:	080108e0 	.word	0x080108e0

08008224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008228:	f7ff ffdc 	bl	80081e4 <HAL_RCC_GetHCLKFreq>
 800822c:	4602      	mov	r2, r0
 800822e:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	0b5b      	lsrs	r3, r3, #13
 8008234:	f003 0307 	and.w	r3, r3, #7
 8008238:	4903      	ldr	r1, [pc, #12]	@ (8008248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800823a:	5ccb      	ldrb	r3, [r1, r3]
 800823c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008240:	4618      	mov	r0, r3
 8008242:	bd80      	pop	{r7, pc}
 8008244:	40023800 	.word	0x40023800
 8008248:	080108e0 	.word	0x080108e0

0800824c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800824c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008250:	b0ae      	sub	sp, #184	@ 0xb8
 8008252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008254:	2300      	movs	r3, #0
 8008256:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8008260:	2300      	movs	r3, #0
 8008262:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008272:	4bcb      	ldr	r3, [pc, #812]	@ (80085a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f003 030c 	and.w	r3, r3, #12
 800827a:	2b0c      	cmp	r3, #12
 800827c:	f200 8206 	bhi.w	800868c <HAL_RCC_GetSysClockFreq+0x440>
 8008280:	a201      	add	r2, pc, #4	@ (adr r2, 8008288 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	080082bd 	.word	0x080082bd
 800828c:	0800868d 	.word	0x0800868d
 8008290:	0800868d 	.word	0x0800868d
 8008294:	0800868d 	.word	0x0800868d
 8008298:	080082c5 	.word	0x080082c5
 800829c:	0800868d 	.word	0x0800868d
 80082a0:	0800868d 	.word	0x0800868d
 80082a4:	0800868d 	.word	0x0800868d
 80082a8:	080082cd 	.word	0x080082cd
 80082ac:	0800868d 	.word	0x0800868d
 80082b0:	0800868d 	.word	0x0800868d
 80082b4:	0800868d 	.word	0x0800868d
 80082b8:	080084bd 	.word	0x080084bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80082bc:	4bb9      	ldr	r3, [pc, #740]	@ (80085a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80082be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80082c2:	e1e7      	b.n	8008694 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80082c4:	4bb8      	ldr	r3, [pc, #736]	@ (80085a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80082c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80082ca:	e1e3      	b.n	8008694 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80082cc:	4bb4      	ldr	r3, [pc, #720]	@ (80085a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80082d8:	4bb1      	ldr	r3, [pc, #708]	@ (80085a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d071      	beq.n	80083c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082e4:	4bae      	ldr	r3, [pc, #696]	@ (80085a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	099b      	lsrs	r3, r3, #6
 80082ea:	2200      	movs	r2, #0
 80082ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80082f0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80082f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008300:	2300      	movs	r3, #0
 8008302:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008306:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800830a:	4622      	mov	r2, r4
 800830c:	462b      	mov	r3, r5
 800830e:	f04f 0000 	mov.w	r0, #0
 8008312:	f04f 0100 	mov.w	r1, #0
 8008316:	0159      	lsls	r1, r3, #5
 8008318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800831c:	0150      	lsls	r0, r2, #5
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	4621      	mov	r1, r4
 8008324:	1a51      	subs	r1, r2, r1
 8008326:	6439      	str	r1, [r7, #64]	@ 0x40
 8008328:	4629      	mov	r1, r5
 800832a:	eb63 0301 	sbc.w	r3, r3, r1
 800832e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008330:	f04f 0200 	mov.w	r2, #0
 8008334:	f04f 0300 	mov.w	r3, #0
 8008338:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800833c:	4649      	mov	r1, r9
 800833e:	018b      	lsls	r3, r1, #6
 8008340:	4641      	mov	r1, r8
 8008342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008346:	4641      	mov	r1, r8
 8008348:	018a      	lsls	r2, r1, #6
 800834a:	4641      	mov	r1, r8
 800834c:	1a51      	subs	r1, r2, r1
 800834e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008350:	4649      	mov	r1, r9
 8008352:	eb63 0301 	sbc.w	r3, r3, r1
 8008356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	f04f 0300 	mov.w	r3, #0
 8008360:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8008364:	4649      	mov	r1, r9
 8008366:	00cb      	lsls	r3, r1, #3
 8008368:	4641      	mov	r1, r8
 800836a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800836e:	4641      	mov	r1, r8
 8008370:	00ca      	lsls	r2, r1, #3
 8008372:	4610      	mov	r0, r2
 8008374:	4619      	mov	r1, r3
 8008376:	4603      	mov	r3, r0
 8008378:	4622      	mov	r2, r4
 800837a:	189b      	adds	r3, r3, r2
 800837c:	633b      	str	r3, [r7, #48]	@ 0x30
 800837e:	462b      	mov	r3, r5
 8008380:	460a      	mov	r2, r1
 8008382:	eb42 0303 	adc.w	r3, r2, r3
 8008386:	637b      	str	r3, [r7, #52]	@ 0x34
 8008388:	f04f 0200 	mov.w	r2, #0
 800838c:	f04f 0300 	mov.w	r3, #0
 8008390:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008394:	4629      	mov	r1, r5
 8008396:	024b      	lsls	r3, r1, #9
 8008398:	4621      	mov	r1, r4
 800839a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800839e:	4621      	mov	r1, r4
 80083a0:	024a      	lsls	r2, r1, #9
 80083a2:	4610      	mov	r0, r2
 80083a4:	4619      	mov	r1, r3
 80083a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083aa:	2200      	movs	r2, #0
 80083ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80083b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80083b8:	f7f8 fc66 	bl	8000c88 <__aeabi_uldivmod>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	4613      	mov	r3, r2
 80083c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80083c6:	e067      	b.n	8008498 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083c8:	4b75      	ldr	r3, [pc, #468]	@ (80085a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	099b      	lsrs	r3, r3, #6
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083d4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80083d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80083dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083e2:	2300      	movs	r3, #0
 80083e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80083e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80083ea:	4622      	mov	r2, r4
 80083ec:	462b      	mov	r3, r5
 80083ee:	f04f 0000 	mov.w	r0, #0
 80083f2:	f04f 0100 	mov.w	r1, #0
 80083f6:	0159      	lsls	r1, r3, #5
 80083f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083fc:	0150      	lsls	r0, r2, #5
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4621      	mov	r1, r4
 8008404:	1a51      	subs	r1, r2, r1
 8008406:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008408:	4629      	mov	r1, r5
 800840a:	eb63 0301 	sbc.w	r3, r3, r1
 800840e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008410:	f04f 0200 	mov.w	r2, #0
 8008414:	f04f 0300 	mov.w	r3, #0
 8008418:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800841c:	4649      	mov	r1, r9
 800841e:	018b      	lsls	r3, r1, #6
 8008420:	4641      	mov	r1, r8
 8008422:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008426:	4641      	mov	r1, r8
 8008428:	018a      	lsls	r2, r1, #6
 800842a:	4641      	mov	r1, r8
 800842c:	ebb2 0a01 	subs.w	sl, r2, r1
 8008430:	4649      	mov	r1, r9
 8008432:	eb63 0b01 	sbc.w	fp, r3, r1
 8008436:	f04f 0200 	mov.w	r2, #0
 800843a:	f04f 0300 	mov.w	r3, #0
 800843e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008442:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008446:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800844a:	4692      	mov	sl, r2
 800844c:	469b      	mov	fp, r3
 800844e:	4623      	mov	r3, r4
 8008450:	eb1a 0303 	adds.w	r3, sl, r3
 8008454:	623b      	str	r3, [r7, #32]
 8008456:	462b      	mov	r3, r5
 8008458:	eb4b 0303 	adc.w	r3, fp, r3
 800845c:	627b      	str	r3, [r7, #36]	@ 0x24
 800845e:	f04f 0200 	mov.w	r2, #0
 8008462:	f04f 0300 	mov.w	r3, #0
 8008466:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800846a:	4629      	mov	r1, r5
 800846c:	028b      	lsls	r3, r1, #10
 800846e:	4621      	mov	r1, r4
 8008470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008474:	4621      	mov	r1, r4
 8008476:	028a      	lsls	r2, r1, #10
 8008478:	4610      	mov	r0, r2
 800847a:	4619      	mov	r1, r3
 800847c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008480:	2200      	movs	r2, #0
 8008482:	673b      	str	r3, [r7, #112]	@ 0x70
 8008484:	677a      	str	r2, [r7, #116]	@ 0x74
 8008486:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800848a:	f7f8 fbfd 	bl	8000c88 <__aeabi_uldivmod>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4613      	mov	r3, r2
 8008494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008498:	4b41      	ldr	r3, [pc, #260]	@ (80085a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	0c1b      	lsrs	r3, r3, #16
 800849e:	f003 0303 	and.w	r3, r3, #3
 80084a2:	3301      	adds	r3, #1
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80084aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80084ba:	e0eb      	b.n	8008694 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80084bc:	4b38      	ldr	r3, [pc, #224]	@ (80085a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80084c8:	4b35      	ldr	r3, [pc, #212]	@ (80085a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d06b      	beq.n	80085ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084d4:	4b32      	ldr	r3, [pc, #200]	@ (80085a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	099b      	lsrs	r3, r3, #6
 80084da:	2200      	movs	r2, #0
 80084dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80084e8:	2300      	movs	r3, #0
 80084ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80084ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80084f0:	4622      	mov	r2, r4
 80084f2:	462b      	mov	r3, r5
 80084f4:	f04f 0000 	mov.w	r0, #0
 80084f8:	f04f 0100 	mov.w	r1, #0
 80084fc:	0159      	lsls	r1, r3, #5
 80084fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008502:	0150      	lsls	r0, r2, #5
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	4621      	mov	r1, r4
 800850a:	1a51      	subs	r1, r2, r1
 800850c:	61b9      	str	r1, [r7, #24]
 800850e:	4629      	mov	r1, r5
 8008510:	eb63 0301 	sbc.w	r3, r3, r1
 8008514:	61fb      	str	r3, [r7, #28]
 8008516:	f04f 0200 	mov.w	r2, #0
 800851a:	f04f 0300 	mov.w	r3, #0
 800851e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008522:	4659      	mov	r1, fp
 8008524:	018b      	lsls	r3, r1, #6
 8008526:	4651      	mov	r1, sl
 8008528:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800852c:	4651      	mov	r1, sl
 800852e:	018a      	lsls	r2, r1, #6
 8008530:	4651      	mov	r1, sl
 8008532:	ebb2 0801 	subs.w	r8, r2, r1
 8008536:	4659      	mov	r1, fp
 8008538:	eb63 0901 	sbc.w	r9, r3, r1
 800853c:	f04f 0200 	mov.w	r2, #0
 8008540:	f04f 0300 	mov.w	r3, #0
 8008544:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008548:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800854c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008550:	4690      	mov	r8, r2
 8008552:	4699      	mov	r9, r3
 8008554:	4623      	mov	r3, r4
 8008556:	eb18 0303 	adds.w	r3, r8, r3
 800855a:	613b      	str	r3, [r7, #16]
 800855c:	462b      	mov	r3, r5
 800855e:	eb49 0303 	adc.w	r3, r9, r3
 8008562:	617b      	str	r3, [r7, #20]
 8008564:	f04f 0200 	mov.w	r2, #0
 8008568:	f04f 0300 	mov.w	r3, #0
 800856c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008570:	4629      	mov	r1, r5
 8008572:	024b      	lsls	r3, r1, #9
 8008574:	4621      	mov	r1, r4
 8008576:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800857a:	4621      	mov	r1, r4
 800857c:	024a      	lsls	r2, r1, #9
 800857e:	4610      	mov	r0, r2
 8008580:	4619      	mov	r1, r3
 8008582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008586:	2200      	movs	r2, #0
 8008588:	65bb      	str	r3, [r7, #88]	@ 0x58
 800858a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800858c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008590:	f7f8 fb7a 	bl	8000c88 <__aeabi_uldivmod>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4613      	mov	r3, r2
 800859a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800859e:	e065      	b.n	800866c <HAL_RCC_GetSysClockFreq+0x420>
 80085a0:	40023800 	.word	0x40023800
 80085a4:	00f42400 	.word	0x00f42400
 80085a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085ac:	4b3d      	ldr	r3, [pc, #244]	@ (80086a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	099b      	lsrs	r3, r3, #6
 80085b2:	2200      	movs	r2, #0
 80085b4:	4618      	mov	r0, r3
 80085b6:	4611      	mov	r1, r2
 80085b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80085bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80085be:	2300      	movs	r3, #0
 80085c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80085c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80085c6:	4642      	mov	r2, r8
 80085c8:	464b      	mov	r3, r9
 80085ca:	f04f 0000 	mov.w	r0, #0
 80085ce:	f04f 0100 	mov.w	r1, #0
 80085d2:	0159      	lsls	r1, r3, #5
 80085d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085d8:	0150      	lsls	r0, r2, #5
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	4641      	mov	r1, r8
 80085e0:	1a51      	subs	r1, r2, r1
 80085e2:	60b9      	str	r1, [r7, #8]
 80085e4:	4649      	mov	r1, r9
 80085e6:	eb63 0301 	sbc.w	r3, r3, r1
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80085f8:	4659      	mov	r1, fp
 80085fa:	018b      	lsls	r3, r1, #6
 80085fc:	4651      	mov	r1, sl
 80085fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008602:	4651      	mov	r1, sl
 8008604:	018a      	lsls	r2, r1, #6
 8008606:	4651      	mov	r1, sl
 8008608:	1a54      	subs	r4, r2, r1
 800860a:	4659      	mov	r1, fp
 800860c:	eb63 0501 	sbc.w	r5, r3, r1
 8008610:	f04f 0200 	mov.w	r2, #0
 8008614:	f04f 0300 	mov.w	r3, #0
 8008618:	00eb      	lsls	r3, r5, #3
 800861a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800861e:	00e2      	lsls	r2, r4, #3
 8008620:	4614      	mov	r4, r2
 8008622:	461d      	mov	r5, r3
 8008624:	4643      	mov	r3, r8
 8008626:	18e3      	adds	r3, r4, r3
 8008628:	603b      	str	r3, [r7, #0]
 800862a:	464b      	mov	r3, r9
 800862c:	eb45 0303 	adc.w	r3, r5, r3
 8008630:	607b      	str	r3, [r7, #4]
 8008632:	f04f 0200 	mov.w	r2, #0
 8008636:	f04f 0300 	mov.w	r3, #0
 800863a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800863e:	4629      	mov	r1, r5
 8008640:	028b      	lsls	r3, r1, #10
 8008642:	4621      	mov	r1, r4
 8008644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008648:	4621      	mov	r1, r4
 800864a:	028a      	lsls	r2, r1, #10
 800864c:	4610      	mov	r0, r2
 800864e:	4619      	mov	r1, r3
 8008650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008654:	2200      	movs	r2, #0
 8008656:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008658:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800865a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800865e:	f7f8 fb13 	bl	8000c88 <__aeabi_uldivmod>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	4613      	mov	r3, r2
 8008668:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800866c:	4b0d      	ldr	r3, [pc, #52]	@ (80086a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	0f1b      	lsrs	r3, r3, #28
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800867a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800867e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008682:	fbb2 f3f3 	udiv	r3, r2, r3
 8008686:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800868a:	e003      	b.n	8008694 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800868c:	4b06      	ldr	r3, [pc, #24]	@ (80086a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800868e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008692:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008694:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8008698:	4618      	mov	r0, r3
 800869a:	37b8      	adds	r7, #184	@ 0xb8
 800869c:	46bd      	mov	sp, r7
 800869e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086a2:	bf00      	nop
 80086a4:	40023800 	.word	0x40023800
 80086a8:	00f42400 	.word	0x00f42400

080086ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e28d      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f000 8083 	beq.w	80087d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80086cc:	4b94      	ldr	r3, [pc, #592]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f003 030c 	and.w	r3, r3, #12
 80086d4:	2b04      	cmp	r3, #4
 80086d6:	d019      	beq.n	800870c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80086d8:	4b91      	ldr	r3, [pc, #580]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	f003 030c 	and.w	r3, r3, #12
        || \
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d106      	bne.n	80086f2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80086e4:	4b8e      	ldr	r3, [pc, #568]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80086f0:	d00c      	beq.n	800870c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086f2:	4b8b      	ldr	r3, [pc, #556]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80086fa:	2b0c      	cmp	r3, #12
 80086fc:	d112      	bne.n	8008724 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086fe:	4b88      	ldr	r3, [pc, #544]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800870a:	d10b      	bne.n	8008724 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800870c:	4b84      	ldr	r3, [pc, #528]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d05b      	beq.n	80087d0 <HAL_RCC_OscConfig+0x124>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d157      	bne.n	80087d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e25a      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800872c:	d106      	bne.n	800873c <HAL_RCC_OscConfig+0x90>
 800872e:	4b7c      	ldr	r3, [pc, #496]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a7b      	ldr	r2, [pc, #492]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 8008734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	e01d      	b.n	8008778 <HAL_RCC_OscConfig+0xcc>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008744:	d10c      	bne.n	8008760 <HAL_RCC_OscConfig+0xb4>
 8008746:	4b76      	ldr	r3, [pc, #472]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a75      	ldr	r2, [pc, #468]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 800874c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	4b73      	ldr	r3, [pc, #460]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a72      	ldr	r2, [pc, #456]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 8008758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	e00b      	b.n	8008778 <HAL_RCC_OscConfig+0xcc>
 8008760:	4b6f      	ldr	r3, [pc, #444]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a6e      	ldr	r2, [pc, #440]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 8008766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800876a:	6013      	str	r3, [r2, #0]
 800876c:	4b6c      	ldr	r3, [pc, #432]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a6b      	ldr	r2, [pc, #428]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 8008772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d013      	beq.n	80087a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008780:	f7fc fc04 	bl	8004f8c <HAL_GetTick>
 8008784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008786:	e008      	b.n	800879a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008788:	f7fc fc00 	bl	8004f8c <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	2b64      	cmp	r3, #100	@ 0x64
 8008794:	d901      	bls.n	800879a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e21f      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800879a:	4b61      	ldr	r3, [pc, #388]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0f0      	beq.n	8008788 <HAL_RCC_OscConfig+0xdc>
 80087a6:	e014      	b.n	80087d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a8:	f7fc fbf0 	bl	8004f8c <HAL_GetTick>
 80087ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087ae:	e008      	b.n	80087c2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087b0:	f7fc fbec 	bl	8004f8c <HAL_GetTick>
 80087b4:	4602      	mov	r2, r0
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	2b64      	cmp	r3, #100	@ 0x64
 80087bc:	d901      	bls.n	80087c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e20b      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087c2:	4b57      	ldr	r3, [pc, #348]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1f0      	bne.n	80087b0 <HAL_RCC_OscConfig+0x104>
 80087ce:	e000      	b.n	80087d2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d06f      	beq.n	80088be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80087de:	4b50      	ldr	r3, [pc, #320]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f003 030c 	and.w	r3, r3, #12
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d017      	beq.n	800881a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80087ea:	4b4d      	ldr	r3, [pc, #308]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f003 030c 	and.w	r3, r3, #12
        || \
 80087f2:	2b08      	cmp	r3, #8
 80087f4:	d105      	bne.n	8008802 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80087f6:	4b4a      	ldr	r3, [pc, #296]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00b      	beq.n	800881a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008802:	4b47      	ldr	r3, [pc, #284]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800880a:	2b0c      	cmp	r3, #12
 800880c:	d11c      	bne.n	8008848 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800880e:	4b44      	ldr	r3, [pc, #272]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d116      	bne.n	8008848 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800881a:	4b41      	ldr	r3, [pc, #260]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	2b00      	cmp	r3, #0
 8008824:	d005      	beq.n	8008832 <HAL_RCC_OscConfig+0x186>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d001      	beq.n	8008832 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e1d3      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008832:	4b3b      	ldr	r3, [pc, #236]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	4937      	ldr	r1, [pc, #220]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 8008842:	4313      	orrs	r3, r2
 8008844:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008846:	e03a      	b.n	80088be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d020      	beq.n	8008892 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008850:	4b34      	ldr	r3, [pc, #208]	@ (8008924 <HAL_RCC_OscConfig+0x278>)
 8008852:	2201      	movs	r2, #1
 8008854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008856:	f7fc fb99 	bl	8004f8c <HAL_GetTick>
 800885a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800885c:	e008      	b.n	8008870 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800885e:	f7fc fb95 	bl	8004f8c <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	2b02      	cmp	r3, #2
 800886a:	d901      	bls.n	8008870 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e1b4      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008870:	4b2b      	ldr	r3, [pc, #172]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0f0      	beq.n	800885e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800887c:	4b28      	ldr	r3, [pc, #160]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	4925      	ldr	r1, [pc, #148]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 800888c:	4313      	orrs	r3, r2
 800888e:	600b      	str	r3, [r1, #0]
 8008890:	e015      	b.n	80088be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008892:	4b24      	ldr	r3, [pc, #144]	@ (8008924 <HAL_RCC_OscConfig+0x278>)
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008898:	f7fc fb78 	bl	8004f8c <HAL_GetTick>
 800889c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800889e:	e008      	b.n	80088b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088a0:	f7fc fb74 	bl	8004f8c <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d901      	bls.n	80088b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e193      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0302 	and.w	r3, r3, #2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1f0      	bne.n	80088a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0308 	and.w	r3, r3, #8
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d036      	beq.n	8008938 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d016      	beq.n	8008900 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088d2:	4b15      	ldr	r3, [pc, #84]	@ (8008928 <HAL_RCC_OscConfig+0x27c>)
 80088d4:	2201      	movs	r2, #1
 80088d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088d8:	f7fc fb58 	bl	8004f8c <HAL_GetTick>
 80088dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088de:	e008      	b.n	80088f2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088e0:	f7fc fb54 	bl	8004f8c <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d901      	bls.n	80088f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e173      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008920 <HAL_RCC_OscConfig+0x274>)
 80088f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0f0      	beq.n	80088e0 <HAL_RCC_OscConfig+0x234>
 80088fe:	e01b      	b.n	8008938 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008900:	4b09      	ldr	r3, [pc, #36]	@ (8008928 <HAL_RCC_OscConfig+0x27c>)
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008906:	f7fc fb41 	bl	8004f8c <HAL_GetTick>
 800890a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800890c:	e00e      	b.n	800892c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800890e:	f7fc fb3d 	bl	8004f8c <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	2b02      	cmp	r3, #2
 800891a:	d907      	bls.n	800892c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e15c      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
 8008920:	40023800 	.word	0x40023800
 8008924:	42470000 	.word	0x42470000
 8008928:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800892c:	4b8a      	ldr	r3, [pc, #552]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 800892e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1ea      	bne.n	800890e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 8097 	beq.w	8008a74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008946:	2300      	movs	r3, #0
 8008948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800894a:	4b83      	ldr	r3, [pc, #524]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 800894c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10f      	bne.n	8008976 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008956:	2300      	movs	r3, #0
 8008958:	60bb      	str	r3, [r7, #8]
 800895a:	4b7f      	ldr	r3, [pc, #508]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 800895c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895e:	4a7e      	ldr	r2, [pc, #504]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 8008960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008964:	6413      	str	r3, [r2, #64]	@ 0x40
 8008966:	4b7c      	ldr	r3, [pc, #496]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 8008968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800896a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800896e:	60bb      	str	r3, [r7, #8]
 8008970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008972:	2301      	movs	r3, #1
 8008974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008976:	4b79      	ldr	r3, [pc, #484]	@ (8008b5c <HAL_RCC_OscConfig+0x4b0>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800897e:	2b00      	cmp	r3, #0
 8008980:	d118      	bne.n	80089b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008982:	4b76      	ldr	r3, [pc, #472]	@ (8008b5c <HAL_RCC_OscConfig+0x4b0>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a75      	ldr	r2, [pc, #468]	@ (8008b5c <HAL_RCC_OscConfig+0x4b0>)
 8008988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800898c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800898e:	f7fc fafd 	bl	8004f8c <HAL_GetTick>
 8008992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008994:	e008      	b.n	80089a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008996:	f7fc faf9 	bl	8004f8c <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d901      	bls.n	80089a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e118      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089a8:	4b6c      	ldr	r3, [pc, #432]	@ (8008b5c <HAL_RCC_OscConfig+0x4b0>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0f0      	beq.n	8008996 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d106      	bne.n	80089ca <HAL_RCC_OscConfig+0x31e>
 80089bc:	4b66      	ldr	r3, [pc, #408]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 80089be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089c0:	4a65      	ldr	r2, [pc, #404]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 80089c2:	f043 0301 	orr.w	r3, r3, #1
 80089c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80089c8:	e01c      	b.n	8008a04 <HAL_RCC_OscConfig+0x358>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	2b05      	cmp	r3, #5
 80089d0:	d10c      	bne.n	80089ec <HAL_RCC_OscConfig+0x340>
 80089d2:	4b61      	ldr	r3, [pc, #388]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 80089d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089d6:	4a60      	ldr	r2, [pc, #384]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 80089d8:	f043 0304 	orr.w	r3, r3, #4
 80089dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80089de:	4b5e      	ldr	r3, [pc, #376]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 80089e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e2:	4a5d      	ldr	r2, [pc, #372]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 80089e4:	f043 0301 	orr.w	r3, r3, #1
 80089e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80089ea:	e00b      	b.n	8008a04 <HAL_RCC_OscConfig+0x358>
 80089ec:	4b5a      	ldr	r3, [pc, #360]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 80089ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089f0:	4a59      	ldr	r2, [pc, #356]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 80089f2:	f023 0301 	bic.w	r3, r3, #1
 80089f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80089f8:	4b57      	ldr	r3, [pc, #348]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 80089fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089fc:	4a56      	ldr	r2, [pc, #344]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 80089fe:	f023 0304 	bic.w	r3, r3, #4
 8008a02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d015      	beq.n	8008a38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a0c:	f7fc fabe 	bl	8004f8c <HAL_GetTick>
 8008a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a12:	e00a      	b.n	8008a2a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a14:	f7fc faba 	bl	8004f8c <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d901      	bls.n	8008a2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e0d7      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 8008a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0ee      	beq.n	8008a14 <HAL_RCC_OscConfig+0x368>
 8008a36:	e014      	b.n	8008a62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a38:	f7fc faa8 	bl	8004f8c <HAL_GetTick>
 8008a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a3e:	e00a      	b.n	8008a56 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a40:	f7fc faa4 	bl	8004f8c <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d901      	bls.n	8008a56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e0c1      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a56:	4b40      	ldr	r3, [pc, #256]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 8008a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1ee      	bne.n	8008a40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d105      	bne.n	8008a74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a68:	4b3b      	ldr	r3, [pc, #236]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6c:	4a3a      	ldr	r2, [pc, #232]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 8008a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 80ad 	beq.w	8008bd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a7e:	4b36      	ldr	r3, [pc, #216]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f003 030c 	and.w	r3, r3, #12
 8008a86:	2b08      	cmp	r3, #8
 8008a88:	d060      	beq.n	8008b4c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d145      	bne.n	8008b1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a92:	4b33      	ldr	r3, [pc, #204]	@ (8008b60 <HAL_RCC_OscConfig+0x4b4>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a98:	f7fc fa78 	bl	8004f8c <HAL_GetTick>
 8008a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a9e:	e008      	b.n	8008ab2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aa0:	f7fc fa74 	bl	8004f8c <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e093      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ab2:	4b29      	ldr	r3, [pc, #164]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1f0      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	69da      	ldr	r2, [r3, #28]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008acc:	019b      	lsls	r3, r3, #6
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad4:	085b      	lsrs	r3, r3, #1
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	041b      	lsls	r3, r3, #16
 8008ada:	431a      	orrs	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae0:	061b      	lsls	r3, r3, #24
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ae8:	071b      	lsls	r3, r3, #28
 8008aea:	491b      	ldr	r1, [pc, #108]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008af0:	4b1b      	ldr	r3, [pc, #108]	@ (8008b60 <HAL_RCC_OscConfig+0x4b4>)
 8008af2:	2201      	movs	r2, #1
 8008af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af6:	f7fc fa49 	bl	8004f8c <HAL_GetTick>
 8008afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008afc:	e008      	b.n	8008b10 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008afe:	f7fc fa45 	bl	8004f8c <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d901      	bls.n	8008b10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e064      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b10:	4b11      	ldr	r3, [pc, #68]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d0f0      	beq.n	8008afe <HAL_RCC_OscConfig+0x452>
 8008b1c:	e05c      	b.n	8008bd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b1e:	4b10      	ldr	r3, [pc, #64]	@ (8008b60 <HAL_RCC_OscConfig+0x4b4>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b24:	f7fc fa32 	bl	8004f8c <HAL_GetTick>
 8008b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b2a:	e008      	b.n	8008b3e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b2c:	f7fc fa2e 	bl	8004f8c <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d901      	bls.n	8008b3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e04d      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b3e:	4b06      	ldr	r3, [pc, #24]	@ (8008b58 <HAL_RCC_OscConfig+0x4ac>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1f0      	bne.n	8008b2c <HAL_RCC_OscConfig+0x480>
 8008b4a:	e045      	b.n	8008bd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d107      	bne.n	8008b64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e040      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
 8008b58:	40023800 	.word	0x40023800
 8008b5c:	40007000 	.word	0x40007000
 8008b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b64:	4b1f      	ldr	r3, [pc, #124]	@ (8008be4 <HAL_RCC_OscConfig+0x538>)
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d030      	beq.n	8008bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d129      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d122      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008b94:	4013      	ands	r3, r2
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d119      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008baa:	085b      	lsrs	r3, r3, #1
 8008bac:	3b01      	subs	r3, #1
 8008bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d10f      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d107      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d001      	beq.n	8008bd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e000      	b.n	8008bda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	40023800 	.word	0x40023800

08008be8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e07b      	b.n	8008cf2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d108      	bne.n	8008c14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c0a:	d009      	beq.n	8008c20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	61da      	str	r2, [r3, #28]
 8008c12:	e005      	b.n	8008c20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d106      	bne.n	8008c40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7fb fce6 	bl	800460c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c72:	431a      	orrs	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	f003 0302 	and.w	r3, r3, #2
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	431a      	orrs	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c90:	431a      	orrs	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a1b      	ldr	r3, [r3, #32]
 8008ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ca4:	ea42 0103 	orr.w	r1, r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	0c1b      	lsrs	r3, r3, #16
 8008cbe:	f003 0104 	and.w	r1, r3, #4
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc6:	f003 0210 	and.w	r2, r3, #16
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	69da      	ldr	r2, [r3, #28]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ce0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b088      	sub	sp, #32
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	603b      	str	r3, [r7, #0]
 8008d06:	4613      	mov	r3, r2
 8008d08:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d0a:	f7fc f93f 	bl	8004f8c <HAL_GetTick>
 8008d0e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008d10:	88fb      	ldrh	r3, [r7, #6]
 8008d12:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d001      	beq.n	8008d24 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008d20:	2302      	movs	r3, #2
 8008d22:	e12a      	b.n	8008f7a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d002      	beq.n	8008d30 <HAL_SPI_Transmit+0x36>
 8008d2a:	88fb      	ldrh	r3, [r7, #6]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d101      	bne.n	8008d34 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e122      	b.n	8008f7a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d101      	bne.n	8008d42 <HAL_SPI_Transmit+0x48>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e11b      	b.n	8008f7a <HAL_SPI_Transmit+0x280>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2203      	movs	r2, #3
 8008d4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	88fa      	ldrh	r2, [r7, #6]
 8008d62:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	88fa      	ldrh	r2, [r7, #6]
 8008d68:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d90:	d10f      	bne.n	8008db2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008da0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008db0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dbc:	2b40      	cmp	r3, #64	@ 0x40
 8008dbe:	d007      	beq.n	8008dd0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008dce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dd8:	d152      	bne.n	8008e80 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <HAL_SPI_Transmit+0xee>
 8008de2:	8b7b      	ldrh	r3, [r7, #26]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d145      	bne.n	8008e74 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dec:	881a      	ldrh	r2, [r3, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008df8:	1c9a      	adds	r2, r3, #2
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	3b01      	subs	r3, #1
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008e0c:	e032      	b.n	8008e74 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d112      	bne.n	8008e42 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e20:	881a      	ldrh	r2, [r3, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e2c:	1c9a      	adds	r2, r3, #2
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008e40:	e018      	b.n	8008e74 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e42:	f7fc f8a3 	bl	8004f8c <HAL_GetTick>
 8008e46:	4602      	mov	r2, r0
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d803      	bhi.n	8008e5a <HAL_SPI_Transmit+0x160>
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e58:	d102      	bne.n	8008e60 <HAL_SPI_Transmit+0x166>
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d109      	bne.n	8008e74 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e082      	b.n	8008f7a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1c7      	bne.n	8008e0e <HAL_SPI_Transmit+0x114>
 8008e7e:	e053      	b.n	8008f28 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <HAL_SPI_Transmit+0x194>
 8008e88:	8b7b      	ldrh	r3, [r7, #26]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d147      	bne.n	8008f1e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	330c      	adds	r3, #12
 8008e98:	7812      	ldrb	r2, [r2, #0]
 8008e9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	3b01      	subs	r3, #1
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008eb4:	e033      	b.n	8008f1e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	f003 0302 	and.w	r3, r3, #2
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d113      	bne.n	8008eec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	330c      	adds	r3, #12
 8008ece:	7812      	ldrb	r2, [r2, #0]
 8008ed0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008eea:	e018      	b.n	8008f1e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eec:	f7fc f84e 	bl	8004f8c <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d803      	bhi.n	8008f04 <HAL_SPI_Transmit+0x20a>
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f02:	d102      	bne.n	8008f0a <HAL_SPI_Transmit+0x210>
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d109      	bne.n	8008f1e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e02d      	b.n	8008f7a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1c6      	bne.n	8008eb6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f28:	69fa      	ldr	r2, [r7, #28]
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 fe3f 	bl	8009bb0 <SPI_EndRxTxTransaction>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10a      	bne.n	8008f5c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f46:	2300      	movs	r3, #0
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	617b      	str	r3, [r7, #20]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	617b      	str	r3, [r7, #20]
 8008f5a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e000      	b.n	8008f7a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008f78:	2300      	movs	r3, #0
  }
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3720      	adds	r7, #32
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b088      	sub	sp, #32
 8008f86:	af02      	add	r7, sp, #8
 8008f88:	60f8      	str	r0, [r7, #12]
 8008f8a:	60b9      	str	r1, [r7, #8]
 8008f8c:	603b      	str	r3, [r7, #0]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d001      	beq.n	8008fa2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	e104      	b.n	80091ac <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d002      	beq.n	8008fae <HAL_SPI_Receive+0x2c>
 8008fa8:	88fb      	ldrh	r3, [r7, #6]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e0fc      	b.n	80091ac <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fba:	d112      	bne.n	8008fe2 <HAL_SPI_Receive+0x60>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10e      	bne.n	8008fe2 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2204      	movs	r2, #4
 8008fc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008fcc:	88fa      	ldrh	r2, [r7, #6]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	68b9      	ldr	r1, [r7, #8]
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 f8eb 	bl	80091b4 <HAL_SPI_TransmitReceive>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	e0e4      	b.n	80091ac <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fe2:	f7fb ffd3 	bl	8004f8c <HAL_GetTick>
 8008fe6:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d101      	bne.n	8008ff6 <HAL_SPI_Receive+0x74>
 8008ff2:	2302      	movs	r3, #2
 8008ff4:	e0da      	b.n	80091ac <HAL_SPI_Receive+0x22a>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2204      	movs	r2, #4
 8009002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	88fa      	ldrh	r2, [r7, #6]
 8009016:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	88fa      	ldrh	r2, [r7, #6]
 800901c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009044:	d10f      	bne.n	8009066 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009054:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009064:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009070:	2b40      	cmp	r3, #64	@ 0x40
 8009072:	d007      	beq.n	8009084 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009082:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d170      	bne.n	800916e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800908c:	e035      	b.n	80090fa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	2b01      	cmp	r3, #1
 800909a:	d115      	bne.n	80090c8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f103 020c 	add.w	r2, r3, #12
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a8:	7812      	ldrb	r2, [r2, #0]
 80090aa:	b2d2      	uxtb	r2, r2
 80090ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b2:	1c5a      	adds	r2, r3, #1
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090bc:	b29b      	uxth	r3, r3
 80090be:	3b01      	subs	r3, #1
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80090c6:	e018      	b.n	80090fa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090c8:	f7fb ff60 	bl	8004f8c <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d803      	bhi.n	80090e0 <HAL_SPI_Receive+0x15e>
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090de:	d102      	bne.n	80090e6 <HAL_SPI_Receive+0x164>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d109      	bne.n	80090fa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e058      	b.n	80091ac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090fe:	b29b      	uxth	r3, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1c4      	bne.n	800908e <HAL_SPI_Receive+0x10c>
 8009104:	e038      	b.n	8009178 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	2b01      	cmp	r3, #1
 8009112:	d113      	bne.n	800913c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800911e:	b292      	uxth	r2, r2
 8009120:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009126:	1c9a      	adds	r2, r3, #2
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009130:	b29b      	uxth	r3, r3
 8009132:	3b01      	subs	r3, #1
 8009134:	b29a      	uxth	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800913a:	e018      	b.n	800916e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800913c:	f7fb ff26 	bl	8004f8c <HAL_GetTick>
 8009140:	4602      	mov	r2, r0
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	429a      	cmp	r2, r3
 800914a:	d803      	bhi.n	8009154 <HAL_SPI_Receive+0x1d2>
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009152:	d102      	bne.n	800915a <HAL_SPI_Receive+0x1d8>
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d109      	bne.n	800916e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e01e      	b.n	80091ac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009172:	b29b      	uxth	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1c6      	bne.n	8009106 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f000 fcb1 	bl	8009ae4 <SPI_EndRxTransaction>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d002      	beq.n	800918e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2220      	movs	r2, #32
 800918c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d001      	beq.n	80091aa <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e000      	b.n	80091ac <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80091aa:	2300      	movs	r3, #0
  }
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b08a      	sub	sp, #40	@ 0x28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
 80091c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80091c2:	2301      	movs	r3, #1
 80091c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091c6:	f7fb fee1 	bl	8004f8c <HAL_GetTick>
 80091ca:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80091d2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80091da:	887b      	ldrh	r3, [r7, #2]
 80091dc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80091de:	7ffb      	ldrb	r3, [r7, #31]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d00c      	beq.n	80091fe <HAL_SPI_TransmitReceive+0x4a>
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091ea:	d106      	bne.n	80091fa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d102      	bne.n	80091fa <HAL_SPI_TransmitReceive+0x46>
 80091f4:	7ffb      	ldrb	r3, [r7, #31]
 80091f6:	2b04      	cmp	r3, #4
 80091f8:	d001      	beq.n	80091fe <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80091fa:	2302      	movs	r3, #2
 80091fc:	e17f      	b.n	80094fe <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <HAL_SPI_TransmitReceive+0x5c>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <HAL_SPI_TransmitReceive+0x5c>
 800920a:	887b      	ldrh	r3, [r7, #2]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e174      	b.n	80094fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800921a:	2b01      	cmp	r3, #1
 800921c:	d101      	bne.n	8009222 <HAL_SPI_TransmitReceive+0x6e>
 800921e:	2302      	movs	r3, #2
 8009220:	e16d      	b.n	80094fe <HAL_SPI_TransmitReceive+0x34a>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b04      	cmp	r3, #4
 8009234:	d003      	beq.n	800923e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2205      	movs	r2, #5
 800923a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	887a      	ldrh	r2, [r7, #2]
 800924e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	887a      	ldrh	r2, [r7, #2]
 8009254:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	887a      	ldrh	r2, [r7, #2]
 8009260:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	887a      	ldrh	r2, [r7, #2]
 8009266:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800927e:	2b40      	cmp	r3, #64	@ 0x40
 8009280:	d007      	beq.n	8009292 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009290:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800929a:	d17e      	bne.n	800939a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <HAL_SPI_TransmitReceive+0xf6>
 80092a4:	8afb      	ldrh	r3, [r7, #22]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d16c      	bne.n	8009384 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ae:	881a      	ldrh	r2, [r3, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ba:	1c9a      	adds	r2, r3, #2
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	3b01      	subs	r3, #1
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092ce:	e059      	b.n	8009384 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d11b      	bne.n	8009316 <HAL_SPI_TransmitReceive+0x162>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d016      	beq.n	8009316 <HAL_SPI_TransmitReceive+0x162>
 80092e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d113      	bne.n	8009316 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f2:	881a      	ldrh	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092fe:	1c9a      	adds	r2, r3, #2
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009308:	b29b      	uxth	r3, r3
 800930a:	3b01      	subs	r3, #1
 800930c:	b29a      	uxth	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009312:	2300      	movs	r3, #0
 8009314:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	2b01      	cmp	r3, #1
 8009322:	d119      	bne.n	8009358 <HAL_SPI_TransmitReceive+0x1a4>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009328:	b29b      	uxth	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d014      	beq.n	8009358 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68da      	ldr	r2, [r3, #12]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009338:	b292      	uxth	r2, r2
 800933a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009340:	1c9a      	adds	r2, r3, #2
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800934a:	b29b      	uxth	r3, r3
 800934c:	3b01      	subs	r3, #1
 800934e:	b29a      	uxth	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009354:	2301      	movs	r3, #1
 8009356:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009358:	f7fb fe18 	bl	8004f8c <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	6a3b      	ldr	r3, [r7, #32]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009364:	429a      	cmp	r2, r3
 8009366:	d80d      	bhi.n	8009384 <HAL_SPI_TransmitReceive+0x1d0>
 8009368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800936e:	d009      	beq.n	8009384 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e0bc      	b.n	80094fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009388:	b29b      	uxth	r3, r3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1a0      	bne.n	80092d0 <HAL_SPI_TransmitReceive+0x11c>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009392:	b29b      	uxth	r3, r3
 8009394:	2b00      	cmp	r3, #0
 8009396:	d19b      	bne.n	80092d0 <HAL_SPI_TransmitReceive+0x11c>
 8009398:	e082      	b.n	80094a0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d002      	beq.n	80093a8 <HAL_SPI_TransmitReceive+0x1f4>
 80093a2:	8afb      	ldrh	r3, [r7, #22]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d171      	bne.n	800948c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	330c      	adds	r3, #12
 80093b2:	7812      	ldrb	r2, [r2, #0]
 80093b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ba:	1c5a      	adds	r2, r3, #1
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	3b01      	subs	r3, #1
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093ce:	e05d      	b.n	800948c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f003 0302 	and.w	r3, r3, #2
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d11c      	bne.n	8009418 <HAL_SPI_TransmitReceive+0x264>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d017      	beq.n	8009418 <HAL_SPI_TransmitReceive+0x264>
 80093e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d114      	bne.n	8009418 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	330c      	adds	r3, #12
 80093f8:	7812      	ldrb	r2, [r2, #0]
 80093fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800940a:	b29b      	uxth	r3, r3
 800940c:	3b01      	subs	r3, #1
 800940e:	b29a      	uxth	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009414:	2300      	movs	r3, #0
 8009416:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f003 0301 	and.w	r3, r3, #1
 8009422:	2b01      	cmp	r3, #1
 8009424:	d119      	bne.n	800945a <HAL_SPI_TransmitReceive+0x2a6>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800942a:	b29b      	uxth	r3, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	d014      	beq.n	800945a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68da      	ldr	r2, [r3, #12]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943a:	b2d2      	uxtb	r2, r2
 800943c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009442:	1c5a      	adds	r2, r3, #1
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800944c:	b29b      	uxth	r3, r3
 800944e:	3b01      	subs	r3, #1
 8009450:	b29a      	uxth	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009456:	2301      	movs	r3, #1
 8009458:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800945a:	f7fb fd97 	bl	8004f8c <HAL_GetTick>
 800945e:	4602      	mov	r2, r0
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009466:	429a      	cmp	r2, r3
 8009468:	d803      	bhi.n	8009472 <HAL_SPI_TransmitReceive+0x2be>
 800946a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009470:	d102      	bne.n	8009478 <HAL_SPI_TransmitReceive+0x2c4>
 8009472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009474:	2b00      	cmp	r3, #0
 8009476:	d109      	bne.n	800948c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e038      	b.n	80094fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009490:	b29b      	uxth	r3, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	d19c      	bne.n	80093d0 <HAL_SPI_TransmitReceive+0x21c>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800949a:	b29b      	uxth	r3, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	d197      	bne.n	80093d0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094a0:	6a3a      	ldr	r2, [r7, #32]
 80094a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 fb83 	bl	8009bb0 <SPI_EndRxTxTransaction>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d008      	beq.n	80094c2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2220      	movs	r2, #32
 80094b4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e01d      	b.n	80094fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10a      	bne.n	80094e0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094ca:	2300      	movs	r3, #0
 80094cc:	613b      	str	r3, [r7, #16]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	613b      	str	r3, [r7, #16]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	613b      	str	r3, [r7, #16]
 80094de:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e000      	b.n	80094fe <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80094fc:	2300      	movs	r3, #0
  }
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3728      	adds	r7, #40	@ 0x28
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
	...

08009508 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	4613      	mov	r3, r2
 8009514:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b01      	cmp	r3, #1
 8009520:	d001      	beq.n	8009526 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009522:	2302      	movs	r3, #2
 8009524:	e097      	b.n	8009656 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d002      	beq.n	8009532 <HAL_SPI_Transmit_DMA+0x2a>
 800952c:	88fb      	ldrh	r3, [r7, #6]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e08f      	b.n	8009656 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800953c:	2b01      	cmp	r3, #1
 800953e:	d101      	bne.n	8009544 <HAL_SPI_Transmit_DMA+0x3c>
 8009540:	2302      	movs	r3, #2
 8009542:	e088      	b.n	8009656 <HAL_SPI_Transmit_DMA+0x14e>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2203      	movs	r2, #3
 8009550:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	88fa      	ldrh	r2, [r7, #6]
 8009564:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	88fa      	ldrh	r2, [r7, #6]
 800956a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009592:	d10f      	bne.n	80095b4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80095b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095b8:	4a29      	ldr	r2, [pc, #164]	@ (8009660 <HAL_SPI_Transmit_DMA+0x158>)
 80095ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095c0:	4a28      	ldr	r2, [pc, #160]	@ (8009664 <HAL_SPI_Transmit_DMA+0x15c>)
 80095c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095c8:	4a27      	ldr	r2, [pc, #156]	@ (8009668 <HAL_SPI_Transmit_DMA+0x160>)
 80095ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095d0:	2200      	movs	r2, #0
 80095d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095dc:	4619      	mov	r1, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	330c      	adds	r3, #12
 80095e4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80095ec:	f7fc f9b2 	bl	8005954 <HAL_DMA_Start_IT>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00b      	beq.n	800960e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095fa:	f043 0210 	orr.w	r2, r3, #16
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e023      	b.n	8009656 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009618:	2b40      	cmp	r3, #64	@ 0x40
 800961a:	d007      	beq.n	800962c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800962a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f042 0220 	orr.w	r2, r2, #32
 8009642:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f042 0202 	orr.w	r2, r2, #2
 8009652:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	08009951 	.word	0x08009951
 8009664:	080098a9 	.word	0x080098a9
 8009668:	0800996d 	.word	0x0800996d

0800966c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b088      	sub	sp, #32
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	099b      	lsrs	r3, r3, #6
 8009688:	f003 0301 	and.w	r3, r3, #1
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10f      	bne.n	80096b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00a      	beq.n	80096b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	099b      	lsrs	r3, r3, #6
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d004      	beq.n	80096b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	4798      	blx	r3
    return;
 80096ae:	e0d7      	b.n	8009860 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	085b      	lsrs	r3, r3, #1
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00a      	beq.n	80096d2 <HAL_SPI_IRQHandler+0x66>
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	09db      	lsrs	r3, r3, #7
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d004      	beq.n	80096d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	4798      	blx	r3
    return;
 80096d0:	e0c6      	b.n	8009860 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	095b      	lsrs	r3, r3, #5
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10c      	bne.n	80096f8 <HAL_SPI_IRQHandler+0x8c>
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	099b      	lsrs	r3, r3, #6
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d106      	bne.n	80096f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	0a1b      	lsrs	r3, r3, #8
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 80b4 	beq.w	8009860 <HAL_SPI_IRQHandler+0x1f4>
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	095b      	lsrs	r3, r3, #5
 80096fc:	f003 0301 	and.w	r3, r3, #1
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 80ad 	beq.w	8009860 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	099b      	lsrs	r3, r3, #6
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	2b00      	cmp	r3, #0
 8009710:	d023      	beq.n	800975a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b03      	cmp	r3, #3
 800971c:	d011      	beq.n	8009742 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009722:	f043 0204 	orr.w	r2, r3, #4
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800972a:	2300      	movs	r3, #0
 800972c:	617b      	str	r3, [r7, #20]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	617b      	str	r3, [r7, #20]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	617b      	str	r3, [r7, #20]
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	e00b      	b.n	800975a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009742:	2300      	movs	r3, #0
 8009744:	613b      	str	r3, [r7, #16]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	613b      	str	r3, [r7, #16]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	613b      	str	r3, [r7, #16]
 8009756:	693b      	ldr	r3, [r7, #16]
        return;
 8009758:	e082      	b.n	8009860 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	095b      	lsrs	r3, r3, #5
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b00      	cmp	r3, #0
 8009764:	d014      	beq.n	8009790 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800976a:	f043 0201 	orr.w	r2, r3, #1
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009772:	2300      	movs	r3, #0
 8009774:	60fb      	str	r3, [r7, #12]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	60fb      	str	r3, [r7, #12]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800978c:	601a      	str	r2, [r3, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	0a1b      	lsrs	r3, r3, #8
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00c      	beq.n	80097b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a0:	f043 0208 	orr.w	r2, r3, #8
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80097a8:	2300      	movs	r3, #0
 80097aa:	60bb      	str	r3, [r7, #8]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	60bb      	str	r3, [r7, #8]
 80097b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d04f      	beq.n	800985e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	685a      	ldr	r2, [r3, #4]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80097cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	f003 0302 	and.w	r3, r3, #2
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d104      	bne.n	80097ea <HAL_SPI_IRQHandler+0x17e>
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d034      	beq.n	8009854 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f022 0203 	bic.w	r2, r2, #3
 80097f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d011      	beq.n	8009826 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009806:	4a18      	ldr	r2, [pc, #96]	@ (8009868 <HAL_SPI_IRQHandler+0x1fc>)
 8009808:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800980e:	4618      	mov	r0, r3
 8009810:	f7fc f968 	bl	8005ae4 <HAL_DMA_Abort_IT>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d005      	beq.n	8009826 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800981e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800982a:	2b00      	cmp	r3, #0
 800982c:	d016      	beq.n	800985c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009832:	4a0d      	ldr	r2, [pc, #52]	@ (8009868 <HAL_SPI_IRQHandler+0x1fc>)
 8009834:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800983a:	4618      	mov	r0, r3
 800983c:	f7fc f952 	bl	8005ae4 <HAL_DMA_Abort_IT>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00a      	beq.n	800985c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800984a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8009852:	e003      	b.n	800985c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f81d 	bl	8009894 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800985a:	e000      	b.n	800985e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800985c:	bf00      	nop
    return;
 800985e:	bf00      	nop
  }
}
 8009860:	3720      	adds	r7, #32
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	080099ad 	.word	0x080099ad

0800986c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098b6:	f7fb fb69 	bl	8004f8c <HAL_GetTick>
 80098ba:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098ca:	d03b      	beq.n	8009944 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f022 0220 	bic.w	r2, r2, #32
 80098da:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685a      	ldr	r2, [r3, #4]
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 0202 	bic.w	r2, r2, #2
 80098ea:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	2164      	movs	r1, #100	@ 0x64
 80098f0:	6978      	ldr	r0, [r7, #20]
 80098f2:	f000 f95d 	bl	8009bb0 <SPI_EndRxTxTransaction>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d005      	beq.n	8009908 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009900:	f043 0220 	orr.w	r2, r3, #32
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10a      	bne.n	8009926 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009910:	2300      	movs	r3, #0
 8009912:	60fb      	str	r3, [r7, #12]
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	60fb      	str	r3, [r7, #12]
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	2200      	movs	r2, #0
 800992a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009938:	2b00      	cmp	r3, #0
 800993a:	d003      	beq.n	8009944 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800993c:	6978      	ldr	r0, [r7, #20]
 800993e:	f7ff ffa9 	bl	8009894 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009942:	e002      	b.n	800994a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009944:	6978      	ldr	r0, [r7, #20]
 8009946:	f7ff ff91 	bl	800986c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800994a:	3718      	adds	r7, #24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800995c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f7ff ff8e 	bl	8009880 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009964:	bf00      	nop
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009978:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	685a      	ldr	r2, [r3, #4]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f022 0203 	bic.w	r2, r2, #3
 8009988:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800998e:	f043 0210 	orr.w	r2, r3, #16
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2201      	movs	r2, #1
 800999a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f7ff ff78 	bl	8009894 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099a4:	bf00      	nop
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f7ff ff64 	bl	8009894 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099cc:	bf00      	nop
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	603b      	str	r3, [r7, #0]
 80099e0:	4613      	mov	r3, r2
 80099e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80099e4:	f7fb fad2 	bl	8004f8c <HAL_GetTick>
 80099e8:	4602      	mov	r2, r0
 80099ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ec:	1a9b      	subs	r3, r3, r2
 80099ee:	683a      	ldr	r2, [r7, #0]
 80099f0:	4413      	add	r3, r2
 80099f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80099f4:	f7fb faca 	bl	8004f8c <HAL_GetTick>
 80099f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80099fa:	4b39      	ldr	r3, [pc, #228]	@ (8009ae0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	015b      	lsls	r3, r3, #5
 8009a00:	0d1b      	lsrs	r3, r3, #20
 8009a02:	69fa      	ldr	r2, [r7, #28]
 8009a04:	fb02 f303 	mul.w	r3, r2, r3
 8009a08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a0a:	e055      	b.n	8009ab8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a12:	d051      	beq.n	8009ab8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a14:	f7fb faba 	bl	8004f8c <HAL_GetTick>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	69fa      	ldr	r2, [r7, #28]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d902      	bls.n	8009a2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d13d      	bne.n	8009aa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a42:	d111      	bne.n	8009a68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a4c:	d004      	beq.n	8009a58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a56:	d107      	bne.n	8009a68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a70:	d10f      	bne.n	8009a92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a80:	601a      	str	r2, [r3, #0]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e018      	b.n	8009ad8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d102      	bne.n	8009ab2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009aac:	2300      	movs	r3, #0
 8009aae:	61fb      	str	r3, [r7, #28]
 8009ab0:	e002      	b.n	8009ab8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	689a      	ldr	r2, [r3, #8]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	bf0c      	ite	eq
 8009ac8:	2301      	moveq	r3, #1
 8009aca:	2300      	movne	r3, #0
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	461a      	mov	r2, r3
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d19a      	bne.n	8009a0c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3720      	adds	r7, #32
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	20000000 	.word	0x20000000

08009ae4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af02      	add	r7, sp, #8
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009af8:	d111      	bne.n	8009b1e <SPI_EndRxTransaction+0x3a>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b02:	d004      	beq.n	8009b0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b0c:	d107      	bne.n	8009b1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b1c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b26:	d12a      	bne.n	8009b7e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b30:	d012      	beq.n	8009b58 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	2180      	movs	r1, #128	@ 0x80
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f7ff ff49 	bl	80099d4 <SPI_WaitFlagStateUntilTimeout>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d02d      	beq.n	8009ba4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b4c:	f043 0220 	orr.w	r2, r3, #32
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009b54:	2303      	movs	r3, #3
 8009b56:	e026      	b.n	8009ba6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	2101      	movs	r1, #1
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f7ff ff36 	bl	80099d4 <SPI_WaitFlagStateUntilTimeout>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d01a      	beq.n	8009ba4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b72:	f043 0220 	orr.w	r2, r3, #32
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e013      	b.n	8009ba6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	2200      	movs	r2, #0
 8009b86:	2101      	movs	r1, #1
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f7ff ff23 	bl	80099d4 <SPI_WaitFlagStateUntilTimeout>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d007      	beq.n	8009ba4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b98:	f043 0220 	orr.w	r2, r3, #32
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e000      	b.n	8009ba6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
	...

08009bb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b088      	sub	sp, #32
 8009bb4:	af02      	add	r7, sp, #8
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	2102      	movs	r1, #2
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f7ff ff04 	bl	80099d4 <SPI_WaitFlagStateUntilTimeout>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d007      	beq.n	8009be2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bd6:	f043 0220 	orr.w	r2, r3, #32
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e032      	b.n	8009c48 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009be2:	4b1b      	ldr	r3, [pc, #108]	@ (8009c50 <SPI_EndRxTxTransaction+0xa0>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a1b      	ldr	r2, [pc, #108]	@ (8009c54 <SPI_EndRxTxTransaction+0xa4>)
 8009be8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bec:	0d5b      	lsrs	r3, r3, #21
 8009bee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009bf2:	fb02 f303 	mul.w	r3, r2, r3
 8009bf6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c00:	d112      	bne.n	8009c28 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	2180      	movs	r1, #128	@ 0x80
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f7ff fee1 	bl	80099d4 <SPI_WaitFlagStateUntilTimeout>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d016      	beq.n	8009c46 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c1c:	f043 0220 	orr.w	r2, r3, #32
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e00f      	b.n	8009c48 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00a      	beq.n	8009c44 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	3b01      	subs	r3, #1
 8009c32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c3e:	2b80      	cmp	r3, #128	@ 0x80
 8009c40:	d0f2      	beq.n	8009c28 <SPI_EndRxTxTransaction+0x78>
 8009c42:	e000      	b.n	8009c46 <SPI_EndRxTxTransaction+0x96>
        break;
 8009c44:	bf00      	nop
  }

  return HAL_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3718      	adds	r7, #24
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	20000000 	.word	0x20000000
 8009c54:	165e9f81 	.word	0x165e9f81

08009c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e041      	b.n	8009cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d106      	bne.n	8009c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7fa fd7a 	bl	8004778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2202      	movs	r2, #2
 8009c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3304      	adds	r3, #4
 8009c94:	4619      	mov	r1, r3
 8009c96:	4610      	mov	r0, r2
 8009c98:	f000 fc28 	bl	800a4ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b082      	sub	sp, #8
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e041      	b.n	8009d8c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d106      	bne.n	8009d22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f839 	bl	8009d94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2202      	movs	r2, #2
 8009d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	3304      	adds	r3, #4
 8009d32:	4619      	mov	r1, r3
 8009d34:	4610      	mov	r0, r2
 8009d36:	f000 fbd9 	bl	800a4ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	e041      	b.n	8009e3e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d106      	bne.n	8009dd4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f839 	bl	8009e46 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3304      	adds	r3, #4
 8009de4:	4619      	mov	r1, r3
 8009de6:	4610      	mov	r0, r2
 8009de8:	f000 fb80 	bl	800a4ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b083      	sub	sp, #12
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009e4e:	bf00      	nop
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	f003 0302 	and.w	r3, r3, #2
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d020      	beq.n	8009ebe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f003 0302 	and.w	r3, r3, #2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d01b      	beq.n	8009ebe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f06f 0202 	mvn.w	r2, #2
 8009e8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	f003 0303 	and.w	r3, r3, #3
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d003      	beq.n	8009eac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fb02 	bl	800a4ae <HAL_TIM_IC_CaptureCallback>
 8009eaa:	e005      	b.n	8009eb8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 faf4 	bl	800a49a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fb05 	bl	800a4c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	f003 0304 	and.w	r3, r3, #4
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d020      	beq.n	8009f0a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f003 0304 	and.w	r3, r3, #4
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d01b      	beq.n	8009f0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f06f 0204 	mvn.w	r2, #4
 8009eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2202      	movs	r2, #2
 8009ee0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d003      	beq.n	8009ef8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fadc 	bl	800a4ae <HAL_TIM_IC_CaptureCallback>
 8009ef6:	e005      	b.n	8009f04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 face 	bl	800a49a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fadf 	bl	800a4c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	f003 0308 	and.w	r3, r3, #8
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d020      	beq.n	8009f56 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f003 0308 	and.w	r3, r3, #8
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d01b      	beq.n	8009f56 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f06f 0208 	mvn.w	r2, #8
 8009f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2204      	movs	r2, #4
 8009f2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	69db      	ldr	r3, [r3, #28]
 8009f34:	f003 0303 	and.w	r3, r3, #3
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d003      	beq.n	8009f44 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fab6 	bl	800a4ae <HAL_TIM_IC_CaptureCallback>
 8009f42:	e005      	b.n	8009f50 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 faa8 	bl	800a49a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fab9 	bl	800a4c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	f003 0310 	and.w	r3, r3, #16
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d020      	beq.n	8009fa2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f003 0310 	and.w	r3, r3, #16
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d01b      	beq.n	8009fa2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f06f 0210 	mvn.w	r2, #16
 8009f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2208      	movs	r2, #8
 8009f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d003      	beq.n	8009f90 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fa90 	bl	800a4ae <HAL_TIM_IC_CaptureCallback>
 8009f8e:	e005      	b.n	8009f9c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fa82 	bl	800a49a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fa93 	bl	800a4c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00c      	beq.n	8009fc6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d007      	beq.n	8009fc6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f06f 0201 	mvn.w	r2, #1
 8009fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fa60 	bl	800a486 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00c      	beq.n	8009fea <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d007      	beq.n	8009fea <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 ff73 	bl	800aed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00c      	beq.n	800a00e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d007      	beq.n	800a00e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fa64 	bl	800a4d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	f003 0320 	and.w	r3, r3, #32
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00c      	beq.n	800a032 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f003 0320 	and.w	r3, r3, #32
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d007      	beq.n	800a032 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f06f 0220 	mvn.w	r2, #32
 800a02a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 ff45 	bl	800aebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a032:	bf00      	nop
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b086      	sub	sp, #24
 800a03e:	af00      	add	r7, sp, #0
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	60b9      	str	r1, [r7, #8]
 800a044:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a050:	2b01      	cmp	r3, #1
 800a052:	d101      	bne.n	800a058 <HAL_TIM_IC_ConfigChannel+0x1e>
 800a054:	2302      	movs	r3, #2
 800a056:	e088      	b.n	800a16a <HAL_TIM_IC_ConfigChannel+0x130>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d11b      	bne.n	800a09e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a076:	f000 fc8f 	bl	800a998 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	699a      	ldr	r2, [r3, #24]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f022 020c 	bic.w	r2, r2, #12
 800a088:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	6999      	ldr	r1, [r3, #24]
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	689a      	ldr	r2, [r3, #8]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	430a      	orrs	r2, r1
 800a09a:	619a      	str	r2, [r3, #24]
 800a09c:	e060      	b.n	800a160 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b04      	cmp	r3, #4
 800a0a2:	d11c      	bne.n	800a0de <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800a0b4:	f000 fd13 	bl	800aade <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	699a      	ldr	r2, [r3, #24]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800a0c6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	6999      	ldr	r1, [r3, #24]
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	021a      	lsls	r2, r3, #8
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	430a      	orrs	r2, r1
 800a0da:	619a      	str	r2, [r3, #24]
 800a0dc:	e040      	b.n	800a160 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2b08      	cmp	r3, #8
 800a0e2:	d11b      	bne.n	800a11c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800a0f4:	f000 fd60 	bl	800abb8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	69da      	ldr	r2, [r3, #28]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f022 020c 	bic.w	r2, r2, #12
 800a106:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	69d9      	ldr	r1, [r3, #28]
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	689a      	ldr	r2, [r3, #8]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	430a      	orrs	r2, r1
 800a118:	61da      	str	r2, [r3, #28]
 800a11a:	e021      	b.n	800a160 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b0c      	cmp	r3, #12
 800a120:	d11c      	bne.n	800a15c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800a132:	f000 fd7d 	bl	800ac30 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69da      	ldr	r2, [r3, #28]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800a144:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	69d9      	ldr	r1, [r3, #28]
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	021a      	lsls	r2, r3, #8
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	430a      	orrs	r2, r1
 800a158:	61da      	str	r2, [r3, #28]
 800a15a:	e001      	b.n	800a160 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a168:	7dfb      	ldrb	r3, [r7, #23]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
	...

0800a174 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b086      	sub	sp, #24
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d101      	bne.n	800a192 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a18e:	2302      	movs	r3, #2
 800a190:	e0ae      	b.n	800a2f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2b0c      	cmp	r3, #12
 800a19e:	f200 809f 	bhi.w	800a2e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a1a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a8:	0800a1dd 	.word	0x0800a1dd
 800a1ac:	0800a2e1 	.word	0x0800a2e1
 800a1b0:	0800a2e1 	.word	0x0800a2e1
 800a1b4:	0800a2e1 	.word	0x0800a2e1
 800a1b8:	0800a21d 	.word	0x0800a21d
 800a1bc:	0800a2e1 	.word	0x0800a2e1
 800a1c0:	0800a2e1 	.word	0x0800a2e1
 800a1c4:	0800a2e1 	.word	0x0800a2e1
 800a1c8:	0800a25f 	.word	0x0800a25f
 800a1cc:	0800a2e1 	.word	0x0800a2e1
 800a1d0:	0800a2e1 	.word	0x0800a2e1
 800a1d4:	0800a2e1 	.word	0x0800a2e1
 800a1d8:	0800a29f 	.word	0x0800a29f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68b9      	ldr	r1, [r7, #8]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 fa28 	bl	800a638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	699a      	ldr	r2, [r3, #24]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f042 0208 	orr.w	r2, r2, #8
 800a1f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	699a      	ldr	r2, [r3, #24]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f022 0204 	bic.w	r2, r2, #4
 800a206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6999      	ldr	r1, [r3, #24]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	691a      	ldr	r2, [r3, #16]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	430a      	orrs	r2, r1
 800a218:	619a      	str	r2, [r3, #24]
      break;
 800a21a:	e064      	b.n	800a2e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68b9      	ldr	r1, [r7, #8]
 800a222:	4618      	mov	r0, r3
 800a224:	f000 fa78 	bl	800a718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	699a      	ldr	r2, [r3, #24]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	699a      	ldr	r2, [r3, #24]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	6999      	ldr	r1, [r3, #24]
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	021a      	lsls	r2, r3, #8
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	430a      	orrs	r2, r1
 800a25a:	619a      	str	r2, [r3, #24]
      break;
 800a25c:	e043      	b.n	800a2e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68b9      	ldr	r1, [r7, #8]
 800a264:	4618      	mov	r0, r3
 800a266:	f000 facd 	bl	800a804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	69da      	ldr	r2, [r3, #28]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f042 0208 	orr.w	r2, r2, #8
 800a278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	69da      	ldr	r2, [r3, #28]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f022 0204 	bic.w	r2, r2, #4
 800a288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	69d9      	ldr	r1, [r3, #28]
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	691a      	ldr	r2, [r3, #16]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	430a      	orrs	r2, r1
 800a29a:	61da      	str	r2, [r3, #28]
      break;
 800a29c:	e023      	b.n	800a2e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68b9      	ldr	r1, [r7, #8]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f000 fb21 	bl	800a8ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	69da      	ldr	r2, [r3, #28]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	69da      	ldr	r2, [r3, #28]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	69d9      	ldr	r1, [r3, #28]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	021a      	lsls	r2, r3, #8
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	430a      	orrs	r2, r1
 800a2dc:	61da      	str	r2, [r3, #28]
      break;
 800a2de:	e002      	b.n	800a2e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a2ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d101      	bne.n	800a314 <HAL_TIM_ConfigClockSource+0x1c>
 800a310:	2302      	movs	r3, #2
 800a312:	e0b4      	b.n	800a47e <HAL_TIM_ConfigClockSource+0x186>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2202      	movs	r2, #2
 800a320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a33a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68ba      	ldr	r2, [r7, #8]
 800a342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a34c:	d03e      	beq.n	800a3cc <HAL_TIM_ConfigClockSource+0xd4>
 800a34e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a352:	f200 8087 	bhi.w	800a464 <HAL_TIM_ConfigClockSource+0x16c>
 800a356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a35a:	f000 8086 	beq.w	800a46a <HAL_TIM_ConfigClockSource+0x172>
 800a35e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a362:	d87f      	bhi.n	800a464 <HAL_TIM_ConfigClockSource+0x16c>
 800a364:	2b70      	cmp	r3, #112	@ 0x70
 800a366:	d01a      	beq.n	800a39e <HAL_TIM_ConfigClockSource+0xa6>
 800a368:	2b70      	cmp	r3, #112	@ 0x70
 800a36a:	d87b      	bhi.n	800a464 <HAL_TIM_ConfigClockSource+0x16c>
 800a36c:	2b60      	cmp	r3, #96	@ 0x60
 800a36e:	d050      	beq.n	800a412 <HAL_TIM_ConfigClockSource+0x11a>
 800a370:	2b60      	cmp	r3, #96	@ 0x60
 800a372:	d877      	bhi.n	800a464 <HAL_TIM_ConfigClockSource+0x16c>
 800a374:	2b50      	cmp	r3, #80	@ 0x50
 800a376:	d03c      	beq.n	800a3f2 <HAL_TIM_ConfigClockSource+0xfa>
 800a378:	2b50      	cmp	r3, #80	@ 0x50
 800a37a:	d873      	bhi.n	800a464 <HAL_TIM_ConfigClockSource+0x16c>
 800a37c:	2b40      	cmp	r3, #64	@ 0x40
 800a37e:	d058      	beq.n	800a432 <HAL_TIM_ConfigClockSource+0x13a>
 800a380:	2b40      	cmp	r3, #64	@ 0x40
 800a382:	d86f      	bhi.n	800a464 <HAL_TIM_ConfigClockSource+0x16c>
 800a384:	2b30      	cmp	r3, #48	@ 0x30
 800a386:	d064      	beq.n	800a452 <HAL_TIM_ConfigClockSource+0x15a>
 800a388:	2b30      	cmp	r3, #48	@ 0x30
 800a38a:	d86b      	bhi.n	800a464 <HAL_TIM_ConfigClockSource+0x16c>
 800a38c:	2b20      	cmp	r3, #32
 800a38e:	d060      	beq.n	800a452 <HAL_TIM_ConfigClockSource+0x15a>
 800a390:	2b20      	cmp	r3, #32
 800a392:	d867      	bhi.n	800a464 <HAL_TIM_ConfigClockSource+0x16c>
 800a394:	2b00      	cmp	r3, #0
 800a396:	d05c      	beq.n	800a452 <HAL_TIM_ConfigClockSource+0x15a>
 800a398:	2b10      	cmp	r3, #16
 800a39a:	d05a      	beq.n	800a452 <HAL_TIM_ConfigClockSource+0x15a>
 800a39c:	e062      	b.n	800a464 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a3ae:	f000 fc97 	bl	800ace0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a3c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68ba      	ldr	r2, [r7, #8]
 800a3c8:	609a      	str	r2, [r3, #8]
      break;
 800a3ca:	e04f      	b.n	800a46c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a3dc:	f000 fc80 	bl	800ace0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	689a      	ldr	r2, [r3, #8]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a3ee:	609a      	str	r2, [r3, #8]
      break;
 800a3f0:	e03c      	b.n	800a46c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3fe:	461a      	mov	r2, r3
 800a400:	f000 fb3e 	bl	800aa80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2150      	movs	r1, #80	@ 0x50
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 fc4d 	bl	800acaa <TIM_ITRx_SetConfig>
      break;
 800a410:	e02c      	b.n	800a46c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a41e:	461a      	mov	r2, r3
 800a420:	f000 fb9a 	bl	800ab58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2160      	movs	r1, #96	@ 0x60
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 fc3d 	bl	800acaa <TIM_ITRx_SetConfig>
      break;
 800a430:	e01c      	b.n	800a46c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a43e:	461a      	mov	r2, r3
 800a440:	f000 fb1e 	bl	800aa80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2140      	movs	r1, #64	@ 0x40
 800a44a:	4618      	mov	r0, r3
 800a44c:	f000 fc2d 	bl	800acaa <TIM_ITRx_SetConfig>
      break;
 800a450:	e00c      	b.n	800a46c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4619      	mov	r1, r3
 800a45c:	4610      	mov	r0, r2
 800a45e:	f000 fc24 	bl	800acaa <TIM_ITRx_SetConfig>
      break;
 800a462:	e003      	b.n	800a46c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	73fb      	strb	r3, [r7, #15]
      break;
 800a468:	e000      	b.n	800a46c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a46a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a486:	b480      	push	{r7}
 800a488:	b083      	sub	sp, #12
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a48e:	bf00      	nop
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b083      	sub	sp, #12
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4a2:	bf00      	nop
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b083      	sub	sp, #12
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4b6:	bf00      	nop
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b083      	sub	sp, #12
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4ca:	bf00      	nop
 800a4cc:	370c      	adds	r7, #12
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b083      	sub	sp, #12
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4de:	bf00      	nop
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
	...

0800a4ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a43      	ldr	r2, [pc, #268]	@ (800a60c <TIM_Base_SetConfig+0x120>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d013      	beq.n	800a52c <TIM_Base_SetConfig+0x40>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a50a:	d00f      	beq.n	800a52c <TIM_Base_SetConfig+0x40>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a40      	ldr	r2, [pc, #256]	@ (800a610 <TIM_Base_SetConfig+0x124>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d00b      	beq.n	800a52c <TIM_Base_SetConfig+0x40>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a3f      	ldr	r2, [pc, #252]	@ (800a614 <TIM_Base_SetConfig+0x128>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d007      	beq.n	800a52c <TIM_Base_SetConfig+0x40>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a3e      	ldr	r2, [pc, #248]	@ (800a618 <TIM_Base_SetConfig+0x12c>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d003      	beq.n	800a52c <TIM_Base_SetConfig+0x40>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a3d      	ldr	r2, [pc, #244]	@ (800a61c <TIM_Base_SetConfig+0x130>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d108      	bne.n	800a53e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a32      	ldr	r2, [pc, #200]	@ (800a60c <TIM_Base_SetConfig+0x120>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d02b      	beq.n	800a59e <TIM_Base_SetConfig+0xb2>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a54c:	d027      	beq.n	800a59e <TIM_Base_SetConfig+0xb2>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a2f      	ldr	r2, [pc, #188]	@ (800a610 <TIM_Base_SetConfig+0x124>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d023      	beq.n	800a59e <TIM_Base_SetConfig+0xb2>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a2e      	ldr	r2, [pc, #184]	@ (800a614 <TIM_Base_SetConfig+0x128>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d01f      	beq.n	800a59e <TIM_Base_SetConfig+0xb2>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a2d      	ldr	r2, [pc, #180]	@ (800a618 <TIM_Base_SetConfig+0x12c>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d01b      	beq.n	800a59e <TIM_Base_SetConfig+0xb2>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a2c      	ldr	r2, [pc, #176]	@ (800a61c <TIM_Base_SetConfig+0x130>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d017      	beq.n	800a59e <TIM_Base_SetConfig+0xb2>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a2b      	ldr	r2, [pc, #172]	@ (800a620 <TIM_Base_SetConfig+0x134>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d013      	beq.n	800a59e <TIM_Base_SetConfig+0xb2>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a2a      	ldr	r2, [pc, #168]	@ (800a624 <TIM_Base_SetConfig+0x138>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d00f      	beq.n	800a59e <TIM_Base_SetConfig+0xb2>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a29      	ldr	r2, [pc, #164]	@ (800a628 <TIM_Base_SetConfig+0x13c>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d00b      	beq.n	800a59e <TIM_Base_SetConfig+0xb2>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a28      	ldr	r2, [pc, #160]	@ (800a62c <TIM_Base_SetConfig+0x140>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d007      	beq.n	800a59e <TIM_Base_SetConfig+0xb2>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a27      	ldr	r2, [pc, #156]	@ (800a630 <TIM_Base_SetConfig+0x144>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d003      	beq.n	800a59e <TIM_Base_SetConfig+0xb2>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a26      	ldr	r2, [pc, #152]	@ (800a634 <TIM_Base_SetConfig+0x148>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d108      	bne.n	800a5b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	695b      	ldr	r3, [r3, #20]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	689a      	ldr	r2, [r3, #8]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4a0e      	ldr	r2, [pc, #56]	@ (800a60c <TIM_Base_SetConfig+0x120>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d003      	beq.n	800a5de <TIM_Base_SetConfig+0xf2>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4a10      	ldr	r2, [pc, #64]	@ (800a61c <TIM_Base_SetConfig+0x130>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d103      	bne.n	800a5e6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	691a      	ldr	r2, [r3, #16]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f043 0204 	orr.w	r2, r3, #4
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	601a      	str	r2, [r3, #0]
}
 800a5fe:	bf00      	nop
 800a600:	3714      	adds	r7, #20
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	40010000 	.word	0x40010000
 800a610:	40000400 	.word	0x40000400
 800a614:	40000800 	.word	0x40000800
 800a618:	40000c00 	.word	0x40000c00
 800a61c:	40010400 	.word	0x40010400
 800a620:	40014000 	.word	0x40014000
 800a624:	40014400 	.word	0x40014400
 800a628:	40014800 	.word	0x40014800
 800a62c:	40001800 	.word	0x40001800
 800a630:	40001c00 	.word	0x40001c00
 800a634:	40002000 	.word	0x40002000

0800a638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a638:	b480      	push	{r7}
 800a63a:	b087      	sub	sp, #28
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a1b      	ldr	r3, [r3, #32]
 800a64c:	f023 0201 	bic.w	r2, r3, #1
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f023 0303 	bic.w	r3, r3, #3
 800a66e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	4313      	orrs	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	f023 0302 	bic.w	r3, r3, #2
 800a680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	697a      	ldr	r2, [r7, #20]
 800a688:	4313      	orrs	r3, r2
 800a68a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a20      	ldr	r2, [pc, #128]	@ (800a710 <TIM_OC1_SetConfig+0xd8>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d003      	beq.n	800a69c <TIM_OC1_SetConfig+0x64>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a1f      	ldr	r2, [pc, #124]	@ (800a714 <TIM_OC1_SetConfig+0xdc>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d10c      	bne.n	800a6b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	f023 0308 	bic.w	r3, r3, #8
 800a6a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	f023 0304 	bic.w	r3, r3, #4
 800a6b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a15      	ldr	r2, [pc, #84]	@ (800a710 <TIM_OC1_SetConfig+0xd8>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d003      	beq.n	800a6c6 <TIM_OC1_SetConfig+0x8e>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a14      	ldr	r2, [pc, #80]	@ (800a714 <TIM_OC1_SetConfig+0xdc>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d111      	bne.n	800a6ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a6d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	695b      	ldr	r3, [r3, #20]
 800a6da:	693a      	ldr	r2, [r7, #16]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	693a      	ldr	r2, [r7, #16]
 800a6ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	697a      	ldr	r2, [r7, #20]
 800a702:	621a      	str	r2, [r3, #32]
}
 800a704:	bf00      	nop
 800a706:	371c      	adds	r7, #28
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr
 800a710:	40010000 	.word	0x40010000
 800a714:	40010400 	.word	0x40010400

0800a718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a1b      	ldr	r3, [r3, #32]
 800a726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a1b      	ldr	r3, [r3, #32]
 800a72c:	f023 0210 	bic.w	r2, r3, #16
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a74e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	021b      	lsls	r3, r3, #8
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	4313      	orrs	r3, r2
 800a75a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	f023 0320 	bic.w	r3, r3, #32
 800a762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	011b      	lsls	r3, r3, #4
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	4313      	orrs	r3, r2
 800a76e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a22      	ldr	r2, [pc, #136]	@ (800a7fc <TIM_OC2_SetConfig+0xe4>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d003      	beq.n	800a780 <TIM_OC2_SetConfig+0x68>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a21      	ldr	r2, [pc, #132]	@ (800a800 <TIM_OC2_SetConfig+0xe8>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d10d      	bne.n	800a79c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	011b      	lsls	r3, r3, #4
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	4313      	orrs	r3, r2
 800a792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a79a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a17      	ldr	r2, [pc, #92]	@ (800a7fc <TIM_OC2_SetConfig+0xe4>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d003      	beq.n	800a7ac <TIM_OC2_SetConfig+0x94>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a16      	ldr	r2, [pc, #88]	@ (800a800 <TIM_OC2_SetConfig+0xe8>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d113      	bne.n	800a7d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a7b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a7ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	695b      	ldr	r3, [r3, #20]
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	693a      	ldr	r2, [r7, #16]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	693a      	ldr	r2, [r7, #16]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	685a      	ldr	r2, [r3, #4]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	621a      	str	r2, [r3, #32]
}
 800a7ee:	bf00      	nop
 800a7f0:	371c      	adds	r7, #28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	40010000 	.word	0x40010000
 800a800:	40010400 	.word	0x40010400

0800a804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a804:	b480      	push	{r7}
 800a806:	b087      	sub	sp, #28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a1b      	ldr	r3, [r3, #32]
 800a818:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	69db      	ldr	r3, [r3, #28]
 800a82a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f023 0303 	bic.w	r3, r3, #3
 800a83a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	4313      	orrs	r3, r2
 800a844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a84c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	021b      	lsls	r3, r3, #8
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	4313      	orrs	r3, r2
 800a858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a21      	ldr	r2, [pc, #132]	@ (800a8e4 <TIM_OC3_SetConfig+0xe0>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d003      	beq.n	800a86a <TIM_OC3_SetConfig+0x66>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a20      	ldr	r2, [pc, #128]	@ (800a8e8 <TIM_OC3_SetConfig+0xe4>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d10d      	bne.n	800a886 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	021b      	lsls	r3, r3, #8
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a16      	ldr	r2, [pc, #88]	@ (800a8e4 <TIM_OC3_SetConfig+0xe0>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d003      	beq.n	800a896 <TIM_OC3_SetConfig+0x92>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a15      	ldr	r2, [pc, #84]	@ (800a8e8 <TIM_OC3_SetConfig+0xe4>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d113      	bne.n	800a8be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a89c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a8a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	011b      	lsls	r3, r3, #4
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	699b      	ldr	r3, [r3, #24]
 800a8b6:	011b      	lsls	r3, r3, #4
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	693a      	ldr	r2, [r7, #16]
 800a8c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	685a      	ldr	r2, [r3, #4]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	697a      	ldr	r2, [r7, #20]
 800a8d6:	621a      	str	r2, [r3, #32]
}
 800a8d8:	bf00      	nop
 800a8da:	371c      	adds	r7, #28
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr
 800a8e4:	40010000 	.word	0x40010000
 800a8e8:	40010400 	.word	0x40010400

0800a8ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
 800a8fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a1b      	ldr	r3, [r3, #32]
 800a900:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a91a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	021b      	lsls	r3, r3, #8
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	031b      	lsls	r3, r3, #12
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	4313      	orrs	r3, r2
 800a942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a12      	ldr	r2, [pc, #72]	@ (800a990 <TIM_OC4_SetConfig+0xa4>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d003      	beq.n	800a954 <TIM_OC4_SetConfig+0x68>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4a11      	ldr	r2, [pc, #68]	@ (800a994 <TIM_OC4_SetConfig+0xa8>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d109      	bne.n	800a968 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a95a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	695b      	ldr	r3, [r3, #20]
 800a960:	019b      	lsls	r3, r3, #6
 800a962:	697a      	ldr	r2, [r7, #20]
 800a964:	4313      	orrs	r3, r2
 800a966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	685a      	ldr	r2, [r3, #4]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	621a      	str	r2, [r3, #32]
}
 800a982:	bf00      	nop
 800a984:	371c      	adds	r7, #28
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	40010000 	.word	0x40010000
 800a994:	40010400 	.word	0x40010400

0800a998 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a998:	b480      	push	{r7}
 800a99a:	b087      	sub	sp, #28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	607a      	str	r2, [r7, #4]
 800a9a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6a1b      	ldr	r3, [r3, #32]
 800a9aa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6a1b      	ldr	r3, [r3, #32]
 800a9b0:	f023 0201 	bic.w	r2, r3, #1
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	699b      	ldr	r3, [r3, #24]
 800a9bc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	4a28      	ldr	r2, [pc, #160]	@ (800aa64 <TIM_TI1_SetConfig+0xcc>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d01b      	beq.n	800a9fe <TIM_TI1_SetConfig+0x66>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9cc:	d017      	beq.n	800a9fe <TIM_TI1_SetConfig+0x66>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	4a25      	ldr	r2, [pc, #148]	@ (800aa68 <TIM_TI1_SetConfig+0xd0>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d013      	beq.n	800a9fe <TIM_TI1_SetConfig+0x66>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	4a24      	ldr	r2, [pc, #144]	@ (800aa6c <TIM_TI1_SetConfig+0xd4>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d00f      	beq.n	800a9fe <TIM_TI1_SetConfig+0x66>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	4a23      	ldr	r2, [pc, #140]	@ (800aa70 <TIM_TI1_SetConfig+0xd8>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d00b      	beq.n	800a9fe <TIM_TI1_SetConfig+0x66>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4a22      	ldr	r2, [pc, #136]	@ (800aa74 <TIM_TI1_SetConfig+0xdc>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d007      	beq.n	800a9fe <TIM_TI1_SetConfig+0x66>
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	4a21      	ldr	r2, [pc, #132]	@ (800aa78 <TIM_TI1_SetConfig+0xe0>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d003      	beq.n	800a9fe <TIM_TI1_SetConfig+0x66>
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	4a20      	ldr	r2, [pc, #128]	@ (800aa7c <TIM_TI1_SetConfig+0xe4>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d101      	bne.n	800aa02 <TIM_TI1_SetConfig+0x6a>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e000      	b.n	800aa04 <TIM_TI1_SetConfig+0x6c>
 800aa02:	2300      	movs	r3, #0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d008      	beq.n	800aa1a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f023 0303 	bic.w	r3, r3, #3
 800aa0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4313      	orrs	r3, r2
 800aa16:	617b      	str	r3, [r7, #20]
 800aa18:	e003      	b.n	800aa22 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	f043 0301 	orr.w	r3, r3, #1
 800aa20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aa28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	011b      	lsls	r3, r3, #4
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	f023 030a 	bic.w	r3, r3, #10
 800aa3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	f003 030a 	and.w	r3, r3, #10
 800aa44:	693a      	ldr	r2, [r7, #16]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	693a      	ldr	r2, [r7, #16]
 800aa54:	621a      	str	r2, [r3, #32]
}
 800aa56:	bf00      	nop
 800aa58:	371c      	adds	r7, #28
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	40010000 	.word	0x40010000
 800aa68:	40000400 	.word	0x40000400
 800aa6c:	40000800 	.word	0x40000800
 800aa70:	40000c00 	.word	0x40000c00
 800aa74:	40010400 	.word	0x40010400
 800aa78:	40014000 	.word	0x40014000
 800aa7c:	40001800 	.word	0x40001800

0800aa80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6a1b      	ldr	r3, [r3, #32]
 800aa90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	f023 0201 	bic.w	r2, r3, #1
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	699b      	ldr	r3, [r3, #24]
 800aaa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aaaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	011b      	lsls	r3, r3, #4
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f023 030a 	bic.w	r3, r3, #10
 800aabc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	697a      	ldr	r2, [r7, #20]
 800aad0:	621a      	str	r2, [r3, #32]
}
 800aad2:	bf00      	nop
 800aad4:	371c      	adds	r7, #28
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aade:	b480      	push	{r7}
 800aae0:	b087      	sub	sp, #28
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	60f8      	str	r0, [r7, #12]
 800aae6:	60b9      	str	r1, [r7, #8]
 800aae8:	607a      	str	r2, [r7, #4]
 800aaea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6a1b      	ldr	r3, [r3, #32]
 800aaf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6a1b      	ldr	r3, [r3, #32]
 800aaf6:	f023 0210 	bic.w	r2, r3, #16
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	699b      	ldr	r3, [r3, #24]
 800ab02:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	021b      	lsls	r3, r3, #8
 800ab10:	693a      	ldr	r2, [r7, #16]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ab1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	031b      	lsls	r3, r3, #12
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	693a      	ldr	r2, [r7, #16]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ab30:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	011b      	lsls	r3, r3, #4
 800ab36:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800ab3a:	697a      	ldr	r2, [r7, #20]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	697a      	ldr	r2, [r7, #20]
 800ab4a:	621a      	str	r2, [r3, #32]
}
 800ab4c:	bf00      	nop
 800ab4e:	371c      	adds	r7, #28
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b087      	sub	sp, #28
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6a1b      	ldr	r3, [r3, #32]
 800ab68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	f023 0210 	bic.w	r2, r3, #16
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	699b      	ldr	r3, [r3, #24]
 800ab7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ab82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	031b      	lsls	r3, r3, #12
 800ab88:	693a      	ldr	r2, [r7, #16]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ab94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	011b      	lsls	r3, r3, #4
 800ab9a:	697a      	ldr	r2, [r7, #20]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	697a      	ldr	r2, [r7, #20]
 800abaa:	621a      	str	r2, [r3, #32]
}
 800abac:	bf00      	nop
 800abae:	371c      	adds	r7, #28
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
 800abc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	69db      	ldr	r3, [r3, #28]
 800abdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	f023 0303 	bic.w	r3, r3, #3
 800abe4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4313      	orrs	r3, r2
 800abec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800abf4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	011b      	lsls	r3, r3, #4
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800ac08:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	021b      	lsls	r3, r3, #8
 800ac0e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800ac12:	697a      	ldr	r2, [r7, #20]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	697a      	ldr	r2, [r7, #20]
 800ac22:	621a      	str	r2, [r3, #32]
}
 800ac24:	bf00      	nop
 800ac26:	371c      	adds	r7, #28
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b087      	sub	sp, #28
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6a1b      	ldr	r3, [r3, #32]
 800ac48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	69db      	ldr	r3, [r3, #28]
 800ac54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac5c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	021b      	lsls	r3, r3, #8
 800ac62:	693a      	ldr	r2, [r7, #16]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ac6e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	031b      	lsls	r3, r3, #12
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800ac82:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	031b      	lsls	r3, r3, #12
 800ac88:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	693a      	ldr	r2, [r7, #16]
 800ac96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	621a      	str	r2, [r3, #32]
}
 800ac9e:	bf00      	nop
 800aca0:	371c      	adds	r7, #28
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acaa:	b480      	push	{r7}
 800acac:	b085      	sub	sp, #20
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	f043 0307 	orr.w	r3, r3, #7
 800accc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	609a      	str	r2, [r3, #8]
}
 800acd4:	bf00      	nop
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b087      	sub	sp, #28
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800acfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	021a      	lsls	r2, r3, #8
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	431a      	orrs	r2, r3
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	697a      	ldr	r2, [r7, #20]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	609a      	str	r2, [r3, #8]
}
 800ad14:	bf00      	nop
 800ad16:	371c      	adds	r7, #28
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d101      	bne.n	800ad38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad34:	2302      	movs	r3, #2
 800ad36:	e05a      	b.n	800adee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2202      	movs	r2, #2
 800ad44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a21      	ldr	r2, [pc, #132]	@ (800adfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d022      	beq.n	800adc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad84:	d01d      	beq.n	800adc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a1d      	ldr	r2, [pc, #116]	@ (800ae00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d018      	beq.n	800adc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a1b      	ldr	r2, [pc, #108]	@ (800ae04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d013      	beq.n	800adc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a1a      	ldr	r2, [pc, #104]	@ (800ae08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d00e      	beq.n	800adc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a18      	ldr	r2, [pc, #96]	@ (800ae0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d009      	beq.n	800adc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a17      	ldr	r2, [pc, #92]	@ (800ae10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d004      	beq.n	800adc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a15      	ldr	r2, [pc, #84]	@ (800ae14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d10c      	bne.n	800addc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	4313      	orrs	r3, r2
 800add2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68ba      	ldr	r2, [r7, #8]
 800adda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	40010000 	.word	0x40010000
 800ae00:	40000400 	.word	0x40000400
 800ae04:	40000800 	.word	0x40000800
 800ae08:	40000c00 	.word	0x40000c00
 800ae0c:	40010400 	.word	0x40010400
 800ae10:	40014000 	.word	0x40014000
 800ae14:	40001800 	.word	0x40001800

0800ae18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ae22:	2300      	movs	r3, #0
 800ae24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d101      	bne.n	800ae34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ae30:	2302      	movs	r3, #2
 800ae32:	e03d      	b.n	800aeb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	4313      	orrs	r3, r2
 800ae64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	695b      	ldr	r3, [r3, #20]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	69db      	ldr	r3, [r3, #28]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3714      	adds	r7, #20
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aec4:	bf00      	nop
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aed8:	bf00      	nop
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e042      	b.n	800af7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d106      	bne.n	800af10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7f9 fd22 	bl	8004954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2224      	movs	r2, #36	@ 0x24
 800af14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68da      	ldr	r2, [r3, #12]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800af26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 fc99 	bl	800b860 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	691a      	ldr	r2, [r3, #16]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800af3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	695a      	ldr	r2, [r3, #20]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68da      	ldr	r2, [r3, #12]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800af5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2220      	movs	r2, #32
 800af68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2220      	movs	r2, #32
 800af70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b0ba      	sub	sp, #232	@ 0xe8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	695b      	ldr	r3, [r3, #20]
 800afa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800afaa:	2300      	movs	r3, #0
 800afac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800afb0:	2300      	movs	r3, #0
 800afb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800afb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afba:	f003 030f 	and.w	r3, r3, #15
 800afbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800afc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d10f      	bne.n	800afea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800afca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afce:	f003 0320 	and.w	r3, r3, #32
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d009      	beq.n	800afea <HAL_UART_IRQHandler+0x66>
 800afd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afda:	f003 0320 	and.w	r3, r3, #32
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d003      	beq.n	800afea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fb7e 	bl	800b6e4 <UART_Receive_IT>
      return;
 800afe8:	e273      	b.n	800b4d2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800afea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f000 80de 	beq.w	800b1b0 <HAL_UART_IRQHandler+0x22c>
 800aff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aff8:	f003 0301 	and.w	r3, r3, #1
 800affc:	2b00      	cmp	r3, #0
 800affe:	d106      	bne.n	800b00e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b004:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f000 80d1 	beq.w	800b1b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b012:	f003 0301 	and.w	r3, r3, #1
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00b      	beq.n	800b032 <HAL_UART_IRQHandler+0xae>
 800b01a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b01e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b022:	2b00      	cmp	r3, #0
 800b024:	d005      	beq.n	800b032 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b02a:	f043 0201 	orr.w	r2, r3, #1
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b036:	f003 0304 	and.w	r3, r3, #4
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00b      	beq.n	800b056 <HAL_UART_IRQHandler+0xd2>
 800b03e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b042:	f003 0301 	and.w	r3, r3, #1
 800b046:	2b00      	cmp	r3, #0
 800b048:	d005      	beq.n	800b056 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b04e:	f043 0202 	orr.w	r2, r3, #2
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b05a:	f003 0302 	and.w	r3, r3, #2
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00b      	beq.n	800b07a <HAL_UART_IRQHandler+0xf6>
 800b062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b066:	f003 0301 	and.w	r3, r3, #1
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d005      	beq.n	800b07a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b072:	f043 0204 	orr.w	r2, r3, #4
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b07e:	f003 0308 	and.w	r3, r3, #8
 800b082:	2b00      	cmp	r3, #0
 800b084:	d011      	beq.n	800b0aa <HAL_UART_IRQHandler+0x126>
 800b086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b08a:	f003 0320 	and.w	r3, r3, #32
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d105      	bne.n	800b09e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b096:	f003 0301 	and.w	r3, r3, #1
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d005      	beq.n	800b0aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0a2:	f043 0208 	orr.w	r2, r3, #8
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f000 820a 	beq.w	800b4c8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0b8:	f003 0320 	and.w	r3, r3, #32
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d008      	beq.n	800b0d2 <HAL_UART_IRQHandler+0x14e>
 800b0c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0c4:	f003 0320 	and.w	r3, r3, #32
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d002      	beq.n	800b0d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fb09 	bl	800b6e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	695b      	ldr	r3, [r3, #20]
 800b0d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0dc:	2b40      	cmp	r3, #64	@ 0x40
 800b0de:	bf0c      	ite	eq
 800b0e0:	2301      	moveq	r3, #1
 800b0e2:	2300      	movne	r3, #0
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0ee:	f003 0308 	and.w	r3, r3, #8
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d103      	bne.n	800b0fe <HAL_UART_IRQHandler+0x17a>
 800b0f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d04f      	beq.n	800b19e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 fa14 	bl	800b52c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b10e:	2b40      	cmp	r3, #64	@ 0x40
 800b110:	d141      	bne.n	800b196 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	3314      	adds	r3, #20
 800b118:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b120:	e853 3f00 	ldrex	r3, [r3]
 800b124:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b128:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b12c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b130:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	3314      	adds	r3, #20
 800b13a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b13e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b142:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b146:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b14a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b14e:	e841 2300 	strex	r3, r2, [r1]
 800b152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1d9      	bne.n	800b112 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b162:	2b00      	cmp	r3, #0
 800b164:	d013      	beq.n	800b18e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b16a:	4a8a      	ldr	r2, [pc, #552]	@ (800b394 <HAL_UART_IRQHandler+0x410>)
 800b16c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b172:	4618      	mov	r0, r3
 800b174:	f7fa fcb6 	bl	8005ae4 <HAL_DMA_Abort_IT>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d016      	beq.n	800b1ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b188:	4610      	mov	r0, r2
 800b18a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b18c:	e00e      	b.n	800b1ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f9b6 	bl	800b500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b194:	e00a      	b.n	800b1ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 f9b2 	bl	800b500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b19c:	e006      	b.n	800b1ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 f9ae 	bl	800b500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b1aa:	e18d      	b.n	800b4c8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ac:	bf00      	nop
    return;
 800b1ae:	e18b      	b.n	800b4c8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	f040 8167 	bne.w	800b488 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b1ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1be:	f003 0310 	and.w	r3, r3, #16
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f000 8160 	beq.w	800b488 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b1c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1cc:	f003 0310 	and.w	r3, r3, #16
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f000 8159 	beq.w	800b488 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60bb      	str	r3, [r7, #8]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	60bb      	str	r3, [r7, #8]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	60bb      	str	r3, [r7, #8]
 800b1ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1f6:	2b40      	cmp	r3, #64	@ 0x40
 800b1f8:	f040 80ce 	bne.w	800b398 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b208:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f000 80a9 	beq.w	800b364 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b21a:	429a      	cmp	r2, r3
 800b21c:	f080 80a2 	bcs.w	800b364 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b226:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b22c:	69db      	ldr	r3, [r3, #28]
 800b22e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b232:	f000 8088 	beq.w	800b346 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	330c      	adds	r3, #12
 800b23c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b240:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b244:	e853 3f00 	ldrex	r3, [r3]
 800b248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b24c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b254:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	330c      	adds	r3, #12
 800b25e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b262:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b266:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b26e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b272:	e841 2300 	strex	r3, r2, [r1]
 800b276:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b27a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1d9      	bne.n	800b236 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3314      	adds	r3, #20
 800b288:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b28c:	e853 3f00 	ldrex	r3, [r3]
 800b290:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b292:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b294:	f023 0301 	bic.w	r3, r3, #1
 800b298:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	3314      	adds	r3, #20
 800b2a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b2a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b2aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b2ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b2b2:	e841 2300 	strex	r3, r2, [r1]
 800b2b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b2b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1e1      	bne.n	800b282 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	3314      	adds	r3, #20
 800b2c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2c8:	e853 3f00 	ldrex	r3, [r3]
 800b2cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b2ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	3314      	adds	r3, #20
 800b2de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b2e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b2e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b2e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b2ea:	e841 2300 	strex	r3, r2, [r1]
 800b2ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b2f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1e3      	bne.n	800b2be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2220      	movs	r2, #32
 800b2fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	330c      	adds	r3, #12
 800b30a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b30e:	e853 3f00 	ldrex	r3, [r3]
 800b312:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b314:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b316:	f023 0310 	bic.w	r3, r3, #16
 800b31a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	330c      	adds	r3, #12
 800b324:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b328:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b32a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b32c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b32e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b330:	e841 2300 	strex	r3, r2, [r1]
 800b334:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d1e3      	bne.n	800b304 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b340:	4618      	mov	r0, r3
 800b342:	f7fa fb5f 	bl	8005a04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2202      	movs	r2, #2
 800b34a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b354:	b29b      	uxth	r3, r3
 800b356:	1ad3      	subs	r3, r2, r3
 800b358:	b29b      	uxth	r3, r3
 800b35a:	4619      	mov	r1, r3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f8d9 	bl	800b514 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b362:	e0b3      	b.n	800b4cc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b368:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b36c:	429a      	cmp	r2, r3
 800b36e:	f040 80ad 	bne.w	800b4cc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b376:	69db      	ldr	r3, [r3, #28]
 800b378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b37c:	f040 80a6 	bne.w	800b4cc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2202      	movs	r2, #2
 800b384:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b38a:	4619      	mov	r1, r3
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 f8c1 	bl	800b514 <HAL_UARTEx_RxEventCallback>
      return;
 800b392:	e09b      	b.n	800b4cc <HAL_UART_IRQHandler+0x548>
 800b394:	0800b5f3 	.word	0x0800b5f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f000 808e 	beq.w	800b4d0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b3b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f000 8089 	beq.w	800b4d0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	330c      	adds	r3, #12
 800b3c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c8:	e853 3f00 	ldrex	r3, [r3]
 800b3cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b3ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	330c      	adds	r3, #12
 800b3de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b3e2:	647a      	str	r2, [r7, #68]	@ 0x44
 800b3e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b3e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b3ea:	e841 2300 	strex	r3, r2, [r1]
 800b3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b3f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1e3      	bne.n	800b3be <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	3314      	adds	r3, #20
 800b3fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b400:	e853 3f00 	ldrex	r3, [r3]
 800b404:	623b      	str	r3, [r7, #32]
   return(result);
 800b406:	6a3b      	ldr	r3, [r7, #32]
 800b408:	f023 0301 	bic.w	r3, r3, #1
 800b40c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3314      	adds	r3, #20
 800b416:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b41a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b41c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b420:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b422:	e841 2300 	strex	r3, r2, [r1]
 800b426:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1e3      	bne.n	800b3f6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2220      	movs	r2, #32
 800b432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	330c      	adds	r3, #12
 800b442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	e853 3f00 	ldrex	r3, [r3]
 800b44a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f023 0310 	bic.w	r3, r3, #16
 800b452:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	330c      	adds	r3, #12
 800b45c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b460:	61fa      	str	r2, [r7, #28]
 800b462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b464:	69b9      	ldr	r1, [r7, #24]
 800b466:	69fa      	ldr	r2, [r7, #28]
 800b468:	e841 2300 	strex	r3, r2, [r1]
 800b46c:	617b      	str	r3, [r7, #20]
   return(result);
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1e3      	bne.n	800b43c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2202      	movs	r2, #2
 800b478:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b47a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b47e:	4619      	mov	r1, r3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f847 	bl	800b514 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b486:	e023      	b.n	800b4d0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b48c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b490:	2b00      	cmp	r3, #0
 800b492:	d009      	beq.n	800b4a8 <HAL_UART_IRQHandler+0x524>
 800b494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d003      	beq.n	800b4a8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 f8b7 	bl	800b614 <UART_Transmit_IT>
    return;
 800b4a6:	e014      	b.n	800b4d2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b4a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00e      	beq.n	800b4d2 <HAL_UART_IRQHandler+0x54e>
 800b4b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d008      	beq.n	800b4d2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 f8f7 	bl	800b6b4 <UART_EndTransmit_IT>
    return;
 800b4c6:	e004      	b.n	800b4d2 <HAL_UART_IRQHandler+0x54e>
    return;
 800b4c8:	bf00      	nop
 800b4ca:	e002      	b.n	800b4d2 <HAL_UART_IRQHandler+0x54e>
      return;
 800b4cc:	bf00      	nop
 800b4ce:	e000      	b.n	800b4d2 <HAL_UART_IRQHandler+0x54e>
      return;
 800b4d0:	bf00      	nop
  }
}
 800b4d2:	37e8      	adds	r7, #232	@ 0xe8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b4e0:	bf00      	nop
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b508:	bf00      	nop
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	460b      	mov	r3, r1
 800b51e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b095      	sub	sp, #84	@ 0x54
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	330c      	adds	r3, #12
 800b53a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b53e:	e853 3f00 	ldrex	r3, [r3]
 800b542:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b546:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b54a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	330c      	adds	r3, #12
 800b552:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b554:	643a      	str	r2, [r7, #64]	@ 0x40
 800b556:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b558:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b55a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b55c:	e841 2300 	strex	r3, r2, [r1]
 800b560:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1e5      	bne.n	800b534 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	3314      	adds	r3, #20
 800b56e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b570:	6a3b      	ldr	r3, [r7, #32]
 800b572:	e853 3f00 	ldrex	r3, [r3]
 800b576:	61fb      	str	r3, [r7, #28]
   return(result);
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	f023 0301 	bic.w	r3, r3, #1
 800b57e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	3314      	adds	r3, #20
 800b586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b588:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b58a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b58e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b590:	e841 2300 	strex	r3, r2, [r1]
 800b594:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1e5      	bne.n	800b568 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d119      	bne.n	800b5d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	330c      	adds	r3, #12
 800b5aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	e853 3f00 	ldrex	r3, [r3]
 800b5b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	f023 0310 	bic.w	r3, r3, #16
 800b5ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	330c      	adds	r3, #12
 800b5c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b5c4:	61ba      	str	r2, [r7, #24]
 800b5c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c8:	6979      	ldr	r1, [r7, #20]
 800b5ca:	69ba      	ldr	r2, [r7, #24]
 800b5cc:	e841 2300 	strex	r3, r2, [r1]
 800b5d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1e5      	bne.n	800b5a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2220      	movs	r2, #32
 800b5dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b5e6:	bf00      	nop
 800b5e8:	3754      	adds	r7, #84	@ 0x54
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b084      	sub	sp, #16
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f7ff ff7a 	bl	800b500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b60c:	bf00      	nop
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b622:	b2db      	uxtb	r3, r3
 800b624:	2b21      	cmp	r3, #33	@ 0x21
 800b626:	d13e      	bne.n	800b6a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b630:	d114      	bne.n	800b65c <UART_Transmit_IT+0x48>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d110      	bne.n	800b65c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6a1b      	ldr	r3, [r3, #32]
 800b63e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	881b      	ldrh	r3, [r3, #0]
 800b644:	461a      	mov	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b64e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	1c9a      	adds	r2, r3, #2
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	621a      	str	r2, [r3, #32]
 800b65a:	e008      	b.n	800b66e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6a1b      	ldr	r3, [r3, #32]
 800b660:	1c59      	adds	r1, r3, #1
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	6211      	str	r1, [r2, #32]
 800b666:	781a      	ldrb	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b672:	b29b      	uxth	r3, r3
 800b674:	3b01      	subs	r3, #1
 800b676:	b29b      	uxth	r3, r3
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	4619      	mov	r1, r3
 800b67c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d10f      	bne.n	800b6a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68da      	ldr	r2, [r3, #12]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b690:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68da      	ldr	r2, [r3, #12]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	e000      	b.n	800b6a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b6a6:	2302      	movs	r3, #2
  }
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3714      	adds	r7, #20
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68da      	ldr	r2, [r3, #12]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b6ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2220      	movs	r2, #32
 800b6d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7ff feff 	bl	800b4d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b08c      	sub	sp, #48	@ 0x30
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b22      	cmp	r3, #34	@ 0x22
 800b6fe:	f040 80aa 	bne.w	800b856 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b70a:	d115      	bne.n	800b738 <UART_Receive_IT+0x54>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d111      	bne.n	800b738 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b718:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	b29b      	uxth	r3, r3
 800b722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b726:	b29a      	uxth	r2, r3
 800b728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b72a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b730:	1c9a      	adds	r2, r3, #2
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	629a      	str	r2, [r3, #40]	@ 0x28
 800b736:	e024      	b.n	800b782 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b73c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b746:	d007      	beq.n	800b758 <UART_Receive_IT+0x74>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d10a      	bne.n	800b766 <UART_Receive_IT+0x82>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d106      	bne.n	800b766 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	b2da      	uxtb	r2, r3
 800b760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b762:	701a      	strb	r2, [r3, #0]
 800b764:	e008      	b.n	800b778 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b772:	b2da      	uxtb	r2, r3
 800b774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b776:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b77c:	1c5a      	adds	r2, r3, #1
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b786:	b29b      	uxth	r3, r3
 800b788:	3b01      	subs	r3, #1
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	4619      	mov	r1, r3
 800b790:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b792:	2b00      	cmp	r3, #0
 800b794:	d15d      	bne.n	800b852 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	68da      	ldr	r2, [r3, #12]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f022 0220 	bic.w	r2, r2, #32
 800b7a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68da      	ldr	r2, [r3, #12]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b7b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	695a      	ldr	r2, [r3, #20]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f022 0201 	bic.w	r2, r2, #1
 800b7c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d135      	bne.n	800b848 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	330c      	adds	r3, #12
 800b7e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	e853 3f00 	ldrex	r3, [r3]
 800b7f0:	613b      	str	r3, [r7, #16]
   return(result);
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	f023 0310 	bic.w	r3, r3, #16
 800b7f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	330c      	adds	r3, #12
 800b800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b802:	623a      	str	r2, [r7, #32]
 800b804:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b806:	69f9      	ldr	r1, [r7, #28]
 800b808:	6a3a      	ldr	r2, [r7, #32]
 800b80a:	e841 2300 	strex	r3, r2, [r1]
 800b80e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1e5      	bne.n	800b7e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0310 	and.w	r3, r3, #16
 800b820:	2b10      	cmp	r3, #16
 800b822:	d10a      	bne.n	800b83a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b824:	2300      	movs	r3, #0
 800b826:	60fb      	str	r3, [r7, #12]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	60fb      	str	r3, [r7, #12]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	60fb      	str	r3, [r7, #12]
 800b838:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b83e:	4619      	mov	r1, r3
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f7ff fe67 	bl	800b514 <HAL_UARTEx_RxEventCallback>
 800b846:	e002      	b.n	800b84e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f7ff fe4f 	bl	800b4ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	e002      	b.n	800b858 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	e000      	b.n	800b858 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b856:	2302      	movs	r3, #2
  }
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3730      	adds	r7, #48	@ 0x30
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b864:	b0c0      	sub	sp, #256	@ 0x100
 800b866:	af00      	add	r7, sp, #0
 800b868:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b86c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	691b      	ldr	r3, [r3, #16]
 800b874:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b87c:	68d9      	ldr	r1, [r3, #12]
 800b87e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	ea40 0301 	orr.w	r3, r0, r1
 800b888:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b88a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b88e:	689a      	ldr	r2, [r3, #8]
 800b890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	431a      	orrs	r2, r3
 800b898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	431a      	orrs	r2, r3
 800b8a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8a4:	69db      	ldr	r3, [r3, #28]
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b8ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b8b8:	f021 010c 	bic.w	r1, r1, #12
 800b8bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b8c6:	430b      	orrs	r3, r1
 800b8c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b8ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	695b      	ldr	r3, [r3, #20]
 800b8d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b8d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8da:	6999      	ldr	r1, [r3, #24]
 800b8dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	ea40 0301 	orr.w	r3, r0, r1
 800b8e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b8e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	4b8f      	ldr	r3, [pc, #572]	@ (800bb2c <UART_SetConfig+0x2cc>)
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d005      	beq.n	800b900 <UART_SetConfig+0xa0>
 800b8f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	4b8d      	ldr	r3, [pc, #564]	@ (800bb30 <UART_SetConfig+0x2d0>)
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d104      	bne.n	800b90a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b900:	f7fc fc90 	bl	8008224 <HAL_RCC_GetPCLK2Freq>
 800b904:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b908:	e003      	b.n	800b912 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b90a:	f7fc fc77 	bl	80081fc <HAL_RCC_GetPCLK1Freq>
 800b90e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b916:	69db      	ldr	r3, [r3, #28]
 800b918:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b91c:	f040 810c 	bne.w	800bb38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b924:	2200      	movs	r2, #0
 800b926:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b92a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b92e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b932:	4622      	mov	r2, r4
 800b934:	462b      	mov	r3, r5
 800b936:	1891      	adds	r1, r2, r2
 800b938:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b93a:	415b      	adcs	r3, r3
 800b93c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b93e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b942:	4621      	mov	r1, r4
 800b944:	eb12 0801 	adds.w	r8, r2, r1
 800b948:	4629      	mov	r1, r5
 800b94a:	eb43 0901 	adc.w	r9, r3, r1
 800b94e:	f04f 0200 	mov.w	r2, #0
 800b952:	f04f 0300 	mov.w	r3, #0
 800b956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b95a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b95e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b962:	4690      	mov	r8, r2
 800b964:	4699      	mov	r9, r3
 800b966:	4623      	mov	r3, r4
 800b968:	eb18 0303 	adds.w	r3, r8, r3
 800b96c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b970:	462b      	mov	r3, r5
 800b972:	eb49 0303 	adc.w	r3, r9, r3
 800b976:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b97a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b986:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b98a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b98e:	460b      	mov	r3, r1
 800b990:	18db      	adds	r3, r3, r3
 800b992:	653b      	str	r3, [r7, #80]	@ 0x50
 800b994:	4613      	mov	r3, r2
 800b996:	eb42 0303 	adc.w	r3, r2, r3
 800b99a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b99c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b9a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b9a4:	f7f5 f970 	bl	8000c88 <__aeabi_uldivmod>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	4b61      	ldr	r3, [pc, #388]	@ (800bb34 <UART_SetConfig+0x2d4>)
 800b9ae:	fba3 2302 	umull	r2, r3, r3, r2
 800b9b2:	095b      	lsrs	r3, r3, #5
 800b9b4:	011c      	lsls	r4, r3, #4
 800b9b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b9c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b9c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b9c8:	4642      	mov	r2, r8
 800b9ca:	464b      	mov	r3, r9
 800b9cc:	1891      	adds	r1, r2, r2
 800b9ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b9d0:	415b      	adcs	r3, r3
 800b9d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b9d8:	4641      	mov	r1, r8
 800b9da:	eb12 0a01 	adds.w	sl, r2, r1
 800b9de:	4649      	mov	r1, r9
 800b9e0:	eb43 0b01 	adc.w	fp, r3, r1
 800b9e4:	f04f 0200 	mov.w	r2, #0
 800b9e8:	f04f 0300 	mov.w	r3, #0
 800b9ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b9f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b9f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b9f8:	4692      	mov	sl, r2
 800b9fa:	469b      	mov	fp, r3
 800b9fc:	4643      	mov	r3, r8
 800b9fe:	eb1a 0303 	adds.w	r3, sl, r3
 800ba02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ba06:	464b      	mov	r3, r9
 800ba08:	eb4b 0303 	adc.w	r3, fp, r3
 800ba0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ba10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ba1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ba20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ba24:	460b      	mov	r3, r1
 800ba26:	18db      	adds	r3, r3, r3
 800ba28:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	eb42 0303 	adc.w	r3, r2, r3
 800ba30:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ba36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ba3a:	f7f5 f925 	bl	8000c88 <__aeabi_uldivmod>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	460b      	mov	r3, r1
 800ba42:	4611      	mov	r1, r2
 800ba44:	4b3b      	ldr	r3, [pc, #236]	@ (800bb34 <UART_SetConfig+0x2d4>)
 800ba46:	fba3 2301 	umull	r2, r3, r3, r1
 800ba4a:	095b      	lsrs	r3, r3, #5
 800ba4c:	2264      	movs	r2, #100	@ 0x64
 800ba4e:	fb02 f303 	mul.w	r3, r2, r3
 800ba52:	1acb      	subs	r3, r1, r3
 800ba54:	00db      	lsls	r3, r3, #3
 800ba56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ba5a:	4b36      	ldr	r3, [pc, #216]	@ (800bb34 <UART_SetConfig+0x2d4>)
 800ba5c:	fba3 2302 	umull	r2, r3, r3, r2
 800ba60:	095b      	lsrs	r3, r3, #5
 800ba62:	005b      	lsls	r3, r3, #1
 800ba64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ba68:	441c      	add	r4, r3
 800ba6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ba74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ba78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ba7c:	4642      	mov	r2, r8
 800ba7e:	464b      	mov	r3, r9
 800ba80:	1891      	adds	r1, r2, r2
 800ba82:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ba84:	415b      	adcs	r3, r3
 800ba86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ba8c:	4641      	mov	r1, r8
 800ba8e:	1851      	adds	r1, r2, r1
 800ba90:	6339      	str	r1, [r7, #48]	@ 0x30
 800ba92:	4649      	mov	r1, r9
 800ba94:	414b      	adcs	r3, r1
 800ba96:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba98:	f04f 0200 	mov.w	r2, #0
 800ba9c:	f04f 0300 	mov.w	r3, #0
 800baa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800baa4:	4659      	mov	r1, fp
 800baa6:	00cb      	lsls	r3, r1, #3
 800baa8:	4651      	mov	r1, sl
 800baaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800baae:	4651      	mov	r1, sl
 800bab0:	00ca      	lsls	r2, r1, #3
 800bab2:	4610      	mov	r0, r2
 800bab4:	4619      	mov	r1, r3
 800bab6:	4603      	mov	r3, r0
 800bab8:	4642      	mov	r2, r8
 800baba:	189b      	adds	r3, r3, r2
 800babc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bac0:	464b      	mov	r3, r9
 800bac2:	460a      	mov	r2, r1
 800bac4:	eb42 0303 	adc.w	r3, r2, r3
 800bac8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bacc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	2200      	movs	r2, #0
 800bad4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bad8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800badc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bae0:	460b      	mov	r3, r1
 800bae2:	18db      	adds	r3, r3, r3
 800bae4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bae6:	4613      	mov	r3, r2
 800bae8:	eb42 0303 	adc.w	r3, r2, r3
 800baec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800baee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800baf2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800baf6:	f7f5 f8c7 	bl	8000c88 <__aeabi_uldivmod>
 800bafa:	4602      	mov	r2, r0
 800bafc:	460b      	mov	r3, r1
 800bafe:	4b0d      	ldr	r3, [pc, #52]	@ (800bb34 <UART_SetConfig+0x2d4>)
 800bb00:	fba3 1302 	umull	r1, r3, r3, r2
 800bb04:	095b      	lsrs	r3, r3, #5
 800bb06:	2164      	movs	r1, #100	@ 0x64
 800bb08:	fb01 f303 	mul.w	r3, r1, r3
 800bb0c:	1ad3      	subs	r3, r2, r3
 800bb0e:	00db      	lsls	r3, r3, #3
 800bb10:	3332      	adds	r3, #50	@ 0x32
 800bb12:	4a08      	ldr	r2, [pc, #32]	@ (800bb34 <UART_SetConfig+0x2d4>)
 800bb14:	fba2 2303 	umull	r2, r3, r2, r3
 800bb18:	095b      	lsrs	r3, r3, #5
 800bb1a:	f003 0207 	and.w	r2, r3, #7
 800bb1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4422      	add	r2, r4
 800bb26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bb28:	e106      	b.n	800bd38 <UART_SetConfig+0x4d8>
 800bb2a:	bf00      	nop
 800bb2c:	40011000 	.word	0x40011000
 800bb30:	40011400 	.word	0x40011400
 800bb34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bb38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bb42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bb46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bb4a:	4642      	mov	r2, r8
 800bb4c:	464b      	mov	r3, r9
 800bb4e:	1891      	adds	r1, r2, r2
 800bb50:	6239      	str	r1, [r7, #32]
 800bb52:	415b      	adcs	r3, r3
 800bb54:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb5a:	4641      	mov	r1, r8
 800bb5c:	1854      	adds	r4, r2, r1
 800bb5e:	4649      	mov	r1, r9
 800bb60:	eb43 0501 	adc.w	r5, r3, r1
 800bb64:	f04f 0200 	mov.w	r2, #0
 800bb68:	f04f 0300 	mov.w	r3, #0
 800bb6c:	00eb      	lsls	r3, r5, #3
 800bb6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb72:	00e2      	lsls	r2, r4, #3
 800bb74:	4614      	mov	r4, r2
 800bb76:	461d      	mov	r5, r3
 800bb78:	4643      	mov	r3, r8
 800bb7a:	18e3      	adds	r3, r4, r3
 800bb7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bb80:	464b      	mov	r3, r9
 800bb82:	eb45 0303 	adc.w	r3, r5, r3
 800bb86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bb8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bb96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bb9a:	f04f 0200 	mov.w	r2, #0
 800bb9e:	f04f 0300 	mov.w	r3, #0
 800bba2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bba6:	4629      	mov	r1, r5
 800bba8:	008b      	lsls	r3, r1, #2
 800bbaa:	4621      	mov	r1, r4
 800bbac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bbb0:	4621      	mov	r1, r4
 800bbb2:	008a      	lsls	r2, r1, #2
 800bbb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bbb8:	f7f5 f866 	bl	8000c88 <__aeabi_uldivmod>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4b60      	ldr	r3, [pc, #384]	@ (800bd44 <UART_SetConfig+0x4e4>)
 800bbc2:	fba3 2302 	umull	r2, r3, r3, r2
 800bbc6:	095b      	lsrs	r3, r3, #5
 800bbc8:	011c      	lsls	r4, r3, #4
 800bbca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bbd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bbd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bbdc:	4642      	mov	r2, r8
 800bbde:	464b      	mov	r3, r9
 800bbe0:	1891      	adds	r1, r2, r2
 800bbe2:	61b9      	str	r1, [r7, #24]
 800bbe4:	415b      	adcs	r3, r3
 800bbe6:	61fb      	str	r3, [r7, #28]
 800bbe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbec:	4641      	mov	r1, r8
 800bbee:	1851      	adds	r1, r2, r1
 800bbf0:	6139      	str	r1, [r7, #16]
 800bbf2:	4649      	mov	r1, r9
 800bbf4:	414b      	adcs	r3, r1
 800bbf6:	617b      	str	r3, [r7, #20]
 800bbf8:	f04f 0200 	mov.w	r2, #0
 800bbfc:	f04f 0300 	mov.w	r3, #0
 800bc00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bc04:	4659      	mov	r1, fp
 800bc06:	00cb      	lsls	r3, r1, #3
 800bc08:	4651      	mov	r1, sl
 800bc0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc0e:	4651      	mov	r1, sl
 800bc10:	00ca      	lsls	r2, r1, #3
 800bc12:	4610      	mov	r0, r2
 800bc14:	4619      	mov	r1, r3
 800bc16:	4603      	mov	r3, r0
 800bc18:	4642      	mov	r2, r8
 800bc1a:	189b      	adds	r3, r3, r2
 800bc1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bc20:	464b      	mov	r3, r9
 800bc22:	460a      	mov	r2, r1
 800bc24:	eb42 0303 	adc.w	r3, r2, r3
 800bc28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bc2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bc36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bc38:	f04f 0200 	mov.w	r2, #0
 800bc3c:	f04f 0300 	mov.w	r3, #0
 800bc40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bc44:	4649      	mov	r1, r9
 800bc46:	008b      	lsls	r3, r1, #2
 800bc48:	4641      	mov	r1, r8
 800bc4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc4e:	4641      	mov	r1, r8
 800bc50:	008a      	lsls	r2, r1, #2
 800bc52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bc56:	f7f5 f817 	bl	8000c88 <__aeabi_uldivmod>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	4611      	mov	r1, r2
 800bc60:	4b38      	ldr	r3, [pc, #224]	@ (800bd44 <UART_SetConfig+0x4e4>)
 800bc62:	fba3 2301 	umull	r2, r3, r3, r1
 800bc66:	095b      	lsrs	r3, r3, #5
 800bc68:	2264      	movs	r2, #100	@ 0x64
 800bc6a:	fb02 f303 	mul.w	r3, r2, r3
 800bc6e:	1acb      	subs	r3, r1, r3
 800bc70:	011b      	lsls	r3, r3, #4
 800bc72:	3332      	adds	r3, #50	@ 0x32
 800bc74:	4a33      	ldr	r2, [pc, #204]	@ (800bd44 <UART_SetConfig+0x4e4>)
 800bc76:	fba2 2303 	umull	r2, r3, r2, r3
 800bc7a:	095b      	lsrs	r3, r3, #5
 800bc7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc80:	441c      	add	r4, r3
 800bc82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc86:	2200      	movs	r2, #0
 800bc88:	673b      	str	r3, [r7, #112]	@ 0x70
 800bc8a:	677a      	str	r2, [r7, #116]	@ 0x74
 800bc8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bc90:	4642      	mov	r2, r8
 800bc92:	464b      	mov	r3, r9
 800bc94:	1891      	adds	r1, r2, r2
 800bc96:	60b9      	str	r1, [r7, #8]
 800bc98:	415b      	adcs	r3, r3
 800bc9a:	60fb      	str	r3, [r7, #12]
 800bc9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bca0:	4641      	mov	r1, r8
 800bca2:	1851      	adds	r1, r2, r1
 800bca4:	6039      	str	r1, [r7, #0]
 800bca6:	4649      	mov	r1, r9
 800bca8:	414b      	adcs	r3, r1
 800bcaa:	607b      	str	r3, [r7, #4]
 800bcac:	f04f 0200 	mov.w	r2, #0
 800bcb0:	f04f 0300 	mov.w	r3, #0
 800bcb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bcb8:	4659      	mov	r1, fp
 800bcba:	00cb      	lsls	r3, r1, #3
 800bcbc:	4651      	mov	r1, sl
 800bcbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bcc2:	4651      	mov	r1, sl
 800bcc4:	00ca      	lsls	r2, r1, #3
 800bcc6:	4610      	mov	r0, r2
 800bcc8:	4619      	mov	r1, r3
 800bcca:	4603      	mov	r3, r0
 800bccc:	4642      	mov	r2, r8
 800bcce:	189b      	adds	r3, r3, r2
 800bcd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bcd2:	464b      	mov	r3, r9
 800bcd4:	460a      	mov	r2, r1
 800bcd6:	eb42 0303 	adc.w	r3, r2, r3
 800bcda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bcdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	663b      	str	r3, [r7, #96]	@ 0x60
 800bce6:	667a      	str	r2, [r7, #100]	@ 0x64
 800bce8:	f04f 0200 	mov.w	r2, #0
 800bcec:	f04f 0300 	mov.w	r3, #0
 800bcf0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bcf4:	4649      	mov	r1, r9
 800bcf6:	008b      	lsls	r3, r1, #2
 800bcf8:	4641      	mov	r1, r8
 800bcfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bcfe:	4641      	mov	r1, r8
 800bd00:	008a      	lsls	r2, r1, #2
 800bd02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bd06:	f7f4 ffbf 	bl	8000c88 <__aeabi_uldivmod>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd44 <UART_SetConfig+0x4e4>)
 800bd10:	fba3 1302 	umull	r1, r3, r3, r2
 800bd14:	095b      	lsrs	r3, r3, #5
 800bd16:	2164      	movs	r1, #100	@ 0x64
 800bd18:	fb01 f303 	mul.w	r3, r1, r3
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	011b      	lsls	r3, r3, #4
 800bd20:	3332      	adds	r3, #50	@ 0x32
 800bd22:	4a08      	ldr	r2, [pc, #32]	@ (800bd44 <UART_SetConfig+0x4e4>)
 800bd24:	fba2 2303 	umull	r2, r3, r2, r3
 800bd28:	095b      	lsrs	r3, r3, #5
 800bd2a:	f003 020f 	and.w	r2, r3, #15
 800bd2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4422      	add	r2, r4
 800bd36:	609a      	str	r2, [r3, #8]
}
 800bd38:	bf00      	nop
 800bd3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd44:	51eb851f 	.word	0x51eb851f

0800bd48 <_ZdlPvj>:
 800bd48:	f000 b813 	b.w	800bd72 <_ZdlPv>

0800bd4c <_Znwj>:
 800bd4c:	2801      	cmp	r0, #1
 800bd4e:	bf38      	it	cc
 800bd50:	2001      	movcc	r0, #1
 800bd52:	b510      	push	{r4, lr}
 800bd54:	4604      	mov	r4, r0
 800bd56:	4620      	mov	r0, r4
 800bd58:	f001 f93a 	bl	800cfd0 <malloc>
 800bd5c:	b100      	cbz	r0, 800bd60 <_Znwj+0x14>
 800bd5e:	bd10      	pop	{r4, pc}
 800bd60:	f000 f80a 	bl	800bd78 <_ZSt15get_new_handlerv>
 800bd64:	b908      	cbnz	r0, 800bd6a <_Znwj+0x1e>
 800bd66:	f001 f92b 	bl	800cfc0 <abort>
 800bd6a:	4780      	blx	r0
 800bd6c:	e7f3      	b.n	800bd56 <_Znwj+0xa>

0800bd6e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800bd6e:	6800      	ldr	r0, [r0, #0]
 800bd70:	4770      	bx	lr

0800bd72 <_ZdlPv>:
 800bd72:	f001 b935 	b.w	800cfe0 <free>
	...

0800bd78 <_ZSt15get_new_handlerv>:
 800bd78:	4b02      	ldr	r3, [pc, #8]	@ (800bd84 <_ZSt15get_new_handlerv+0xc>)
 800bd7a:	6818      	ldr	r0, [r3, #0]
 800bd7c:	f3bf 8f5b 	dmb	ish
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	200014e0 	.word	0x200014e0

0800bd88 <cos>:
 800bd88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd8a:	ec53 2b10 	vmov	r2, r3, d0
 800bd8e:	4826      	ldr	r0, [pc, #152]	@ (800be28 <cos+0xa0>)
 800bd90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bd94:	4281      	cmp	r1, r0
 800bd96:	d806      	bhi.n	800bda6 <cos+0x1e>
 800bd98:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800be20 <cos+0x98>
 800bd9c:	b005      	add	sp, #20
 800bd9e:	f85d eb04 	ldr.w	lr, [sp], #4
 800bda2:	f000 b8b9 	b.w	800bf18 <__kernel_cos>
 800bda6:	4821      	ldr	r0, [pc, #132]	@ (800be2c <cos+0xa4>)
 800bda8:	4281      	cmp	r1, r0
 800bdaa:	d908      	bls.n	800bdbe <cos+0x36>
 800bdac:	4610      	mov	r0, r2
 800bdae:	4619      	mov	r1, r3
 800bdb0:	f7f4 fa8a 	bl	80002c8 <__aeabi_dsub>
 800bdb4:	ec41 0b10 	vmov	d0, r0, r1
 800bdb8:	b005      	add	sp, #20
 800bdba:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdbe:	4668      	mov	r0, sp
 800bdc0:	f000 fa2e 	bl	800c220 <__ieee754_rem_pio2>
 800bdc4:	f000 0003 	and.w	r0, r0, #3
 800bdc8:	2801      	cmp	r0, #1
 800bdca:	d00b      	beq.n	800bde4 <cos+0x5c>
 800bdcc:	2802      	cmp	r0, #2
 800bdce:	d015      	beq.n	800bdfc <cos+0x74>
 800bdd0:	b9d8      	cbnz	r0, 800be0a <cos+0x82>
 800bdd2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bdd6:	ed9d 0b00 	vldr	d0, [sp]
 800bdda:	f000 f89d 	bl	800bf18 <__kernel_cos>
 800bdde:	ec51 0b10 	vmov	r0, r1, d0
 800bde2:	e7e7      	b.n	800bdb4 <cos+0x2c>
 800bde4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bde8:	ed9d 0b00 	vldr	d0, [sp]
 800bdec:	f000 f95c 	bl	800c0a8 <__kernel_sin>
 800bdf0:	ec53 2b10 	vmov	r2, r3, d0
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bdfa:	e7db      	b.n	800bdb4 <cos+0x2c>
 800bdfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be00:	ed9d 0b00 	vldr	d0, [sp]
 800be04:	f000 f888 	bl	800bf18 <__kernel_cos>
 800be08:	e7f2      	b.n	800bdf0 <cos+0x68>
 800be0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be0e:	ed9d 0b00 	vldr	d0, [sp]
 800be12:	2001      	movs	r0, #1
 800be14:	f000 f948 	bl	800c0a8 <__kernel_sin>
 800be18:	e7e1      	b.n	800bdde <cos+0x56>
 800be1a:	bf00      	nop
 800be1c:	f3af 8000 	nop.w
	...
 800be28:	3fe921fb 	.word	0x3fe921fb
 800be2c:	7fefffff 	.word	0x7fefffff

0800be30 <sin>:
 800be30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be32:	ec53 2b10 	vmov	r2, r3, d0
 800be36:	4826      	ldr	r0, [pc, #152]	@ (800bed0 <sin+0xa0>)
 800be38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800be3c:	4281      	cmp	r1, r0
 800be3e:	d807      	bhi.n	800be50 <sin+0x20>
 800be40:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800bec8 <sin+0x98>
 800be44:	2000      	movs	r0, #0
 800be46:	b005      	add	sp, #20
 800be48:	f85d eb04 	ldr.w	lr, [sp], #4
 800be4c:	f000 b92c 	b.w	800c0a8 <__kernel_sin>
 800be50:	4820      	ldr	r0, [pc, #128]	@ (800bed4 <sin+0xa4>)
 800be52:	4281      	cmp	r1, r0
 800be54:	d908      	bls.n	800be68 <sin+0x38>
 800be56:	4610      	mov	r0, r2
 800be58:	4619      	mov	r1, r3
 800be5a:	f7f4 fa35 	bl	80002c8 <__aeabi_dsub>
 800be5e:	ec41 0b10 	vmov	d0, r0, r1
 800be62:	b005      	add	sp, #20
 800be64:	f85d fb04 	ldr.w	pc, [sp], #4
 800be68:	4668      	mov	r0, sp
 800be6a:	f000 f9d9 	bl	800c220 <__ieee754_rem_pio2>
 800be6e:	f000 0003 	and.w	r0, r0, #3
 800be72:	2801      	cmp	r0, #1
 800be74:	d00c      	beq.n	800be90 <sin+0x60>
 800be76:	2802      	cmp	r0, #2
 800be78:	d011      	beq.n	800be9e <sin+0x6e>
 800be7a:	b9e8      	cbnz	r0, 800beb8 <sin+0x88>
 800be7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be80:	ed9d 0b00 	vldr	d0, [sp]
 800be84:	2001      	movs	r0, #1
 800be86:	f000 f90f 	bl	800c0a8 <__kernel_sin>
 800be8a:	ec51 0b10 	vmov	r0, r1, d0
 800be8e:	e7e6      	b.n	800be5e <sin+0x2e>
 800be90:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be94:	ed9d 0b00 	vldr	d0, [sp]
 800be98:	f000 f83e 	bl	800bf18 <__kernel_cos>
 800be9c:	e7f5      	b.n	800be8a <sin+0x5a>
 800be9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bea2:	ed9d 0b00 	vldr	d0, [sp]
 800bea6:	2001      	movs	r0, #1
 800bea8:	f000 f8fe 	bl	800c0a8 <__kernel_sin>
 800beac:	ec53 2b10 	vmov	r2, r3, d0
 800beb0:	4610      	mov	r0, r2
 800beb2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800beb6:	e7d2      	b.n	800be5e <sin+0x2e>
 800beb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bebc:	ed9d 0b00 	vldr	d0, [sp]
 800bec0:	f000 f82a 	bl	800bf18 <__kernel_cos>
 800bec4:	e7f2      	b.n	800beac <sin+0x7c>
 800bec6:	bf00      	nop
	...
 800bed0:	3fe921fb 	.word	0x3fe921fb
 800bed4:	7fefffff 	.word	0x7fefffff

0800bed8 <fmodf>:
 800bed8:	b508      	push	{r3, lr}
 800beda:	ed2d 8b02 	vpush	{d8}
 800bede:	eef0 8a40 	vmov.f32	s17, s0
 800bee2:	eeb0 8a60 	vmov.f32	s16, s1
 800bee6:	f000 fb9f 	bl	800c628 <__ieee754_fmodf>
 800beea:	eef4 8a48 	vcmp.f32	s17, s16
 800beee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bef2:	d60c      	bvs.n	800bf0e <fmodf+0x36>
 800bef4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bf14 <fmodf+0x3c>
 800bef8:	eeb4 8a68 	vcmp.f32	s16, s17
 800befc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf00:	d105      	bne.n	800bf0e <fmodf+0x36>
 800bf02:	f001 ffbf 	bl	800de84 <__errno>
 800bf06:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bf0a:	2321      	movs	r3, #33	@ 0x21
 800bf0c:	6003      	str	r3, [r0, #0]
 800bf0e:	ecbd 8b02 	vpop	{d8}
 800bf12:	bd08      	pop	{r3, pc}
 800bf14:	00000000 	.word	0x00000000

0800bf18 <__kernel_cos>:
 800bf18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1c:	ec57 6b10 	vmov	r6, r7, d0
 800bf20:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bf24:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800bf28:	ed8d 1b00 	vstr	d1, [sp]
 800bf2c:	d206      	bcs.n	800bf3c <__kernel_cos+0x24>
 800bf2e:	4630      	mov	r0, r6
 800bf30:	4639      	mov	r1, r7
 800bf32:	f7f4 fe31 	bl	8000b98 <__aeabi_d2iz>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	f000 8088 	beq.w	800c04c <__kernel_cos+0x134>
 800bf3c:	4632      	mov	r2, r6
 800bf3e:	463b      	mov	r3, r7
 800bf40:	4630      	mov	r0, r6
 800bf42:	4639      	mov	r1, r7
 800bf44:	f7f4 fb78 	bl	8000638 <__aeabi_dmul>
 800bf48:	4b51      	ldr	r3, [pc, #324]	@ (800c090 <__kernel_cos+0x178>)
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	460d      	mov	r5, r1
 800bf50:	f7f4 fb72 	bl	8000638 <__aeabi_dmul>
 800bf54:	a340      	add	r3, pc, #256	@ (adr r3, 800c058 <__kernel_cos+0x140>)
 800bf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5a:	4682      	mov	sl, r0
 800bf5c:	468b      	mov	fp, r1
 800bf5e:	4620      	mov	r0, r4
 800bf60:	4629      	mov	r1, r5
 800bf62:	f7f4 fb69 	bl	8000638 <__aeabi_dmul>
 800bf66:	a33e      	add	r3, pc, #248	@ (adr r3, 800c060 <__kernel_cos+0x148>)
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	f7f4 f9ae 	bl	80002cc <__adddf3>
 800bf70:	4622      	mov	r2, r4
 800bf72:	462b      	mov	r3, r5
 800bf74:	f7f4 fb60 	bl	8000638 <__aeabi_dmul>
 800bf78:	a33b      	add	r3, pc, #236	@ (adr r3, 800c068 <__kernel_cos+0x150>)
 800bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7e:	f7f4 f9a3 	bl	80002c8 <__aeabi_dsub>
 800bf82:	4622      	mov	r2, r4
 800bf84:	462b      	mov	r3, r5
 800bf86:	f7f4 fb57 	bl	8000638 <__aeabi_dmul>
 800bf8a:	a339      	add	r3, pc, #228	@ (adr r3, 800c070 <__kernel_cos+0x158>)
 800bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf90:	f7f4 f99c 	bl	80002cc <__adddf3>
 800bf94:	4622      	mov	r2, r4
 800bf96:	462b      	mov	r3, r5
 800bf98:	f7f4 fb4e 	bl	8000638 <__aeabi_dmul>
 800bf9c:	a336      	add	r3, pc, #216	@ (adr r3, 800c078 <__kernel_cos+0x160>)
 800bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa2:	f7f4 f991 	bl	80002c8 <__aeabi_dsub>
 800bfa6:	4622      	mov	r2, r4
 800bfa8:	462b      	mov	r3, r5
 800bfaa:	f7f4 fb45 	bl	8000638 <__aeabi_dmul>
 800bfae:	a334      	add	r3, pc, #208	@ (adr r3, 800c080 <__kernel_cos+0x168>)
 800bfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb4:	f7f4 f98a 	bl	80002cc <__adddf3>
 800bfb8:	4622      	mov	r2, r4
 800bfba:	462b      	mov	r3, r5
 800bfbc:	f7f4 fb3c 	bl	8000638 <__aeabi_dmul>
 800bfc0:	4622      	mov	r2, r4
 800bfc2:	462b      	mov	r3, r5
 800bfc4:	f7f4 fb38 	bl	8000638 <__aeabi_dmul>
 800bfc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfcc:	4604      	mov	r4, r0
 800bfce:	460d      	mov	r5, r1
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	4639      	mov	r1, r7
 800bfd4:	f7f4 fb30 	bl	8000638 <__aeabi_dmul>
 800bfd8:	460b      	mov	r3, r1
 800bfda:	4602      	mov	r2, r0
 800bfdc:	4629      	mov	r1, r5
 800bfde:	4620      	mov	r0, r4
 800bfe0:	f7f4 f972 	bl	80002c8 <__aeabi_dsub>
 800bfe4:	4b2b      	ldr	r3, [pc, #172]	@ (800c094 <__kernel_cos+0x17c>)
 800bfe6:	4598      	cmp	r8, r3
 800bfe8:	4606      	mov	r6, r0
 800bfea:	460f      	mov	r7, r1
 800bfec:	d810      	bhi.n	800c010 <__kernel_cos+0xf8>
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	4650      	mov	r0, sl
 800bff4:	4659      	mov	r1, fp
 800bff6:	f7f4 f967 	bl	80002c8 <__aeabi_dsub>
 800bffa:	460b      	mov	r3, r1
 800bffc:	4926      	ldr	r1, [pc, #152]	@ (800c098 <__kernel_cos+0x180>)
 800bffe:	4602      	mov	r2, r0
 800c000:	2000      	movs	r0, #0
 800c002:	f7f4 f961 	bl	80002c8 <__aeabi_dsub>
 800c006:	ec41 0b10 	vmov	d0, r0, r1
 800c00a:	b003      	add	sp, #12
 800c00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c010:	4b22      	ldr	r3, [pc, #136]	@ (800c09c <__kernel_cos+0x184>)
 800c012:	4921      	ldr	r1, [pc, #132]	@ (800c098 <__kernel_cos+0x180>)
 800c014:	4598      	cmp	r8, r3
 800c016:	bf8c      	ite	hi
 800c018:	4d21      	ldrhi	r5, [pc, #132]	@ (800c0a0 <__kernel_cos+0x188>)
 800c01a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c01e:	2400      	movs	r4, #0
 800c020:	4622      	mov	r2, r4
 800c022:	462b      	mov	r3, r5
 800c024:	2000      	movs	r0, #0
 800c026:	f7f4 f94f 	bl	80002c8 <__aeabi_dsub>
 800c02a:	4622      	mov	r2, r4
 800c02c:	4680      	mov	r8, r0
 800c02e:	4689      	mov	r9, r1
 800c030:	462b      	mov	r3, r5
 800c032:	4650      	mov	r0, sl
 800c034:	4659      	mov	r1, fp
 800c036:	f7f4 f947 	bl	80002c8 <__aeabi_dsub>
 800c03a:	4632      	mov	r2, r6
 800c03c:	463b      	mov	r3, r7
 800c03e:	f7f4 f943 	bl	80002c8 <__aeabi_dsub>
 800c042:	4602      	mov	r2, r0
 800c044:	460b      	mov	r3, r1
 800c046:	4640      	mov	r0, r8
 800c048:	4649      	mov	r1, r9
 800c04a:	e7da      	b.n	800c002 <__kernel_cos+0xea>
 800c04c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c088 <__kernel_cos+0x170>
 800c050:	e7db      	b.n	800c00a <__kernel_cos+0xf2>
 800c052:	bf00      	nop
 800c054:	f3af 8000 	nop.w
 800c058:	be8838d4 	.word	0xbe8838d4
 800c05c:	bda8fae9 	.word	0xbda8fae9
 800c060:	bdb4b1c4 	.word	0xbdb4b1c4
 800c064:	3e21ee9e 	.word	0x3e21ee9e
 800c068:	809c52ad 	.word	0x809c52ad
 800c06c:	3e927e4f 	.word	0x3e927e4f
 800c070:	19cb1590 	.word	0x19cb1590
 800c074:	3efa01a0 	.word	0x3efa01a0
 800c078:	16c15177 	.word	0x16c15177
 800c07c:	3f56c16c 	.word	0x3f56c16c
 800c080:	5555554c 	.word	0x5555554c
 800c084:	3fa55555 	.word	0x3fa55555
 800c088:	00000000 	.word	0x00000000
 800c08c:	3ff00000 	.word	0x3ff00000
 800c090:	3fe00000 	.word	0x3fe00000
 800c094:	3fd33332 	.word	0x3fd33332
 800c098:	3ff00000 	.word	0x3ff00000
 800c09c:	3fe90000 	.word	0x3fe90000
 800c0a0:	3fd20000 	.word	0x3fd20000
 800c0a4:	00000000 	.word	0x00000000

0800c0a8 <__kernel_sin>:
 800c0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ac:	ec55 4b10 	vmov	r4, r5, d0
 800c0b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c0b4:	b085      	sub	sp, #20
 800c0b6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c0ba:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c0be:	4680      	mov	r8, r0
 800c0c0:	d205      	bcs.n	800c0ce <__kernel_sin+0x26>
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	f7f4 fd67 	bl	8000b98 <__aeabi_d2iz>
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	d052      	beq.n	800c174 <__kernel_sin+0xcc>
 800c0ce:	4622      	mov	r2, r4
 800c0d0:	462b      	mov	r3, r5
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	f7f4 faaf 	bl	8000638 <__aeabi_dmul>
 800c0da:	4682      	mov	sl, r0
 800c0dc:	468b      	mov	fp, r1
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	f7f4 faa7 	bl	8000638 <__aeabi_dmul>
 800c0ea:	a342      	add	r3, pc, #264	@ (adr r3, 800c1f4 <__kernel_sin+0x14c>)
 800c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f0:	e9cd 0100 	strd	r0, r1, [sp]
 800c0f4:	4650      	mov	r0, sl
 800c0f6:	4659      	mov	r1, fp
 800c0f8:	f7f4 fa9e 	bl	8000638 <__aeabi_dmul>
 800c0fc:	a33f      	add	r3, pc, #252	@ (adr r3, 800c1fc <__kernel_sin+0x154>)
 800c0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c102:	f7f4 f8e1 	bl	80002c8 <__aeabi_dsub>
 800c106:	4652      	mov	r2, sl
 800c108:	465b      	mov	r3, fp
 800c10a:	f7f4 fa95 	bl	8000638 <__aeabi_dmul>
 800c10e:	a33d      	add	r3, pc, #244	@ (adr r3, 800c204 <__kernel_sin+0x15c>)
 800c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c114:	f7f4 f8da 	bl	80002cc <__adddf3>
 800c118:	4652      	mov	r2, sl
 800c11a:	465b      	mov	r3, fp
 800c11c:	f7f4 fa8c 	bl	8000638 <__aeabi_dmul>
 800c120:	a33a      	add	r3, pc, #232	@ (adr r3, 800c20c <__kernel_sin+0x164>)
 800c122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c126:	f7f4 f8cf 	bl	80002c8 <__aeabi_dsub>
 800c12a:	4652      	mov	r2, sl
 800c12c:	465b      	mov	r3, fp
 800c12e:	f7f4 fa83 	bl	8000638 <__aeabi_dmul>
 800c132:	a338      	add	r3, pc, #224	@ (adr r3, 800c214 <__kernel_sin+0x16c>)
 800c134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c138:	f7f4 f8c8 	bl	80002cc <__adddf3>
 800c13c:	4606      	mov	r6, r0
 800c13e:	460f      	mov	r7, r1
 800c140:	f1b8 0f00 	cmp.w	r8, #0
 800c144:	d11b      	bne.n	800c17e <__kernel_sin+0xd6>
 800c146:	4602      	mov	r2, r0
 800c148:	460b      	mov	r3, r1
 800c14a:	4650      	mov	r0, sl
 800c14c:	4659      	mov	r1, fp
 800c14e:	f7f4 fa73 	bl	8000638 <__aeabi_dmul>
 800c152:	a325      	add	r3, pc, #148	@ (adr r3, 800c1e8 <__kernel_sin+0x140>)
 800c154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c158:	f7f4 f8b6 	bl	80002c8 <__aeabi_dsub>
 800c15c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c160:	f7f4 fa6a 	bl	8000638 <__aeabi_dmul>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	4620      	mov	r0, r4
 800c16a:	4629      	mov	r1, r5
 800c16c:	f7f4 f8ae 	bl	80002cc <__adddf3>
 800c170:	4604      	mov	r4, r0
 800c172:	460d      	mov	r5, r1
 800c174:	ec45 4b10 	vmov	d0, r4, r5
 800c178:	b005      	add	sp, #20
 800c17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c17e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c182:	4b1b      	ldr	r3, [pc, #108]	@ (800c1f0 <__kernel_sin+0x148>)
 800c184:	2200      	movs	r2, #0
 800c186:	f7f4 fa57 	bl	8000638 <__aeabi_dmul>
 800c18a:	4632      	mov	r2, r6
 800c18c:	4680      	mov	r8, r0
 800c18e:	4689      	mov	r9, r1
 800c190:	463b      	mov	r3, r7
 800c192:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c196:	f7f4 fa4f 	bl	8000638 <__aeabi_dmul>
 800c19a:	4602      	mov	r2, r0
 800c19c:	460b      	mov	r3, r1
 800c19e:	4640      	mov	r0, r8
 800c1a0:	4649      	mov	r1, r9
 800c1a2:	f7f4 f891 	bl	80002c8 <__aeabi_dsub>
 800c1a6:	4652      	mov	r2, sl
 800c1a8:	465b      	mov	r3, fp
 800c1aa:	f7f4 fa45 	bl	8000638 <__aeabi_dmul>
 800c1ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1b2:	f7f4 f889 	bl	80002c8 <__aeabi_dsub>
 800c1b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c1e8 <__kernel_sin+0x140>)
 800c1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1bc:	4606      	mov	r6, r0
 800c1be:	460f      	mov	r7, r1
 800c1c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1c4:	f7f4 fa38 	bl	8000638 <__aeabi_dmul>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	4639      	mov	r1, r7
 800c1d0:	f7f4 f87c 	bl	80002cc <__adddf3>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	4620      	mov	r0, r4
 800c1da:	4629      	mov	r1, r5
 800c1dc:	f7f4 f874 	bl	80002c8 <__aeabi_dsub>
 800c1e0:	e7c6      	b.n	800c170 <__kernel_sin+0xc8>
 800c1e2:	bf00      	nop
 800c1e4:	f3af 8000 	nop.w
 800c1e8:	55555549 	.word	0x55555549
 800c1ec:	3fc55555 	.word	0x3fc55555
 800c1f0:	3fe00000 	.word	0x3fe00000
 800c1f4:	5acfd57c 	.word	0x5acfd57c
 800c1f8:	3de5d93a 	.word	0x3de5d93a
 800c1fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800c200:	3e5ae5e6 	.word	0x3e5ae5e6
 800c204:	57b1fe7d 	.word	0x57b1fe7d
 800c208:	3ec71de3 	.word	0x3ec71de3
 800c20c:	19c161d5 	.word	0x19c161d5
 800c210:	3f2a01a0 	.word	0x3f2a01a0
 800c214:	1110f8a6 	.word	0x1110f8a6
 800c218:	3f811111 	.word	0x3f811111
 800c21c:	00000000 	.word	0x00000000

0800c220 <__ieee754_rem_pio2>:
 800c220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c224:	ec57 6b10 	vmov	r6, r7, d0
 800c228:	4bc5      	ldr	r3, [pc, #788]	@ (800c540 <__ieee754_rem_pio2+0x320>)
 800c22a:	b08d      	sub	sp, #52	@ 0x34
 800c22c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c230:	4598      	cmp	r8, r3
 800c232:	4604      	mov	r4, r0
 800c234:	9704      	str	r7, [sp, #16]
 800c236:	d807      	bhi.n	800c248 <__ieee754_rem_pio2+0x28>
 800c238:	2200      	movs	r2, #0
 800c23a:	2300      	movs	r3, #0
 800c23c:	ed80 0b00 	vstr	d0, [r0]
 800c240:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c244:	2500      	movs	r5, #0
 800c246:	e028      	b.n	800c29a <__ieee754_rem_pio2+0x7a>
 800c248:	4bbe      	ldr	r3, [pc, #760]	@ (800c544 <__ieee754_rem_pio2+0x324>)
 800c24a:	4598      	cmp	r8, r3
 800c24c:	d878      	bhi.n	800c340 <__ieee754_rem_pio2+0x120>
 800c24e:	9b04      	ldr	r3, [sp, #16]
 800c250:	4dbd      	ldr	r5, [pc, #756]	@ (800c548 <__ieee754_rem_pio2+0x328>)
 800c252:	2b00      	cmp	r3, #0
 800c254:	4630      	mov	r0, r6
 800c256:	a3ac      	add	r3, pc, #688	@ (adr r3, 800c508 <__ieee754_rem_pio2+0x2e8>)
 800c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25c:	4639      	mov	r1, r7
 800c25e:	dd38      	ble.n	800c2d2 <__ieee754_rem_pio2+0xb2>
 800c260:	f7f4 f832 	bl	80002c8 <__aeabi_dsub>
 800c264:	45a8      	cmp	r8, r5
 800c266:	4606      	mov	r6, r0
 800c268:	460f      	mov	r7, r1
 800c26a:	d01a      	beq.n	800c2a2 <__ieee754_rem_pio2+0x82>
 800c26c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800c510 <__ieee754_rem_pio2+0x2f0>)
 800c26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c272:	f7f4 f829 	bl	80002c8 <__aeabi_dsub>
 800c276:	4602      	mov	r2, r0
 800c278:	460b      	mov	r3, r1
 800c27a:	4680      	mov	r8, r0
 800c27c:	4689      	mov	r9, r1
 800c27e:	4630      	mov	r0, r6
 800c280:	4639      	mov	r1, r7
 800c282:	f7f4 f821 	bl	80002c8 <__aeabi_dsub>
 800c286:	a3a2      	add	r3, pc, #648	@ (adr r3, 800c510 <__ieee754_rem_pio2+0x2f0>)
 800c288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28c:	f7f4 f81c 	bl	80002c8 <__aeabi_dsub>
 800c290:	e9c4 8900 	strd	r8, r9, [r4]
 800c294:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c298:	2501      	movs	r5, #1
 800c29a:	4628      	mov	r0, r5
 800c29c:	b00d      	add	sp, #52	@ 0x34
 800c29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a2:	a39d      	add	r3, pc, #628	@ (adr r3, 800c518 <__ieee754_rem_pio2+0x2f8>)
 800c2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a8:	f7f4 f80e 	bl	80002c8 <__aeabi_dsub>
 800c2ac:	a39c      	add	r3, pc, #624	@ (adr r3, 800c520 <__ieee754_rem_pio2+0x300>)
 800c2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b2:	4606      	mov	r6, r0
 800c2b4:	460f      	mov	r7, r1
 800c2b6:	f7f4 f807 	bl	80002c8 <__aeabi_dsub>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	460b      	mov	r3, r1
 800c2be:	4680      	mov	r8, r0
 800c2c0:	4689      	mov	r9, r1
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	4639      	mov	r1, r7
 800c2c6:	f7f3 ffff 	bl	80002c8 <__aeabi_dsub>
 800c2ca:	a395      	add	r3, pc, #596	@ (adr r3, 800c520 <__ieee754_rem_pio2+0x300>)
 800c2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d0:	e7dc      	b.n	800c28c <__ieee754_rem_pio2+0x6c>
 800c2d2:	f7f3 fffb 	bl	80002cc <__adddf3>
 800c2d6:	45a8      	cmp	r8, r5
 800c2d8:	4606      	mov	r6, r0
 800c2da:	460f      	mov	r7, r1
 800c2dc:	d018      	beq.n	800c310 <__ieee754_rem_pio2+0xf0>
 800c2de:	a38c      	add	r3, pc, #560	@ (adr r3, 800c510 <__ieee754_rem_pio2+0x2f0>)
 800c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e4:	f7f3 fff2 	bl	80002cc <__adddf3>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	4680      	mov	r8, r0
 800c2ee:	4689      	mov	r9, r1
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	4639      	mov	r1, r7
 800c2f4:	f7f3 ffe8 	bl	80002c8 <__aeabi_dsub>
 800c2f8:	a385      	add	r3, pc, #532	@ (adr r3, 800c510 <__ieee754_rem_pio2+0x2f0>)
 800c2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fe:	f7f3 ffe5 	bl	80002cc <__adddf3>
 800c302:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c306:	e9c4 8900 	strd	r8, r9, [r4]
 800c30a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c30e:	e7c4      	b.n	800c29a <__ieee754_rem_pio2+0x7a>
 800c310:	a381      	add	r3, pc, #516	@ (adr r3, 800c518 <__ieee754_rem_pio2+0x2f8>)
 800c312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c316:	f7f3 ffd9 	bl	80002cc <__adddf3>
 800c31a:	a381      	add	r3, pc, #516	@ (adr r3, 800c520 <__ieee754_rem_pio2+0x300>)
 800c31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c320:	4606      	mov	r6, r0
 800c322:	460f      	mov	r7, r1
 800c324:	f7f3 ffd2 	bl	80002cc <__adddf3>
 800c328:	4602      	mov	r2, r0
 800c32a:	460b      	mov	r3, r1
 800c32c:	4680      	mov	r8, r0
 800c32e:	4689      	mov	r9, r1
 800c330:	4630      	mov	r0, r6
 800c332:	4639      	mov	r1, r7
 800c334:	f7f3 ffc8 	bl	80002c8 <__aeabi_dsub>
 800c338:	a379      	add	r3, pc, #484	@ (adr r3, 800c520 <__ieee754_rem_pio2+0x300>)
 800c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33e:	e7de      	b.n	800c2fe <__ieee754_rem_pio2+0xde>
 800c340:	4b82      	ldr	r3, [pc, #520]	@ (800c54c <__ieee754_rem_pio2+0x32c>)
 800c342:	4598      	cmp	r8, r3
 800c344:	f200 80d1 	bhi.w	800c4ea <__ieee754_rem_pio2+0x2ca>
 800c348:	f000 f966 	bl	800c618 <fabs>
 800c34c:	ec57 6b10 	vmov	r6, r7, d0
 800c350:	a375      	add	r3, pc, #468	@ (adr r3, 800c528 <__ieee754_rem_pio2+0x308>)
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	4630      	mov	r0, r6
 800c358:	4639      	mov	r1, r7
 800c35a:	f7f4 f96d 	bl	8000638 <__aeabi_dmul>
 800c35e:	4b7c      	ldr	r3, [pc, #496]	@ (800c550 <__ieee754_rem_pio2+0x330>)
 800c360:	2200      	movs	r2, #0
 800c362:	f7f3 ffb3 	bl	80002cc <__adddf3>
 800c366:	f7f4 fc17 	bl	8000b98 <__aeabi_d2iz>
 800c36a:	4605      	mov	r5, r0
 800c36c:	f7f4 f8fa 	bl	8000564 <__aeabi_i2d>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c378:	a363      	add	r3, pc, #396	@ (adr r3, 800c508 <__ieee754_rem_pio2+0x2e8>)
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	f7f4 f95b 	bl	8000638 <__aeabi_dmul>
 800c382:	4602      	mov	r2, r0
 800c384:	460b      	mov	r3, r1
 800c386:	4630      	mov	r0, r6
 800c388:	4639      	mov	r1, r7
 800c38a:	f7f3 ff9d 	bl	80002c8 <__aeabi_dsub>
 800c38e:	a360      	add	r3, pc, #384	@ (adr r3, 800c510 <__ieee754_rem_pio2+0x2f0>)
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	4682      	mov	sl, r0
 800c396:	468b      	mov	fp, r1
 800c398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c39c:	f7f4 f94c 	bl	8000638 <__aeabi_dmul>
 800c3a0:	2d1f      	cmp	r5, #31
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	460f      	mov	r7, r1
 800c3a6:	dc0c      	bgt.n	800c3c2 <__ieee754_rem_pio2+0x1a2>
 800c3a8:	4b6a      	ldr	r3, [pc, #424]	@ (800c554 <__ieee754_rem_pio2+0x334>)
 800c3aa:	1e6a      	subs	r2, r5, #1
 800c3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b0:	4543      	cmp	r3, r8
 800c3b2:	d006      	beq.n	800c3c2 <__ieee754_rem_pio2+0x1a2>
 800c3b4:	4632      	mov	r2, r6
 800c3b6:	463b      	mov	r3, r7
 800c3b8:	4650      	mov	r0, sl
 800c3ba:	4659      	mov	r1, fp
 800c3bc:	f7f3 ff84 	bl	80002c8 <__aeabi_dsub>
 800c3c0:	e00e      	b.n	800c3e0 <__ieee754_rem_pio2+0x1c0>
 800c3c2:	463b      	mov	r3, r7
 800c3c4:	4632      	mov	r2, r6
 800c3c6:	4650      	mov	r0, sl
 800c3c8:	4659      	mov	r1, fp
 800c3ca:	f7f3 ff7d 	bl	80002c8 <__aeabi_dsub>
 800c3ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c3d2:	9305      	str	r3, [sp, #20]
 800c3d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c3d8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c3dc:	2b10      	cmp	r3, #16
 800c3de:	dc02      	bgt.n	800c3e6 <__ieee754_rem_pio2+0x1c6>
 800c3e0:	e9c4 0100 	strd	r0, r1, [r4]
 800c3e4:	e039      	b.n	800c45a <__ieee754_rem_pio2+0x23a>
 800c3e6:	a34c      	add	r3, pc, #304	@ (adr r3, 800c518 <__ieee754_rem_pio2+0x2f8>)
 800c3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3f0:	f7f4 f922 	bl	8000638 <__aeabi_dmul>
 800c3f4:	4606      	mov	r6, r0
 800c3f6:	460f      	mov	r7, r1
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4650      	mov	r0, sl
 800c3fe:	4659      	mov	r1, fp
 800c400:	f7f3 ff62 	bl	80002c8 <__aeabi_dsub>
 800c404:	4602      	mov	r2, r0
 800c406:	460b      	mov	r3, r1
 800c408:	4680      	mov	r8, r0
 800c40a:	4689      	mov	r9, r1
 800c40c:	4650      	mov	r0, sl
 800c40e:	4659      	mov	r1, fp
 800c410:	f7f3 ff5a 	bl	80002c8 <__aeabi_dsub>
 800c414:	4632      	mov	r2, r6
 800c416:	463b      	mov	r3, r7
 800c418:	f7f3 ff56 	bl	80002c8 <__aeabi_dsub>
 800c41c:	a340      	add	r3, pc, #256	@ (adr r3, 800c520 <__ieee754_rem_pio2+0x300>)
 800c41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c422:	4606      	mov	r6, r0
 800c424:	460f      	mov	r7, r1
 800c426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c42a:	f7f4 f905 	bl	8000638 <__aeabi_dmul>
 800c42e:	4632      	mov	r2, r6
 800c430:	463b      	mov	r3, r7
 800c432:	f7f3 ff49 	bl	80002c8 <__aeabi_dsub>
 800c436:	4602      	mov	r2, r0
 800c438:	460b      	mov	r3, r1
 800c43a:	4606      	mov	r6, r0
 800c43c:	460f      	mov	r7, r1
 800c43e:	4640      	mov	r0, r8
 800c440:	4649      	mov	r1, r9
 800c442:	f7f3 ff41 	bl	80002c8 <__aeabi_dsub>
 800c446:	9a05      	ldr	r2, [sp, #20]
 800c448:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c44c:	1ad3      	subs	r3, r2, r3
 800c44e:	2b31      	cmp	r3, #49	@ 0x31
 800c450:	dc20      	bgt.n	800c494 <__ieee754_rem_pio2+0x274>
 800c452:	e9c4 0100 	strd	r0, r1, [r4]
 800c456:	46c2      	mov	sl, r8
 800c458:	46cb      	mov	fp, r9
 800c45a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c45e:	4650      	mov	r0, sl
 800c460:	4642      	mov	r2, r8
 800c462:	464b      	mov	r3, r9
 800c464:	4659      	mov	r1, fp
 800c466:	f7f3 ff2f 	bl	80002c8 <__aeabi_dsub>
 800c46a:	463b      	mov	r3, r7
 800c46c:	4632      	mov	r2, r6
 800c46e:	f7f3 ff2b 	bl	80002c8 <__aeabi_dsub>
 800c472:	9b04      	ldr	r3, [sp, #16]
 800c474:	2b00      	cmp	r3, #0
 800c476:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c47a:	f6bf af0e 	bge.w	800c29a <__ieee754_rem_pio2+0x7a>
 800c47e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800c482:	6063      	str	r3, [r4, #4]
 800c484:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c488:	f8c4 8000 	str.w	r8, [r4]
 800c48c:	60a0      	str	r0, [r4, #8]
 800c48e:	60e3      	str	r3, [r4, #12]
 800c490:	426d      	negs	r5, r5
 800c492:	e702      	b.n	800c29a <__ieee754_rem_pio2+0x7a>
 800c494:	a326      	add	r3, pc, #152	@ (adr r3, 800c530 <__ieee754_rem_pio2+0x310>)
 800c496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c49e:	f7f4 f8cb 	bl	8000638 <__aeabi_dmul>
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	460f      	mov	r7, r1
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	4640      	mov	r0, r8
 800c4ac:	4649      	mov	r1, r9
 800c4ae:	f7f3 ff0b 	bl	80002c8 <__aeabi_dsub>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	4682      	mov	sl, r0
 800c4b8:	468b      	mov	fp, r1
 800c4ba:	4640      	mov	r0, r8
 800c4bc:	4649      	mov	r1, r9
 800c4be:	f7f3 ff03 	bl	80002c8 <__aeabi_dsub>
 800c4c2:	4632      	mov	r2, r6
 800c4c4:	463b      	mov	r3, r7
 800c4c6:	f7f3 feff 	bl	80002c8 <__aeabi_dsub>
 800c4ca:	a31b      	add	r3, pc, #108	@ (adr r3, 800c538 <__ieee754_rem_pio2+0x318>)
 800c4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d0:	4606      	mov	r6, r0
 800c4d2:	460f      	mov	r7, r1
 800c4d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4d8:	f7f4 f8ae 	bl	8000638 <__aeabi_dmul>
 800c4dc:	4632      	mov	r2, r6
 800c4de:	463b      	mov	r3, r7
 800c4e0:	f7f3 fef2 	bl	80002c8 <__aeabi_dsub>
 800c4e4:	4606      	mov	r6, r0
 800c4e6:	460f      	mov	r7, r1
 800c4e8:	e764      	b.n	800c3b4 <__ieee754_rem_pio2+0x194>
 800c4ea:	4b1b      	ldr	r3, [pc, #108]	@ (800c558 <__ieee754_rem_pio2+0x338>)
 800c4ec:	4598      	cmp	r8, r3
 800c4ee:	d935      	bls.n	800c55c <__ieee754_rem_pio2+0x33c>
 800c4f0:	4632      	mov	r2, r6
 800c4f2:	463b      	mov	r3, r7
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	4639      	mov	r1, r7
 800c4f8:	f7f3 fee6 	bl	80002c8 <__aeabi_dsub>
 800c4fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c500:	e9c4 0100 	strd	r0, r1, [r4]
 800c504:	e69e      	b.n	800c244 <__ieee754_rem_pio2+0x24>
 800c506:	bf00      	nop
 800c508:	54400000 	.word	0x54400000
 800c50c:	3ff921fb 	.word	0x3ff921fb
 800c510:	1a626331 	.word	0x1a626331
 800c514:	3dd0b461 	.word	0x3dd0b461
 800c518:	1a600000 	.word	0x1a600000
 800c51c:	3dd0b461 	.word	0x3dd0b461
 800c520:	2e037073 	.word	0x2e037073
 800c524:	3ba3198a 	.word	0x3ba3198a
 800c528:	6dc9c883 	.word	0x6dc9c883
 800c52c:	3fe45f30 	.word	0x3fe45f30
 800c530:	2e000000 	.word	0x2e000000
 800c534:	3ba3198a 	.word	0x3ba3198a
 800c538:	252049c1 	.word	0x252049c1
 800c53c:	397b839a 	.word	0x397b839a
 800c540:	3fe921fb 	.word	0x3fe921fb
 800c544:	4002d97b 	.word	0x4002d97b
 800c548:	3ff921fb 	.word	0x3ff921fb
 800c54c:	413921fb 	.word	0x413921fb
 800c550:	3fe00000 	.word	0x3fe00000
 800c554:	080108f0 	.word	0x080108f0
 800c558:	7fefffff 	.word	0x7fefffff
 800c55c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c560:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800c564:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c568:	4630      	mov	r0, r6
 800c56a:	460f      	mov	r7, r1
 800c56c:	f7f4 fb14 	bl	8000b98 <__aeabi_d2iz>
 800c570:	f7f3 fff8 	bl	8000564 <__aeabi_i2d>
 800c574:	4602      	mov	r2, r0
 800c576:	460b      	mov	r3, r1
 800c578:	4630      	mov	r0, r6
 800c57a:	4639      	mov	r1, r7
 800c57c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c580:	f7f3 fea2 	bl	80002c8 <__aeabi_dsub>
 800c584:	4b22      	ldr	r3, [pc, #136]	@ (800c610 <__ieee754_rem_pio2+0x3f0>)
 800c586:	2200      	movs	r2, #0
 800c588:	f7f4 f856 	bl	8000638 <__aeabi_dmul>
 800c58c:	460f      	mov	r7, r1
 800c58e:	4606      	mov	r6, r0
 800c590:	f7f4 fb02 	bl	8000b98 <__aeabi_d2iz>
 800c594:	f7f3 ffe6 	bl	8000564 <__aeabi_i2d>
 800c598:	4602      	mov	r2, r0
 800c59a:	460b      	mov	r3, r1
 800c59c:	4630      	mov	r0, r6
 800c59e:	4639      	mov	r1, r7
 800c5a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c5a4:	f7f3 fe90 	bl	80002c8 <__aeabi_dsub>
 800c5a8:	4b19      	ldr	r3, [pc, #100]	@ (800c610 <__ieee754_rem_pio2+0x3f0>)
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f7f4 f844 	bl	8000638 <__aeabi_dmul>
 800c5b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c5b4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800c5b8:	f04f 0803 	mov.w	r8, #3
 800c5bc:	2600      	movs	r6, #0
 800c5be:	2700      	movs	r7, #0
 800c5c0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c5c4:	4632      	mov	r2, r6
 800c5c6:	463b      	mov	r3, r7
 800c5c8:	46c2      	mov	sl, r8
 800c5ca:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c5ce:	f7f4 fa9b 	bl	8000b08 <__aeabi_dcmpeq>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d1f4      	bne.n	800c5c0 <__ieee754_rem_pio2+0x3a0>
 800c5d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c614 <__ieee754_rem_pio2+0x3f4>)
 800c5d8:	9301      	str	r3, [sp, #4]
 800c5da:	2302      	movs	r3, #2
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	462a      	mov	r2, r5
 800c5e0:	4653      	mov	r3, sl
 800c5e2:	4621      	mov	r1, r4
 800c5e4:	a806      	add	r0, sp, #24
 800c5e6:	f000 f8a3 	bl	800c730 <__kernel_rem_pio2>
 800c5ea:	9b04      	ldr	r3, [sp, #16]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	4605      	mov	r5, r0
 800c5f0:	f6bf ae53 	bge.w	800c29a <__ieee754_rem_pio2+0x7a>
 800c5f4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c5f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c5fc:	e9c4 2300 	strd	r2, r3, [r4]
 800c600:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c604:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c608:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c60c:	e740      	b.n	800c490 <__ieee754_rem_pio2+0x270>
 800c60e:	bf00      	nop
 800c610:	41700000 	.word	0x41700000
 800c614:	08010970 	.word	0x08010970

0800c618 <fabs>:
 800c618:	ec51 0b10 	vmov	r0, r1, d0
 800c61c:	4602      	mov	r2, r0
 800c61e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c622:	ec43 2b10 	vmov	d0, r2, r3
 800c626:	4770      	bx	lr

0800c628 <__ieee754_fmodf>:
 800c628:	b570      	push	{r4, r5, r6, lr}
 800c62a:	ee10 6a90 	vmov	r6, s1
 800c62e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c632:	1e5a      	subs	r2, r3, #1
 800c634:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c638:	d206      	bcs.n	800c648 <__ieee754_fmodf+0x20>
 800c63a:	ee10 4a10 	vmov	r4, s0
 800c63e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800c642:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c646:	d304      	bcc.n	800c652 <__ieee754_fmodf+0x2a>
 800c648:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c64c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800c650:	bd70      	pop	{r4, r5, r6, pc}
 800c652:	4299      	cmp	r1, r3
 800c654:	dbfc      	blt.n	800c650 <__ieee754_fmodf+0x28>
 800c656:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800c65a:	d105      	bne.n	800c668 <__ieee754_fmodf+0x40>
 800c65c:	4b32      	ldr	r3, [pc, #200]	@ (800c728 <__ieee754_fmodf+0x100>)
 800c65e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800c662:	ed93 0a00 	vldr	s0, [r3]
 800c666:	e7f3      	b.n	800c650 <__ieee754_fmodf+0x28>
 800c668:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800c66c:	d146      	bne.n	800c6fc <__ieee754_fmodf+0xd4>
 800c66e:	020a      	lsls	r2, r1, #8
 800c670:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800c674:	2a00      	cmp	r2, #0
 800c676:	dc3e      	bgt.n	800c6f6 <__ieee754_fmodf+0xce>
 800c678:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800c67c:	bf01      	itttt	eq
 800c67e:	021a      	lsleq	r2, r3, #8
 800c680:	fab2 f282 	clzeq	r2, r2
 800c684:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800c688:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800c68c:	bf16      	itet	ne
 800c68e:	15da      	asrne	r2, r3, #23
 800c690:	3282      	addeq	r2, #130	@ 0x82
 800c692:	3a7f      	subne	r2, #127	@ 0x7f
 800c694:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800c698:	bfbb      	ittet	lt
 800c69a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800c69e:	1a24      	sublt	r4, r4, r0
 800c6a0:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800c6a4:	40a1      	lsllt	r1, r4
 800c6a6:	bfa8      	it	ge
 800c6a8:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800c6ac:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c6b0:	bfb5      	itete	lt
 800c6b2:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800c6b6:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800c6ba:	1aa4      	sublt	r4, r4, r2
 800c6bc:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800c6c0:	bfb8      	it	lt
 800c6c2:	fa03 f404 	lsllt.w	r4, r3, r4
 800c6c6:	1a80      	subs	r0, r0, r2
 800c6c8:	1b0b      	subs	r3, r1, r4
 800c6ca:	b9d0      	cbnz	r0, 800c702 <__ieee754_fmodf+0xda>
 800c6cc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800c6d0:	bf28      	it	cs
 800c6d2:	460b      	movcs	r3, r1
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d0c1      	beq.n	800c65c <__ieee754_fmodf+0x34>
 800c6d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c6dc:	db19      	blt.n	800c712 <__ieee754_fmodf+0xea>
 800c6de:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c6e2:	db19      	blt.n	800c718 <__ieee754_fmodf+0xf0>
 800c6e4:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800c6e8:	327f      	adds	r2, #127	@ 0x7f
 800c6ea:	432b      	orrs	r3, r5
 800c6ec:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c6f0:	ee00 3a10 	vmov	s0, r3
 800c6f4:	e7ac      	b.n	800c650 <__ieee754_fmodf+0x28>
 800c6f6:	3801      	subs	r0, #1
 800c6f8:	0052      	lsls	r2, r2, #1
 800c6fa:	e7bb      	b.n	800c674 <__ieee754_fmodf+0x4c>
 800c6fc:	15c8      	asrs	r0, r1, #23
 800c6fe:	387f      	subs	r0, #127	@ 0x7f
 800c700:	e7ba      	b.n	800c678 <__ieee754_fmodf+0x50>
 800c702:	2b00      	cmp	r3, #0
 800c704:	da02      	bge.n	800c70c <__ieee754_fmodf+0xe4>
 800c706:	0049      	lsls	r1, r1, #1
 800c708:	3801      	subs	r0, #1
 800c70a:	e7dd      	b.n	800c6c8 <__ieee754_fmodf+0xa0>
 800c70c:	d0a6      	beq.n	800c65c <__ieee754_fmodf+0x34>
 800c70e:	0059      	lsls	r1, r3, #1
 800c710:	e7fa      	b.n	800c708 <__ieee754_fmodf+0xe0>
 800c712:	005b      	lsls	r3, r3, #1
 800c714:	3a01      	subs	r2, #1
 800c716:	e7df      	b.n	800c6d8 <__ieee754_fmodf+0xb0>
 800c718:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800c71c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800c720:	3282      	adds	r2, #130	@ 0x82
 800c722:	4113      	asrs	r3, r2
 800c724:	432b      	orrs	r3, r5
 800c726:	e7e3      	b.n	800c6f0 <__ieee754_fmodf+0xc8>
 800c728:	08010a78 	.word	0x08010a78
 800c72c:	00000000 	.word	0x00000000

0800c730 <__kernel_rem_pio2>:
 800c730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c734:	ed2d 8b02 	vpush	{d8}
 800c738:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c73c:	f112 0f14 	cmn.w	r2, #20
 800c740:	9306      	str	r3, [sp, #24]
 800c742:	9104      	str	r1, [sp, #16]
 800c744:	4bc2      	ldr	r3, [pc, #776]	@ (800ca50 <__kernel_rem_pio2+0x320>)
 800c746:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800c748:	9008      	str	r0, [sp, #32]
 800c74a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	9b06      	ldr	r3, [sp, #24]
 800c752:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c756:	bfa8      	it	ge
 800c758:	1ed4      	subge	r4, r2, #3
 800c75a:	9305      	str	r3, [sp, #20]
 800c75c:	bfb2      	itee	lt
 800c75e:	2400      	movlt	r4, #0
 800c760:	2318      	movge	r3, #24
 800c762:	fb94 f4f3 	sdivge	r4, r4, r3
 800c766:	f06f 0317 	mvn.w	r3, #23
 800c76a:	fb04 3303 	mla	r3, r4, r3, r3
 800c76e:	eb03 0b02 	add.w	fp, r3, r2
 800c772:	9b00      	ldr	r3, [sp, #0]
 800c774:	9a05      	ldr	r2, [sp, #20]
 800c776:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800ca40 <__kernel_rem_pio2+0x310>
 800c77a:	eb03 0802 	add.w	r8, r3, r2
 800c77e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c780:	1aa7      	subs	r7, r4, r2
 800c782:	ae20      	add	r6, sp, #128	@ 0x80
 800c784:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c788:	2500      	movs	r5, #0
 800c78a:	4545      	cmp	r5, r8
 800c78c:	dd12      	ble.n	800c7b4 <__kernel_rem_pio2+0x84>
 800c78e:	9b06      	ldr	r3, [sp, #24]
 800c790:	aa20      	add	r2, sp, #128	@ 0x80
 800c792:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c796:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800c79a:	2700      	movs	r7, #0
 800c79c:	9b00      	ldr	r3, [sp, #0]
 800c79e:	429f      	cmp	r7, r3
 800c7a0:	dc2e      	bgt.n	800c800 <__kernel_rem_pio2+0xd0>
 800c7a2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800ca40 <__kernel_rem_pio2+0x310>
 800c7a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c7aa:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c7ae:	46a8      	mov	r8, r5
 800c7b0:	2600      	movs	r6, #0
 800c7b2:	e01b      	b.n	800c7ec <__kernel_rem_pio2+0xbc>
 800c7b4:	42ef      	cmn	r7, r5
 800c7b6:	d407      	bmi.n	800c7c8 <__kernel_rem_pio2+0x98>
 800c7b8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c7bc:	f7f3 fed2 	bl	8000564 <__aeabi_i2d>
 800c7c0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c7c4:	3501      	adds	r5, #1
 800c7c6:	e7e0      	b.n	800c78a <__kernel_rem_pio2+0x5a>
 800c7c8:	ec51 0b18 	vmov	r0, r1, d8
 800c7cc:	e7f8      	b.n	800c7c0 <__kernel_rem_pio2+0x90>
 800c7ce:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800c7d2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c7d6:	f7f3 ff2f 	bl	8000638 <__aeabi_dmul>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	460b      	mov	r3, r1
 800c7de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7e2:	f7f3 fd73 	bl	80002cc <__adddf3>
 800c7e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7ea:	3601      	adds	r6, #1
 800c7ec:	9b05      	ldr	r3, [sp, #20]
 800c7ee:	429e      	cmp	r6, r3
 800c7f0:	dded      	ble.n	800c7ce <__kernel_rem_pio2+0x9e>
 800c7f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7f6:	3701      	adds	r7, #1
 800c7f8:	ecaa 7b02 	vstmia	sl!, {d7}
 800c7fc:	3508      	adds	r5, #8
 800c7fe:	e7cd      	b.n	800c79c <__kernel_rem_pio2+0x6c>
 800c800:	9b00      	ldr	r3, [sp, #0]
 800c802:	f8dd 8000 	ldr.w	r8, [sp]
 800c806:	aa0c      	add	r2, sp, #48	@ 0x30
 800c808:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c80c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c80e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c810:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c814:	9309      	str	r3, [sp, #36]	@ 0x24
 800c816:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800c81a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c81c:	ab98      	add	r3, sp, #608	@ 0x260
 800c81e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c822:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800c826:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c82a:	ac0c      	add	r4, sp, #48	@ 0x30
 800c82c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c82e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800c832:	46a1      	mov	r9, r4
 800c834:	46c2      	mov	sl, r8
 800c836:	f1ba 0f00 	cmp.w	sl, #0
 800c83a:	dc77      	bgt.n	800c92c <__kernel_rem_pio2+0x1fc>
 800c83c:	4658      	mov	r0, fp
 800c83e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c842:	f000 fac5 	bl	800cdd0 <scalbn>
 800c846:	ec57 6b10 	vmov	r6, r7, d0
 800c84a:	2200      	movs	r2, #0
 800c84c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c850:	4630      	mov	r0, r6
 800c852:	4639      	mov	r1, r7
 800c854:	f7f3 fef0 	bl	8000638 <__aeabi_dmul>
 800c858:	ec41 0b10 	vmov	d0, r0, r1
 800c85c:	f000 fb34 	bl	800cec8 <floor>
 800c860:	4b7c      	ldr	r3, [pc, #496]	@ (800ca54 <__kernel_rem_pio2+0x324>)
 800c862:	ec51 0b10 	vmov	r0, r1, d0
 800c866:	2200      	movs	r2, #0
 800c868:	f7f3 fee6 	bl	8000638 <__aeabi_dmul>
 800c86c:	4602      	mov	r2, r0
 800c86e:	460b      	mov	r3, r1
 800c870:	4630      	mov	r0, r6
 800c872:	4639      	mov	r1, r7
 800c874:	f7f3 fd28 	bl	80002c8 <__aeabi_dsub>
 800c878:	460f      	mov	r7, r1
 800c87a:	4606      	mov	r6, r0
 800c87c:	f7f4 f98c 	bl	8000b98 <__aeabi_d2iz>
 800c880:	9002      	str	r0, [sp, #8]
 800c882:	f7f3 fe6f 	bl	8000564 <__aeabi_i2d>
 800c886:	4602      	mov	r2, r0
 800c888:	460b      	mov	r3, r1
 800c88a:	4630      	mov	r0, r6
 800c88c:	4639      	mov	r1, r7
 800c88e:	f7f3 fd1b 	bl	80002c8 <__aeabi_dsub>
 800c892:	f1bb 0f00 	cmp.w	fp, #0
 800c896:	4606      	mov	r6, r0
 800c898:	460f      	mov	r7, r1
 800c89a:	dd6c      	ble.n	800c976 <__kernel_rem_pio2+0x246>
 800c89c:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800c8a0:	ab0c      	add	r3, sp, #48	@ 0x30
 800c8a2:	9d02      	ldr	r5, [sp, #8]
 800c8a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8a8:	f1cb 0018 	rsb	r0, fp, #24
 800c8ac:	fa43 f200 	asr.w	r2, r3, r0
 800c8b0:	4415      	add	r5, r2
 800c8b2:	4082      	lsls	r2, r0
 800c8b4:	1a9b      	subs	r3, r3, r2
 800c8b6:	aa0c      	add	r2, sp, #48	@ 0x30
 800c8b8:	9502      	str	r5, [sp, #8]
 800c8ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c8be:	f1cb 0217 	rsb	r2, fp, #23
 800c8c2:	fa43 f902 	asr.w	r9, r3, r2
 800c8c6:	f1b9 0f00 	cmp.w	r9, #0
 800c8ca:	dd64      	ble.n	800c996 <__kernel_rem_pio2+0x266>
 800c8cc:	9b02      	ldr	r3, [sp, #8]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	9302      	str	r3, [sp, #8]
 800c8d4:	4615      	mov	r5, r2
 800c8d6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c8da:	4590      	cmp	r8, r2
 800c8dc:	f300 80a1 	bgt.w	800ca22 <__kernel_rem_pio2+0x2f2>
 800c8e0:	f1bb 0f00 	cmp.w	fp, #0
 800c8e4:	dd07      	ble.n	800c8f6 <__kernel_rem_pio2+0x1c6>
 800c8e6:	f1bb 0f01 	cmp.w	fp, #1
 800c8ea:	f000 80c1 	beq.w	800ca70 <__kernel_rem_pio2+0x340>
 800c8ee:	f1bb 0f02 	cmp.w	fp, #2
 800c8f2:	f000 80c8 	beq.w	800ca86 <__kernel_rem_pio2+0x356>
 800c8f6:	f1b9 0f02 	cmp.w	r9, #2
 800c8fa:	d14c      	bne.n	800c996 <__kernel_rem_pio2+0x266>
 800c8fc:	4632      	mov	r2, r6
 800c8fe:	463b      	mov	r3, r7
 800c900:	4955      	ldr	r1, [pc, #340]	@ (800ca58 <__kernel_rem_pio2+0x328>)
 800c902:	2000      	movs	r0, #0
 800c904:	f7f3 fce0 	bl	80002c8 <__aeabi_dsub>
 800c908:	4606      	mov	r6, r0
 800c90a:	460f      	mov	r7, r1
 800c90c:	2d00      	cmp	r5, #0
 800c90e:	d042      	beq.n	800c996 <__kernel_rem_pio2+0x266>
 800c910:	4658      	mov	r0, fp
 800c912:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800ca48 <__kernel_rem_pio2+0x318>
 800c916:	f000 fa5b 	bl	800cdd0 <scalbn>
 800c91a:	4630      	mov	r0, r6
 800c91c:	4639      	mov	r1, r7
 800c91e:	ec53 2b10 	vmov	r2, r3, d0
 800c922:	f7f3 fcd1 	bl	80002c8 <__aeabi_dsub>
 800c926:	4606      	mov	r6, r0
 800c928:	460f      	mov	r7, r1
 800c92a:	e034      	b.n	800c996 <__kernel_rem_pio2+0x266>
 800c92c:	4b4b      	ldr	r3, [pc, #300]	@ (800ca5c <__kernel_rem_pio2+0x32c>)
 800c92e:	2200      	movs	r2, #0
 800c930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c934:	f7f3 fe80 	bl	8000638 <__aeabi_dmul>
 800c938:	f7f4 f92e 	bl	8000b98 <__aeabi_d2iz>
 800c93c:	f7f3 fe12 	bl	8000564 <__aeabi_i2d>
 800c940:	4b47      	ldr	r3, [pc, #284]	@ (800ca60 <__kernel_rem_pio2+0x330>)
 800c942:	2200      	movs	r2, #0
 800c944:	4606      	mov	r6, r0
 800c946:	460f      	mov	r7, r1
 800c948:	f7f3 fe76 	bl	8000638 <__aeabi_dmul>
 800c94c:	4602      	mov	r2, r0
 800c94e:	460b      	mov	r3, r1
 800c950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c954:	f7f3 fcb8 	bl	80002c8 <__aeabi_dsub>
 800c958:	f7f4 f91e 	bl	8000b98 <__aeabi_d2iz>
 800c95c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c960:	f849 0b04 	str.w	r0, [r9], #4
 800c964:	4639      	mov	r1, r7
 800c966:	4630      	mov	r0, r6
 800c968:	f7f3 fcb0 	bl	80002cc <__adddf3>
 800c96c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c974:	e75f      	b.n	800c836 <__kernel_rem_pio2+0x106>
 800c976:	d107      	bne.n	800c988 <__kernel_rem_pio2+0x258>
 800c978:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800c97c:	aa0c      	add	r2, sp, #48	@ 0x30
 800c97e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c982:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800c986:	e79e      	b.n	800c8c6 <__kernel_rem_pio2+0x196>
 800c988:	4b36      	ldr	r3, [pc, #216]	@ (800ca64 <__kernel_rem_pio2+0x334>)
 800c98a:	2200      	movs	r2, #0
 800c98c:	f7f4 f8da 	bl	8000b44 <__aeabi_dcmpge>
 800c990:	2800      	cmp	r0, #0
 800c992:	d143      	bne.n	800ca1c <__kernel_rem_pio2+0x2ec>
 800c994:	4681      	mov	r9, r0
 800c996:	2200      	movs	r2, #0
 800c998:	2300      	movs	r3, #0
 800c99a:	4630      	mov	r0, r6
 800c99c:	4639      	mov	r1, r7
 800c99e:	f7f4 f8b3 	bl	8000b08 <__aeabi_dcmpeq>
 800c9a2:	2800      	cmp	r0, #0
 800c9a4:	f000 80c1 	beq.w	800cb2a <__kernel_rem_pio2+0x3fa>
 800c9a8:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	9900      	ldr	r1, [sp, #0]
 800c9b0:	428b      	cmp	r3, r1
 800c9b2:	da70      	bge.n	800ca96 <__kernel_rem_pio2+0x366>
 800c9b4:	2a00      	cmp	r2, #0
 800c9b6:	f000 808b 	beq.w	800cad0 <__kernel_rem_pio2+0x3a0>
 800c9ba:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c9be:	ab0c      	add	r3, sp, #48	@ 0x30
 800c9c0:	f1ab 0b18 	sub.w	fp, fp, #24
 800c9c4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d0f6      	beq.n	800c9ba <__kernel_rem_pio2+0x28a>
 800c9cc:	4658      	mov	r0, fp
 800c9ce:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800ca48 <__kernel_rem_pio2+0x318>
 800c9d2:	f000 f9fd 	bl	800cdd0 <scalbn>
 800c9d6:	f108 0301 	add.w	r3, r8, #1
 800c9da:	00da      	lsls	r2, r3, #3
 800c9dc:	9205      	str	r2, [sp, #20]
 800c9de:	ec55 4b10 	vmov	r4, r5, d0
 800c9e2:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c9e4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800ca5c <__kernel_rem_pio2+0x32c>
 800c9e8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c9ec:	4646      	mov	r6, r8
 800c9ee:	f04f 0a00 	mov.w	sl, #0
 800c9f2:	2e00      	cmp	r6, #0
 800c9f4:	f280 80d1 	bge.w	800cb9a <__kernel_rem_pio2+0x46a>
 800c9f8:	4644      	mov	r4, r8
 800c9fa:	2c00      	cmp	r4, #0
 800c9fc:	f2c0 80ff 	blt.w	800cbfe <__kernel_rem_pio2+0x4ce>
 800ca00:	4b19      	ldr	r3, [pc, #100]	@ (800ca68 <__kernel_rem_pio2+0x338>)
 800ca02:	461f      	mov	r7, r3
 800ca04:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ca06:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca0a:	9306      	str	r3, [sp, #24]
 800ca0c:	f04f 0a00 	mov.w	sl, #0
 800ca10:	f04f 0b00 	mov.w	fp, #0
 800ca14:	2600      	movs	r6, #0
 800ca16:	eba8 0504 	sub.w	r5, r8, r4
 800ca1a:	e0e4      	b.n	800cbe6 <__kernel_rem_pio2+0x4b6>
 800ca1c:	f04f 0902 	mov.w	r9, #2
 800ca20:	e754      	b.n	800c8cc <__kernel_rem_pio2+0x19c>
 800ca22:	f854 3b04 	ldr.w	r3, [r4], #4
 800ca26:	bb0d      	cbnz	r5, 800ca6c <__kernel_rem_pio2+0x33c>
 800ca28:	b123      	cbz	r3, 800ca34 <__kernel_rem_pio2+0x304>
 800ca2a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800ca2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca32:	2301      	movs	r3, #1
 800ca34:	3201      	adds	r2, #1
 800ca36:	461d      	mov	r5, r3
 800ca38:	e74f      	b.n	800c8da <__kernel_rem_pio2+0x1aa>
 800ca3a:	bf00      	nop
 800ca3c:	f3af 8000 	nop.w
	...
 800ca4c:	3ff00000 	.word	0x3ff00000
 800ca50:	08010ac0 	.word	0x08010ac0
 800ca54:	40200000 	.word	0x40200000
 800ca58:	3ff00000 	.word	0x3ff00000
 800ca5c:	3e700000 	.word	0x3e700000
 800ca60:	41700000 	.word	0x41700000
 800ca64:	3fe00000 	.word	0x3fe00000
 800ca68:	08010a80 	.word	0x08010a80
 800ca6c:	1acb      	subs	r3, r1, r3
 800ca6e:	e7de      	b.n	800ca2e <__kernel_rem_pio2+0x2fe>
 800ca70:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800ca74:	ab0c      	add	r3, sp, #48	@ 0x30
 800ca76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca7a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ca7e:	a90c      	add	r1, sp, #48	@ 0x30
 800ca80:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ca84:	e737      	b.n	800c8f6 <__kernel_rem_pio2+0x1c6>
 800ca86:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800ca8a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ca8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ca94:	e7f3      	b.n	800ca7e <__kernel_rem_pio2+0x34e>
 800ca96:	a90c      	add	r1, sp, #48	@ 0x30
 800ca98:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	430a      	orrs	r2, r1
 800caa0:	e785      	b.n	800c9ae <__kernel_rem_pio2+0x27e>
 800caa2:	3401      	adds	r4, #1
 800caa4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800caa8:	2a00      	cmp	r2, #0
 800caaa:	d0fa      	beq.n	800caa2 <__kernel_rem_pio2+0x372>
 800caac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cab2:	eb0d 0503 	add.w	r5, sp, r3
 800cab6:	9b06      	ldr	r3, [sp, #24]
 800cab8:	aa20      	add	r2, sp, #128	@ 0x80
 800caba:	4443      	add	r3, r8
 800cabc:	f108 0701 	add.w	r7, r8, #1
 800cac0:	3d98      	subs	r5, #152	@ 0x98
 800cac2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800cac6:	4444      	add	r4, r8
 800cac8:	42bc      	cmp	r4, r7
 800caca:	da04      	bge.n	800cad6 <__kernel_rem_pio2+0x3a6>
 800cacc:	46a0      	mov	r8, r4
 800cace:	e6a2      	b.n	800c816 <__kernel_rem_pio2+0xe6>
 800cad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cad2:	2401      	movs	r4, #1
 800cad4:	e7e6      	b.n	800caa4 <__kernel_rem_pio2+0x374>
 800cad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cad8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800cadc:	f7f3 fd42 	bl	8000564 <__aeabi_i2d>
 800cae0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800cda0 <__kernel_rem_pio2+0x670>
 800cae4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cae8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800caec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800caf0:	46b2      	mov	sl, r6
 800caf2:	f04f 0800 	mov.w	r8, #0
 800caf6:	9b05      	ldr	r3, [sp, #20]
 800caf8:	4598      	cmp	r8, r3
 800cafa:	dd05      	ble.n	800cb08 <__kernel_rem_pio2+0x3d8>
 800cafc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb00:	3701      	adds	r7, #1
 800cb02:	eca5 7b02 	vstmia	r5!, {d7}
 800cb06:	e7df      	b.n	800cac8 <__kernel_rem_pio2+0x398>
 800cb08:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800cb0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cb10:	f7f3 fd92 	bl	8000638 <__aeabi_dmul>
 800cb14:	4602      	mov	r2, r0
 800cb16:	460b      	mov	r3, r1
 800cb18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb1c:	f7f3 fbd6 	bl	80002cc <__adddf3>
 800cb20:	f108 0801 	add.w	r8, r8, #1
 800cb24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb28:	e7e5      	b.n	800caf6 <__kernel_rem_pio2+0x3c6>
 800cb2a:	f1cb 0000 	rsb	r0, fp, #0
 800cb2e:	ec47 6b10 	vmov	d0, r6, r7
 800cb32:	f000 f94d 	bl	800cdd0 <scalbn>
 800cb36:	ec55 4b10 	vmov	r4, r5, d0
 800cb3a:	4b9b      	ldr	r3, [pc, #620]	@ (800cda8 <__kernel_rem_pio2+0x678>)
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	4620      	mov	r0, r4
 800cb40:	4629      	mov	r1, r5
 800cb42:	f7f3 ffff 	bl	8000b44 <__aeabi_dcmpge>
 800cb46:	b300      	cbz	r0, 800cb8a <__kernel_rem_pio2+0x45a>
 800cb48:	4b98      	ldr	r3, [pc, #608]	@ (800cdac <__kernel_rem_pio2+0x67c>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	4629      	mov	r1, r5
 800cb50:	f7f3 fd72 	bl	8000638 <__aeabi_dmul>
 800cb54:	f7f4 f820 	bl	8000b98 <__aeabi_d2iz>
 800cb58:	4606      	mov	r6, r0
 800cb5a:	f7f3 fd03 	bl	8000564 <__aeabi_i2d>
 800cb5e:	4b92      	ldr	r3, [pc, #584]	@ (800cda8 <__kernel_rem_pio2+0x678>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	f7f3 fd69 	bl	8000638 <__aeabi_dmul>
 800cb66:	460b      	mov	r3, r1
 800cb68:	4602      	mov	r2, r0
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f7f3 fbab 	bl	80002c8 <__aeabi_dsub>
 800cb72:	f7f4 f811 	bl	8000b98 <__aeabi_d2iz>
 800cb76:	ab0c      	add	r3, sp, #48	@ 0x30
 800cb78:	f10b 0b18 	add.w	fp, fp, #24
 800cb7c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800cb80:	f108 0801 	add.w	r8, r8, #1
 800cb84:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800cb88:	e720      	b.n	800c9cc <__kernel_rem_pio2+0x29c>
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	f7f4 f803 	bl	8000b98 <__aeabi_d2iz>
 800cb92:	ab0c      	add	r3, sp, #48	@ 0x30
 800cb94:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800cb98:	e718      	b.n	800c9cc <__kernel_rem_pio2+0x29c>
 800cb9a:	ab0c      	add	r3, sp, #48	@ 0x30
 800cb9c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cba0:	f7f3 fce0 	bl	8000564 <__aeabi_i2d>
 800cba4:	4622      	mov	r2, r4
 800cba6:	462b      	mov	r3, r5
 800cba8:	f7f3 fd46 	bl	8000638 <__aeabi_dmul>
 800cbac:	4652      	mov	r2, sl
 800cbae:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800cbb2:	465b      	mov	r3, fp
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	4629      	mov	r1, r5
 800cbb8:	f7f3 fd3e 	bl	8000638 <__aeabi_dmul>
 800cbbc:	3e01      	subs	r6, #1
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	460d      	mov	r5, r1
 800cbc2:	e716      	b.n	800c9f2 <__kernel_rem_pio2+0x2c2>
 800cbc4:	9906      	ldr	r1, [sp, #24]
 800cbc6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800cbca:	9106      	str	r1, [sp, #24]
 800cbcc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800cbd0:	f7f3 fd32 	bl	8000638 <__aeabi_dmul>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	4650      	mov	r0, sl
 800cbda:	4659      	mov	r1, fp
 800cbdc:	f7f3 fb76 	bl	80002cc <__adddf3>
 800cbe0:	3601      	adds	r6, #1
 800cbe2:	4682      	mov	sl, r0
 800cbe4:	468b      	mov	fp, r1
 800cbe6:	9b00      	ldr	r3, [sp, #0]
 800cbe8:	429e      	cmp	r6, r3
 800cbea:	dc01      	bgt.n	800cbf0 <__kernel_rem_pio2+0x4c0>
 800cbec:	42ae      	cmp	r6, r5
 800cbee:	dde9      	ble.n	800cbc4 <__kernel_rem_pio2+0x494>
 800cbf0:	ab48      	add	r3, sp, #288	@ 0x120
 800cbf2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cbf6:	e9c5 ab00 	strd	sl, fp, [r5]
 800cbfa:	3c01      	subs	r4, #1
 800cbfc:	e6fd      	b.n	800c9fa <__kernel_rem_pio2+0x2ca>
 800cbfe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	dc0b      	bgt.n	800cc1c <__kernel_rem_pio2+0x4ec>
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	dc35      	bgt.n	800cc74 <__kernel_rem_pio2+0x544>
 800cc08:	d059      	beq.n	800ccbe <__kernel_rem_pio2+0x58e>
 800cc0a:	9b02      	ldr	r3, [sp, #8]
 800cc0c:	f003 0007 	and.w	r0, r3, #7
 800cc10:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800cc14:	ecbd 8b02 	vpop	{d8}
 800cc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800cc1e:	2b03      	cmp	r3, #3
 800cc20:	d1f3      	bne.n	800cc0a <__kernel_rem_pio2+0x4da>
 800cc22:	9b05      	ldr	r3, [sp, #20]
 800cc24:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cc28:	eb0d 0403 	add.w	r4, sp, r3
 800cc2c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800cc30:	4625      	mov	r5, r4
 800cc32:	46c2      	mov	sl, r8
 800cc34:	f1ba 0f00 	cmp.w	sl, #0
 800cc38:	dc69      	bgt.n	800cd0e <__kernel_rem_pio2+0x5de>
 800cc3a:	4645      	mov	r5, r8
 800cc3c:	2d01      	cmp	r5, #1
 800cc3e:	f300 8087 	bgt.w	800cd50 <__kernel_rem_pio2+0x620>
 800cc42:	9c05      	ldr	r4, [sp, #20]
 800cc44:	ab48      	add	r3, sp, #288	@ 0x120
 800cc46:	441c      	add	r4, r3
 800cc48:	2000      	movs	r0, #0
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	f1b8 0f01 	cmp.w	r8, #1
 800cc50:	f300 809c 	bgt.w	800cd8c <__kernel_rem_pio2+0x65c>
 800cc54:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800cc58:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800cc5c:	f1b9 0f00 	cmp.w	r9, #0
 800cc60:	f040 80a6 	bne.w	800cdb0 <__kernel_rem_pio2+0x680>
 800cc64:	9b04      	ldr	r3, [sp, #16]
 800cc66:	e9c3 5600 	strd	r5, r6, [r3]
 800cc6a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800cc6e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cc72:	e7ca      	b.n	800cc0a <__kernel_rem_pio2+0x4da>
 800cc74:	9d05      	ldr	r5, [sp, #20]
 800cc76:	ab48      	add	r3, sp, #288	@ 0x120
 800cc78:	441d      	add	r5, r3
 800cc7a:	4644      	mov	r4, r8
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	2100      	movs	r1, #0
 800cc80:	2c00      	cmp	r4, #0
 800cc82:	da35      	bge.n	800ccf0 <__kernel_rem_pio2+0x5c0>
 800cc84:	f1b9 0f00 	cmp.w	r9, #0
 800cc88:	d038      	beq.n	800ccfc <__kernel_rem_pio2+0x5cc>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc90:	9c04      	ldr	r4, [sp, #16]
 800cc92:	e9c4 2300 	strd	r2, r3, [r4]
 800cc96:	4602      	mov	r2, r0
 800cc98:	460b      	mov	r3, r1
 800cc9a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800cc9e:	f7f3 fb13 	bl	80002c8 <__aeabi_dsub>
 800cca2:	ad4a      	add	r5, sp, #296	@ 0x128
 800cca4:	2401      	movs	r4, #1
 800cca6:	45a0      	cmp	r8, r4
 800cca8:	da2b      	bge.n	800cd02 <__kernel_rem_pio2+0x5d2>
 800ccaa:	f1b9 0f00 	cmp.w	r9, #0
 800ccae:	d002      	beq.n	800ccb6 <__kernel_rem_pio2+0x586>
 800ccb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	9b04      	ldr	r3, [sp, #16]
 800ccb8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ccbc:	e7a5      	b.n	800cc0a <__kernel_rem_pio2+0x4da>
 800ccbe:	9c05      	ldr	r4, [sp, #20]
 800ccc0:	ab48      	add	r3, sp, #288	@ 0x120
 800ccc2:	441c      	add	r4, r3
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	f1b8 0f00 	cmp.w	r8, #0
 800cccc:	da09      	bge.n	800cce2 <__kernel_rem_pio2+0x5b2>
 800ccce:	f1b9 0f00 	cmp.w	r9, #0
 800ccd2:	d002      	beq.n	800ccda <__kernel_rem_pio2+0x5aa>
 800ccd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ccd8:	4619      	mov	r1, r3
 800ccda:	9b04      	ldr	r3, [sp, #16]
 800ccdc:	e9c3 0100 	strd	r0, r1, [r3]
 800cce0:	e793      	b.n	800cc0a <__kernel_rem_pio2+0x4da>
 800cce2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cce6:	f7f3 faf1 	bl	80002cc <__adddf3>
 800ccea:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ccee:	e7eb      	b.n	800ccc8 <__kernel_rem_pio2+0x598>
 800ccf0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ccf4:	f7f3 faea 	bl	80002cc <__adddf3>
 800ccf8:	3c01      	subs	r4, #1
 800ccfa:	e7c1      	b.n	800cc80 <__kernel_rem_pio2+0x550>
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	460b      	mov	r3, r1
 800cd00:	e7c6      	b.n	800cc90 <__kernel_rem_pio2+0x560>
 800cd02:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800cd06:	f7f3 fae1 	bl	80002cc <__adddf3>
 800cd0a:	3401      	adds	r4, #1
 800cd0c:	e7cb      	b.n	800cca6 <__kernel_rem_pio2+0x576>
 800cd0e:	ed35 7b02 	vldmdb	r5!, {d7}
 800cd12:	ed8d 7b00 	vstr	d7, [sp]
 800cd16:	ed95 7b02 	vldr	d7, [r5, #8]
 800cd1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd1e:	ec53 2b17 	vmov	r2, r3, d7
 800cd22:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cd26:	f7f3 fad1 	bl	80002cc <__adddf3>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	4606      	mov	r6, r0
 800cd30:	460f      	mov	r7, r1
 800cd32:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd36:	f7f3 fac7 	bl	80002c8 <__aeabi_dsub>
 800cd3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cd3e:	f7f3 fac5 	bl	80002cc <__adddf3>
 800cd42:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cd46:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800cd4a:	e9c5 6700 	strd	r6, r7, [r5]
 800cd4e:	e771      	b.n	800cc34 <__kernel_rem_pio2+0x504>
 800cd50:	ed34 7b02 	vldmdb	r4!, {d7}
 800cd54:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800cd58:	ec51 0b17 	vmov	r0, r1, d7
 800cd5c:	4652      	mov	r2, sl
 800cd5e:	465b      	mov	r3, fp
 800cd60:	ed8d 7b00 	vstr	d7, [sp]
 800cd64:	f7f3 fab2 	bl	80002cc <__adddf3>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	4606      	mov	r6, r0
 800cd6e:	460f      	mov	r7, r1
 800cd70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd74:	f7f3 faa8 	bl	80002c8 <__aeabi_dsub>
 800cd78:	4652      	mov	r2, sl
 800cd7a:	465b      	mov	r3, fp
 800cd7c:	f7f3 faa6 	bl	80002cc <__adddf3>
 800cd80:	3d01      	subs	r5, #1
 800cd82:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cd86:	e9c4 6700 	strd	r6, r7, [r4]
 800cd8a:	e757      	b.n	800cc3c <__kernel_rem_pio2+0x50c>
 800cd8c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cd90:	f7f3 fa9c 	bl	80002cc <__adddf3>
 800cd94:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800cd98:	e758      	b.n	800cc4c <__kernel_rem_pio2+0x51c>
 800cd9a:	bf00      	nop
 800cd9c:	f3af 8000 	nop.w
	...
 800cda8:	41700000 	.word	0x41700000
 800cdac:	3e700000 	.word	0x3e700000
 800cdb0:	9b04      	ldr	r3, [sp, #16]
 800cdb2:	9a04      	ldr	r2, [sp, #16]
 800cdb4:	601d      	str	r5, [r3, #0]
 800cdb6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800cdba:	605c      	str	r4, [r3, #4]
 800cdbc:	609f      	str	r7, [r3, #8]
 800cdbe:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800cdc2:	60d3      	str	r3, [r2, #12]
 800cdc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cdc8:	6110      	str	r0, [r2, #16]
 800cdca:	6153      	str	r3, [r2, #20]
 800cdcc:	e71d      	b.n	800cc0a <__kernel_rem_pio2+0x4da>
 800cdce:	bf00      	nop

0800cdd0 <scalbn>:
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	ec55 4b10 	vmov	r4, r5, d0
 800cdd6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cdda:	4606      	mov	r6, r0
 800cddc:	462b      	mov	r3, r5
 800cdde:	b991      	cbnz	r1, 800ce06 <scalbn+0x36>
 800cde0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800cde4:	4323      	orrs	r3, r4
 800cde6:	d03b      	beq.n	800ce60 <scalbn+0x90>
 800cde8:	4b33      	ldr	r3, [pc, #204]	@ (800ceb8 <scalbn+0xe8>)
 800cdea:	4620      	mov	r0, r4
 800cdec:	4629      	mov	r1, r5
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f7f3 fc22 	bl	8000638 <__aeabi_dmul>
 800cdf4:	4b31      	ldr	r3, [pc, #196]	@ (800cebc <scalbn+0xec>)
 800cdf6:	429e      	cmp	r6, r3
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	460d      	mov	r5, r1
 800cdfc:	da0f      	bge.n	800ce1e <scalbn+0x4e>
 800cdfe:	a326      	add	r3, pc, #152	@ (adr r3, 800ce98 <scalbn+0xc8>)
 800ce00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce04:	e01e      	b.n	800ce44 <scalbn+0x74>
 800ce06:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ce0a:	4291      	cmp	r1, r2
 800ce0c:	d10b      	bne.n	800ce26 <scalbn+0x56>
 800ce0e:	4622      	mov	r2, r4
 800ce10:	4620      	mov	r0, r4
 800ce12:	4629      	mov	r1, r5
 800ce14:	f7f3 fa5a 	bl	80002cc <__adddf3>
 800ce18:	4604      	mov	r4, r0
 800ce1a:	460d      	mov	r5, r1
 800ce1c:	e020      	b.n	800ce60 <scalbn+0x90>
 800ce1e:	460b      	mov	r3, r1
 800ce20:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ce24:	3936      	subs	r1, #54	@ 0x36
 800ce26:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ce2a:	4296      	cmp	r6, r2
 800ce2c:	dd0d      	ble.n	800ce4a <scalbn+0x7a>
 800ce2e:	2d00      	cmp	r5, #0
 800ce30:	a11b      	add	r1, pc, #108	@ (adr r1, 800cea0 <scalbn+0xd0>)
 800ce32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce36:	da02      	bge.n	800ce3e <scalbn+0x6e>
 800ce38:	a11b      	add	r1, pc, #108	@ (adr r1, 800cea8 <scalbn+0xd8>)
 800ce3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce3e:	a318      	add	r3, pc, #96	@ (adr r3, 800cea0 <scalbn+0xd0>)
 800ce40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce44:	f7f3 fbf8 	bl	8000638 <__aeabi_dmul>
 800ce48:	e7e6      	b.n	800ce18 <scalbn+0x48>
 800ce4a:	1872      	adds	r2, r6, r1
 800ce4c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ce50:	428a      	cmp	r2, r1
 800ce52:	dcec      	bgt.n	800ce2e <scalbn+0x5e>
 800ce54:	2a00      	cmp	r2, #0
 800ce56:	dd06      	ble.n	800ce66 <scalbn+0x96>
 800ce58:	f36f 531e 	bfc	r3, #20, #11
 800ce5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce60:	ec45 4b10 	vmov	d0, r4, r5
 800ce64:	bd70      	pop	{r4, r5, r6, pc}
 800ce66:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ce6a:	da08      	bge.n	800ce7e <scalbn+0xae>
 800ce6c:	2d00      	cmp	r5, #0
 800ce6e:	a10a      	add	r1, pc, #40	@ (adr r1, 800ce98 <scalbn+0xc8>)
 800ce70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce74:	dac3      	bge.n	800cdfe <scalbn+0x2e>
 800ce76:	a10e      	add	r1, pc, #56	@ (adr r1, 800ceb0 <scalbn+0xe0>)
 800ce78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce7c:	e7bf      	b.n	800cdfe <scalbn+0x2e>
 800ce7e:	3236      	adds	r2, #54	@ 0x36
 800ce80:	f36f 531e 	bfc	r3, #20, #11
 800ce84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce88:	4620      	mov	r0, r4
 800ce8a:	4b0d      	ldr	r3, [pc, #52]	@ (800cec0 <scalbn+0xf0>)
 800ce8c:	4629      	mov	r1, r5
 800ce8e:	2200      	movs	r2, #0
 800ce90:	e7d8      	b.n	800ce44 <scalbn+0x74>
 800ce92:	bf00      	nop
 800ce94:	f3af 8000 	nop.w
 800ce98:	c2f8f359 	.word	0xc2f8f359
 800ce9c:	01a56e1f 	.word	0x01a56e1f
 800cea0:	8800759c 	.word	0x8800759c
 800cea4:	7e37e43c 	.word	0x7e37e43c
 800cea8:	8800759c 	.word	0x8800759c
 800ceac:	fe37e43c 	.word	0xfe37e43c
 800ceb0:	c2f8f359 	.word	0xc2f8f359
 800ceb4:	81a56e1f 	.word	0x81a56e1f
 800ceb8:	43500000 	.word	0x43500000
 800cebc:	ffff3cb0 	.word	0xffff3cb0
 800cec0:	3c900000 	.word	0x3c900000
 800cec4:	00000000 	.word	0x00000000

0800cec8 <floor>:
 800cec8:	ec51 0b10 	vmov	r0, r1, d0
 800cecc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ced0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ced4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800ced8:	2e13      	cmp	r6, #19
 800ceda:	460c      	mov	r4, r1
 800cedc:	4605      	mov	r5, r0
 800cede:	4680      	mov	r8, r0
 800cee0:	dc34      	bgt.n	800cf4c <floor+0x84>
 800cee2:	2e00      	cmp	r6, #0
 800cee4:	da17      	bge.n	800cf16 <floor+0x4e>
 800cee6:	a332      	add	r3, pc, #200	@ (adr r3, 800cfb0 <floor+0xe8>)
 800cee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceec:	f7f3 f9ee 	bl	80002cc <__adddf3>
 800cef0:	2200      	movs	r2, #0
 800cef2:	2300      	movs	r3, #0
 800cef4:	f7f3 fe30 	bl	8000b58 <__aeabi_dcmpgt>
 800cef8:	b150      	cbz	r0, 800cf10 <floor+0x48>
 800cefa:	2c00      	cmp	r4, #0
 800cefc:	da55      	bge.n	800cfaa <floor+0xe2>
 800cefe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800cf02:	432c      	orrs	r4, r5
 800cf04:	2500      	movs	r5, #0
 800cf06:	42ac      	cmp	r4, r5
 800cf08:	4c2b      	ldr	r4, [pc, #172]	@ (800cfb8 <floor+0xf0>)
 800cf0a:	bf08      	it	eq
 800cf0c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800cf10:	4621      	mov	r1, r4
 800cf12:	4628      	mov	r0, r5
 800cf14:	e023      	b.n	800cf5e <floor+0x96>
 800cf16:	4f29      	ldr	r7, [pc, #164]	@ (800cfbc <floor+0xf4>)
 800cf18:	4137      	asrs	r7, r6
 800cf1a:	ea01 0307 	and.w	r3, r1, r7
 800cf1e:	4303      	orrs	r3, r0
 800cf20:	d01d      	beq.n	800cf5e <floor+0x96>
 800cf22:	a323      	add	r3, pc, #140	@ (adr r3, 800cfb0 <floor+0xe8>)
 800cf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf28:	f7f3 f9d0 	bl	80002cc <__adddf3>
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	2300      	movs	r3, #0
 800cf30:	f7f3 fe12 	bl	8000b58 <__aeabi_dcmpgt>
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d0eb      	beq.n	800cf10 <floor+0x48>
 800cf38:	2c00      	cmp	r4, #0
 800cf3a:	bfbe      	ittt	lt
 800cf3c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800cf40:	4133      	asrlt	r3, r6
 800cf42:	18e4      	addlt	r4, r4, r3
 800cf44:	ea24 0407 	bic.w	r4, r4, r7
 800cf48:	2500      	movs	r5, #0
 800cf4a:	e7e1      	b.n	800cf10 <floor+0x48>
 800cf4c:	2e33      	cmp	r6, #51	@ 0x33
 800cf4e:	dd0a      	ble.n	800cf66 <floor+0x9e>
 800cf50:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800cf54:	d103      	bne.n	800cf5e <floor+0x96>
 800cf56:	4602      	mov	r2, r0
 800cf58:	460b      	mov	r3, r1
 800cf5a:	f7f3 f9b7 	bl	80002cc <__adddf3>
 800cf5e:	ec41 0b10 	vmov	d0, r0, r1
 800cf62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf66:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800cf6a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cf6e:	40df      	lsrs	r7, r3
 800cf70:	4207      	tst	r7, r0
 800cf72:	d0f4      	beq.n	800cf5e <floor+0x96>
 800cf74:	a30e      	add	r3, pc, #56	@ (adr r3, 800cfb0 <floor+0xe8>)
 800cf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7a:	f7f3 f9a7 	bl	80002cc <__adddf3>
 800cf7e:	2200      	movs	r2, #0
 800cf80:	2300      	movs	r3, #0
 800cf82:	f7f3 fde9 	bl	8000b58 <__aeabi_dcmpgt>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	d0c2      	beq.n	800cf10 <floor+0x48>
 800cf8a:	2c00      	cmp	r4, #0
 800cf8c:	da0a      	bge.n	800cfa4 <floor+0xdc>
 800cf8e:	2e14      	cmp	r6, #20
 800cf90:	d101      	bne.n	800cf96 <floor+0xce>
 800cf92:	3401      	adds	r4, #1
 800cf94:	e006      	b.n	800cfa4 <floor+0xdc>
 800cf96:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	40b3      	lsls	r3, r6
 800cf9e:	441d      	add	r5, r3
 800cfa0:	4545      	cmp	r5, r8
 800cfa2:	d3f6      	bcc.n	800cf92 <floor+0xca>
 800cfa4:	ea25 0507 	bic.w	r5, r5, r7
 800cfa8:	e7b2      	b.n	800cf10 <floor+0x48>
 800cfaa:	2500      	movs	r5, #0
 800cfac:	462c      	mov	r4, r5
 800cfae:	e7af      	b.n	800cf10 <floor+0x48>
 800cfb0:	8800759c 	.word	0x8800759c
 800cfb4:	7e37e43c 	.word	0x7e37e43c
 800cfb8:	bff00000 	.word	0xbff00000
 800cfbc:	000fffff 	.word	0x000fffff

0800cfc0 <abort>:
 800cfc0:	b508      	push	{r3, lr}
 800cfc2:	2006      	movs	r0, #6
 800cfc4:	f000 feba 	bl	800dd3c <raise>
 800cfc8:	2001      	movs	r0, #1
 800cfca:	f7f7 fe8f 	bl	8004cec <_exit>
	...

0800cfd0 <malloc>:
 800cfd0:	4b02      	ldr	r3, [pc, #8]	@ (800cfdc <malloc+0xc>)
 800cfd2:	4601      	mov	r1, r0
 800cfd4:	6818      	ldr	r0, [r3, #0]
 800cfd6:	f000 b82d 	b.w	800d034 <_malloc_r>
 800cfda:	bf00      	nop
 800cfdc:	20000018 	.word	0x20000018

0800cfe0 <free>:
 800cfe0:	4b02      	ldr	r3, [pc, #8]	@ (800cfec <free+0xc>)
 800cfe2:	4601      	mov	r1, r0
 800cfe4:	6818      	ldr	r0, [r3, #0]
 800cfe6:	f001 bdff 	b.w	800ebe8 <_free_r>
 800cfea:	bf00      	nop
 800cfec:	20000018 	.word	0x20000018

0800cff0 <sbrk_aligned>:
 800cff0:	b570      	push	{r4, r5, r6, lr}
 800cff2:	4e0f      	ldr	r6, [pc, #60]	@ (800d030 <sbrk_aligned+0x40>)
 800cff4:	460c      	mov	r4, r1
 800cff6:	6831      	ldr	r1, [r6, #0]
 800cff8:	4605      	mov	r5, r0
 800cffa:	b911      	cbnz	r1, 800d002 <sbrk_aligned+0x12>
 800cffc:	f000 ff20 	bl	800de40 <_sbrk_r>
 800d000:	6030      	str	r0, [r6, #0]
 800d002:	4621      	mov	r1, r4
 800d004:	4628      	mov	r0, r5
 800d006:	f000 ff1b 	bl	800de40 <_sbrk_r>
 800d00a:	1c43      	adds	r3, r0, #1
 800d00c:	d103      	bne.n	800d016 <sbrk_aligned+0x26>
 800d00e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d012:	4620      	mov	r0, r4
 800d014:	bd70      	pop	{r4, r5, r6, pc}
 800d016:	1cc4      	adds	r4, r0, #3
 800d018:	f024 0403 	bic.w	r4, r4, #3
 800d01c:	42a0      	cmp	r0, r4
 800d01e:	d0f8      	beq.n	800d012 <sbrk_aligned+0x22>
 800d020:	1a21      	subs	r1, r4, r0
 800d022:	4628      	mov	r0, r5
 800d024:	f000 ff0c 	bl	800de40 <_sbrk_r>
 800d028:	3001      	adds	r0, #1
 800d02a:	d1f2      	bne.n	800d012 <sbrk_aligned+0x22>
 800d02c:	e7ef      	b.n	800d00e <sbrk_aligned+0x1e>
 800d02e:	bf00      	nop
 800d030:	200014e4 	.word	0x200014e4

0800d034 <_malloc_r>:
 800d034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d038:	1ccd      	adds	r5, r1, #3
 800d03a:	f025 0503 	bic.w	r5, r5, #3
 800d03e:	3508      	adds	r5, #8
 800d040:	2d0c      	cmp	r5, #12
 800d042:	bf38      	it	cc
 800d044:	250c      	movcc	r5, #12
 800d046:	2d00      	cmp	r5, #0
 800d048:	4606      	mov	r6, r0
 800d04a:	db01      	blt.n	800d050 <_malloc_r+0x1c>
 800d04c:	42a9      	cmp	r1, r5
 800d04e:	d904      	bls.n	800d05a <_malloc_r+0x26>
 800d050:	230c      	movs	r3, #12
 800d052:	6033      	str	r3, [r6, #0]
 800d054:	2000      	movs	r0, #0
 800d056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d05a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d130 <_malloc_r+0xfc>
 800d05e:	f000 f869 	bl	800d134 <__malloc_lock>
 800d062:	f8d8 3000 	ldr.w	r3, [r8]
 800d066:	461c      	mov	r4, r3
 800d068:	bb44      	cbnz	r4, 800d0bc <_malloc_r+0x88>
 800d06a:	4629      	mov	r1, r5
 800d06c:	4630      	mov	r0, r6
 800d06e:	f7ff ffbf 	bl	800cff0 <sbrk_aligned>
 800d072:	1c43      	adds	r3, r0, #1
 800d074:	4604      	mov	r4, r0
 800d076:	d158      	bne.n	800d12a <_malloc_r+0xf6>
 800d078:	f8d8 4000 	ldr.w	r4, [r8]
 800d07c:	4627      	mov	r7, r4
 800d07e:	2f00      	cmp	r7, #0
 800d080:	d143      	bne.n	800d10a <_malloc_r+0xd6>
 800d082:	2c00      	cmp	r4, #0
 800d084:	d04b      	beq.n	800d11e <_malloc_r+0xea>
 800d086:	6823      	ldr	r3, [r4, #0]
 800d088:	4639      	mov	r1, r7
 800d08a:	4630      	mov	r0, r6
 800d08c:	eb04 0903 	add.w	r9, r4, r3
 800d090:	f000 fed6 	bl	800de40 <_sbrk_r>
 800d094:	4581      	cmp	r9, r0
 800d096:	d142      	bne.n	800d11e <_malloc_r+0xea>
 800d098:	6821      	ldr	r1, [r4, #0]
 800d09a:	1a6d      	subs	r5, r5, r1
 800d09c:	4629      	mov	r1, r5
 800d09e:	4630      	mov	r0, r6
 800d0a0:	f7ff ffa6 	bl	800cff0 <sbrk_aligned>
 800d0a4:	3001      	adds	r0, #1
 800d0a6:	d03a      	beq.n	800d11e <_malloc_r+0xea>
 800d0a8:	6823      	ldr	r3, [r4, #0]
 800d0aa:	442b      	add	r3, r5
 800d0ac:	6023      	str	r3, [r4, #0]
 800d0ae:	f8d8 3000 	ldr.w	r3, [r8]
 800d0b2:	685a      	ldr	r2, [r3, #4]
 800d0b4:	bb62      	cbnz	r2, 800d110 <_malloc_r+0xdc>
 800d0b6:	f8c8 7000 	str.w	r7, [r8]
 800d0ba:	e00f      	b.n	800d0dc <_malloc_r+0xa8>
 800d0bc:	6822      	ldr	r2, [r4, #0]
 800d0be:	1b52      	subs	r2, r2, r5
 800d0c0:	d420      	bmi.n	800d104 <_malloc_r+0xd0>
 800d0c2:	2a0b      	cmp	r2, #11
 800d0c4:	d917      	bls.n	800d0f6 <_malloc_r+0xc2>
 800d0c6:	1961      	adds	r1, r4, r5
 800d0c8:	42a3      	cmp	r3, r4
 800d0ca:	6025      	str	r5, [r4, #0]
 800d0cc:	bf18      	it	ne
 800d0ce:	6059      	strne	r1, [r3, #4]
 800d0d0:	6863      	ldr	r3, [r4, #4]
 800d0d2:	bf08      	it	eq
 800d0d4:	f8c8 1000 	streq.w	r1, [r8]
 800d0d8:	5162      	str	r2, [r4, r5]
 800d0da:	604b      	str	r3, [r1, #4]
 800d0dc:	4630      	mov	r0, r6
 800d0de:	f000 f82f 	bl	800d140 <__malloc_unlock>
 800d0e2:	f104 000b 	add.w	r0, r4, #11
 800d0e6:	1d23      	adds	r3, r4, #4
 800d0e8:	f020 0007 	bic.w	r0, r0, #7
 800d0ec:	1ac2      	subs	r2, r0, r3
 800d0ee:	bf1c      	itt	ne
 800d0f0:	1a1b      	subne	r3, r3, r0
 800d0f2:	50a3      	strne	r3, [r4, r2]
 800d0f4:	e7af      	b.n	800d056 <_malloc_r+0x22>
 800d0f6:	6862      	ldr	r2, [r4, #4]
 800d0f8:	42a3      	cmp	r3, r4
 800d0fa:	bf0c      	ite	eq
 800d0fc:	f8c8 2000 	streq.w	r2, [r8]
 800d100:	605a      	strne	r2, [r3, #4]
 800d102:	e7eb      	b.n	800d0dc <_malloc_r+0xa8>
 800d104:	4623      	mov	r3, r4
 800d106:	6864      	ldr	r4, [r4, #4]
 800d108:	e7ae      	b.n	800d068 <_malloc_r+0x34>
 800d10a:	463c      	mov	r4, r7
 800d10c:	687f      	ldr	r7, [r7, #4]
 800d10e:	e7b6      	b.n	800d07e <_malloc_r+0x4a>
 800d110:	461a      	mov	r2, r3
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	42a3      	cmp	r3, r4
 800d116:	d1fb      	bne.n	800d110 <_malloc_r+0xdc>
 800d118:	2300      	movs	r3, #0
 800d11a:	6053      	str	r3, [r2, #4]
 800d11c:	e7de      	b.n	800d0dc <_malloc_r+0xa8>
 800d11e:	230c      	movs	r3, #12
 800d120:	6033      	str	r3, [r6, #0]
 800d122:	4630      	mov	r0, r6
 800d124:	f000 f80c 	bl	800d140 <__malloc_unlock>
 800d128:	e794      	b.n	800d054 <_malloc_r+0x20>
 800d12a:	6005      	str	r5, [r0, #0]
 800d12c:	e7d6      	b.n	800d0dc <_malloc_r+0xa8>
 800d12e:	bf00      	nop
 800d130:	200014e8 	.word	0x200014e8

0800d134 <__malloc_lock>:
 800d134:	4801      	ldr	r0, [pc, #4]	@ (800d13c <__malloc_lock+0x8>)
 800d136:	f000 bed0 	b.w	800deda <__retarget_lock_acquire_recursive>
 800d13a:	bf00      	nop
 800d13c:	2000162c 	.word	0x2000162c

0800d140 <__malloc_unlock>:
 800d140:	4801      	ldr	r0, [pc, #4]	@ (800d148 <__malloc_unlock+0x8>)
 800d142:	f000 becb 	b.w	800dedc <__retarget_lock_release_recursive>
 800d146:	bf00      	nop
 800d148:	2000162c 	.word	0x2000162c

0800d14c <srand>:
 800d14c:	b538      	push	{r3, r4, r5, lr}
 800d14e:	4b10      	ldr	r3, [pc, #64]	@ (800d190 <srand+0x44>)
 800d150:	681d      	ldr	r5, [r3, #0]
 800d152:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800d154:	4604      	mov	r4, r0
 800d156:	b9b3      	cbnz	r3, 800d186 <srand+0x3a>
 800d158:	2018      	movs	r0, #24
 800d15a:	f7ff ff39 	bl	800cfd0 <malloc>
 800d15e:	4602      	mov	r2, r0
 800d160:	6328      	str	r0, [r5, #48]	@ 0x30
 800d162:	b920      	cbnz	r0, 800d16e <srand+0x22>
 800d164:	4b0b      	ldr	r3, [pc, #44]	@ (800d194 <srand+0x48>)
 800d166:	480c      	ldr	r0, [pc, #48]	@ (800d198 <srand+0x4c>)
 800d168:	2146      	movs	r1, #70	@ 0x46
 800d16a:	f000 fec7 	bl	800defc <__assert_func>
 800d16e:	490b      	ldr	r1, [pc, #44]	@ (800d19c <srand+0x50>)
 800d170:	4b0b      	ldr	r3, [pc, #44]	@ (800d1a0 <srand+0x54>)
 800d172:	e9c0 1300 	strd	r1, r3, [r0]
 800d176:	4b0b      	ldr	r3, [pc, #44]	@ (800d1a4 <srand+0x58>)
 800d178:	6083      	str	r3, [r0, #8]
 800d17a:	230b      	movs	r3, #11
 800d17c:	8183      	strh	r3, [r0, #12]
 800d17e:	2100      	movs	r1, #0
 800d180:	2001      	movs	r0, #1
 800d182:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d186:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800d188:	2200      	movs	r2, #0
 800d18a:	611c      	str	r4, [r3, #16]
 800d18c:	615a      	str	r2, [r3, #20]
 800d18e:	bd38      	pop	{r3, r4, r5, pc}
 800d190:	20000018 	.word	0x20000018
 800d194:	08010ad0 	.word	0x08010ad0
 800d198:	08010ae7 	.word	0x08010ae7
 800d19c:	abcd330e 	.word	0xabcd330e
 800d1a0:	e66d1234 	.word	0xe66d1234
 800d1a4:	0005deec 	.word	0x0005deec

0800d1a8 <rand>:
 800d1a8:	4b16      	ldr	r3, [pc, #88]	@ (800d204 <rand+0x5c>)
 800d1aa:	b510      	push	{r4, lr}
 800d1ac:	681c      	ldr	r4, [r3, #0]
 800d1ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d1b0:	b9b3      	cbnz	r3, 800d1e0 <rand+0x38>
 800d1b2:	2018      	movs	r0, #24
 800d1b4:	f7ff ff0c 	bl	800cfd0 <malloc>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	6320      	str	r0, [r4, #48]	@ 0x30
 800d1bc:	b920      	cbnz	r0, 800d1c8 <rand+0x20>
 800d1be:	4b12      	ldr	r3, [pc, #72]	@ (800d208 <rand+0x60>)
 800d1c0:	4812      	ldr	r0, [pc, #72]	@ (800d20c <rand+0x64>)
 800d1c2:	2152      	movs	r1, #82	@ 0x52
 800d1c4:	f000 fe9a 	bl	800defc <__assert_func>
 800d1c8:	4911      	ldr	r1, [pc, #68]	@ (800d210 <rand+0x68>)
 800d1ca:	4b12      	ldr	r3, [pc, #72]	@ (800d214 <rand+0x6c>)
 800d1cc:	e9c0 1300 	strd	r1, r3, [r0]
 800d1d0:	4b11      	ldr	r3, [pc, #68]	@ (800d218 <rand+0x70>)
 800d1d2:	6083      	str	r3, [r0, #8]
 800d1d4:	230b      	movs	r3, #11
 800d1d6:	8183      	strh	r3, [r0, #12]
 800d1d8:	2100      	movs	r1, #0
 800d1da:	2001      	movs	r0, #1
 800d1dc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d1e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d1e2:	480e      	ldr	r0, [pc, #56]	@ (800d21c <rand+0x74>)
 800d1e4:	690b      	ldr	r3, [r1, #16]
 800d1e6:	694c      	ldr	r4, [r1, #20]
 800d1e8:	4a0d      	ldr	r2, [pc, #52]	@ (800d220 <rand+0x78>)
 800d1ea:	4358      	muls	r0, r3
 800d1ec:	fb02 0004 	mla	r0, r2, r4, r0
 800d1f0:	fba3 3202 	umull	r3, r2, r3, r2
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	eb40 0002 	adc.w	r0, r0, r2
 800d1fa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800d1fe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d202:	bd10      	pop	{r4, pc}
 800d204:	20000018 	.word	0x20000018
 800d208:	08010ad0 	.word	0x08010ad0
 800d20c:	08010ae7 	.word	0x08010ae7
 800d210:	abcd330e 	.word	0xabcd330e
 800d214:	e66d1234 	.word	0xe66d1234
 800d218:	0005deec 	.word	0x0005deec
 800d21c:	5851f42d 	.word	0x5851f42d
 800d220:	4c957f2d 	.word	0x4c957f2d

0800d224 <__cvt>:
 800d224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d228:	ec57 6b10 	vmov	r6, r7, d0
 800d22c:	2f00      	cmp	r7, #0
 800d22e:	460c      	mov	r4, r1
 800d230:	4619      	mov	r1, r3
 800d232:	463b      	mov	r3, r7
 800d234:	bfbb      	ittet	lt
 800d236:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d23a:	461f      	movlt	r7, r3
 800d23c:	2300      	movge	r3, #0
 800d23e:	232d      	movlt	r3, #45	@ 0x2d
 800d240:	700b      	strb	r3, [r1, #0]
 800d242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d244:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d248:	4691      	mov	r9, r2
 800d24a:	f023 0820 	bic.w	r8, r3, #32
 800d24e:	bfbc      	itt	lt
 800d250:	4632      	movlt	r2, r6
 800d252:	4616      	movlt	r6, r2
 800d254:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d258:	d005      	beq.n	800d266 <__cvt+0x42>
 800d25a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d25e:	d100      	bne.n	800d262 <__cvt+0x3e>
 800d260:	3401      	adds	r4, #1
 800d262:	2102      	movs	r1, #2
 800d264:	e000      	b.n	800d268 <__cvt+0x44>
 800d266:	2103      	movs	r1, #3
 800d268:	ab03      	add	r3, sp, #12
 800d26a:	9301      	str	r3, [sp, #4]
 800d26c:	ab02      	add	r3, sp, #8
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	ec47 6b10 	vmov	d0, r6, r7
 800d274:	4653      	mov	r3, sl
 800d276:	4622      	mov	r2, r4
 800d278:	f000 fee6 	bl	800e048 <_dtoa_r>
 800d27c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d280:	4605      	mov	r5, r0
 800d282:	d119      	bne.n	800d2b8 <__cvt+0x94>
 800d284:	f019 0f01 	tst.w	r9, #1
 800d288:	d00e      	beq.n	800d2a8 <__cvt+0x84>
 800d28a:	eb00 0904 	add.w	r9, r0, r4
 800d28e:	2200      	movs	r2, #0
 800d290:	2300      	movs	r3, #0
 800d292:	4630      	mov	r0, r6
 800d294:	4639      	mov	r1, r7
 800d296:	f7f3 fc37 	bl	8000b08 <__aeabi_dcmpeq>
 800d29a:	b108      	cbz	r0, 800d2a0 <__cvt+0x7c>
 800d29c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d2a0:	2230      	movs	r2, #48	@ 0x30
 800d2a2:	9b03      	ldr	r3, [sp, #12]
 800d2a4:	454b      	cmp	r3, r9
 800d2a6:	d31e      	bcc.n	800d2e6 <__cvt+0xc2>
 800d2a8:	9b03      	ldr	r3, [sp, #12]
 800d2aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2ac:	1b5b      	subs	r3, r3, r5
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	6013      	str	r3, [r2, #0]
 800d2b2:	b004      	add	sp, #16
 800d2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d2bc:	eb00 0904 	add.w	r9, r0, r4
 800d2c0:	d1e5      	bne.n	800d28e <__cvt+0x6a>
 800d2c2:	7803      	ldrb	r3, [r0, #0]
 800d2c4:	2b30      	cmp	r3, #48	@ 0x30
 800d2c6:	d10a      	bne.n	800d2de <__cvt+0xba>
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	4630      	mov	r0, r6
 800d2ce:	4639      	mov	r1, r7
 800d2d0:	f7f3 fc1a 	bl	8000b08 <__aeabi_dcmpeq>
 800d2d4:	b918      	cbnz	r0, 800d2de <__cvt+0xba>
 800d2d6:	f1c4 0401 	rsb	r4, r4, #1
 800d2da:	f8ca 4000 	str.w	r4, [sl]
 800d2de:	f8da 3000 	ldr.w	r3, [sl]
 800d2e2:	4499      	add	r9, r3
 800d2e4:	e7d3      	b.n	800d28e <__cvt+0x6a>
 800d2e6:	1c59      	adds	r1, r3, #1
 800d2e8:	9103      	str	r1, [sp, #12]
 800d2ea:	701a      	strb	r2, [r3, #0]
 800d2ec:	e7d9      	b.n	800d2a2 <__cvt+0x7e>

0800d2ee <__exponent>:
 800d2ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2f0:	2900      	cmp	r1, #0
 800d2f2:	bfba      	itte	lt
 800d2f4:	4249      	neglt	r1, r1
 800d2f6:	232d      	movlt	r3, #45	@ 0x2d
 800d2f8:	232b      	movge	r3, #43	@ 0x2b
 800d2fa:	2909      	cmp	r1, #9
 800d2fc:	7002      	strb	r2, [r0, #0]
 800d2fe:	7043      	strb	r3, [r0, #1]
 800d300:	dd29      	ble.n	800d356 <__exponent+0x68>
 800d302:	f10d 0307 	add.w	r3, sp, #7
 800d306:	461d      	mov	r5, r3
 800d308:	270a      	movs	r7, #10
 800d30a:	461a      	mov	r2, r3
 800d30c:	fbb1 f6f7 	udiv	r6, r1, r7
 800d310:	fb07 1416 	mls	r4, r7, r6, r1
 800d314:	3430      	adds	r4, #48	@ 0x30
 800d316:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d31a:	460c      	mov	r4, r1
 800d31c:	2c63      	cmp	r4, #99	@ 0x63
 800d31e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d322:	4631      	mov	r1, r6
 800d324:	dcf1      	bgt.n	800d30a <__exponent+0x1c>
 800d326:	3130      	adds	r1, #48	@ 0x30
 800d328:	1e94      	subs	r4, r2, #2
 800d32a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d32e:	1c41      	adds	r1, r0, #1
 800d330:	4623      	mov	r3, r4
 800d332:	42ab      	cmp	r3, r5
 800d334:	d30a      	bcc.n	800d34c <__exponent+0x5e>
 800d336:	f10d 0309 	add.w	r3, sp, #9
 800d33a:	1a9b      	subs	r3, r3, r2
 800d33c:	42ac      	cmp	r4, r5
 800d33e:	bf88      	it	hi
 800d340:	2300      	movhi	r3, #0
 800d342:	3302      	adds	r3, #2
 800d344:	4403      	add	r3, r0
 800d346:	1a18      	subs	r0, r3, r0
 800d348:	b003      	add	sp, #12
 800d34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d34c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d350:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d354:	e7ed      	b.n	800d332 <__exponent+0x44>
 800d356:	2330      	movs	r3, #48	@ 0x30
 800d358:	3130      	adds	r1, #48	@ 0x30
 800d35a:	7083      	strb	r3, [r0, #2]
 800d35c:	70c1      	strb	r1, [r0, #3]
 800d35e:	1d03      	adds	r3, r0, #4
 800d360:	e7f1      	b.n	800d346 <__exponent+0x58>
	...

0800d364 <_printf_float>:
 800d364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d368:	b08d      	sub	sp, #52	@ 0x34
 800d36a:	460c      	mov	r4, r1
 800d36c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d370:	4616      	mov	r6, r2
 800d372:	461f      	mov	r7, r3
 800d374:	4605      	mov	r5, r0
 800d376:	f000 fd05 	bl	800dd84 <_localeconv_r>
 800d37a:	6803      	ldr	r3, [r0, #0]
 800d37c:	9304      	str	r3, [sp, #16]
 800d37e:	4618      	mov	r0, r3
 800d380:	f7f2 ff96 	bl	80002b0 <strlen>
 800d384:	2300      	movs	r3, #0
 800d386:	930a      	str	r3, [sp, #40]	@ 0x28
 800d388:	f8d8 3000 	ldr.w	r3, [r8]
 800d38c:	9005      	str	r0, [sp, #20]
 800d38e:	3307      	adds	r3, #7
 800d390:	f023 0307 	bic.w	r3, r3, #7
 800d394:	f103 0208 	add.w	r2, r3, #8
 800d398:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d39c:	f8d4 b000 	ldr.w	fp, [r4]
 800d3a0:	f8c8 2000 	str.w	r2, [r8]
 800d3a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d3a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d3ac:	9307      	str	r3, [sp, #28]
 800d3ae:	f8cd 8018 	str.w	r8, [sp, #24]
 800d3b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d3b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d3ba:	4b9c      	ldr	r3, [pc, #624]	@ (800d62c <_printf_float+0x2c8>)
 800d3bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d3c0:	f7f3 fbd4 	bl	8000b6c <__aeabi_dcmpun>
 800d3c4:	bb70      	cbnz	r0, 800d424 <_printf_float+0xc0>
 800d3c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d3ca:	4b98      	ldr	r3, [pc, #608]	@ (800d62c <_printf_float+0x2c8>)
 800d3cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d3d0:	f7f3 fbae 	bl	8000b30 <__aeabi_dcmple>
 800d3d4:	bb30      	cbnz	r0, 800d424 <_printf_float+0xc0>
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	2300      	movs	r3, #0
 800d3da:	4640      	mov	r0, r8
 800d3dc:	4649      	mov	r1, r9
 800d3de:	f7f3 fb9d 	bl	8000b1c <__aeabi_dcmplt>
 800d3e2:	b110      	cbz	r0, 800d3ea <_printf_float+0x86>
 800d3e4:	232d      	movs	r3, #45	@ 0x2d
 800d3e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3ea:	4a91      	ldr	r2, [pc, #580]	@ (800d630 <_printf_float+0x2cc>)
 800d3ec:	4b91      	ldr	r3, [pc, #580]	@ (800d634 <_printf_float+0x2d0>)
 800d3ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d3f2:	bf8c      	ite	hi
 800d3f4:	4690      	movhi	r8, r2
 800d3f6:	4698      	movls	r8, r3
 800d3f8:	2303      	movs	r3, #3
 800d3fa:	6123      	str	r3, [r4, #16]
 800d3fc:	f02b 0304 	bic.w	r3, fp, #4
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	f04f 0900 	mov.w	r9, #0
 800d406:	9700      	str	r7, [sp, #0]
 800d408:	4633      	mov	r3, r6
 800d40a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d40c:	4621      	mov	r1, r4
 800d40e:	4628      	mov	r0, r5
 800d410:	f000 f9d2 	bl	800d7b8 <_printf_common>
 800d414:	3001      	adds	r0, #1
 800d416:	f040 808d 	bne.w	800d534 <_printf_float+0x1d0>
 800d41a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d41e:	b00d      	add	sp, #52	@ 0x34
 800d420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d424:	4642      	mov	r2, r8
 800d426:	464b      	mov	r3, r9
 800d428:	4640      	mov	r0, r8
 800d42a:	4649      	mov	r1, r9
 800d42c:	f7f3 fb9e 	bl	8000b6c <__aeabi_dcmpun>
 800d430:	b140      	cbz	r0, 800d444 <_printf_float+0xe0>
 800d432:	464b      	mov	r3, r9
 800d434:	2b00      	cmp	r3, #0
 800d436:	bfbc      	itt	lt
 800d438:	232d      	movlt	r3, #45	@ 0x2d
 800d43a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d43e:	4a7e      	ldr	r2, [pc, #504]	@ (800d638 <_printf_float+0x2d4>)
 800d440:	4b7e      	ldr	r3, [pc, #504]	@ (800d63c <_printf_float+0x2d8>)
 800d442:	e7d4      	b.n	800d3ee <_printf_float+0x8a>
 800d444:	6863      	ldr	r3, [r4, #4]
 800d446:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d44a:	9206      	str	r2, [sp, #24]
 800d44c:	1c5a      	adds	r2, r3, #1
 800d44e:	d13b      	bne.n	800d4c8 <_printf_float+0x164>
 800d450:	2306      	movs	r3, #6
 800d452:	6063      	str	r3, [r4, #4]
 800d454:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d458:	2300      	movs	r3, #0
 800d45a:	6022      	str	r2, [r4, #0]
 800d45c:	9303      	str	r3, [sp, #12]
 800d45e:	ab0a      	add	r3, sp, #40	@ 0x28
 800d460:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d464:	ab09      	add	r3, sp, #36	@ 0x24
 800d466:	9300      	str	r3, [sp, #0]
 800d468:	6861      	ldr	r1, [r4, #4]
 800d46a:	ec49 8b10 	vmov	d0, r8, r9
 800d46e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d472:	4628      	mov	r0, r5
 800d474:	f7ff fed6 	bl	800d224 <__cvt>
 800d478:	9b06      	ldr	r3, [sp, #24]
 800d47a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d47c:	2b47      	cmp	r3, #71	@ 0x47
 800d47e:	4680      	mov	r8, r0
 800d480:	d129      	bne.n	800d4d6 <_printf_float+0x172>
 800d482:	1cc8      	adds	r0, r1, #3
 800d484:	db02      	blt.n	800d48c <_printf_float+0x128>
 800d486:	6863      	ldr	r3, [r4, #4]
 800d488:	4299      	cmp	r1, r3
 800d48a:	dd41      	ble.n	800d510 <_printf_float+0x1ac>
 800d48c:	f1aa 0a02 	sub.w	sl, sl, #2
 800d490:	fa5f fa8a 	uxtb.w	sl, sl
 800d494:	3901      	subs	r1, #1
 800d496:	4652      	mov	r2, sl
 800d498:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d49c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d49e:	f7ff ff26 	bl	800d2ee <__exponent>
 800d4a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4a4:	1813      	adds	r3, r2, r0
 800d4a6:	2a01      	cmp	r2, #1
 800d4a8:	4681      	mov	r9, r0
 800d4aa:	6123      	str	r3, [r4, #16]
 800d4ac:	dc02      	bgt.n	800d4b4 <_printf_float+0x150>
 800d4ae:	6822      	ldr	r2, [r4, #0]
 800d4b0:	07d2      	lsls	r2, r2, #31
 800d4b2:	d501      	bpl.n	800d4b8 <_printf_float+0x154>
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	6123      	str	r3, [r4, #16]
 800d4b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d0a2      	beq.n	800d406 <_printf_float+0xa2>
 800d4c0:	232d      	movs	r3, #45	@ 0x2d
 800d4c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d4c6:	e79e      	b.n	800d406 <_printf_float+0xa2>
 800d4c8:	9a06      	ldr	r2, [sp, #24]
 800d4ca:	2a47      	cmp	r2, #71	@ 0x47
 800d4cc:	d1c2      	bne.n	800d454 <_printf_float+0xf0>
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d1c0      	bne.n	800d454 <_printf_float+0xf0>
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	e7bd      	b.n	800d452 <_printf_float+0xee>
 800d4d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d4da:	d9db      	bls.n	800d494 <_printf_float+0x130>
 800d4dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d4e0:	d118      	bne.n	800d514 <_printf_float+0x1b0>
 800d4e2:	2900      	cmp	r1, #0
 800d4e4:	6863      	ldr	r3, [r4, #4]
 800d4e6:	dd0b      	ble.n	800d500 <_printf_float+0x19c>
 800d4e8:	6121      	str	r1, [r4, #16]
 800d4ea:	b913      	cbnz	r3, 800d4f2 <_printf_float+0x18e>
 800d4ec:	6822      	ldr	r2, [r4, #0]
 800d4ee:	07d0      	lsls	r0, r2, #31
 800d4f0:	d502      	bpl.n	800d4f8 <_printf_float+0x194>
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	440b      	add	r3, r1
 800d4f6:	6123      	str	r3, [r4, #16]
 800d4f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d4fa:	f04f 0900 	mov.w	r9, #0
 800d4fe:	e7db      	b.n	800d4b8 <_printf_float+0x154>
 800d500:	b913      	cbnz	r3, 800d508 <_printf_float+0x1a4>
 800d502:	6822      	ldr	r2, [r4, #0]
 800d504:	07d2      	lsls	r2, r2, #31
 800d506:	d501      	bpl.n	800d50c <_printf_float+0x1a8>
 800d508:	3302      	adds	r3, #2
 800d50a:	e7f4      	b.n	800d4f6 <_printf_float+0x192>
 800d50c:	2301      	movs	r3, #1
 800d50e:	e7f2      	b.n	800d4f6 <_printf_float+0x192>
 800d510:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d516:	4299      	cmp	r1, r3
 800d518:	db05      	blt.n	800d526 <_printf_float+0x1c2>
 800d51a:	6823      	ldr	r3, [r4, #0]
 800d51c:	6121      	str	r1, [r4, #16]
 800d51e:	07d8      	lsls	r0, r3, #31
 800d520:	d5ea      	bpl.n	800d4f8 <_printf_float+0x194>
 800d522:	1c4b      	adds	r3, r1, #1
 800d524:	e7e7      	b.n	800d4f6 <_printf_float+0x192>
 800d526:	2900      	cmp	r1, #0
 800d528:	bfd4      	ite	le
 800d52a:	f1c1 0202 	rsble	r2, r1, #2
 800d52e:	2201      	movgt	r2, #1
 800d530:	4413      	add	r3, r2
 800d532:	e7e0      	b.n	800d4f6 <_printf_float+0x192>
 800d534:	6823      	ldr	r3, [r4, #0]
 800d536:	055a      	lsls	r2, r3, #21
 800d538:	d407      	bmi.n	800d54a <_printf_float+0x1e6>
 800d53a:	6923      	ldr	r3, [r4, #16]
 800d53c:	4642      	mov	r2, r8
 800d53e:	4631      	mov	r1, r6
 800d540:	4628      	mov	r0, r5
 800d542:	47b8      	blx	r7
 800d544:	3001      	adds	r0, #1
 800d546:	d12b      	bne.n	800d5a0 <_printf_float+0x23c>
 800d548:	e767      	b.n	800d41a <_printf_float+0xb6>
 800d54a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d54e:	f240 80dd 	bls.w	800d70c <_printf_float+0x3a8>
 800d552:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d556:	2200      	movs	r2, #0
 800d558:	2300      	movs	r3, #0
 800d55a:	f7f3 fad5 	bl	8000b08 <__aeabi_dcmpeq>
 800d55e:	2800      	cmp	r0, #0
 800d560:	d033      	beq.n	800d5ca <_printf_float+0x266>
 800d562:	4a37      	ldr	r2, [pc, #220]	@ (800d640 <_printf_float+0x2dc>)
 800d564:	2301      	movs	r3, #1
 800d566:	4631      	mov	r1, r6
 800d568:	4628      	mov	r0, r5
 800d56a:	47b8      	blx	r7
 800d56c:	3001      	adds	r0, #1
 800d56e:	f43f af54 	beq.w	800d41a <_printf_float+0xb6>
 800d572:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d576:	4543      	cmp	r3, r8
 800d578:	db02      	blt.n	800d580 <_printf_float+0x21c>
 800d57a:	6823      	ldr	r3, [r4, #0]
 800d57c:	07d8      	lsls	r0, r3, #31
 800d57e:	d50f      	bpl.n	800d5a0 <_printf_float+0x23c>
 800d580:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d584:	4631      	mov	r1, r6
 800d586:	4628      	mov	r0, r5
 800d588:	47b8      	blx	r7
 800d58a:	3001      	adds	r0, #1
 800d58c:	f43f af45 	beq.w	800d41a <_printf_float+0xb6>
 800d590:	f04f 0900 	mov.w	r9, #0
 800d594:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d598:	f104 0a1a 	add.w	sl, r4, #26
 800d59c:	45c8      	cmp	r8, r9
 800d59e:	dc09      	bgt.n	800d5b4 <_printf_float+0x250>
 800d5a0:	6823      	ldr	r3, [r4, #0]
 800d5a2:	079b      	lsls	r3, r3, #30
 800d5a4:	f100 8103 	bmi.w	800d7ae <_printf_float+0x44a>
 800d5a8:	68e0      	ldr	r0, [r4, #12]
 800d5aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5ac:	4298      	cmp	r0, r3
 800d5ae:	bfb8      	it	lt
 800d5b0:	4618      	movlt	r0, r3
 800d5b2:	e734      	b.n	800d41e <_printf_float+0xba>
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	4652      	mov	r2, sl
 800d5b8:	4631      	mov	r1, r6
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	47b8      	blx	r7
 800d5be:	3001      	adds	r0, #1
 800d5c0:	f43f af2b 	beq.w	800d41a <_printf_float+0xb6>
 800d5c4:	f109 0901 	add.w	r9, r9, #1
 800d5c8:	e7e8      	b.n	800d59c <_printf_float+0x238>
 800d5ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	dc39      	bgt.n	800d644 <_printf_float+0x2e0>
 800d5d0:	4a1b      	ldr	r2, [pc, #108]	@ (800d640 <_printf_float+0x2dc>)
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	4631      	mov	r1, r6
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	47b8      	blx	r7
 800d5da:	3001      	adds	r0, #1
 800d5dc:	f43f af1d 	beq.w	800d41a <_printf_float+0xb6>
 800d5e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d5e4:	ea59 0303 	orrs.w	r3, r9, r3
 800d5e8:	d102      	bne.n	800d5f0 <_printf_float+0x28c>
 800d5ea:	6823      	ldr	r3, [r4, #0]
 800d5ec:	07d9      	lsls	r1, r3, #31
 800d5ee:	d5d7      	bpl.n	800d5a0 <_printf_float+0x23c>
 800d5f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5f4:	4631      	mov	r1, r6
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	47b8      	blx	r7
 800d5fa:	3001      	adds	r0, #1
 800d5fc:	f43f af0d 	beq.w	800d41a <_printf_float+0xb6>
 800d600:	f04f 0a00 	mov.w	sl, #0
 800d604:	f104 0b1a 	add.w	fp, r4, #26
 800d608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d60a:	425b      	negs	r3, r3
 800d60c:	4553      	cmp	r3, sl
 800d60e:	dc01      	bgt.n	800d614 <_printf_float+0x2b0>
 800d610:	464b      	mov	r3, r9
 800d612:	e793      	b.n	800d53c <_printf_float+0x1d8>
 800d614:	2301      	movs	r3, #1
 800d616:	465a      	mov	r2, fp
 800d618:	4631      	mov	r1, r6
 800d61a:	4628      	mov	r0, r5
 800d61c:	47b8      	blx	r7
 800d61e:	3001      	adds	r0, #1
 800d620:	f43f aefb 	beq.w	800d41a <_printf_float+0xb6>
 800d624:	f10a 0a01 	add.w	sl, sl, #1
 800d628:	e7ee      	b.n	800d608 <_printf_float+0x2a4>
 800d62a:	bf00      	nop
 800d62c:	7fefffff 	.word	0x7fefffff
 800d630:	08010b43 	.word	0x08010b43
 800d634:	08010b3f 	.word	0x08010b3f
 800d638:	08010b4b 	.word	0x08010b4b
 800d63c:	08010b47 	.word	0x08010b47
 800d640:	08010b4f 	.word	0x08010b4f
 800d644:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d646:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d64a:	4553      	cmp	r3, sl
 800d64c:	bfa8      	it	ge
 800d64e:	4653      	movge	r3, sl
 800d650:	2b00      	cmp	r3, #0
 800d652:	4699      	mov	r9, r3
 800d654:	dc36      	bgt.n	800d6c4 <_printf_float+0x360>
 800d656:	f04f 0b00 	mov.w	fp, #0
 800d65a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d65e:	f104 021a 	add.w	r2, r4, #26
 800d662:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d664:	9306      	str	r3, [sp, #24]
 800d666:	eba3 0309 	sub.w	r3, r3, r9
 800d66a:	455b      	cmp	r3, fp
 800d66c:	dc31      	bgt.n	800d6d2 <_printf_float+0x36e>
 800d66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d670:	459a      	cmp	sl, r3
 800d672:	dc3a      	bgt.n	800d6ea <_printf_float+0x386>
 800d674:	6823      	ldr	r3, [r4, #0]
 800d676:	07da      	lsls	r2, r3, #31
 800d678:	d437      	bmi.n	800d6ea <_printf_float+0x386>
 800d67a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d67c:	ebaa 0903 	sub.w	r9, sl, r3
 800d680:	9b06      	ldr	r3, [sp, #24]
 800d682:	ebaa 0303 	sub.w	r3, sl, r3
 800d686:	4599      	cmp	r9, r3
 800d688:	bfa8      	it	ge
 800d68a:	4699      	movge	r9, r3
 800d68c:	f1b9 0f00 	cmp.w	r9, #0
 800d690:	dc33      	bgt.n	800d6fa <_printf_float+0x396>
 800d692:	f04f 0800 	mov.w	r8, #0
 800d696:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d69a:	f104 0b1a 	add.w	fp, r4, #26
 800d69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6a0:	ebaa 0303 	sub.w	r3, sl, r3
 800d6a4:	eba3 0309 	sub.w	r3, r3, r9
 800d6a8:	4543      	cmp	r3, r8
 800d6aa:	f77f af79 	ble.w	800d5a0 <_printf_float+0x23c>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	465a      	mov	r2, fp
 800d6b2:	4631      	mov	r1, r6
 800d6b4:	4628      	mov	r0, r5
 800d6b6:	47b8      	blx	r7
 800d6b8:	3001      	adds	r0, #1
 800d6ba:	f43f aeae 	beq.w	800d41a <_printf_float+0xb6>
 800d6be:	f108 0801 	add.w	r8, r8, #1
 800d6c2:	e7ec      	b.n	800d69e <_printf_float+0x33a>
 800d6c4:	4642      	mov	r2, r8
 800d6c6:	4631      	mov	r1, r6
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	47b8      	blx	r7
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	d1c2      	bne.n	800d656 <_printf_float+0x2f2>
 800d6d0:	e6a3      	b.n	800d41a <_printf_float+0xb6>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	4631      	mov	r1, r6
 800d6d6:	4628      	mov	r0, r5
 800d6d8:	9206      	str	r2, [sp, #24]
 800d6da:	47b8      	blx	r7
 800d6dc:	3001      	adds	r0, #1
 800d6de:	f43f ae9c 	beq.w	800d41a <_printf_float+0xb6>
 800d6e2:	9a06      	ldr	r2, [sp, #24]
 800d6e4:	f10b 0b01 	add.w	fp, fp, #1
 800d6e8:	e7bb      	b.n	800d662 <_printf_float+0x2fe>
 800d6ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6ee:	4631      	mov	r1, r6
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	47b8      	blx	r7
 800d6f4:	3001      	adds	r0, #1
 800d6f6:	d1c0      	bne.n	800d67a <_printf_float+0x316>
 800d6f8:	e68f      	b.n	800d41a <_printf_float+0xb6>
 800d6fa:	9a06      	ldr	r2, [sp, #24]
 800d6fc:	464b      	mov	r3, r9
 800d6fe:	4442      	add	r2, r8
 800d700:	4631      	mov	r1, r6
 800d702:	4628      	mov	r0, r5
 800d704:	47b8      	blx	r7
 800d706:	3001      	adds	r0, #1
 800d708:	d1c3      	bne.n	800d692 <_printf_float+0x32e>
 800d70a:	e686      	b.n	800d41a <_printf_float+0xb6>
 800d70c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d710:	f1ba 0f01 	cmp.w	sl, #1
 800d714:	dc01      	bgt.n	800d71a <_printf_float+0x3b6>
 800d716:	07db      	lsls	r3, r3, #31
 800d718:	d536      	bpl.n	800d788 <_printf_float+0x424>
 800d71a:	2301      	movs	r3, #1
 800d71c:	4642      	mov	r2, r8
 800d71e:	4631      	mov	r1, r6
 800d720:	4628      	mov	r0, r5
 800d722:	47b8      	blx	r7
 800d724:	3001      	adds	r0, #1
 800d726:	f43f ae78 	beq.w	800d41a <_printf_float+0xb6>
 800d72a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d72e:	4631      	mov	r1, r6
 800d730:	4628      	mov	r0, r5
 800d732:	47b8      	blx	r7
 800d734:	3001      	adds	r0, #1
 800d736:	f43f ae70 	beq.w	800d41a <_printf_float+0xb6>
 800d73a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d73e:	2200      	movs	r2, #0
 800d740:	2300      	movs	r3, #0
 800d742:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d746:	f7f3 f9df 	bl	8000b08 <__aeabi_dcmpeq>
 800d74a:	b9c0      	cbnz	r0, 800d77e <_printf_float+0x41a>
 800d74c:	4653      	mov	r3, sl
 800d74e:	f108 0201 	add.w	r2, r8, #1
 800d752:	4631      	mov	r1, r6
 800d754:	4628      	mov	r0, r5
 800d756:	47b8      	blx	r7
 800d758:	3001      	adds	r0, #1
 800d75a:	d10c      	bne.n	800d776 <_printf_float+0x412>
 800d75c:	e65d      	b.n	800d41a <_printf_float+0xb6>
 800d75e:	2301      	movs	r3, #1
 800d760:	465a      	mov	r2, fp
 800d762:	4631      	mov	r1, r6
 800d764:	4628      	mov	r0, r5
 800d766:	47b8      	blx	r7
 800d768:	3001      	adds	r0, #1
 800d76a:	f43f ae56 	beq.w	800d41a <_printf_float+0xb6>
 800d76e:	f108 0801 	add.w	r8, r8, #1
 800d772:	45d0      	cmp	r8, sl
 800d774:	dbf3      	blt.n	800d75e <_printf_float+0x3fa>
 800d776:	464b      	mov	r3, r9
 800d778:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d77c:	e6df      	b.n	800d53e <_printf_float+0x1da>
 800d77e:	f04f 0800 	mov.w	r8, #0
 800d782:	f104 0b1a 	add.w	fp, r4, #26
 800d786:	e7f4      	b.n	800d772 <_printf_float+0x40e>
 800d788:	2301      	movs	r3, #1
 800d78a:	4642      	mov	r2, r8
 800d78c:	e7e1      	b.n	800d752 <_printf_float+0x3ee>
 800d78e:	2301      	movs	r3, #1
 800d790:	464a      	mov	r2, r9
 800d792:	4631      	mov	r1, r6
 800d794:	4628      	mov	r0, r5
 800d796:	47b8      	blx	r7
 800d798:	3001      	adds	r0, #1
 800d79a:	f43f ae3e 	beq.w	800d41a <_printf_float+0xb6>
 800d79e:	f108 0801 	add.w	r8, r8, #1
 800d7a2:	68e3      	ldr	r3, [r4, #12]
 800d7a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d7a6:	1a5b      	subs	r3, r3, r1
 800d7a8:	4543      	cmp	r3, r8
 800d7aa:	dcf0      	bgt.n	800d78e <_printf_float+0x42a>
 800d7ac:	e6fc      	b.n	800d5a8 <_printf_float+0x244>
 800d7ae:	f04f 0800 	mov.w	r8, #0
 800d7b2:	f104 0919 	add.w	r9, r4, #25
 800d7b6:	e7f4      	b.n	800d7a2 <_printf_float+0x43e>

0800d7b8 <_printf_common>:
 800d7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7bc:	4616      	mov	r6, r2
 800d7be:	4698      	mov	r8, r3
 800d7c0:	688a      	ldr	r2, [r1, #8]
 800d7c2:	690b      	ldr	r3, [r1, #16]
 800d7c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	bfb8      	it	lt
 800d7cc:	4613      	movlt	r3, r2
 800d7ce:	6033      	str	r3, [r6, #0]
 800d7d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d7d4:	4607      	mov	r7, r0
 800d7d6:	460c      	mov	r4, r1
 800d7d8:	b10a      	cbz	r2, 800d7de <_printf_common+0x26>
 800d7da:	3301      	adds	r3, #1
 800d7dc:	6033      	str	r3, [r6, #0]
 800d7de:	6823      	ldr	r3, [r4, #0]
 800d7e0:	0699      	lsls	r1, r3, #26
 800d7e2:	bf42      	ittt	mi
 800d7e4:	6833      	ldrmi	r3, [r6, #0]
 800d7e6:	3302      	addmi	r3, #2
 800d7e8:	6033      	strmi	r3, [r6, #0]
 800d7ea:	6825      	ldr	r5, [r4, #0]
 800d7ec:	f015 0506 	ands.w	r5, r5, #6
 800d7f0:	d106      	bne.n	800d800 <_printf_common+0x48>
 800d7f2:	f104 0a19 	add.w	sl, r4, #25
 800d7f6:	68e3      	ldr	r3, [r4, #12]
 800d7f8:	6832      	ldr	r2, [r6, #0]
 800d7fa:	1a9b      	subs	r3, r3, r2
 800d7fc:	42ab      	cmp	r3, r5
 800d7fe:	dc26      	bgt.n	800d84e <_printf_common+0x96>
 800d800:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d804:	6822      	ldr	r2, [r4, #0]
 800d806:	3b00      	subs	r3, #0
 800d808:	bf18      	it	ne
 800d80a:	2301      	movne	r3, #1
 800d80c:	0692      	lsls	r2, r2, #26
 800d80e:	d42b      	bmi.n	800d868 <_printf_common+0xb0>
 800d810:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d814:	4641      	mov	r1, r8
 800d816:	4638      	mov	r0, r7
 800d818:	47c8      	blx	r9
 800d81a:	3001      	adds	r0, #1
 800d81c:	d01e      	beq.n	800d85c <_printf_common+0xa4>
 800d81e:	6823      	ldr	r3, [r4, #0]
 800d820:	6922      	ldr	r2, [r4, #16]
 800d822:	f003 0306 	and.w	r3, r3, #6
 800d826:	2b04      	cmp	r3, #4
 800d828:	bf02      	ittt	eq
 800d82a:	68e5      	ldreq	r5, [r4, #12]
 800d82c:	6833      	ldreq	r3, [r6, #0]
 800d82e:	1aed      	subeq	r5, r5, r3
 800d830:	68a3      	ldr	r3, [r4, #8]
 800d832:	bf0c      	ite	eq
 800d834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d838:	2500      	movne	r5, #0
 800d83a:	4293      	cmp	r3, r2
 800d83c:	bfc4      	itt	gt
 800d83e:	1a9b      	subgt	r3, r3, r2
 800d840:	18ed      	addgt	r5, r5, r3
 800d842:	2600      	movs	r6, #0
 800d844:	341a      	adds	r4, #26
 800d846:	42b5      	cmp	r5, r6
 800d848:	d11a      	bne.n	800d880 <_printf_common+0xc8>
 800d84a:	2000      	movs	r0, #0
 800d84c:	e008      	b.n	800d860 <_printf_common+0xa8>
 800d84e:	2301      	movs	r3, #1
 800d850:	4652      	mov	r2, sl
 800d852:	4641      	mov	r1, r8
 800d854:	4638      	mov	r0, r7
 800d856:	47c8      	blx	r9
 800d858:	3001      	adds	r0, #1
 800d85a:	d103      	bne.n	800d864 <_printf_common+0xac>
 800d85c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d864:	3501      	adds	r5, #1
 800d866:	e7c6      	b.n	800d7f6 <_printf_common+0x3e>
 800d868:	18e1      	adds	r1, r4, r3
 800d86a:	1c5a      	adds	r2, r3, #1
 800d86c:	2030      	movs	r0, #48	@ 0x30
 800d86e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d872:	4422      	add	r2, r4
 800d874:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d878:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d87c:	3302      	adds	r3, #2
 800d87e:	e7c7      	b.n	800d810 <_printf_common+0x58>
 800d880:	2301      	movs	r3, #1
 800d882:	4622      	mov	r2, r4
 800d884:	4641      	mov	r1, r8
 800d886:	4638      	mov	r0, r7
 800d888:	47c8      	blx	r9
 800d88a:	3001      	adds	r0, #1
 800d88c:	d0e6      	beq.n	800d85c <_printf_common+0xa4>
 800d88e:	3601      	adds	r6, #1
 800d890:	e7d9      	b.n	800d846 <_printf_common+0x8e>
	...

0800d894 <_printf_i>:
 800d894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d898:	7e0f      	ldrb	r7, [r1, #24]
 800d89a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d89c:	2f78      	cmp	r7, #120	@ 0x78
 800d89e:	4691      	mov	r9, r2
 800d8a0:	4680      	mov	r8, r0
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	469a      	mov	sl, r3
 800d8a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d8aa:	d807      	bhi.n	800d8bc <_printf_i+0x28>
 800d8ac:	2f62      	cmp	r7, #98	@ 0x62
 800d8ae:	d80a      	bhi.n	800d8c6 <_printf_i+0x32>
 800d8b0:	2f00      	cmp	r7, #0
 800d8b2:	f000 80d1 	beq.w	800da58 <_printf_i+0x1c4>
 800d8b6:	2f58      	cmp	r7, #88	@ 0x58
 800d8b8:	f000 80b8 	beq.w	800da2c <_printf_i+0x198>
 800d8bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d8c4:	e03a      	b.n	800d93c <_printf_i+0xa8>
 800d8c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d8ca:	2b15      	cmp	r3, #21
 800d8cc:	d8f6      	bhi.n	800d8bc <_printf_i+0x28>
 800d8ce:	a101      	add	r1, pc, #4	@ (adr r1, 800d8d4 <_printf_i+0x40>)
 800d8d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8d4:	0800d92d 	.word	0x0800d92d
 800d8d8:	0800d941 	.word	0x0800d941
 800d8dc:	0800d8bd 	.word	0x0800d8bd
 800d8e0:	0800d8bd 	.word	0x0800d8bd
 800d8e4:	0800d8bd 	.word	0x0800d8bd
 800d8e8:	0800d8bd 	.word	0x0800d8bd
 800d8ec:	0800d941 	.word	0x0800d941
 800d8f0:	0800d8bd 	.word	0x0800d8bd
 800d8f4:	0800d8bd 	.word	0x0800d8bd
 800d8f8:	0800d8bd 	.word	0x0800d8bd
 800d8fc:	0800d8bd 	.word	0x0800d8bd
 800d900:	0800da3f 	.word	0x0800da3f
 800d904:	0800d96b 	.word	0x0800d96b
 800d908:	0800d9f9 	.word	0x0800d9f9
 800d90c:	0800d8bd 	.word	0x0800d8bd
 800d910:	0800d8bd 	.word	0x0800d8bd
 800d914:	0800da61 	.word	0x0800da61
 800d918:	0800d8bd 	.word	0x0800d8bd
 800d91c:	0800d96b 	.word	0x0800d96b
 800d920:	0800d8bd 	.word	0x0800d8bd
 800d924:	0800d8bd 	.word	0x0800d8bd
 800d928:	0800da01 	.word	0x0800da01
 800d92c:	6833      	ldr	r3, [r6, #0]
 800d92e:	1d1a      	adds	r2, r3, #4
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	6032      	str	r2, [r6, #0]
 800d934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d938:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d93c:	2301      	movs	r3, #1
 800d93e:	e09c      	b.n	800da7a <_printf_i+0x1e6>
 800d940:	6833      	ldr	r3, [r6, #0]
 800d942:	6820      	ldr	r0, [r4, #0]
 800d944:	1d19      	adds	r1, r3, #4
 800d946:	6031      	str	r1, [r6, #0]
 800d948:	0606      	lsls	r6, r0, #24
 800d94a:	d501      	bpl.n	800d950 <_printf_i+0xbc>
 800d94c:	681d      	ldr	r5, [r3, #0]
 800d94e:	e003      	b.n	800d958 <_printf_i+0xc4>
 800d950:	0645      	lsls	r5, r0, #25
 800d952:	d5fb      	bpl.n	800d94c <_printf_i+0xb8>
 800d954:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d958:	2d00      	cmp	r5, #0
 800d95a:	da03      	bge.n	800d964 <_printf_i+0xd0>
 800d95c:	232d      	movs	r3, #45	@ 0x2d
 800d95e:	426d      	negs	r5, r5
 800d960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d964:	4858      	ldr	r0, [pc, #352]	@ (800dac8 <_printf_i+0x234>)
 800d966:	230a      	movs	r3, #10
 800d968:	e011      	b.n	800d98e <_printf_i+0xfa>
 800d96a:	6821      	ldr	r1, [r4, #0]
 800d96c:	6833      	ldr	r3, [r6, #0]
 800d96e:	0608      	lsls	r0, r1, #24
 800d970:	f853 5b04 	ldr.w	r5, [r3], #4
 800d974:	d402      	bmi.n	800d97c <_printf_i+0xe8>
 800d976:	0649      	lsls	r1, r1, #25
 800d978:	bf48      	it	mi
 800d97a:	b2ad      	uxthmi	r5, r5
 800d97c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d97e:	4852      	ldr	r0, [pc, #328]	@ (800dac8 <_printf_i+0x234>)
 800d980:	6033      	str	r3, [r6, #0]
 800d982:	bf14      	ite	ne
 800d984:	230a      	movne	r3, #10
 800d986:	2308      	moveq	r3, #8
 800d988:	2100      	movs	r1, #0
 800d98a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d98e:	6866      	ldr	r6, [r4, #4]
 800d990:	60a6      	str	r6, [r4, #8]
 800d992:	2e00      	cmp	r6, #0
 800d994:	db05      	blt.n	800d9a2 <_printf_i+0x10e>
 800d996:	6821      	ldr	r1, [r4, #0]
 800d998:	432e      	orrs	r6, r5
 800d99a:	f021 0104 	bic.w	r1, r1, #4
 800d99e:	6021      	str	r1, [r4, #0]
 800d9a0:	d04b      	beq.n	800da3a <_printf_i+0x1a6>
 800d9a2:	4616      	mov	r6, r2
 800d9a4:	fbb5 f1f3 	udiv	r1, r5, r3
 800d9a8:	fb03 5711 	mls	r7, r3, r1, r5
 800d9ac:	5dc7      	ldrb	r7, [r0, r7]
 800d9ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d9b2:	462f      	mov	r7, r5
 800d9b4:	42bb      	cmp	r3, r7
 800d9b6:	460d      	mov	r5, r1
 800d9b8:	d9f4      	bls.n	800d9a4 <_printf_i+0x110>
 800d9ba:	2b08      	cmp	r3, #8
 800d9bc:	d10b      	bne.n	800d9d6 <_printf_i+0x142>
 800d9be:	6823      	ldr	r3, [r4, #0]
 800d9c0:	07df      	lsls	r7, r3, #31
 800d9c2:	d508      	bpl.n	800d9d6 <_printf_i+0x142>
 800d9c4:	6923      	ldr	r3, [r4, #16]
 800d9c6:	6861      	ldr	r1, [r4, #4]
 800d9c8:	4299      	cmp	r1, r3
 800d9ca:	bfde      	ittt	le
 800d9cc:	2330      	movle	r3, #48	@ 0x30
 800d9ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d9d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d9d6:	1b92      	subs	r2, r2, r6
 800d9d8:	6122      	str	r2, [r4, #16]
 800d9da:	f8cd a000 	str.w	sl, [sp]
 800d9de:	464b      	mov	r3, r9
 800d9e0:	aa03      	add	r2, sp, #12
 800d9e2:	4621      	mov	r1, r4
 800d9e4:	4640      	mov	r0, r8
 800d9e6:	f7ff fee7 	bl	800d7b8 <_printf_common>
 800d9ea:	3001      	adds	r0, #1
 800d9ec:	d14a      	bne.n	800da84 <_printf_i+0x1f0>
 800d9ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9f2:	b004      	add	sp, #16
 800d9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9f8:	6823      	ldr	r3, [r4, #0]
 800d9fa:	f043 0320 	orr.w	r3, r3, #32
 800d9fe:	6023      	str	r3, [r4, #0]
 800da00:	4832      	ldr	r0, [pc, #200]	@ (800dacc <_printf_i+0x238>)
 800da02:	2778      	movs	r7, #120	@ 0x78
 800da04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da08:	6823      	ldr	r3, [r4, #0]
 800da0a:	6831      	ldr	r1, [r6, #0]
 800da0c:	061f      	lsls	r7, r3, #24
 800da0e:	f851 5b04 	ldr.w	r5, [r1], #4
 800da12:	d402      	bmi.n	800da1a <_printf_i+0x186>
 800da14:	065f      	lsls	r7, r3, #25
 800da16:	bf48      	it	mi
 800da18:	b2ad      	uxthmi	r5, r5
 800da1a:	6031      	str	r1, [r6, #0]
 800da1c:	07d9      	lsls	r1, r3, #31
 800da1e:	bf44      	itt	mi
 800da20:	f043 0320 	orrmi.w	r3, r3, #32
 800da24:	6023      	strmi	r3, [r4, #0]
 800da26:	b11d      	cbz	r5, 800da30 <_printf_i+0x19c>
 800da28:	2310      	movs	r3, #16
 800da2a:	e7ad      	b.n	800d988 <_printf_i+0xf4>
 800da2c:	4826      	ldr	r0, [pc, #152]	@ (800dac8 <_printf_i+0x234>)
 800da2e:	e7e9      	b.n	800da04 <_printf_i+0x170>
 800da30:	6823      	ldr	r3, [r4, #0]
 800da32:	f023 0320 	bic.w	r3, r3, #32
 800da36:	6023      	str	r3, [r4, #0]
 800da38:	e7f6      	b.n	800da28 <_printf_i+0x194>
 800da3a:	4616      	mov	r6, r2
 800da3c:	e7bd      	b.n	800d9ba <_printf_i+0x126>
 800da3e:	6833      	ldr	r3, [r6, #0]
 800da40:	6825      	ldr	r5, [r4, #0]
 800da42:	6961      	ldr	r1, [r4, #20]
 800da44:	1d18      	adds	r0, r3, #4
 800da46:	6030      	str	r0, [r6, #0]
 800da48:	062e      	lsls	r6, r5, #24
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	d501      	bpl.n	800da52 <_printf_i+0x1be>
 800da4e:	6019      	str	r1, [r3, #0]
 800da50:	e002      	b.n	800da58 <_printf_i+0x1c4>
 800da52:	0668      	lsls	r0, r5, #25
 800da54:	d5fb      	bpl.n	800da4e <_printf_i+0x1ba>
 800da56:	8019      	strh	r1, [r3, #0]
 800da58:	2300      	movs	r3, #0
 800da5a:	6123      	str	r3, [r4, #16]
 800da5c:	4616      	mov	r6, r2
 800da5e:	e7bc      	b.n	800d9da <_printf_i+0x146>
 800da60:	6833      	ldr	r3, [r6, #0]
 800da62:	1d1a      	adds	r2, r3, #4
 800da64:	6032      	str	r2, [r6, #0]
 800da66:	681e      	ldr	r6, [r3, #0]
 800da68:	6862      	ldr	r2, [r4, #4]
 800da6a:	2100      	movs	r1, #0
 800da6c:	4630      	mov	r0, r6
 800da6e:	f7f2 fbcf 	bl	8000210 <memchr>
 800da72:	b108      	cbz	r0, 800da78 <_printf_i+0x1e4>
 800da74:	1b80      	subs	r0, r0, r6
 800da76:	6060      	str	r0, [r4, #4]
 800da78:	6863      	ldr	r3, [r4, #4]
 800da7a:	6123      	str	r3, [r4, #16]
 800da7c:	2300      	movs	r3, #0
 800da7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da82:	e7aa      	b.n	800d9da <_printf_i+0x146>
 800da84:	6923      	ldr	r3, [r4, #16]
 800da86:	4632      	mov	r2, r6
 800da88:	4649      	mov	r1, r9
 800da8a:	4640      	mov	r0, r8
 800da8c:	47d0      	blx	sl
 800da8e:	3001      	adds	r0, #1
 800da90:	d0ad      	beq.n	800d9ee <_printf_i+0x15a>
 800da92:	6823      	ldr	r3, [r4, #0]
 800da94:	079b      	lsls	r3, r3, #30
 800da96:	d413      	bmi.n	800dac0 <_printf_i+0x22c>
 800da98:	68e0      	ldr	r0, [r4, #12]
 800da9a:	9b03      	ldr	r3, [sp, #12]
 800da9c:	4298      	cmp	r0, r3
 800da9e:	bfb8      	it	lt
 800daa0:	4618      	movlt	r0, r3
 800daa2:	e7a6      	b.n	800d9f2 <_printf_i+0x15e>
 800daa4:	2301      	movs	r3, #1
 800daa6:	4632      	mov	r2, r6
 800daa8:	4649      	mov	r1, r9
 800daaa:	4640      	mov	r0, r8
 800daac:	47d0      	blx	sl
 800daae:	3001      	adds	r0, #1
 800dab0:	d09d      	beq.n	800d9ee <_printf_i+0x15a>
 800dab2:	3501      	adds	r5, #1
 800dab4:	68e3      	ldr	r3, [r4, #12]
 800dab6:	9903      	ldr	r1, [sp, #12]
 800dab8:	1a5b      	subs	r3, r3, r1
 800daba:	42ab      	cmp	r3, r5
 800dabc:	dcf2      	bgt.n	800daa4 <_printf_i+0x210>
 800dabe:	e7eb      	b.n	800da98 <_printf_i+0x204>
 800dac0:	2500      	movs	r5, #0
 800dac2:	f104 0619 	add.w	r6, r4, #25
 800dac6:	e7f5      	b.n	800dab4 <_printf_i+0x220>
 800dac8:	08010b51 	.word	0x08010b51
 800dacc:	08010b62 	.word	0x08010b62

0800dad0 <std>:
 800dad0:	2300      	movs	r3, #0
 800dad2:	b510      	push	{r4, lr}
 800dad4:	4604      	mov	r4, r0
 800dad6:	e9c0 3300 	strd	r3, r3, [r0]
 800dada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dade:	6083      	str	r3, [r0, #8]
 800dae0:	8181      	strh	r1, [r0, #12]
 800dae2:	6643      	str	r3, [r0, #100]	@ 0x64
 800dae4:	81c2      	strh	r2, [r0, #14]
 800dae6:	6183      	str	r3, [r0, #24]
 800dae8:	4619      	mov	r1, r3
 800daea:	2208      	movs	r2, #8
 800daec:	305c      	adds	r0, #92	@ 0x5c
 800daee:	f000 f8f4 	bl	800dcda <memset>
 800daf2:	4b0d      	ldr	r3, [pc, #52]	@ (800db28 <std+0x58>)
 800daf4:	6263      	str	r3, [r4, #36]	@ 0x24
 800daf6:	4b0d      	ldr	r3, [pc, #52]	@ (800db2c <std+0x5c>)
 800daf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dafa:	4b0d      	ldr	r3, [pc, #52]	@ (800db30 <std+0x60>)
 800dafc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dafe:	4b0d      	ldr	r3, [pc, #52]	@ (800db34 <std+0x64>)
 800db00:	6323      	str	r3, [r4, #48]	@ 0x30
 800db02:	4b0d      	ldr	r3, [pc, #52]	@ (800db38 <std+0x68>)
 800db04:	6224      	str	r4, [r4, #32]
 800db06:	429c      	cmp	r4, r3
 800db08:	d006      	beq.n	800db18 <std+0x48>
 800db0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800db0e:	4294      	cmp	r4, r2
 800db10:	d002      	beq.n	800db18 <std+0x48>
 800db12:	33d0      	adds	r3, #208	@ 0xd0
 800db14:	429c      	cmp	r4, r3
 800db16:	d105      	bne.n	800db24 <std+0x54>
 800db18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800db1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db20:	f000 b9da 	b.w	800ded8 <__retarget_lock_init_recursive>
 800db24:	bd10      	pop	{r4, pc}
 800db26:	bf00      	nop
 800db28:	0800dc55 	.word	0x0800dc55
 800db2c:	0800dc77 	.word	0x0800dc77
 800db30:	0800dcaf 	.word	0x0800dcaf
 800db34:	0800dcd3 	.word	0x0800dcd3
 800db38:	200014ec 	.word	0x200014ec

0800db3c <stdio_exit_handler>:
 800db3c:	4a02      	ldr	r2, [pc, #8]	@ (800db48 <stdio_exit_handler+0xc>)
 800db3e:	4903      	ldr	r1, [pc, #12]	@ (800db4c <stdio_exit_handler+0x10>)
 800db40:	4803      	ldr	r0, [pc, #12]	@ (800db50 <stdio_exit_handler+0x14>)
 800db42:	f000 b869 	b.w	800dc18 <_fwalk_sglue>
 800db46:	bf00      	nop
 800db48:	2000000c 	.word	0x2000000c
 800db4c:	0800f479 	.word	0x0800f479
 800db50:	2000001c 	.word	0x2000001c

0800db54 <cleanup_stdio>:
 800db54:	6841      	ldr	r1, [r0, #4]
 800db56:	4b0c      	ldr	r3, [pc, #48]	@ (800db88 <cleanup_stdio+0x34>)
 800db58:	4299      	cmp	r1, r3
 800db5a:	b510      	push	{r4, lr}
 800db5c:	4604      	mov	r4, r0
 800db5e:	d001      	beq.n	800db64 <cleanup_stdio+0x10>
 800db60:	f001 fc8a 	bl	800f478 <_fflush_r>
 800db64:	68a1      	ldr	r1, [r4, #8]
 800db66:	4b09      	ldr	r3, [pc, #36]	@ (800db8c <cleanup_stdio+0x38>)
 800db68:	4299      	cmp	r1, r3
 800db6a:	d002      	beq.n	800db72 <cleanup_stdio+0x1e>
 800db6c:	4620      	mov	r0, r4
 800db6e:	f001 fc83 	bl	800f478 <_fflush_r>
 800db72:	68e1      	ldr	r1, [r4, #12]
 800db74:	4b06      	ldr	r3, [pc, #24]	@ (800db90 <cleanup_stdio+0x3c>)
 800db76:	4299      	cmp	r1, r3
 800db78:	d004      	beq.n	800db84 <cleanup_stdio+0x30>
 800db7a:	4620      	mov	r0, r4
 800db7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db80:	f001 bc7a 	b.w	800f478 <_fflush_r>
 800db84:	bd10      	pop	{r4, pc}
 800db86:	bf00      	nop
 800db88:	200014ec 	.word	0x200014ec
 800db8c:	20001554 	.word	0x20001554
 800db90:	200015bc 	.word	0x200015bc

0800db94 <global_stdio_init.part.0>:
 800db94:	b510      	push	{r4, lr}
 800db96:	4b0b      	ldr	r3, [pc, #44]	@ (800dbc4 <global_stdio_init.part.0+0x30>)
 800db98:	4c0b      	ldr	r4, [pc, #44]	@ (800dbc8 <global_stdio_init.part.0+0x34>)
 800db9a:	4a0c      	ldr	r2, [pc, #48]	@ (800dbcc <global_stdio_init.part.0+0x38>)
 800db9c:	601a      	str	r2, [r3, #0]
 800db9e:	4620      	mov	r0, r4
 800dba0:	2200      	movs	r2, #0
 800dba2:	2104      	movs	r1, #4
 800dba4:	f7ff ff94 	bl	800dad0 <std>
 800dba8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dbac:	2201      	movs	r2, #1
 800dbae:	2109      	movs	r1, #9
 800dbb0:	f7ff ff8e 	bl	800dad0 <std>
 800dbb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dbb8:	2202      	movs	r2, #2
 800dbba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbbe:	2112      	movs	r1, #18
 800dbc0:	f7ff bf86 	b.w	800dad0 <std>
 800dbc4:	20001624 	.word	0x20001624
 800dbc8:	200014ec 	.word	0x200014ec
 800dbcc:	0800db3d 	.word	0x0800db3d

0800dbd0 <__sfp_lock_acquire>:
 800dbd0:	4801      	ldr	r0, [pc, #4]	@ (800dbd8 <__sfp_lock_acquire+0x8>)
 800dbd2:	f000 b982 	b.w	800deda <__retarget_lock_acquire_recursive>
 800dbd6:	bf00      	nop
 800dbd8:	2000162d 	.word	0x2000162d

0800dbdc <__sfp_lock_release>:
 800dbdc:	4801      	ldr	r0, [pc, #4]	@ (800dbe4 <__sfp_lock_release+0x8>)
 800dbde:	f000 b97d 	b.w	800dedc <__retarget_lock_release_recursive>
 800dbe2:	bf00      	nop
 800dbe4:	2000162d 	.word	0x2000162d

0800dbe8 <__sinit>:
 800dbe8:	b510      	push	{r4, lr}
 800dbea:	4604      	mov	r4, r0
 800dbec:	f7ff fff0 	bl	800dbd0 <__sfp_lock_acquire>
 800dbf0:	6a23      	ldr	r3, [r4, #32]
 800dbf2:	b11b      	cbz	r3, 800dbfc <__sinit+0x14>
 800dbf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbf8:	f7ff bff0 	b.w	800dbdc <__sfp_lock_release>
 800dbfc:	4b04      	ldr	r3, [pc, #16]	@ (800dc10 <__sinit+0x28>)
 800dbfe:	6223      	str	r3, [r4, #32]
 800dc00:	4b04      	ldr	r3, [pc, #16]	@ (800dc14 <__sinit+0x2c>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d1f5      	bne.n	800dbf4 <__sinit+0xc>
 800dc08:	f7ff ffc4 	bl	800db94 <global_stdio_init.part.0>
 800dc0c:	e7f2      	b.n	800dbf4 <__sinit+0xc>
 800dc0e:	bf00      	nop
 800dc10:	0800db55 	.word	0x0800db55
 800dc14:	20001624 	.word	0x20001624

0800dc18 <_fwalk_sglue>:
 800dc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc1c:	4607      	mov	r7, r0
 800dc1e:	4688      	mov	r8, r1
 800dc20:	4614      	mov	r4, r2
 800dc22:	2600      	movs	r6, #0
 800dc24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc28:	f1b9 0901 	subs.w	r9, r9, #1
 800dc2c:	d505      	bpl.n	800dc3a <_fwalk_sglue+0x22>
 800dc2e:	6824      	ldr	r4, [r4, #0]
 800dc30:	2c00      	cmp	r4, #0
 800dc32:	d1f7      	bne.n	800dc24 <_fwalk_sglue+0xc>
 800dc34:	4630      	mov	r0, r6
 800dc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc3a:	89ab      	ldrh	r3, [r5, #12]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d907      	bls.n	800dc50 <_fwalk_sglue+0x38>
 800dc40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc44:	3301      	adds	r3, #1
 800dc46:	d003      	beq.n	800dc50 <_fwalk_sglue+0x38>
 800dc48:	4629      	mov	r1, r5
 800dc4a:	4638      	mov	r0, r7
 800dc4c:	47c0      	blx	r8
 800dc4e:	4306      	orrs	r6, r0
 800dc50:	3568      	adds	r5, #104	@ 0x68
 800dc52:	e7e9      	b.n	800dc28 <_fwalk_sglue+0x10>

0800dc54 <__sread>:
 800dc54:	b510      	push	{r4, lr}
 800dc56:	460c      	mov	r4, r1
 800dc58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc5c:	f000 f8ca 	bl	800ddf4 <_read_r>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	bfab      	itete	ge
 800dc64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dc66:	89a3      	ldrhlt	r3, [r4, #12]
 800dc68:	181b      	addge	r3, r3, r0
 800dc6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dc6e:	bfac      	ite	ge
 800dc70:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dc72:	81a3      	strhlt	r3, [r4, #12]
 800dc74:	bd10      	pop	{r4, pc}

0800dc76 <__swrite>:
 800dc76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc7a:	461f      	mov	r7, r3
 800dc7c:	898b      	ldrh	r3, [r1, #12]
 800dc7e:	05db      	lsls	r3, r3, #23
 800dc80:	4605      	mov	r5, r0
 800dc82:	460c      	mov	r4, r1
 800dc84:	4616      	mov	r6, r2
 800dc86:	d505      	bpl.n	800dc94 <__swrite+0x1e>
 800dc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc8c:	2302      	movs	r3, #2
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f000 f89e 	bl	800ddd0 <_lseek_r>
 800dc94:	89a3      	ldrh	r3, [r4, #12]
 800dc96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dc9e:	81a3      	strh	r3, [r4, #12]
 800dca0:	4632      	mov	r2, r6
 800dca2:	463b      	mov	r3, r7
 800dca4:	4628      	mov	r0, r5
 800dca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcaa:	f000 b8d9 	b.w	800de60 <_write_r>

0800dcae <__sseek>:
 800dcae:	b510      	push	{r4, lr}
 800dcb0:	460c      	mov	r4, r1
 800dcb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcb6:	f000 f88b 	bl	800ddd0 <_lseek_r>
 800dcba:	1c43      	adds	r3, r0, #1
 800dcbc:	89a3      	ldrh	r3, [r4, #12]
 800dcbe:	bf15      	itete	ne
 800dcc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dcc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dcc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dcca:	81a3      	strheq	r3, [r4, #12]
 800dccc:	bf18      	it	ne
 800dcce:	81a3      	strhne	r3, [r4, #12]
 800dcd0:	bd10      	pop	{r4, pc}

0800dcd2 <__sclose>:
 800dcd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcd6:	f000 b859 	b.w	800dd8c <_close_r>

0800dcda <memset>:
 800dcda:	4402      	add	r2, r0
 800dcdc:	4603      	mov	r3, r0
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d100      	bne.n	800dce4 <memset+0xa>
 800dce2:	4770      	bx	lr
 800dce4:	f803 1b01 	strb.w	r1, [r3], #1
 800dce8:	e7f9      	b.n	800dcde <memset+0x4>

0800dcea <_raise_r>:
 800dcea:	291f      	cmp	r1, #31
 800dcec:	b538      	push	{r3, r4, r5, lr}
 800dcee:	4605      	mov	r5, r0
 800dcf0:	460c      	mov	r4, r1
 800dcf2:	d904      	bls.n	800dcfe <_raise_r+0x14>
 800dcf4:	2316      	movs	r3, #22
 800dcf6:	6003      	str	r3, [r0, #0]
 800dcf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dcfc:	bd38      	pop	{r3, r4, r5, pc}
 800dcfe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dd00:	b112      	cbz	r2, 800dd08 <_raise_r+0x1e>
 800dd02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd06:	b94b      	cbnz	r3, 800dd1c <_raise_r+0x32>
 800dd08:	4628      	mov	r0, r5
 800dd0a:	f000 f897 	bl	800de3c <_getpid_r>
 800dd0e:	4622      	mov	r2, r4
 800dd10:	4601      	mov	r1, r0
 800dd12:	4628      	mov	r0, r5
 800dd14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd18:	f000 b87e 	b.w	800de18 <_kill_r>
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d00a      	beq.n	800dd36 <_raise_r+0x4c>
 800dd20:	1c59      	adds	r1, r3, #1
 800dd22:	d103      	bne.n	800dd2c <_raise_r+0x42>
 800dd24:	2316      	movs	r3, #22
 800dd26:	6003      	str	r3, [r0, #0]
 800dd28:	2001      	movs	r0, #1
 800dd2a:	e7e7      	b.n	800dcfc <_raise_r+0x12>
 800dd2c:	2100      	movs	r1, #0
 800dd2e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dd32:	4620      	mov	r0, r4
 800dd34:	4798      	blx	r3
 800dd36:	2000      	movs	r0, #0
 800dd38:	e7e0      	b.n	800dcfc <_raise_r+0x12>
	...

0800dd3c <raise>:
 800dd3c:	4b02      	ldr	r3, [pc, #8]	@ (800dd48 <raise+0xc>)
 800dd3e:	4601      	mov	r1, r0
 800dd40:	6818      	ldr	r0, [r3, #0]
 800dd42:	f7ff bfd2 	b.w	800dcea <_raise_r>
 800dd46:	bf00      	nop
 800dd48:	20000018 	.word	0x20000018

0800dd4c <time>:
 800dd4c:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 800dd4e:	4b0c      	ldr	r3, [pc, #48]	@ (800dd80 <time+0x34>)
 800dd50:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800dd54:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800dd58:	4669      	mov	r1, sp
 800dd5a:	4604      	mov	r4, r0
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	6818      	ldr	r0, [r3, #0]
 800dd60:	e9cd 6700 	strd	r6, r7, [sp]
 800dd64:	f000 f822 	bl	800ddac <_gettimeofday_r>
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	bfb8      	it	lt
 800dd6c:	e9cd 6700 	strdlt	r6, r7, [sp]
 800dd70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd74:	b10c      	cbz	r4, 800dd7a <time+0x2e>
 800dd76:	e9c4 0100 	strd	r0, r1, [r4]
 800dd7a:	b004      	add	sp, #16
 800dd7c:	bdd0      	pop	{r4, r6, r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	20000018 	.word	0x20000018

0800dd84 <_localeconv_r>:
 800dd84:	4800      	ldr	r0, [pc, #0]	@ (800dd88 <_localeconv_r+0x4>)
 800dd86:	4770      	bx	lr
 800dd88:	20000158 	.word	0x20000158

0800dd8c <_close_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	4d06      	ldr	r5, [pc, #24]	@ (800dda8 <_close_r+0x1c>)
 800dd90:	2300      	movs	r3, #0
 800dd92:	4604      	mov	r4, r0
 800dd94:	4608      	mov	r0, r1
 800dd96:	602b      	str	r3, [r5, #0]
 800dd98:	f7f6 ffec 	bl	8004d74 <_close>
 800dd9c:	1c43      	adds	r3, r0, #1
 800dd9e:	d102      	bne.n	800dda6 <_close_r+0x1a>
 800dda0:	682b      	ldr	r3, [r5, #0]
 800dda2:	b103      	cbz	r3, 800dda6 <_close_r+0x1a>
 800dda4:	6023      	str	r3, [r4, #0]
 800dda6:	bd38      	pop	{r3, r4, r5, pc}
 800dda8:	20001628 	.word	0x20001628

0800ddac <_gettimeofday_r>:
 800ddac:	b538      	push	{r3, r4, r5, lr}
 800ddae:	4d07      	ldr	r5, [pc, #28]	@ (800ddcc <_gettimeofday_r+0x20>)
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	4608      	mov	r0, r1
 800ddb6:	4611      	mov	r1, r2
 800ddb8:	602b      	str	r3, [r5, #0]
 800ddba:	f001 fe23 	bl	800fa04 <_gettimeofday>
 800ddbe:	1c43      	adds	r3, r0, #1
 800ddc0:	d102      	bne.n	800ddc8 <_gettimeofday_r+0x1c>
 800ddc2:	682b      	ldr	r3, [r5, #0]
 800ddc4:	b103      	cbz	r3, 800ddc8 <_gettimeofday_r+0x1c>
 800ddc6:	6023      	str	r3, [r4, #0]
 800ddc8:	bd38      	pop	{r3, r4, r5, pc}
 800ddca:	bf00      	nop
 800ddcc:	20001628 	.word	0x20001628

0800ddd0 <_lseek_r>:
 800ddd0:	b538      	push	{r3, r4, r5, lr}
 800ddd2:	4d07      	ldr	r5, [pc, #28]	@ (800ddf0 <_lseek_r+0x20>)
 800ddd4:	4604      	mov	r4, r0
 800ddd6:	4608      	mov	r0, r1
 800ddd8:	4611      	mov	r1, r2
 800ddda:	2200      	movs	r2, #0
 800dddc:	602a      	str	r2, [r5, #0]
 800ddde:	461a      	mov	r2, r3
 800dde0:	f7f6 ffef 	bl	8004dc2 <_lseek>
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	d102      	bne.n	800ddee <_lseek_r+0x1e>
 800dde8:	682b      	ldr	r3, [r5, #0]
 800ddea:	b103      	cbz	r3, 800ddee <_lseek_r+0x1e>
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	bd38      	pop	{r3, r4, r5, pc}
 800ddf0:	20001628 	.word	0x20001628

0800ddf4 <_read_r>:
 800ddf4:	b538      	push	{r3, r4, r5, lr}
 800ddf6:	4d07      	ldr	r5, [pc, #28]	@ (800de14 <_read_r+0x20>)
 800ddf8:	4604      	mov	r4, r0
 800ddfa:	4608      	mov	r0, r1
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	2200      	movs	r2, #0
 800de00:	602a      	str	r2, [r5, #0]
 800de02:	461a      	mov	r2, r3
 800de04:	f7f6 ff7d 	bl	8004d02 <_read>
 800de08:	1c43      	adds	r3, r0, #1
 800de0a:	d102      	bne.n	800de12 <_read_r+0x1e>
 800de0c:	682b      	ldr	r3, [r5, #0]
 800de0e:	b103      	cbz	r3, 800de12 <_read_r+0x1e>
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	bd38      	pop	{r3, r4, r5, pc}
 800de14:	20001628 	.word	0x20001628

0800de18 <_kill_r>:
 800de18:	b538      	push	{r3, r4, r5, lr}
 800de1a:	4d07      	ldr	r5, [pc, #28]	@ (800de38 <_kill_r+0x20>)
 800de1c:	2300      	movs	r3, #0
 800de1e:	4604      	mov	r4, r0
 800de20:	4608      	mov	r0, r1
 800de22:	4611      	mov	r1, r2
 800de24:	602b      	str	r3, [r5, #0]
 800de26:	f7f6 ff51 	bl	8004ccc <_kill>
 800de2a:	1c43      	adds	r3, r0, #1
 800de2c:	d102      	bne.n	800de34 <_kill_r+0x1c>
 800de2e:	682b      	ldr	r3, [r5, #0]
 800de30:	b103      	cbz	r3, 800de34 <_kill_r+0x1c>
 800de32:	6023      	str	r3, [r4, #0]
 800de34:	bd38      	pop	{r3, r4, r5, pc}
 800de36:	bf00      	nop
 800de38:	20001628 	.word	0x20001628

0800de3c <_getpid_r>:
 800de3c:	f7f6 bf3e 	b.w	8004cbc <_getpid>

0800de40 <_sbrk_r>:
 800de40:	b538      	push	{r3, r4, r5, lr}
 800de42:	4d06      	ldr	r5, [pc, #24]	@ (800de5c <_sbrk_r+0x1c>)
 800de44:	2300      	movs	r3, #0
 800de46:	4604      	mov	r4, r0
 800de48:	4608      	mov	r0, r1
 800de4a:	602b      	str	r3, [r5, #0]
 800de4c:	f7f6 ffc6 	bl	8004ddc <_sbrk>
 800de50:	1c43      	adds	r3, r0, #1
 800de52:	d102      	bne.n	800de5a <_sbrk_r+0x1a>
 800de54:	682b      	ldr	r3, [r5, #0]
 800de56:	b103      	cbz	r3, 800de5a <_sbrk_r+0x1a>
 800de58:	6023      	str	r3, [r4, #0]
 800de5a:	bd38      	pop	{r3, r4, r5, pc}
 800de5c:	20001628 	.word	0x20001628

0800de60 <_write_r>:
 800de60:	b538      	push	{r3, r4, r5, lr}
 800de62:	4d07      	ldr	r5, [pc, #28]	@ (800de80 <_write_r+0x20>)
 800de64:	4604      	mov	r4, r0
 800de66:	4608      	mov	r0, r1
 800de68:	4611      	mov	r1, r2
 800de6a:	2200      	movs	r2, #0
 800de6c:	602a      	str	r2, [r5, #0]
 800de6e:	461a      	mov	r2, r3
 800de70:	f7f6 ff64 	bl	8004d3c <_write>
 800de74:	1c43      	adds	r3, r0, #1
 800de76:	d102      	bne.n	800de7e <_write_r+0x1e>
 800de78:	682b      	ldr	r3, [r5, #0]
 800de7a:	b103      	cbz	r3, 800de7e <_write_r+0x1e>
 800de7c:	6023      	str	r3, [r4, #0]
 800de7e:	bd38      	pop	{r3, r4, r5, pc}
 800de80:	20001628 	.word	0x20001628

0800de84 <__errno>:
 800de84:	4b01      	ldr	r3, [pc, #4]	@ (800de8c <__errno+0x8>)
 800de86:	6818      	ldr	r0, [r3, #0]
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	20000018 	.word	0x20000018

0800de90 <__libc_init_array>:
 800de90:	b570      	push	{r4, r5, r6, lr}
 800de92:	4d0d      	ldr	r5, [pc, #52]	@ (800dec8 <__libc_init_array+0x38>)
 800de94:	4c0d      	ldr	r4, [pc, #52]	@ (800decc <__libc_init_array+0x3c>)
 800de96:	1b64      	subs	r4, r4, r5
 800de98:	10a4      	asrs	r4, r4, #2
 800de9a:	2600      	movs	r6, #0
 800de9c:	42a6      	cmp	r6, r4
 800de9e:	d109      	bne.n	800deb4 <__libc_init_array+0x24>
 800dea0:	4d0b      	ldr	r5, [pc, #44]	@ (800ded0 <__libc_init_array+0x40>)
 800dea2:	4c0c      	ldr	r4, [pc, #48]	@ (800ded4 <__libc_init_array+0x44>)
 800dea4:	f001 fdb6 	bl	800fa14 <_init>
 800dea8:	1b64      	subs	r4, r4, r5
 800deaa:	10a4      	asrs	r4, r4, #2
 800deac:	2600      	movs	r6, #0
 800deae:	42a6      	cmp	r6, r4
 800deb0:	d105      	bne.n	800debe <__libc_init_array+0x2e>
 800deb2:	bd70      	pop	{r4, r5, r6, pc}
 800deb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800deb8:	4798      	blx	r3
 800deba:	3601      	adds	r6, #1
 800debc:	e7ee      	b.n	800de9c <__libc_init_array+0xc>
 800debe:	f855 3b04 	ldr.w	r3, [r5], #4
 800dec2:	4798      	blx	r3
 800dec4:	3601      	adds	r6, #1
 800dec6:	e7f2      	b.n	800deae <__libc_init_array+0x1e>
 800dec8:	08010ea4 	.word	0x08010ea4
 800decc:	08010ea4 	.word	0x08010ea4
 800ded0:	08010ea4 	.word	0x08010ea4
 800ded4:	08010eac 	.word	0x08010eac

0800ded8 <__retarget_lock_init_recursive>:
 800ded8:	4770      	bx	lr

0800deda <__retarget_lock_acquire_recursive>:
 800deda:	4770      	bx	lr

0800dedc <__retarget_lock_release_recursive>:
 800dedc:	4770      	bx	lr

0800dede <memcpy>:
 800dede:	440a      	add	r2, r1
 800dee0:	4291      	cmp	r1, r2
 800dee2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dee6:	d100      	bne.n	800deea <memcpy+0xc>
 800dee8:	4770      	bx	lr
 800deea:	b510      	push	{r4, lr}
 800deec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800def0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800def4:	4291      	cmp	r1, r2
 800def6:	d1f9      	bne.n	800deec <memcpy+0xe>
 800def8:	bd10      	pop	{r4, pc}
	...

0800defc <__assert_func>:
 800defc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800defe:	4614      	mov	r4, r2
 800df00:	461a      	mov	r2, r3
 800df02:	4b09      	ldr	r3, [pc, #36]	@ (800df28 <__assert_func+0x2c>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4605      	mov	r5, r0
 800df08:	68d8      	ldr	r0, [r3, #12]
 800df0a:	b14c      	cbz	r4, 800df20 <__assert_func+0x24>
 800df0c:	4b07      	ldr	r3, [pc, #28]	@ (800df2c <__assert_func+0x30>)
 800df0e:	9100      	str	r1, [sp, #0]
 800df10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df14:	4906      	ldr	r1, [pc, #24]	@ (800df30 <__assert_func+0x34>)
 800df16:	462b      	mov	r3, r5
 800df18:	f001 fad6 	bl	800f4c8 <fiprintf>
 800df1c:	f7ff f850 	bl	800cfc0 <abort>
 800df20:	4b04      	ldr	r3, [pc, #16]	@ (800df34 <__assert_func+0x38>)
 800df22:	461c      	mov	r4, r3
 800df24:	e7f3      	b.n	800df0e <__assert_func+0x12>
 800df26:	bf00      	nop
 800df28:	20000018 	.word	0x20000018
 800df2c:	08010b73 	.word	0x08010b73
 800df30:	08010b80 	.word	0x08010b80
 800df34:	08010bae 	.word	0x08010bae

0800df38 <quorem>:
 800df38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df3c:	6903      	ldr	r3, [r0, #16]
 800df3e:	690c      	ldr	r4, [r1, #16]
 800df40:	42a3      	cmp	r3, r4
 800df42:	4607      	mov	r7, r0
 800df44:	db7e      	blt.n	800e044 <quorem+0x10c>
 800df46:	3c01      	subs	r4, #1
 800df48:	f101 0814 	add.w	r8, r1, #20
 800df4c:	00a3      	lsls	r3, r4, #2
 800df4e:	f100 0514 	add.w	r5, r0, #20
 800df52:	9300      	str	r3, [sp, #0]
 800df54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df58:	9301      	str	r3, [sp, #4]
 800df5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800df5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df62:	3301      	adds	r3, #1
 800df64:	429a      	cmp	r2, r3
 800df66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800df6a:	fbb2 f6f3 	udiv	r6, r2, r3
 800df6e:	d32e      	bcc.n	800dfce <quorem+0x96>
 800df70:	f04f 0a00 	mov.w	sl, #0
 800df74:	46c4      	mov	ip, r8
 800df76:	46ae      	mov	lr, r5
 800df78:	46d3      	mov	fp, sl
 800df7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800df7e:	b298      	uxth	r0, r3
 800df80:	fb06 a000 	mla	r0, r6, r0, sl
 800df84:	0c02      	lsrs	r2, r0, #16
 800df86:	0c1b      	lsrs	r3, r3, #16
 800df88:	fb06 2303 	mla	r3, r6, r3, r2
 800df8c:	f8de 2000 	ldr.w	r2, [lr]
 800df90:	b280      	uxth	r0, r0
 800df92:	b292      	uxth	r2, r2
 800df94:	1a12      	subs	r2, r2, r0
 800df96:	445a      	add	r2, fp
 800df98:	f8de 0000 	ldr.w	r0, [lr]
 800df9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dfa6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dfaa:	b292      	uxth	r2, r2
 800dfac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dfb0:	45e1      	cmp	r9, ip
 800dfb2:	f84e 2b04 	str.w	r2, [lr], #4
 800dfb6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dfba:	d2de      	bcs.n	800df7a <quorem+0x42>
 800dfbc:	9b00      	ldr	r3, [sp, #0]
 800dfbe:	58eb      	ldr	r3, [r5, r3]
 800dfc0:	b92b      	cbnz	r3, 800dfce <quorem+0x96>
 800dfc2:	9b01      	ldr	r3, [sp, #4]
 800dfc4:	3b04      	subs	r3, #4
 800dfc6:	429d      	cmp	r5, r3
 800dfc8:	461a      	mov	r2, r3
 800dfca:	d32f      	bcc.n	800e02c <quorem+0xf4>
 800dfcc:	613c      	str	r4, [r7, #16]
 800dfce:	4638      	mov	r0, r7
 800dfd0:	f001 f8c6 	bl	800f160 <__mcmp>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	db25      	blt.n	800e024 <quorem+0xec>
 800dfd8:	4629      	mov	r1, r5
 800dfda:	2000      	movs	r0, #0
 800dfdc:	f858 2b04 	ldr.w	r2, [r8], #4
 800dfe0:	f8d1 c000 	ldr.w	ip, [r1]
 800dfe4:	fa1f fe82 	uxth.w	lr, r2
 800dfe8:	fa1f f38c 	uxth.w	r3, ip
 800dfec:	eba3 030e 	sub.w	r3, r3, lr
 800dff0:	4403      	add	r3, r0
 800dff2:	0c12      	lsrs	r2, r2, #16
 800dff4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dff8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e002:	45c1      	cmp	r9, r8
 800e004:	f841 3b04 	str.w	r3, [r1], #4
 800e008:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e00c:	d2e6      	bcs.n	800dfdc <quorem+0xa4>
 800e00e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e016:	b922      	cbnz	r2, 800e022 <quorem+0xea>
 800e018:	3b04      	subs	r3, #4
 800e01a:	429d      	cmp	r5, r3
 800e01c:	461a      	mov	r2, r3
 800e01e:	d30b      	bcc.n	800e038 <quorem+0x100>
 800e020:	613c      	str	r4, [r7, #16]
 800e022:	3601      	adds	r6, #1
 800e024:	4630      	mov	r0, r6
 800e026:	b003      	add	sp, #12
 800e028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e02c:	6812      	ldr	r2, [r2, #0]
 800e02e:	3b04      	subs	r3, #4
 800e030:	2a00      	cmp	r2, #0
 800e032:	d1cb      	bne.n	800dfcc <quorem+0x94>
 800e034:	3c01      	subs	r4, #1
 800e036:	e7c6      	b.n	800dfc6 <quorem+0x8e>
 800e038:	6812      	ldr	r2, [r2, #0]
 800e03a:	3b04      	subs	r3, #4
 800e03c:	2a00      	cmp	r2, #0
 800e03e:	d1ef      	bne.n	800e020 <quorem+0xe8>
 800e040:	3c01      	subs	r4, #1
 800e042:	e7ea      	b.n	800e01a <quorem+0xe2>
 800e044:	2000      	movs	r0, #0
 800e046:	e7ee      	b.n	800e026 <quorem+0xee>

0800e048 <_dtoa_r>:
 800e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e04c:	69c7      	ldr	r7, [r0, #28]
 800e04e:	b097      	sub	sp, #92	@ 0x5c
 800e050:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e054:	ec55 4b10 	vmov	r4, r5, d0
 800e058:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e05a:	9107      	str	r1, [sp, #28]
 800e05c:	4681      	mov	r9, r0
 800e05e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e060:	9311      	str	r3, [sp, #68]	@ 0x44
 800e062:	b97f      	cbnz	r7, 800e084 <_dtoa_r+0x3c>
 800e064:	2010      	movs	r0, #16
 800e066:	f7fe ffb3 	bl	800cfd0 <malloc>
 800e06a:	4602      	mov	r2, r0
 800e06c:	f8c9 001c 	str.w	r0, [r9, #28]
 800e070:	b920      	cbnz	r0, 800e07c <_dtoa_r+0x34>
 800e072:	4ba9      	ldr	r3, [pc, #676]	@ (800e318 <_dtoa_r+0x2d0>)
 800e074:	21ef      	movs	r1, #239	@ 0xef
 800e076:	48a9      	ldr	r0, [pc, #676]	@ (800e31c <_dtoa_r+0x2d4>)
 800e078:	f7ff ff40 	bl	800defc <__assert_func>
 800e07c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e080:	6007      	str	r7, [r0, #0]
 800e082:	60c7      	str	r7, [r0, #12]
 800e084:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e088:	6819      	ldr	r1, [r3, #0]
 800e08a:	b159      	cbz	r1, 800e0a4 <_dtoa_r+0x5c>
 800e08c:	685a      	ldr	r2, [r3, #4]
 800e08e:	604a      	str	r2, [r1, #4]
 800e090:	2301      	movs	r3, #1
 800e092:	4093      	lsls	r3, r2
 800e094:	608b      	str	r3, [r1, #8]
 800e096:	4648      	mov	r0, r9
 800e098:	f000 fe30 	bl	800ecfc <_Bfree>
 800e09c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	601a      	str	r2, [r3, #0]
 800e0a4:	1e2b      	subs	r3, r5, #0
 800e0a6:	bfb9      	ittee	lt
 800e0a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e0ac:	9305      	strlt	r3, [sp, #20]
 800e0ae:	2300      	movge	r3, #0
 800e0b0:	6033      	strge	r3, [r6, #0]
 800e0b2:	9f05      	ldr	r7, [sp, #20]
 800e0b4:	4b9a      	ldr	r3, [pc, #616]	@ (800e320 <_dtoa_r+0x2d8>)
 800e0b6:	bfbc      	itt	lt
 800e0b8:	2201      	movlt	r2, #1
 800e0ba:	6032      	strlt	r2, [r6, #0]
 800e0bc:	43bb      	bics	r3, r7
 800e0be:	d112      	bne.n	800e0e6 <_dtoa_r+0x9e>
 800e0c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e0c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e0c6:	6013      	str	r3, [r2, #0]
 800e0c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e0cc:	4323      	orrs	r3, r4
 800e0ce:	f000 855a 	beq.w	800eb86 <_dtoa_r+0xb3e>
 800e0d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e0d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e334 <_dtoa_r+0x2ec>
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	f000 855c 	beq.w	800eb96 <_dtoa_r+0xb4e>
 800e0de:	f10a 0303 	add.w	r3, sl, #3
 800e0e2:	f000 bd56 	b.w	800eb92 <_dtoa_r+0xb4a>
 800e0e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	ec51 0b17 	vmov	r0, r1, d7
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e0f6:	f7f2 fd07 	bl	8000b08 <__aeabi_dcmpeq>
 800e0fa:	4680      	mov	r8, r0
 800e0fc:	b158      	cbz	r0, 800e116 <_dtoa_r+0xce>
 800e0fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e100:	2301      	movs	r3, #1
 800e102:	6013      	str	r3, [r2, #0]
 800e104:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e106:	b113      	cbz	r3, 800e10e <_dtoa_r+0xc6>
 800e108:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e10a:	4b86      	ldr	r3, [pc, #536]	@ (800e324 <_dtoa_r+0x2dc>)
 800e10c:	6013      	str	r3, [r2, #0]
 800e10e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e338 <_dtoa_r+0x2f0>
 800e112:	f000 bd40 	b.w	800eb96 <_dtoa_r+0xb4e>
 800e116:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e11a:	aa14      	add	r2, sp, #80	@ 0x50
 800e11c:	a915      	add	r1, sp, #84	@ 0x54
 800e11e:	4648      	mov	r0, r9
 800e120:	f001 f8ce 	bl	800f2c0 <__d2b>
 800e124:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e128:	9002      	str	r0, [sp, #8]
 800e12a:	2e00      	cmp	r6, #0
 800e12c:	d078      	beq.n	800e220 <_dtoa_r+0x1d8>
 800e12e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e130:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e138:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e13c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e140:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e144:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e148:	4619      	mov	r1, r3
 800e14a:	2200      	movs	r2, #0
 800e14c:	4b76      	ldr	r3, [pc, #472]	@ (800e328 <_dtoa_r+0x2e0>)
 800e14e:	f7f2 f8bb 	bl	80002c8 <__aeabi_dsub>
 800e152:	a36b      	add	r3, pc, #428	@ (adr r3, 800e300 <_dtoa_r+0x2b8>)
 800e154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e158:	f7f2 fa6e 	bl	8000638 <__aeabi_dmul>
 800e15c:	a36a      	add	r3, pc, #424	@ (adr r3, 800e308 <_dtoa_r+0x2c0>)
 800e15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e162:	f7f2 f8b3 	bl	80002cc <__adddf3>
 800e166:	4604      	mov	r4, r0
 800e168:	4630      	mov	r0, r6
 800e16a:	460d      	mov	r5, r1
 800e16c:	f7f2 f9fa 	bl	8000564 <__aeabi_i2d>
 800e170:	a367      	add	r3, pc, #412	@ (adr r3, 800e310 <_dtoa_r+0x2c8>)
 800e172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e176:	f7f2 fa5f 	bl	8000638 <__aeabi_dmul>
 800e17a:	4602      	mov	r2, r0
 800e17c:	460b      	mov	r3, r1
 800e17e:	4620      	mov	r0, r4
 800e180:	4629      	mov	r1, r5
 800e182:	f7f2 f8a3 	bl	80002cc <__adddf3>
 800e186:	4604      	mov	r4, r0
 800e188:	460d      	mov	r5, r1
 800e18a:	f7f2 fd05 	bl	8000b98 <__aeabi_d2iz>
 800e18e:	2200      	movs	r2, #0
 800e190:	4607      	mov	r7, r0
 800e192:	2300      	movs	r3, #0
 800e194:	4620      	mov	r0, r4
 800e196:	4629      	mov	r1, r5
 800e198:	f7f2 fcc0 	bl	8000b1c <__aeabi_dcmplt>
 800e19c:	b140      	cbz	r0, 800e1b0 <_dtoa_r+0x168>
 800e19e:	4638      	mov	r0, r7
 800e1a0:	f7f2 f9e0 	bl	8000564 <__aeabi_i2d>
 800e1a4:	4622      	mov	r2, r4
 800e1a6:	462b      	mov	r3, r5
 800e1a8:	f7f2 fcae 	bl	8000b08 <__aeabi_dcmpeq>
 800e1ac:	b900      	cbnz	r0, 800e1b0 <_dtoa_r+0x168>
 800e1ae:	3f01      	subs	r7, #1
 800e1b0:	2f16      	cmp	r7, #22
 800e1b2:	d852      	bhi.n	800e25a <_dtoa_r+0x212>
 800e1b4:	4b5d      	ldr	r3, [pc, #372]	@ (800e32c <_dtoa_r+0x2e4>)
 800e1b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e1c2:	f7f2 fcab 	bl	8000b1c <__aeabi_dcmplt>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	d049      	beq.n	800e25e <_dtoa_r+0x216>
 800e1ca:	3f01      	subs	r7, #1
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800e1d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e1d2:	1b9b      	subs	r3, r3, r6
 800e1d4:	1e5a      	subs	r2, r3, #1
 800e1d6:	bf45      	ittet	mi
 800e1d8:	f1c3 0301 	rsbmi	r3, r3, #1
 800e1dc:	9300      	strmi	r3, [sp, #0]
 800e1de:	2300      	movpl	r3, #0
 800e1e0:	2300      	movmi	r3, #0
 800e1e2:	9206      	str	r2, [sp, #24]
 800e1e4:	bf54      	ite	pl
 800e1e6:	9300      	strpl	r3, [sp, #0]
 800e1e8:	9306      	strmi	r3, [sp, #24]
 800e1ea:	2f00      	cmp	r7, #0
 800e1ec:	db39      	blt.n	800e262 <_dtoa_r+0x21a>
 800e1ee:	9b06      	ldr	r3, [sp, #24]
 800e1f0:	970d      	str	r7, [sp, #52]	@ 0x34
 800e1f2:	443b      	add	r3, r7
 800e1f4:	9306      	str	r3, [sp, #24]
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	9308      	str	r3, [sp, #32]
 800e1fa:	9b07      	ldr	r3, [sp, #28]
 800e1fc:	2b09      	cmp	r3, #9
 800e1fe:	d863      	bhi.n	800e2c8 <_dtoa_r+0x280>
 800e200:	2b05      	cmp	r3, #5
 800e202:	bfc4      	itt	gt
 800e204:	3b04      	subgt	r3, #4
 800e206:	9307      	strgt	r3, [sp, #28]
 800e208:	9b07      	ldr	r3, [sp, #28]
 800e20a:	f1a3 0302 	sub.w	r3, r3, #2
 800e20e:	bfcc      	ite	gt
 800e210:	2400      	movgt	r4, #0
 800e212:	2401      	movle	r4, #1
 800e214:	2b03      	cmp	r3, #3
 800e216:	d863      	bhi.n	800e2e0 <_dtoa_r+0x298>
 800e218:	e8df f003 	tbb	[pc, r3]
 800e21c:	2b375452 	.word	0x2b375452
 800e220:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e224:	441e      	add	r6, r3
 800e226:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e22a:	2b20      	cmp	r3, #32
 800e22c:	bfc1      	itttt	gt
 800e22e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e232:	409f      	lslgt	r7, r3
 800e234:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e238:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e23c:	bfd6      	itet	le
 800e23e:	f1c3 0320 	rsble	r3, r3, #32
 800e242:	ea47 0003 	orrgt.w	r0, r7, r3
 800e246:	fa04 f003 	lslle.w	r0, r4, r3
 800e24a:	f7f2 f97b 	bl	8000544 <__aeabi_ui2d>
 800e24e:	2201      	movs	r2, #1
 800e250:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e254:	3e01      	subs	r6, #1
 800e256:	9212      	str	r2, [sp, #72]	@ 0x48
 800e258:	e776      	b.n	800e148 <_dtoa_r+0x100>
 800e25a:	2301      	movs	r3, #1
 800e25c:	e7b7      	b.n	800e1ce <_dtoa_r+0x186>
 800e25e:	9010      	str	r0, [sp, #64]	@ 0x40
 800e260:	e7b6      	b.n	800e1d0 <_dtoa_r+0x188>
 800e262:	9b00      	ldr	r3, [sp, #0]
 800e264:	1bdb      	subs	r3, r3, r7
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	427b      	negs	r3, r7
 800e26a:	9308      	str	r3, [sp, #32]
 800e26c:	2300      	movs	r3, #0
 800e26e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e270:	e7c3      	b.n	800e1fa <_dtoa_r+0x1b2>
 800e272:	2301      	movs	r3, #1
 800e274:	9309      	str	r3, [sp, #36]	@ 0x24
 800e276:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e278:	eb07 0b03 	add.w	fp, r7, r3
 800e27c:	f10b 0301 	add.w	r3, fp, #1
 800e280:	2b01      	cmp	r3, #1
 800e282:	9303      	str	r3, [sp, #12]
 800e284:	bfb8      	it	lt
 800e286:	2301      	movlt	r3, #1
 800e288:	e006      	b.n	800e298 <_dtoa_r+0x250>
 800e28a:	2301      	movs	r3, #1
 800e28c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e28e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e290:	2b00      	cmp	r3, #0
 800e292:	dd28      	ble.n	800e2e6 <_dtoa_r+0x29e>
 800e294:	469b      	mov	fp, r3
 800e296:	9303      	str	r3, [sp, #12]
 800e298:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e29c:	2100      	movs	r1, #0
 800e29e:	2204      	movs	r2, #4
 800e2a0:	f102 0514 	add.w	r5, r2, #20
 800e2a4:	429d      	cmp	r5, r3
 800e2a6:	d926      	bls.n	800e2f6 <_dtoa_r+0x2ae>
 800e2a8:	6041      	str	r1, [r0, #4]
 800e2aa:	4648      	mov	r0, r9
 800e2ac:	f000 fce6 	bl	800ec7c <_Balloc>
 800e2b0:	4682      	mov	sl, r0
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d142      	bne.n	800e33c <_dtoa_r+0x2f4>
 800e2b6:	4b1e      	ldr	r3, [pc, #120]	@ (800e330 <_dtoa_r+0x2e8>)
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	f240 11af 	movw	r1, #431	@ 0x1af
 800e2be:	e6da      	b.n	800e076 <_dtoa_r+0x2e>
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	e7e3      	b.n	800e28c <_dtoa_r+0x244>
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	e7d5      	b.n	800e274 <_dtoa_r+0x22c>
 800e2c8:	2401      	movs	r4, #1
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	9307      	str	r3, [sp, #28]
 800e2ce:	9409      	str	r4, [sp, #36]	@ 0x24
 800e2d0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f8cd b00c 	str.w	fp, [sp, #12]
 800e2da:	2312      	movs	r3, #18
 800e2dc:	920c      	str	r2, [sp, #48]	@ 0x30
 800e2de:	e7db      	b.n	800e298 <_dtoa_r+0x250>
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2e4:	e7f4      	b.n	800e2d0 <_dtoa_r+0x288>
 800e2e6:	f04f 0b01 	mov.w	fp, #1
 800e2ea:	f8cd b00c 	str.w	fp, [sp, #12]
 800e2ee:	465b      	mov	r3, fp
 800e2f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e2f4:	e7d0      	b.n	800e298 <_dtoa_r+0x250>
 800e2f6:	3101      	adds	r1, #1
 800e2f8:	0052      	lsls	r2, r2, #1
 800e2fa:	e7d1      	b.n	800e2a0 <_dtoa_r+0x258>
 800e2fc:	f3af 8000 	nop.w
 800e300:	636f4361 	.word	0x636f4361
 800e304:	3fd287a7 	.word	0x3fd287a7
 800e308:	8b60c8b3 	.word	0x8b60c8b3
 800e30c:	3fc68a28 	.word	0x3fc68a28
 800e310:	509f79fb 	.word	0x509f79fb
 800e314:	3fd34413 	.word	0x3fd34413
 800e318:	08010ad0 	.word	0x08010ad0
 800e31c:	08010bbc 	.word	0x08010bbc
 800e320:	7ff00000 	.word	0x7ff00000
 800e324:	08010b50 	.word	0x08010b50
 800e328:	3ff80000 	.word	0x3ff80000
 800e32c:	08010cd0 	.word	0x08010cd0
 800e330:	08010c14 	.word	0x08010c14
 800e334:	08010bb8 	.word	0x08010bb8
 800e338:	08010b4f 	.word	0x08010b4f
 800e33c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e340:	6018      	str	r0, [r3, #0]
 800e342:	9b03      	ldr	r3, [sp, #12]
 800e344:	2b0e      	cmp	r3, #14
 800e346:	f200 80a1 	bhi.w	800e48c <_dtoa_r+0x444>
 800e34a:	2c00      	cmp	r4, #0
 800e34c:	f000 809e 	beq.w	800e48c <_dtoa_r+0x444>
 800e350:	2f00      	cmp	r7, #0
 800e352:	dd33      	ble.n	800e3bc <_dtoa_r+0x374>
 800e354:	4b9c      	ldr	r3, [pc, #624]	@ (800e5c8 <_dtoa_r+0x580>)
 800e356:	f007 020f 	and.w	r2, r7, #15
 800e35a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e35e:	ed93 7b00 	vldr	d7, [r3]
 800e362:	05f8      	lsls	r0, r7, #23
 800e364:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e368:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e36c:	d516      	bpl.n	800e39c <_dtoa_r+0x354>
 800e36e:	4b97      	ldr	r3, [pc, #604]	@ (800e5cc <_dtoa_r+0x584>)
 800e370:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e378:	f7f2 fa88 	bl	800088c <__aeabi_ddiv>
 800e37c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e380:	f004 040f 	and.w	r4, r4, #15
 800e384:	2603      	movs	r6, #3
 800e386:	4d91      	ldr	r5, [pc, #580]	@ (800e5cc <_dtoa_r+0x584>)
 800e388:	b954      	cbnz	r4, 800e3a0 <_dtoa_r+0x358>
 800e38a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e38e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e392:	f7f2 fa7b 	bl	800088c <__aeabi_ddiv>
 800e396:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e39a:	e028      	b.n	800e3ee <_dtoa_r+0x3a6>
 800e39c:	2602      	movs	r6, #2
 800e39e:	e7f2      	b.n	800e386 <_dtoa_r+0x33e>
 800e3a0:	07e1      	lsls	r1, r4, #31
 800e3a2:	d508      	bpl.n	800e3b6 <_dtoa_r+0x36e>
 800e3a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e3a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e3ac:	f7f2 f944 	bl	8000638 <__aeabi_dmul>
 800e3b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e3b4:	3601      	adds	r6, #1
 800e3b6:	1064      	asrs	r4, r4, #1
 800e3b8:	3508      	adds	r5, #8
 800e3ba:	e7e5      	b.n	800e388 <_dtoa_r+0x340>
 800e3bc:	f000 80af 	beq.w	800e51e <_dtoa_r+0x4d6>
 800e3c0:	427c      	negs	r4, r7
 800e3c2:	4b81      	ldr	r3, [pc, #516]	@ (800e5c8 <_dtoa_r+0x580>)
 800e3c4:	4d81      	ldr	r5, [pc, #516]	@ (800e5cc <_dtoa_r+0x584>)
 800e3c6:	f004 020f 	and.w	r2, r4, #15
 800e3ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e3d6:	f7f2 f92f 	bl	8000638 <__aeabi_dmul>
 800e3da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3de:	1124      	asrs	r4, r4, #4
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	2602      	movs	r6, #2
 800e3e4:	2c00      	cmp	r4, #0
 800e3e6:	f040 808f 	bne.w	800e508 <_dtoa_r+0x4c0>
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d1d3      	bne.n	800e396 <_dtoa_r+0x34e>
 800e3ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e3f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f000 8094 	beq.w	800e522 <_dtoa_r+0x4da>
 800e3fa:	4b75      	ldr	r3, [pc, #468]	@ (800e5d0 <_dtoa_r+0x588>)
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	4620      	mov	r0, r4
 800e400:	4629      	mov	r1, r5
 800e402:	f7f2 fb8b 	bl	8000b1c <__aeabi_dcmplt>
 800e406:	2800      	cmp	r0, #0
 800e408:	f000 808b 	beq.w	800e522 <_dtoa_r+0x4da>
 800e40c:	9b03      	ldr	r3, [sp, #12]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f000 8087 	beq.w	800e522 <_dtoa_r+0x4da>
 800e414:	f1bb 0f00 	cmp.w	fp, #0
 800e418:	dd34      	ble.n	800e484 <_dtoa_r+0x43c>
 800e41a:	4620      	mov	r0, r4
 800e41c:	4b6d      	ldr	r3, [pc, #436]	@ (800e5d4 <_dtoa_r+0x58c>)
 800e41e:	2200      	movs	r2, #0
 800e420:	4629      	mov	r1, r5
 800e422:	f7f2 f909 	bl	8000638 <__aeabi_dmul>
 800e426:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e42a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e42e:	3601      	adds	r6, #1
 800e430:	465c      	mov	r4, fp
 800e432:	4630      	mov	r0, r6
 800e434:	f7f2 f896 	bl	8000564 <__aeabi_i2d>
 800e438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e43c:	f7f2 f8fc 	bl	8000638 <__aeabi_dmul>
 800e440:	4b65      	ldr	r3, [pc, #404]	@ (800e5d8 <_dtoa_r+0x590>)
 800e442:	2200      	movs	r2, #0
 800e444:	f7f1 ff42 	bl	80002cc <__adddf3>
 800e448:	4605      	mov	r5, r0
 800e44a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e44e:	2c00      	cmp	r4, #0
 800e450:	d16a      	bne.n	800e528 <_dtoa_r+0x4e0>
 800e452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e456:	4b61      	ldr	r3, [pc, #388]	@ (800e5dc <_dtoa_r+0x594>)
 800e458:	2200      	movs	r2, #0
 800e45a:	f7f1 ff35 	bl	80002c8 <__aeabi_dsub>
 800e45e:	4602      	mov	r2, r0
 800e460:	460b      	mov	r3, r1
 800e462:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e466:	462a      	mov	r2, r5
 800e468:	4633      	mov	r3, r6
 800e46a:	f7f2 fb75 	bl	8000b58 <__aeabi_dcmpgt>
 800e46e:	2800      	cmp	r0, #0
 800e470:	f040 8298 	bne.w	800e9a4 <_dtoa_r+0x95c>
 800e474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e478:	462a      	mov	r2, r5
 800e47a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e47e:	f7f2 fb4d 	bl	8000b1c <__aeabi_dcmplt>
 800e482:	bb38      	cbnz	r0, 800e4d4 <_dtoa_r+0x48c>
 800e484:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e488:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e48c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e48e:	2b00      	cmp	r3, #0
 800e490:	f2c0 8157 	blt.w	800e742 <_dtoa_r+0x6fa>
 800e494:	2f0e      	cmp	r7, #14
 800e496:	f300 8154 	bgt.w	800e742 <_dtoa_r+0x6fa>
 800e49a:	4b4b      	ldr	r3, [pc, #300]	@ (800e5c8 <_dtoa_r+0x580>)
 800e49c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e4a0:	ed93 7b00 	vldr	d7, [r3]
 800e4a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	ed8d 7b00 	vstr	d7, [sp]
 800e4ac:	f280 80e5 	bge.w	800e67a <_dtoa_r+0x632>
 800e4b0:	9b03      	ldr	r3, [sp, #12]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	f300 80e1 	bgt.w	800e67a <_dtoa_r+0x632>
 800e4b8:	d10c      	bne.n	800e4d4 <_dtoa_r+0x48c>
 800e4ba:	4b48      	ldr	r3, [pc, #288]	@ (800e5dc <_dtoa_r+0x594>)
 800e4bc:	2200      	movs	r2, #0
 800e4be:	ec51 0b17 	vmov	r0, r1, d7
 800e4c2:	f7f2 f8b9 	bl	8000638 <__aeabi_dmul>
 800e4c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4ca:	f7f2 fb3b 	bl	8000b44 <__aeabi_dcmpge>
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	f000 8266 	beq.w	800e9a0 <_dtoa_r+0x958>
 800e4d4:	2400      	movs	r4, #0
 800e4d6:	4625      	mov	r5, r4
 800e4d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4da:	4656      	mov	r6, sl
 800e4dc:	ea6f 0803 	mvn.w	r8, r3
 800e4e0:	2700      	movs	r7, #0
 800e4e2:	4621      	mov	r1, r4
 800e4e4:	4648      	mov	r0, r9
 800e4e6:	f000 fc09 	bl	800ecfc <_Bfree>
 800e4ea:	2d00      	cmp	r5, #0
 800e4ec:	f000 80bd 	beq.w	800e66a <_dtoa_r+0x622>
 800e4f0:	b12f      	cbz	r7, 800e4fe <_dtoa_r+0x4b6>
 800e4f2:	42af      	cmp	r7, r5
 800e4f4:	d003      	beq.n	800e4fe <_dtoa_r+0x4b6>
 800e4f6:	4639      	mov	r1, r7
 800e4f8:	4648      	mov	r0, r9
 800e4fa:	f000 fbff 	bl	800ecfc <_Bfree>
 800e4fe:	4629      	mov	r1, r5
 800e500:	4648      	mov	r0, r9
 800e502:	f000 fbfb 	bl	800ecfc <_Bfree>
 800e506:	e0b0      	b.n	800e66a <_dtoa_r+0x622>
 800e508:	07e2      	lsls	r2, r4, #31
 800e50a:	d505      	bpl.n	800e518 <_dtoa_r+0x4d0>
 800e50c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e510:	f7f2 f892 	bl	8000638 <__aeabi_dmul>
 800e514:	3601      	adds	r6, #1
 800e516:	2301      	movs	r3, #1
 800e518:	1064      	asrs	r4, r4, #1
 800e51a:	3508      	adds	r5, #8
 800e51c:	e762      	b.n	800e3e4 <_dtoa_r+0x39c>
 800e51e:	2602      	movs	r6, #2
 800e520:	e765      	b.n	800e3ee <_dtoa_r+0x3a6>
 800e522:	9c03      	ldr	r4, [sp, #12]
 800e524:	46b8      	mov	r8, r7
 800e526:	e784      	b.n	800e432 <_dtoa_r+0x3ea>
 800e528:	4b27      	ldr	r3, [pc, #156]	@ (800e5c8 <_dtoa_r+0x580>)
 800e52a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e52c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e530:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e534:	4454      	add	r4, sl
 800e536:	2900      	cmp	r1, #0
 800e538:	d054      	beq.n	800e5e4 <_dtoa_r+0x59c>
 800e53a:	4929      	ldr	r1, [pc, #164]	@ (800e5e0 <_dtoa_r+0x598>)
 800e53c:	2000      	movs	r0, #0
 800e53e:	f7f2 f9a5 	bl	800088c <__aeabi_ddiv>
 800e542:	4633      	mov	r3, r6
 800e544:	462a      	mov	r2, r5
 800e546:	f7f1 febf 	bl	80002c8 <__aeabi_dsub>
 800e54a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e54e:	4656      	mov	r6, sl
 800e550:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e554:	f7f2 fb20 	bl	8000b98 <__aeabi_d2iz>
 800e558:	4605      	mov	r5, r0
 800e55a:	f7f2 f803 	bl	8000564 <__aeabi_i2d>
 800e55e:	4602      	mov	r2, r0
 800e560:	460b      	mov	r3, r1
 800e562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e566:	f7f1 feaf 	bl	80002c8 <__aeabi_dsub>
 800e56a:	3530      	adds	r5, #48	@ 0x30
 800e56c:	4602      	mov	r2, r0
 800e56e:	460b      	mov	r3, r1
 800e570:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e574:	f806 5b01 	strb.w	r5, [r6], #1
 800e578:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e57c:	f7f2 face 	bl	8000b1c <__aeabi_dcmplt>
 800e580:	2800      	cmp	r0, #0
 800e582:	d172      	bne.n	800e66a <_dtoa_r+0x622>
 800e584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e588:	4911      	ldr	r1, [pc, #68]	@ (800e5d0 <_dtoa_r+0x588>)
 800e58a:	2000      	movs	r0, #0
 800e58c:	f7f1 fe9c 	bl	80002c8 <__aeabi_dsub>
 800e590:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e594:	f7f2 fac2 	bl	8000b1c <__aeabi_dcmplt>
 800e598:	2800      	cmp	r0, #0
 800e59a:	f040 80b4 	bne.w	800e706 <_dtoa_r+0x6be>
 800e59e:	42a6      	cmp	r6, r4
 800e5a0:	f43f af70 	beq.w	800e484 <_dtoa_r+0x43c>
 800e5a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e5a8:	4b0a      	ldr	r3, [pc, #40]	@ (800e5d4 <_dtoa_r+0x58c>)
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	f7f2 f844 	bl	8000638 <__aeabi_dmul>
 800e5b0:	4b08      	ldr	r3, [pc, #32]	@ (800e5d4 <_dtoa_r+0x58c>)
 800e5b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5bc:	f7f2 f83c 	bl	8000638 <__aeabi_dmul>
 800e5c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5c4:	e7c4      	b.n	800e550 <_dtoa_r+0x508>
 800e5c6:	bf00      	nop
 800e5c8:	08010cd0 	.word	0x08010cd0
 800e5cc:	08010ca8 	.word	0x08010ca8
 800e5d0:	3ff00000 	.word	0x3ff00000
 800e5d4:	40240000 	.word	0x40240000
 800e5d8:	401c0000 	.word	0x401c0000
 800e5dc:	40140000 	.word	0x40140000
 800e5e0:	3fe00000 	.word	0x3fe00000
 800e5e4:	4631      	mov	r1, r6
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	f7f2 f826 	bl	8000638 <__aeabi_dmul>
 800e5ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e5f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e5f2:	4656      	mov	r6, sl
 800e5f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5f8:	f7f2 face 	bl	8000b98 <__aeabi_d2iz>
 800e5fc:	4605      	mov	r5, r0
 800e5fe:	f7f1 ffb1 	bl	8000564 <__aeabi_i2d>
 800e602:	4602      	mov	r2, r0
 800e604:	460b      	mov	r3, r1
 800e606:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e60a:	f7f1 fe5d 	bl	80002c8 <__aeabi_dsub>
 800e60e:	3530      	adds	r5, #48	@ 0x30
 800e610:	f806 5b01 	strb.w	r5, [r6], #1
 800e614:	4602      	mov	r2, r0
 800e616:	460b      	mov	r3, r1
 800e618:	42a6      	cmp	r6, r4
 800e61a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e61e:	f04f 0200 	mov.w	r2, #0
 800e622:	d124      	bne.n	800e66e <_dtoa_r+0x626>
 800e624:	4baf      	ldr	r3, [pc, #700]	@ (800e8e4 <_dtoa_r+0x89c>)
 800e626:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e62a:	f7f1 fe4f 	bl	80002cc <__adddf3>
 800e62e:	4602      	mov	r2, r0
 800e630:	460b      	mov	r3, r1
 800e632:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e636:	f7f2 fa8f 	bl	8000b58 <__aeabi_dcmpgt>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	d163      	bne.n	800e706 <_dtoa_r+0x6be>
 800e63e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e642:	49a8      	ldr	r1, [pc, #672]	@ (800e8e4 <_dtoa_r+0x89c>)
 800e644:	2000      	movs	r0, #0
 800e646:	f7f1 fe3f 	bl	80002c8 <__aeabi_dsub>
 800e64a:	4602      	mov	r2, r0
 800e64c:	460b      	mov	r3, r1
 800e64e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e652:	f7f2 fa63 	bl	8000b1c <__aeabi_dcmplt>
 800e656:	2800      	cmp	r0, #0
 800e658:	f43f af14 	beq.w	800e484 <_dtoa_r+0x43c>
 800e65c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e65e:	1e73      	subs	r3, r6, #1
 800e660:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e662:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e666:	2b30      	cmp	r3, #48	@ 0x30
 800e668:	d0f8      	beq.n	800e65c <_dtoa_r+0x614>
 800e66a:	4647      	mov	r7, r8
 800e66c:	e03b      	b.n	800e6e6 <_dtoa_r+0x69e>
 800e66e:	4b9e      	ldr	r3, [pc, #632]	@ (800e8e8 <_dtoa_r+0x8a0>)
 800e670:	f7f1 ffe2 	bl	8000638 <__aeabi_dmul>
 800e674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e678:	e7bc      	b.n	800e5f4 <_dtoa_r+0x5ac>
 800e67a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e67e:	4656      	mov	r6, sl
 800e680:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e684:	4620      	mov	r0, r4
 800e686:	4629      	mov	r1, r5
 800e688:	f7f2 f900 	bl	800088c <__aeabi_ddiv>
 800e68c:	f7f2 fa84 	bl	8000b98 <__aeabi_d2iz>
 800e690:	4680      	mov	r8, r0
 800e692:	f7f1 ff67 	bl	8000564 <__aeabi_i2d>
 800e696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e69a:	f7f1 ffcd 	bl	8000638 <__aeabi_dmul>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	4629      	mov	r1, r5
 800e6a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e6aa:	f7f1 fe0d 	bl	80002c8 <__aeabi_dsub>
 800e6ae:	f806 4b01 	strb.w	r4, [r6], #1
 800e6b2:	9d03      	ldr	r5, [sp, #12]
 800e6b4:	eba6 040a 	sub.w	r4, r6, sl
 800e6b8:	42a5      	cmp	r5, r4
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	460b      	mov	r3, r1
 800e6be:	d133      	bne.n	800e728 <_dtoa_r+0x6e0>
 800e6c0:	f7f1 fe04 	bl	80002cc <__adddf3>
 800e6c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	460d      	mov	r5, r1
 800e6cc:	f7f2 fa44 	bl	8000b58 <__aeabi_dcmpgt>
 800e6d0:	b9c0      	cbnz	r0, 800e704 <_dtoa_r+0x6bc>
 800e6d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	4629      	mov	r1, r5
 800e6da:	f7f2 fa15 	bl	8000b08 <__aeabi_dcmpeq>
 800e6de:	b110      	cbz	r0, 800e6e6 <_dtoa_r+0x69e>
 800e6e0:	f018 0f01 	tst.w	r8, #1
 800e6e4:	d10e      	bne.n	800e704 <_dtoa_r+0x6bc>
 800e6e6:	9902      	ldr	r1, [sp, #8]
 800e6e8:	4648      	mov	r0, r9
 800e6ea:	f000 fb07 	bl	800ecfc <_Bfree>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	7033      	strb	r3, [r6, #0]
 800e6f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e6f4:	3701      	adds	r7, #1
 800e6f6:	601f      	str	r7, [r3, #0]
 800e6f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	f000 824b 	beq.w	800eb96 <_dtoa_r+0xb4e>
 800e700:	601e      	str	r6, [r3, #0]
 800e702:	e248      	b.n	800eb96 <_dtoa_r+0xb4e>
 800e704:	46b8      	mov	r8, r7
 800e706:	4633      	mov	r3, r6
 800e708:	461e      	mov	r6, r3
 800e70a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e70e:	2a39      	cmp	r2, #57	@ 0x39
 800e710:	d106      	bne.n	800e720 <_dtoa_r+0x6d8>
 800e712:	459a      	cmp	sl, r3
 800e714:	d1f8      	bne.n	800e708 <_dtoa_r+0x6c0>
 800e716:	2230      	movs	r2, #48	@ 0x30
 800e718:	f108 0801 	add.w	r8, r8, #1
 800e71c:	f88a 2000 	strb.w	r2, [sl]
 800e720:	781a      	ldrb	r2, [r3, #0]
 800e722:	3201      	adds	r2, #1
 800e724:	701a      	strb	r2, [r3, #0]
 800e726:	e7a0      	b.n	800e66a <_dtoa_r+0x622>
 800e728:	4b6f      	ldr	r3, [pc, #444]	@ (800e8e8 <_dtoa_r+0x8a0>)
 800e72a:	2200      	movs	r2, #0
 800e72c:	f7f1 ff84 	bl	8000638 <__aeabi_dmul>
 800e730:	2200      	movs	r2, #0
 800e732:	2300      	movs	r3, #0
 800e734:	4604      	mov	r4, r0
 800e736:	460d      	mov	r5, r1
 800e738:	f7f2 f9e6 	bl	8000b08 <__aeabi_dcmpeq>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	d09f      	beq.n	800e680 <_dtoa_r+0x638>
 800e740:	e7d1      	b.n	800e6e6 <_dtoa_r+0x69e>
 800e742:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e744:	2a00      	cmp	r2, #0
 800e746:	f000 80ea 	beq.w	800e91e <_dtoa_r+0x8d6>
 800e74a:	9a07      	ldr	r2, [sp, #28]
 800e74c:	2a01      	cmp	r2, #1
 800e74e:	f300 80cd 	bgt.w	800e8ec <_dtoa_r+0x8a4>
 800e752:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e754:	2a00      	cmp	r2, #0
 800e756:	f000 80c1 	beq.w	800e8dc <_dtoa_r+0x894>
 800e75a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e75e:	9c08      	ldr	r4, [sp, #32]
 800e760:	9e00      	ldr	r6, [sp, #0]
 800e762:	9a00      	ldr	r2, [sp, #0]
 800e764:	441a      	add	r2, r3
 800e766:	9200      	str	r2, [sp, #0]
 800e768:	9a06      	ldr	r2, [sp, #24]
 800e76a:	2101      	movs	r1, #1
 800e76c:	441a      	add	r2, r3
 800e76e:	4648      	mov	r0, r9
 800e770:	9206      	str	r2, [sp, #24]
 800e772:	f000 fb77 	bl	800ee64 <__i2b>
 800e776:	4605      	mov	r5, r0
 800e778:	b166      	cbz	r6, 800e794 <_dtoa_r+0x74c>
 800e77a:	9b06      	ldr	r3, [sp, #24]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	dd09      	ble.n	800e794 <_dtoa_r+0x74c>
 800e780:	42b3      	cmp	r3, r6
 800e782:	9a00      	ldr	r2, [sp, #0]
 800e784:	bfa8      	it	ge
 800e786:	4633      	movge	r3, r6
 800e788:	1ad2      	subs	r2, r2, r3
 800e78a:	9200      	str	r2, [sp, #0]
 800e78c:	9a06      	ldr	r2, [sp, #24]
 800e78e:	1af6      	subs	r6, r6, r3
 800e790:	1ad3      	subs	r3, r2, r3
 800e792:	9306      	str	r3, [sp, #24]
 800e794:	9b08      	ldr	r3, [sp, #32]
 800e796:	b30b      	cbz	r3, 800e7dc <_dtoa_r+0x794>
 800e798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f000 80c6 	beq.w	800e92c <_dtoa_r+0x8e4>
 800e7a0:	2c00      	cmp	r4, #0
 800e7a2:	f000 80c0 	beq.w	800e926 <_dtoa_r+0x8de>
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	4622      	mov	r2, r4
 800e7aa:	4648      	mov	r0, r9
 800e7ac:	f000 fc12 	bl	800efd4 <__pow5mult>
 800e7b0:	9a02      	ldr	r2, [sp, #8]
 800e7b2:	4601      	mov	r1, r0
 800e7b4:	4605      	mov	r5, r0
 800e7b6:	4648      	mov	r0, r9
 800e7b8:	f000 fb6a 	bl	800ee90 <__multiply>
 800e7bc:	9902      	ldr	r1, [sp, #8]
 800e7be:	4680      	mov	r8, r0
 800e7c0:	4648      	mov	r0, r9
 800e7c2:	f000 fa9b 	bl	800ecfc <_Bfree>
 800e7c6:	9b08      	ldr	r3, [sp, #32]
 800e7c8:	1b1b      	subs	r3, r3, r4
 800e7ca:	9308      	str	r3, [sp, #32]
 800e7cc:	f000 80b1 	beq.w	800e932 <_dtoa_r+0x8ea>
 800e7d0:	9a08      	ldr	r2, [sp, #32]
 800e7d2:	4641      	mov	r1, r8
 800e7d4:	4648      	mov	r0, r9
 800e7d6:	f000 fbfd 	bl	800efd4 <__pow5mult>
 800e7da:	9002      	str	r0, [sp, #8]
 800e7dc:	2101      	movs	r1, #1
 800e7de:	4648      	mov	r0, r9
 800e7e0:	f000 fb40 	bl	800ee64 <__i2b>
 800e7e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	f000 81d8 	beq.w	800eb9e <_dtoa_r+0xb56>
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	4601      	mov	r1, r0
 800e7f2:	4648      	mov	r0, r9
 800e7f4:	f000 fbee 	bl	800efd4 <__pow5mult>
 800e7f8:	9b07      	ldr	r3, [sp, #28]
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	4604      	mov	r4, r0
 800e7fe:	f300 809f 	bgt.w	800e940 <_dtoa_r+0x8f8>
 800e802:	9b04      	ldr	r3, [sp, #16]
 800e804:	2b00      	cmp	r3, #0
 800e806:	f040 8097 	bne.w	800e938 <_dtoa_r+0x8f0>
 800e80a:	9b05      	ldr	r3, [sp, #20]
 800e80c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e810:	2b00      	cmp	r3, #0
 800e812:	f040 8093 	bne.w	800e93c <_dtoa_r+0x8f4>
 800e816:	9b05      	ldr	r3, [sp, #20]
 800e818:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e81c:	0d1b      	lsrs	r3, r3, #20
 800e81e:	051b      	lsls	r3, r3, #20
 800e820:	b133      	cbz	r3, 800e830 <_dtoa_r+0x7e8>
 800e822:	9b00      	ldr	r3, [sp, #0]
 800e824:	3301      	adds	r3, #1
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	9b06      	ldr	r3, [sp, #24]
 800e82a:	3301      	adds	r3, #1
 800e82c:	9306      	str	r3, [sp, #24]
 800e82e:	2301      	movs	r3, #1
 800e830:	9308      	str	r3, [sp, #32]
 800e832:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e834:	2b00      	cmp	r3, #0
 800e836:	f000 81b8 	beq.w	800ebaa <_dtoa_r+0xb62>
 800e83a:	6923      	ldr	r3, [r4, #16]
 800e83c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e840:	6918      	ldr	r0, [r3, #16]
 800e842:	f000 fac3 	bl	800edcc <__hi0bits>
 800e846:	f1c0 0020 	rsb	r0, r0, #32
 800e84a:	9b06      	ldr	r3, [sp, #24]
 800e84c:	4418      	add	r0, r3
 800e84e:	f010 001f 	ands.w	r0, r0, #31
 800e852:	f000 8082 	beq.w	800e95a <_dtoa_r+0x912>
 800e856:	f1c0 0320 	rsb	r3, r0, #32
 800e85a:	2b04      	cmp	r3, #4
 800e85c:	dd73      	ble.n	800e946 <_dtoa_r+0x8fe>
 800e85e:	9b00      	ldr	r3, [sp, #0]
 800e860:	f1c0 001c 	rsb	r0, r0, #28
 800e864:	4403      	add	r3, r0
 800e866:	9300      	str	r3, [sp, #0]
 800e868:	9b06      	ldr	r3, [sp, #24]
 800e86a:	4403      	add	r3, r0
 800e86c:	4406      	add	r6, r0
 800e86e:	9306      	str	r3, [sp, #24]
 800e870:	9b00      	ldr	r3, [sp, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	dd05      	ble.n	800e882 <_dtoa_r+0x83a>
 800e876:	9902      	ldr	r1, [sp, #8]
 800e878:	461a      	mov	r2, r3
 800e87a:	4648      	mov	r0, r9
 800e87c:	f000 fc04 	bl	800f088 <__lshift>
 800e880:	9002      	str	r0, [sp, #8]
 800e882:	9b06      	ldr	r3, [sp, #24]
 800e884:	2b00      	cmp	r3, #0
 800e886:	dd05      	ble.n	800e894 <_dtoa_r+0x84c>
 800e888:	4621      	mov	r1, r4
 800e88a:	461a      	mov	r2, r3
 800e88c:	4648      	mov	r0, r9
 800e88e:	f000 fbfb 	bl	800f088 <__lshift>
 800e892:	4604      	mov	r4, r0
 800e894:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e896:	2b00      	cmp	r3, #0
 800e898:	d061      	beq.n	800e95e <_dtoa_r+0x916>
 800e89a:	9802      	ldr	r0, [sp, #8]
 800e89c:	4621      	mov	r1, r4
 800e89e:	f000 fc5f 	bl	800f160 <__mcmp>
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	da5b      	bge.n	800e95e <_dtoa_r+0x916>
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	9902      	ldr	r1, [sp, #8]
 800e8aa:	220a      	movs	r2, #10
 800e8ac:	4648      	mov	r0, r9
 800e8ae:	f000 fa47 	bl	800ed40 <__multadd>
 800e8b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8b4:	9002      	str	r0, [sp, #8]
 800e8b6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	f000 8177 	beq.w	800ebae <_dtoa_r+0xb66>
 800e8c0:	4629      	mov	r1, r5
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	220a      	movs	r2, #10
 800e8c6:	4648      	mov	r0, r9
 800e8c8:	f000 fa3a 	bl	800ed40 <__multadd>
 800e8cc:	f1bb 0f00 	cmp.w	fp, #0
 800e8d0:	4605      	mov	r5, r0
 800e8d2:	dc6f      	bgt.n	800e9b4 <_dtoa_r+0x96c>
 800e8d4:	9b07      	ldr	r3, [sp, #28]
 800e8d6:	2b02      	cmp	r3, #2
 800e8d8:	dc49      	bgt.n	800e96e <_dtoa_r+0x926>
 800e8da:	e06b      	b.n	800e9b4 <_dtoa_r+0x96c>
 800e8dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e8de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e8e2:	e73c      	b.n	800e75e <_dtoa_r+0x716>
 800e8e4:	3fe00000 	.word	0x3fe00000
 800e8e8:	40240000 	.word	0x40240000
 800e8ec:	9b03      	ldr	r3, [sp, #12]
 800e8ee:	1e5c      	subs	r4, r3, #1
 800e8f0:	9b08      	ldr	r3, [sp, #32]
 800e8f2:	42a3      	cmp	r3, r4
 800e8f4:	db09      	blt.n	800e90a <_dtoa_r+0x8c2>
 800e8f6:	1b1c      	subs	r4, r3, r4
 800e8f8:	9b03      	ldr	r3, [sp, #12]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	f6bf af30 	bge.w	800e760 <_dtoa_r+0x718>
 800e900:	9b00      	ldr	r3, [sp, #0]
 800e902:	9a03      	ldr	r2, [sp, #12]
 800e904:	1a9e      	subs	r6, r3, r2
 800e906:	2300      	movs	r3, #0
 800e908:	e72b      	b.n	800e762 <_dtoa_r+0x71a>
 800e90a:	9b08      	ldr	r3, [sp, #32]
 800e90c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e90e:	9408      	str	r4, [sp, #32]
 800e910:	1ae3      	subs	r3, r4, r3
 800e912:	441a      	add	r2, r3
 800e914:	9e00      	ldr	r6, [sp, #0]
 800e916:	9b03      	ldr	r3, [sp, #12]
 800e918:	920d      	str	r2, [sp, #52]	@ 0x34
 800e91a:	2400      	movs	r4, #0
 800e91c:	e721      	b.n	800e762 <_dtoa_r+0x71a>
 800e91e:	9c08      	ldr	r4, [sp, #32]
 800e920:	9e00      	ldr	r6, [sp, #0]
 800e922:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e924:	e728      	b.n	800e778 <_dtoa_r+0x730>
 800e926:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e92a:	e751      	b.n	800e7d0 <_dtoa_r+0x788>
 800e92c:	9a08      	ldr	r2, [sp, #32]
 800e92e:	9902      	ldr	r1, [sp, #8]
 800e930:	e750      	b.n	800e7d4 <_dtoa_r+0x78c>
 800e932:	f8cd 8008 	str.w	r8, [sp, #8]
 800e936:	e751      	b.n	800e7dc <_dtoa_r+0x794>
 800e938:	2300      	movs	r3, #0
 800e93a:	e779      	b.n	800e830 <_dtoa_r+0x7e8>
 800e93c:	9b04      	ldr	r3, [sp, #16]
 800e93e:	e777      	b.n	800e830 <_dtoa_r+0x7e8>
 800e940:	2300      	movs	r3, #0
 800e942:	9308      	str	r3, [sp, #32]
 800e944:	e779      	b.n	800e83a <_dtoa_r+0x7f2>
 800e946:	d093      	beq.n	800e870 <_dtoa_r+0x828>
 800e948:	9a00      	ldr	r2, [sp, #0]
 800e94a:	331c      	adds	r3, #28
 800e94c:	441a      	add	r2, r3
 800e94e:	9200      	str	r2, [sp, #0]
 800e950:	9a06      	ldr	r2, [sp, #24]
 800e952:	441a      	add	r2, r3
 800e954:	441e      	add	r6, r3
 800e956:	9206      	str	r2, [sp, #24]
 800e958:	e78a      	b.n	800e870 <_dtoa_r+0x828>
 800e95a:	4603      	mov	r3, r0
 800e95c:	e7f4      	b.n	800e948 <_dtoa_r+0x900>
 800e95e:	9b03      	ldr	r3, [sp, #12]
 800e960:	2b00      	cmp	r3, #0
 800e962:	46b8      	mov	r8, r7
 800e964:	dc20      	bgt.n	800e9a8 <_dtoa_r+0x960>
 800e966:	469b      	mov	fp, r3
 800e968:	9b07      	ldr	r3, [sp, #28]
 800e96a:	2b02      	cmp	r3, #2
 800e96c:	dd1e      	ble.n	800e9ac <_dtoa_r+0x964>
 800e96e:	f1bb 0f00 	cmp.w	fp, #0
 800e972:	f47f adb1 	bne.w	800e4d8 <_dtoa_r+0x490>
 800e976:	4621      	mov	r1, r4
 800e978:	465b      	mov	r3, fp
 800e97a:	2205      	movs	r2, #5
 800e97c:	4648      	mov	r0, r9
 800e97e:	f000 f9df 	bl	800ed40 <__multadd>
 800e982:	4601      	mov	r1, r0
 800e984:	4604      	mov	r4, r0
 800e986:	9802      	ldr	r0, [sp, #8]
 800e988:	f000 fbea 	bl	800f160 <__mcmp>
 800e98c:	2800      	cmp	r0, #0
 800e98e:	f77f ada3 	ble.w	800e4d8 <_dtoa_r+0x490>
 800e992:	4656      	mov	r6, sl
 800e994:	2331      	movs	r3, #49	@ 0x31
 800e996:	f806 3b01 	strb.w	r3, [r6], #1
 800e99a:	f108 0801 	add.w	r8, r8, #1
 800e99e:	e59f      	b.n	800e4e0 <_dtoa_r+0x498>
 800e9a0:	9c03      	ldr	r4, [sp, #12]
 800e9a2:	46b8      	mov	r8, r7
 800e9a4:	4625      	mov	r5, r4
 800e9a6:	e7f4      	b.n	800e992 <_dtoa_r+0x94a>
 800e9a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e9ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	f000 8101 	beq.w	800ebb6 <_dtoa_r+0xb6e>
 800e9b4:	2e00      	cmp	r6, #0
 800e9b6:	dd05      	ble.n	800e9c4 <_dtoa_r+0x97c>
 800e9b8:	4629      	mov	r1, r5
 800e9ba:	4632      	mov	r2, r6
 800e9bc:	4648      	mov	r0, r9
 800e9be:	f000 fb63 	bl	800f088 <__lshift>
 800e9c2:	4605      	mov	r5, r0
 800e9c4:	9b08      	ldr	r3, [sp, #32]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d05c      	beq.n	800ea84 <_dtoa_r+0xa3c>
 800e9ca:	6869      	ldr	r1, [r5, #4]
 800e9cc:	4648      	mov	r0, r9
 800e9ce:	f000 f955 	bl	800ec7c <_Balloc>
 800e9d2:	4606      	mov	r6, r0
 800e9d4:	b928      	cbnz	r0, 800e9e2 <_dtoa_r+0x99a>
 800e9d6:	4b82      	ldr	r3, [pc, #520]	@ (800ebe0 <_dtoa_r+0xb98>)
 800e9d8:	4602      	mov	r2, r0
 800e9da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e9de:	f7ff bb4a 	b.w	800e076 <_dtoa_r+0x2e>
 800e9e2:	692a      	ldr	r2, [r5, #16]
 800e9e4:	3202      	adds	r2, #2
 800e9e6:	0092      	lsls	r2, r2, #2
 800e9e8:	f105 010c 	add.w	r1, r5, #12
 800e9ec:	300c      	adds	r0, #12
 800e9ee:	f7ff fa76 	bl	800dede <memcpy>
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	4631      	mov	r1, r6
 800e9f6:	4648      	mov	r0, r9
 800e9f8:	f000 fb46 	bl	800f088 <__lshift>
 800e9fc:	f10a 0301 	add.w	r3, sl, #1
 800ea00:	9300      	str	r3, [sp, #0]
 800ea02:	eb0a 030b 	add.w	r3, sl, fp
 800ea06:	9308      	str	r3, [sp, #32]
 800ea08:	9b04      	ldr	r3, [sp, #16]
 800ea0a:	f003 0301 	and.w	r3, r3, #1
 800ea0e:	462f      	mov	r7, r5
 800ea10:	9306      	str	r3, [sp, #24]
 800ea12:	4605      	mov	r5, r0
 800ea14:	9b00      	ldr	r3, [sp, #0]
 800ea16:	9802      	ldr	r0, [sp, #8]
 800ea18:	4621      	mov	r1, r4
 800ea1a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800ea1e:	f7ff fa8b 	bl	800df38 <quorem>
 800ea22:	4603      	mov	r3, r0
 800ea24:	3330      	adds	r3, #48	@ 0x30
 800ea26:	9003      	str	r0, [sp, #12]
 800ea28:	4639      	mov	r1, r7
 800ea2a:	9802      	ldr	r0, [sp, #8]
 800ea2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea2e:	f000 fb97 	bl	800f160 <__mcmp>
 800ea32:	462a      	mov	r2, r5
 800ea34:	9004      	str	r0, [sp, #16]
 800ea36:	4621      	mov	r1, r4
 800ea38:	4648      	mov	r0, r9
 800ea3a:	f000 fbad 	bl	800f198 <__mdiff>
 800ea3e:	68c2      	ldr	r2, [r0, #12]
 800ea40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea42:	4606      	mov	r6, r0
 800ea44:	bb02      	cbnz	r2, 800ea88 <_dtoa_r+0xa40>
 800ea46:	4601      	mov	r1, r0
 800ea48:	9802      	ldr	r0, [sp, #8]
 800ea4a:	f000 fb89 	bl	800f160 <__mcmp>
 800ea4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea50:	4602      	mov	r2, r0
 800ea52:	4631      	mov	r1, r6
 800ea54:	4648      	mov	r0, r9
 800ea56:	920c      	str	r2, [sp, #48]	@ 0x30
 800ea58:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea5a:	f000 f94f 	bl	800ecfc <_Bfree>
 800ea5e:	9b07      	ldr	r3, [sp, #28]
 800ea60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ea62:	9e00      	ldr	r6, [sp, #0]
 800ea64:	ea42 0103 	orr.w	r1, r2, r3
 800ea68:	9b06      	ldr	r3, [sp, #24]
 800ea6a:	4319      	orrs	r1, r3
 800ea6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea6e:	d10d      	bne.n	800ea8c <_dtoa_r+0xa44>
 800ea70:	2b39      	cmp	r3, #57	@ 0x39
 800ea72:	d027      	beq.n	800eac4 <_dtoa_r+0xa7c>
 800ea74:	9a04      	ldr	r2, [sp, #16]
 800ea76:	2a00      	cmp	r2, #0
 800ea78:	dd01      	ble.n	800ea7e <_dtoa_r+0xa36>
 800ea7a:	9b03      	ldr	r3, [sp, #12]
 800ea7c:	3331      	adds	r3, #49	@ 0x31
 800ea7e:	f88b 3000 	strb.w	r3, [fp]
 800ea82:	e52e      	b.n	800e4e2 <_dtoa_r+0x49a>
 800ea84:	4628      	mov	r0, r5
 800ea86:	e7b9      	b.n	800e9fc <_dtoa_r+0x9b4>
 800ea88:	2201      	movs	r2, #1
 800ea8a:	e7e2      	b.n	800ea52 <_dtoa_r+0xa0a>
 800ea8c:	9904      	ldr	r1, [sp, #16]
 800ea8e:	2900      	cmp	r1, #0
 800ea90:	db04      	blt.n	800ea9c <_dtoa_r+0xa54>
 800ea92:	9807      	ldr	r0, [sp, #28]
 800ea94:	4301      	orrs	r1, r0
 800ea96:	9806      	ldr	r0, [sp, #24]
 800ea98:	4301      	orrs	r1, r0
 800ea9a:	d120      	bne.n	800eade <_dtoa_r+0xa96>
 800ea9c:	2a00      	cmp	r2, #0
 800ea9e:	ddee      	ble.n	800ea7e <_dtoa_r+0xa36>
 800eaa0:	9902      	ldr	r1, [sp, #8]
 800eaa2:	9300      	str	r3, [sp, #0]
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	4648      	mov	r0, r9
 800eaa8:	f000 faee 	bl	800f088 <__lshift>
 800eaac:	4621      	mov	r1, r4
 800eaae:	9002      	str	r0, [sp, #8]
 800eab0:	f000 fb56 	bl	800f160 <__mcmp>
 800eab4:	2800      	cmp	r0, #0
 800eab6:	9b00      	ldr	r3, [sp, #0]
 800eab8:	dc02      	bgt.n	800eac0 <_dtoa_r+0xa78>
 800eaba:	d1e0      	bne.n	800ea7e <_dtoa_r+0xa36>
 800eabc:	07da      	lsls	r2, r3, #31
 800eabe:	d5de      	bpl.n	800ea7e <_dtoa_r+0xa36>
 800eac0:	2b39      	cmp	r3, #57	@ 0x39
 800eac2:	d1da      	bne.n	800ea7a <_dtoa_r+0xa32>
 800eac4:	2339      	movs	r3, #57	@ 0x39
 800eac6:	f88b 3000 	strb.w	r3, [fp]
 800eaca:	4633      	mov	r3, r6
 800eacc:	461e      	mov	r6, r3
 800eace:	3b01      	subs	r3, #1
 800ead0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ead4:	2a39      	cmp	r2, #57	@ 0x39
 800ead6:	d04e      	beq.n	800eb76 <_dtoa_r+0xb2e>
 800ead8:	3201      	adds	r2, #1
 800eada:	701a      	strb	r2, [r3, #0]
 800eadc:	e501      	b.n	800e4e2 <_dtoa_r+0x49a>
 800eade:	2a00      	cmp	r2, #0
 800eae0:	dd03      	ble.n	800eaea <_dtoa_r+0xaa2>
 800eae2:	2b39      	cmp	r3, #57	@ 0x39
 800eae4:	d0ee      	beq.n	800eac4 <_dtoa_r+0xa7c>
 800eae6:	3301      	adds	r3, #1
 800eae8:	e7c9      	b.n	800ea7e <_dtoa_r+0xa36>
 800eaea:	9a00      	ldr	r2, [sp, #0]
 800eaec:	9908      	ldr	r1, [sp, #32]
 800eaee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800eaf2:	428a      	cmp	r2, r1
 800eaf4:	d028      	beq.n	800eb48 <_dtoa_r+0xb00>
 800eaf6:	9902      	ldr	r1, [sp, #8]
 800eaf8:	2300      	movs	r3, #0
 800eafa:	220a      	movs	r2, #10
 800eafc:	4648      	mov	r0, r9
 800eafe:	f000 f91f 	bl	800ed40 <__multadd>
 800eb02:	42af      	cmp	r7, r5
 800eb04:	9002      	str	r0, [sp, #8]
 800eb06:	f04f 0300 	mov.w	r3, #0
 800eb0a:	f04f 020a 	mov.w	r2, #10
 800eb0e:	4639      	mov	r1, r7
 800eb10:	4648      	mov	r0, r9
 800eb12:	d107      	bne.n	800eb24 <_dtoa_r+0xadc>
 800eb14:	f000 f914 	bl	800ed40 <__multadd>
 800eb18:	4607      	mov	r7, r0
 800eb1a:	4605      	mov	r5, r0
 800eb1c:	9b00      	ldr	r3, [sp, #0]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	9300      	str	r3, [sp, #0]
 800eb22:	e777      	b.n	800ea14 <_dtoa_r+0x9cc>
 800eb24:	f000 f90c 	bl	800ed40 <__multadd>
 800eb28:	4629      	mov	r1, r5
 800eb2a:	4607      	mov	r7, r0
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	220a      	movs	r2, #10
 800eb30:	4648      	mov	r0, r9
 800eb32:	f000 f905 	bl	800ed40 <__multadd>
 800eb36:	4605      	mov	r5, r0
 800eb38:	e7f0      	b.n	800eb1c <_dtoa_r+0xad4>
 800eb3a:	f1bb 0f00 	cmp.w	fp, #0
 800eb3e:	bfcc      	ite	gt
 800eb40:	465e      	movgt	r6, fp
 800eb42:	2601      	movle	r6, #1
 800eb44:	4456      	add	r6, sl
 800eb46:	2700      	movs	r7, #0
 800eb48:	9902      	ldr	r1, [sp, #8]
 800eb4a:	9300      	str	r3, [sp, #0]
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	4648      	mov	r0, r9
 800eb50:	f000 fa9a 	bl	800f088 <__lshift>
 800eb54:	4621      	mov	r1, r4
 800eb56:	9002      	str	r0, [sp, #8]
 800eb58:	f000 fb02 	bl	800f160 <__mcmp>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	dcb4      	bgt.n	800eaca <_dtoa_r+0xa82>
 800eb60:	d102      	bne.n	800eb68 <_dtoa_r+0xb20>
 800eb62:	9b00      	ldr	r3, [sp, #0]
 800eb64:	07db      	lsls	r3, r3, #31
 800eb66:	d4b0      	bmi.n	800eaca <_dtoa_r+0xa82>
 800eb68:	4633      	mov	r3, r6
 800eb6a:	461e      	mov	r6, r3
 800eb6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb70:	2a30      	cmp	r2, #48	@ 0x30
 800eb72:	d0fa      	beq.n	800eb6a <_dtoa_r+0xb22>
 800eb74:	e4b5      	b.n	800e4e2 <_dtoa_r+0x49a>
 800eb76:	459a      	cmp	sl, r3
 800eb78:	d1a8      	bne.n	800eacc <_dtoa_r+0xa84>
 800eb7a:	2331      	movs	r3, #49	@ 0x31
 800eb7c:	f108 0801 	add.w	r8, r8, #1
 800eb80:	f88a 3000 	strb.w	r3, [sl]
 800eb84:	e4ad      	b.n	800e4e2 <_dtoa_r+0x49a>
 800eb86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eb88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ebe4 <_dtoa_r+0xb9c>
 800eb8c:	b11b      	cbz	r3, 800eb96 <_dtoa_r+0xb4e>
 800eb8e:	f10a 0308 	add.w	r3, sl, #8
 800eb92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800eb94:	6013      	str	r3, [r2, #0]
 800eb96:	4650      	mov	r0, sl
 800eb98:	b017      	add	sp, #92	@ 0x5c
 800eb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb9e:	9b07      	ldr	r3, [sp, #28]
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	f77f ae2e 	ble.w	800e802 <_dtoa_r+0x7ba>
 800eba6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eba8:	9308      	str	r3, [sp, #32]
 800ebaa:	2001      	movs	r0, #1
 800ebac:	e64d      	b.n	800e84a <_dtoa_r+0x802>
 800ebae:	f1bb 0f00 	cmp.w	fp, #0
 800ebb2:	f77f aed9 	ble.w	800e968 <_dtoa_r+0x920>
 800ebb6:	4656      	mov	r6, sl
 800ebb8:	9802      	ldr	r0, [sp, #8]
 800ebba:	4621      	mov	r1, r4
 800ebbc:	f7ff f9bc 	bl	800df38 <quorem>
 800ebc0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ebc4:	f806 3b01 	strb.w	r3, [r6], #1
 800ebc8:	eba6 020a 	sub.w	r2, r6, sl
 800ebcc:	4593      	cmp	fp, r2
 800ebce:	ddb4      	ble.n	800eb3a <_dtoa_r+0xaf2>
 800ebd0:	9902      	ldr	r1, [sp, #8]
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	220a      	movs	r2, #10
 800ebd6:	4648      	mov	r0, r9
 800ebd8:	f000 f8b2 	bl	800ed40 <__multadd>
 800ebdc:	9002      	str	r0, [sp, #8]
 800ebde:	e7eb      	b.n	800ebb8 <_dtoa_r+0xb70>
 800ebe0:	08010c14 	.word	0x08010c14
 800ebe4:	08010baf 	.word	0x08010baf

0800ebe8 <_free_r>:
 800ebe8:	b538      	push	{r3, r4, r5, lr}
 800ebea:	4605      	mov	r5, r0
 800ebec:	2900      	cmp	r1, #0
 800ebee:	d041      	beq.n	800ec74 <_free_r+0x8c>
 800ebf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebf4:	1f0c      	subs	r4, r1, #4
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	bfb8      	it	lt
 800ebfa:	18e4      	addlt	r4, r4, r3
 800ebfc:	f7fe fa9a 	bl	800d134 <__malloc_lock>
 800ec00:	4a1d      	ldr	r2, [pc, #116]	@ (800ec78 <_free_r+0x90>)
 800ec02:	6813      	ldr	r3, [r2, #0]
 800ec04:	b933      	cbnz	r3, 800ec14 <_free_r+0x2c>
 800ec06:	6063      	str	r3, [r4, #4]
 800ec08:	6014      	str	r4, [r2, #0]
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec10:	f7fe ba96 	b.w	800d140 <__malloc_unlock>
 800ec14:	42a3      	cmp	r3, r4
 800ec16:	d908      	bls.n	800ec2a <_free_r+0x42>
 800ec18:	6820      	ldr	r0, [r4, #0]
 800ec1a:	1821      	adds	r1, r4, r0
 800ec1c:	428b      	cmp	r3, r1
 800ec1e:	bf01      	itttt	eq
 800ec20:	6819      	ldreq	r1, [r3, #0]
 800ec22:	685b      	ldreq	r3, [r3, #4]
 800ec24:	1809      	addeq	r1, r1, r0
 800ec26:	6021      	streq	r1, [r4, #0]
 800ec28:	e7ed      	b.n	800ec06 <_free_r+0x1e>
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	b10b      	cbz	r3, 800ec34 <_free_r+0x4c>
 800ec30:	42a3      	cmp	r3, r4
 800ec32:	d9fa      	bls.n	800ec2a <_free_r+0x42>
 800ec34:	6811      	ldr	r1, [r2, #0]
 800ec36:	1850      	adds	r0, r2, r1
 800ec38:	42a0      	cmp	r0, r4
 800ec3a:	d10b      	bne.n	800ec54 <_free_r+0x6c>
 800ec3c:	6820      	ldr	r0, [r4, #0]
 800ec3e:	4401      	add	r1, r0
 800ec40:	1850      	adds	r0, r2, r1
 800ec42:	4283      	cmp	r3, r0
 800ec44:	6011      	str	r1, [r2, #0]
 800ec46:	d1e0      	bne.n	800ec0a <_free_r+0x22>
 800ec48:	6818      	ldr	r0, [r3, #0]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	6053      	str	r3, [r2, #4]
 800ec4e:	4408      	add	r0, r1
 800ec50:	6010      	str	r0, [r2, #0]
 800ec52:	e7da      	b.n	800ec0a <_free_r+0x22>
 800ec54:	d902      	bls.n	800ec5c <_free_r+0x74>
 800ec56:	230c      	movs	r3, #12
 800ec58:	602b      	str	r3, [r5, #0]
 800ec5a:	e7d6      	b.n	800ec0a <_free_r+0x22>
 800ec5c:	6820      	ldr	r0, [r4, #0]
 800ec5e:	1821      	adds	r1, r4, r0
 800ec60:	428b      	cmp	r3, r1
 800ec62:	bf04      	itt	eq
 800ec64:	6819      	ldreq	r1, [r3, #0]
 800ec66:	685b      	ldreq	r3, [r3, #4]
 800ec68:	6063      	str	r3, [r4, #4]
 800ec6a:	bf04      	itt	eq
 800ec6c:	1809      	addeq	r1, r1, r0
 800ec6e:	6021      	streq	r1, [r4, #0]
 800ec70:	6054      	str	r4, [r2, #4]
 800ec72:	e7ca      	b.n	800ec0a <_free_r+0x22>
 800ec74:	bd38      	pop	{r3, r4, r5, pc}
 800ec76:	bf00      	nop
 800ec78:	200014e8 	.word	0x200014e8

0800ec7c <_Balloc>:
 800ec7c:	b570      	push	{r4, r5, r6, lr}
 800ec7e:	69c6      	ldr	r6, [r0, #28]
 800ec80:	4604      	mov	r4, r0
 800ec82:	460d      	mov	r5, r1
 800ec84:	b976      	cbnz	r6, 800eca4 <_Balloc+0x28>
 800ec86:	2010      	movs	r0, #16
 800ec88:	f7fe f9a2 	bl	800cfd0 <malloc>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	61e0      	str	r0, [r4, #28]
 800ec90:	b920      	cbnz	r0, 800ec9c <_Balloc+0x20>
 800ec92:	4b18      	ldr	r3, [pc, #96]	@ (800ecf4 <_Balloc+0x78>)
 800ec94:	4818      	ldr	r0, [pc, #96]	@ (800ecf8 <_Balloc+0x7c>)
 800ec96:	216b      	movs	r1, #107	@ 0x6b
 800ec98:	f7ff f930 	bl	800defc <__assert_func>
 800ec9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eca0:	6006      	str	r6, [r0, #0]
 800eca2:	60c6      	str	r6, [r0, #12]
 800eca4:	69e6      	ldr	r6, [r4, #28]
 800eca6:	68f3      	ldr	r3, [r6, #12]
 800eca8:	b183      	cbz	r3, 800eccc <_Balloc+0x50>
 800ecaa:	69e3      	ldr	r3, [r4, #28]
 800ecac:	68db      	ldr	r3, [r3, #12]
 800ecae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ecb2:	b9b8      	cbnz	r0, 800ece4 <_Balloc+0x68>
 800ecb4:	2101      	movs	r1, #1
 800ecb6:	fa01 f605 	lsl.w	r6, r1, r5
 800ecba:	1d72      	adds	r2, r6, #5
 800ecbc:	0092      	lsls	r2, r2, #2
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f000 fc14 	bl	800f4ec <_calloc_r>
 800ecc4:	b160      	cbz	r0, 800ece0 <_Balloc+0x64>
 800ecc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ecca:	e00e      	b.n	800ecea <_Balloc+0x6e>
 800eccc:	2221      	movs	r2, #33	@ 0x21
 800ecce:	2104      	movs	r1, #4
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f000 fc0b 	bl	800f4ec <_calloc_r>
 800ecd6:	69e3      	ldr	r3, [r4, #28]
 800ecd8:	60f0      	str	r0, [r6, #12]
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d1e4      	bne.n	800ecaa <_Balloc+0x2e>
 800ece0:	2000      	movs	r0, #0
 800ece2:	bd70      	pop	{r4, r5, r6, pc}
 800ece4:	6802      	ldr	r2, [r0, #0]
 800ece6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ecea:	2300      	movs	r3, #0
 800ecec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ecf0:	e7f7      	b.n	800ece2 <_Balloc+0x66>
 800ecf2:	bf00      	nop
 800ecf4:	08010ad0 	.word	0x08010ad0
 800ecf8:	08010c25 	.word	0x08010c25

0800ecfc <_Bfree>:
 800ecfc:	b570      	push	{r4, r5, r6, lr}
 800ecfe:	69c6      	ldr	r6, [r0, #28]
 800ed00:	4605      	mov	r5, r0
 800ed02:	460c      	mov	r4, r1
 800ed04:	b976      	cbnz	r6, 800ed24 <_Bfree+0x28>
 800ed06:	2010      	movs	r0, #16
 800ed08:	f7fe f962 	bl	800cfd0 <malloc>
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	61e8      	str	r0, [r5, #28]
 800ed10:	b920      	cbnz	r0, 800ed1c <_Bfree+0x20>
 800ed12:	4b09      	ldr	r3, [pc, #36]	@ (800ed38 <_Bfree+0x3c>)
 800ed14:	4809      	ldr	r0, [pc, #36]	@ (800ed3c <_Bfree+0x40>)
 800ed16:	218f      	movs	r1, #143	@ 0x8f
 800ed18:	f7ff f8f0 	bl	800defc <__assert_func>
 800ed1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed20:	6006      	str	r6, [r0, #0]
 800ed22:	60c6      	str	r6, [r0, #12]
 800ed24:	b13c      	cbz	r4, 800ed36 <_Bfree+0x3a>
 800ed26:	69eb      	ldr	r3, [r5, #28]
 800ed28:	6862      	ldr	r2, [r4, #4]
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed30:	6021      	str	r1, [r4, #0]
 800ed32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ed36:	bd70      	pop	{r4, r5, r6, pc}
 800ed38:	08010ad0 	.word	0x08010ad0
 800ed3c:	08010c25 	.word	0x08010c25

0800ed40 <__multadd>:
 800ed40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed44:	690d      	ldr	r5, [r1, #16]
 800ed46:	4607      	mov	r7, r0
 800ed48:	460c      	mov	r4, r1
 800ed4a:	461e      	mov	r6, r3
 800ed4c:	f101 0c14 	add.w	ip, r1, #20
 800ed50:	2000      	movs	r0, #0
 800ed52:	f8dc 3000 	ldr.w	r3, [ip]
 800ed56:	b299      	uxth	r1, r3
 800ed58:	fb02 6101 	mla	r1, r2, r1, r6
 800ed5c:	0c1e      	lsrs	r6, r3, #16
 800ed5e:	0c0b      	lsrs	r3, r1, #16
 800ed60:	fb02 3306 	mla	r3, r2, r6, r3
 800ed64:	b289      	uxth	r1, r1
 800ed66:	3001      	adds	r0, #1
 800ed68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ed6c:	4285      	cmp	r5, r0
 800ed6e:	f84c 1b04 	str.w	r1, [ip], #4
 800ed72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ed76:	dcec      	bgt.n	800ed52 <__multadd+0x12>
 800ed78:	b30e      	cbz	r6, 800edbe <__multadd+0x7e>
 800ed7a:	68a3      	ldr	r3, [r4, #8]
 800ed7c:	42ab      	cmp	r3, r5
 800ed7e:	dc19      	bgt.n	800edb4 <__multadd+0x74>
 800ed80:	6861      	ldr	r1, [r4, #4]
 800ed82:	4638      	mov	r0, r7
 800ed84:	3101      	adds	r1, #1
 800ed86:	f7ff ff79 	bl	800ec7c <_Balloc>
 800ed8a:	4680      	mov	r8, r0
 800ed8c:	b928      	cbnz	r0, 800ed9a <__multadd+0x5a>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	4b0c      	ldr	r3, [pc, #48]	@ (800edc4 <__multadd+0x84>)
 800ed92:	480d      	ldr	r0, [pc, #52]	@ (800edc8 <__multadd+0x88>)
 800ed94:	21ba      	movs	r1, #186	@ 0xba
 800ed96:	f7ff f8b1 	bl	800defc <__assert_func>
 800ed9a:	6922      	ldr	r2, [r4, #16]
 800ed9c:	3202      	adds	r2, #2
 800ed9e:	f104 010c 	add.w	r1, r4, #12
 800eda2:	0092      	lsls	r2, r2, #2
 800eda4:	300c      	adds	r0, #12
 800eda6:	f7ff f89a 	bl	800dede <memcpy>
 800edaa:	4621      	mov	r1, r4
 800edac:	4638      	mov	r0, r7
 800edae:	f7ff ffa5 	bl	800ecfc <_Bfree>
 800edb2:	4644      	mov	r4, r8
 800edb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800edb8:	3501      	adds	r5, #1
 800edba:	615e      	str	r6, [r3, #20]
 800edbc:	6125      	str	r5, [r4, #16]
 800edbe:	4620      	mov	r0, r4
 800edc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edc4:	08010c14 	.word	0x08010c14
 800edc8:	08010c25 	.word	0x08010c25

0800edcc <__hi0bits>:
 800edcc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800edd0:	4603      	mov	r3, r0
 800edd2:	bf36      	itet	cc
 800edd4:	0403      	lslcc	r3, r0, #16
 800edd6:	2000      	movcs	r0, #0
 800edd8:	2010      	movcc	r0, #16
 800edda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800edde:	bf3c      	itt	cc
 800ede0:	021b      	lslcc	r3, r3, #8
 800ede2:	3008      	addcc	r0, #8
 800ede4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ede8:	bf3c      	itt	cc
 800edea:	011b      	lslcc	r3, r3, #4
 800edec:	3004      	addcc	r0, #4
 800edee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800edf2:	bf3c      	itt	cc
 800edf4:	009b      	lslcc	r3, r3, #2
 800edf6:	3002      	addcc	r0, #2
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	db05      	blt.n	800ee08 <__hi0bits+0x3c>
 800edfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ee00:	f100 0001 	add.w	r0, r0, #1
 800ee04:	bf08      	it	eq
 800ee06:	2020      	moveq	r0, #32
 800ee08:	4770      	bx	lr

0800ee0a <__lo0bits>:
 800ee0a:	6803      	ldr	r3, [r0, #0]
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	f013 0007 	ands.w	r0, r3, #7
 800ee12:	d00b      	beq.n	800ee2c <__lo0bits+0x22>
 800ee14:	07d9      	lsls	r1, r3, #31
 800ee16:	d421      	bmi.n	800ee5c <__lo0bits+0x52>
 800ee18:	0798      	lsls	r0, r3, #30
 800ee1a:	bf49      	itett	mi
 800ee1c:	085b      	lsrmi	r3, r3, #1
 800ee1e:	089b      	lsrpl	r3, r3, #2
 800ee20:	2001      	movmi	r0, #1
 800ee22:	6013      	strmi	r3, [r2, #0]
 800ee24:	bf5c      	itt	pl
 800ee26:	6013      	strpl	r3, [r2, #0]
 800ee28:	2002      	movpl	r0, #2
 800ee2a:	4770      	bx	lr
 800ee2c:	b299      	uxth	r1, r3
 800ee2e:	b909      	cbnz	r1, 800ee34 <__lo0bits+0x2a>
 800ee30:	0c1b      	lsrs	r3, r3, #16
 800ee32:	2010      	movs	r0, #16
 800ee34:	b2d9      	uxtb	r1, r3
 800ee36:	b909      	cbnz	r1, 800ee3c <__lo0bits+0x32>
 800ee38:	3008      	adds	r0, #8
 800ee3a:	0a1b      	lsrs	r3, r3, #8
 800ee3c:	0719      	lsls	r1, r3, #28
 800ee3e:	bf04      	itt	eq
 800ee40:	091b      	lsreq	r3, r3, #4
 800ee42:	3004      	addeq	r0, #4
 800ee44:	0799      	lsls	r1, r3, #30
 800ee46:	bf04      	itt	eq
 800ee48:	089b      	lsreq	r3, r3, #2
 800ee4a:	3002      	addeq	r0, #2
 800ee4c:	07d9      	lsls	r1, r3, #31
 800ee4e:	d403      	bmi.n	800ee58 <__lo0bits+0x4e>
 800ee50:	085b      	lsrs	r3, r3, #1
 800ee52:	f100 0001 	add.w	r0, r0, #1
 800ee56:	d003      	beq.n	800ee60 <__lo0bits+0x56>
 800ee58:	6013      	str	r3, [r2, #0]
 800ee5a:	4770      	bx	lr
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	4770      	bx	lr
 800ee60:	2020      	movs	r0, #32
 800ee62:	4770      	bx	lr

0800ee64 <__i2b>:
 800ee64:	b510      	push	{r4, lr}
 800ee66:	460c      	mov	r4, r1
 800ee68:	2101      	movs	r1, #1
 800ee6a:	f7ff ff07 	bl	800ec7c <_Balloc>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	b928      	cbnz	r0, 800ee7e <__i2b+0x1a>
 800ee72:	4b05      	ldr	r3, [pc, #20]	@ (800ee88 <__i2b+0x24>)
 800ee74:	4805      	ldr	r0, [pc, #20]	@ (800ee8c <__i2b+0x28>)
 800ee76:	f240 1145 	movw	r1, #325	@ 0x145
 800ee7a:	f7ff f83f 	bl	800defc <__assert_func>
 800ee7e:	2301      	movs	r3, #1
 800ee80:	6144      	str	r4, [r0, #20]
 800ee82:	6103      	str	r3, [r0, #16]
 800ee84:	bd10      	pop	{r4, pc}
 800ee86:	bf00      	nop
 800ee88:	08010c14 	.word	0x08010c14
 800ee8c:	08010c25 	.word	0x08010c25

0800ee90 <__multiply>:
 800ee90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee94:	4617      	mov	r7, r2
 800ee96:	690a      	ldr	r2, [r1, #16]
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	bfa8      	it	ge
 800ee9e:	463b      	movge	r3, r7
 800eea0:	4689      	mov	r9, r1
 800eea2:	bfa4      	itt	ge
 800eea4:	460f      	movge	r7, r1
 800eea6:	4699      	movge	r9, r3
 800eea8:	693d      	ldr	r5, [r7, #16]
 800eeaa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	6879      	ldr	r1, [r7, #4]
 800eeb2:	eb05 060a 	add.w	r6, r5, sl
 800eeb6:	42b3      	cmp	r3, r6
 800eeb8:	b085      	sub	sp, #20
 800eeba:	bfb8      	it	lt
 800eebc:	3101      	addlt	r1, #1
 800eebe:	f7ff fedd 	bl	800ec7c <_Balloc>
 800eec2:	b930      	cbnz	r0, 800eed2 <__multiply+0x42>
 800eec4:	4602      	mov	r2, r0
 800eec6:	4b41      	ldr	r3, [pc, #260]	@ (800efcc <__multiply+0x13c>)
 800eec8:	4841      	ldr	r0, [pc, #260]	@ (800efd0 <__multiply+0x140>)
 800eeca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eece:	f7ff f815 	bl	800defc <__assert_func>
 800eed2:	f100 0414 	add.w	r4, r0, #20
 800eed6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800eeda:	4623      	mov	r3, r4
 800eedc:	2200      	movs	r2, #0
 800eede:	4573      	cmp	r3, lr
 800eee0:	d320      	bcc.n	800ef24 <__multiply+0x94>
 800eee2:	f107 0814 	add.w	r8, r7, #20
 800eee6:	f109 0114 	add.w	r1, r9, #20
 800eeea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800eeee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800eef2:	9302      	str	r3, [sp, #8]
 800eef4:	1beb      	subs	r3, r5, r7
 800eef6:	3b15      	subs	r3, #21
 800eef8:	f023 0303 	bic.w	r3, r3, #3
 800eefc:	3304      	adds	r3, #4
 800eefe:	3715      	adds	r7, #21
 800ef00:	42bd      	cmp	r5, r7
 800ef02:	bf38      	it	cc
 800ef04:	2304      	movcc	r3, #4
 800ef06:	9301      	str	r3, [sp, #4]
 800ef08:	9b02      	ldr	r3, [sp, #8]
 800ef0a:	9103      	str	r1, [sp, #12]
 800ef0c:	428b      	cmp	r3, r1
 800ef0e:	d80c      	bhi.n	800ef2a <__multiply+0x9a>
 800ef10:	2e00      	cmp	r6, #0
 800ef12:	dd03      	ble.n	800ef1c <__multiply+0x8c>
 800ef14:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d055      	beq.n	800efc8 <__multiply+0x138>
 800ef1c:	6106      	str	r6, [r0, #16]
 800ef1e:	b005      	add	sp, #20
 800ef20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef24:	f843 2b04 	str.w	r2, [r3], #4
 800ef28:	e7d9      	b.n	800eede <__multiply+0x4e>
 800ef2a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ef2e:	f1ba 0f00 	cmp.w	sl, #0
 800ef32:	d01f      	beq.n	800ef74 <__multiply+0xe4>
 800ef34:	46c4      	mov	ip, r8
 800ef36:	46a1      	mov	r9, r4
 800ef38:	2700      	movs	r7, #0
 800ef3a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ef3e:	f8d9 3000 	ldr.w	r3, [r9]
 800ef42:	fa1f fb82 	uxth.w	fp, r2
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	fb0a 330b 	mla	r3, sl, fp, r3
 800ef4c:	443b      	add	r3, r7
 800ef4e:	f8d9 7000 	ldr.w	r7, [r9]
 800ef52:	0c12      	lsrs	r2, r2, #16
 800ef54:	0c3f      	lsrs	r7, r7, #16
 800ef56:	fb0a 7202 	mla	r2, sl, r2, r7
 800ef5a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ef5e:	b29b      	uxth	r3, r3
 800ef60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef64:	4565      	cmp	r5, ip
 800ef66:	f849 3b04 	str.w	r3, [r9], #4
 800ef6a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ef6e:	d8e4      	bhi.n	800ef3a <__multiply+0xaa>
 800ef70:	9b01      	ldr	r3, [sp, #4]
 800ef72:	50e7      	str	r7, [r4, r3]
 800ef74:	9b03      	ldr	r3, [sp, #12]
 800ef76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ef7a:	3104      	adds	r1, #4
 800ef7c:	f1b9 0f00 	cmp.w	r9, #0
 800ef80:	d020      	beq.n	800efc4 <__multiply+0x134>
 800ef82:	6823      	ldr	r3, [r4, #0]
 800ef84:	4647      	mov	r7, r8
 800ef86:	46a4      	mov	ip, r4
 800ef88:	f04f 0a00 	mov.w	sl, #0
 800ef8c:	f8b7 b000 	ldrh.w	fp, [r7]
 800ef90:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ef94:	fb09 220b 	mla	r2, r9, fp, r2
 800ef98:	4452      	add	r2, sl
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efa0:	f84c 3b04 	str.w	r3, [ip], #4
 800efa4:	f857 3b04 	ldr.w	r3, [r7], #4
 800efa8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800efac:	f8bc 3000 	ldrh.w	r3, [ip]
 800efb0:	fb09 330a 	mla	r3, r9, sl, r3
 800efb4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800efb8:	42bd      	cmp	r5, r7
 800efba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800efbe:	d8e5      	bhi.n	800ef8c <__multiply+0xfc>
 800efc0:	9a01      	ldr	r2, [sp, #4]
 800efc2:	50a3      	str	r3, [r4, r2]
 800efc4:	3404      	adds	r4, #4
 800efc6:	e79f      	b.n	800ef08 <__multiply+0x78>
 800efc8:	3e01      	subs	r6, #1
 800efca:	e7a1      	b.n	800ef10 <__multiply+0x80>
 800efcc:	08010c14 	.word	0x08010c14
 800efd0:	08010c25 	.word	0x08010c25

0800efd4 <__pow5mult>:
 800efd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efd8:	4615      	mov	r5, r2
 800efda:	f012 0203 	ands.w	r2, r2, #3
 800efde:	4607      	mov	r7, r0
 800efe0:	460e      	mov	r6, r1
 800efe2:	d007      	beq.n	800eff4 <__pow5mult+0x20>
 800efe4:	4c25      	ldr	r4, [pc, #148]	@ (800f07c <__pow5mult+0xa8>)
 800efe6:	3a01      	subs	r2, #1
 800efe8:	2300      	movs	r3, #0
 800efea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800efee:	f7ff fea7 	bl	800ed40 <__multadd>
 800eff2:	4606      	mov	r6, r0
 800eff4:	10ad      	asrs	r5, r5, #2
 800eff6:	d03d      	beq.n	800f074 <__pow5mult+0xa0>
 800eff8:	69fc      	ldr	r4, [r7, #28]
 800effa:	b97c      	cbnz	r4, 800f01c <__pow5mult+0x48>
 800effc:	2010      	movs	r0, #16
 800effe:	f7fd ffe7 	bl	800cfd0 <malloc>
 800f002:	4602      	mov	r2, r0
 800f004:	61f8      	str	r0, [r7, #28]
 800f006:	b928      	cbnz	r0, 800f014 <__pow5mult+0x40>
 800f008:	4b1d      	ldr	r3, [pc, #116]	@ (800f080 <__pow5mult+0xac>)
 800f00a:	481e      	ldr	r0, [pc, #120]	@ (800f084 <__pow5mult+0xb0>)
 800f00c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f010:	f7fe ff74 	bl	800defc <__assert_func>
 800f014:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f018:	6004      	str	r4, [r0, #0]
 800f01a:	60c4      	str	r4, [r0, #12]
 800f01c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f020:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f024:	b94c      	cbnz	r4, 800f03a <__pow5mult+0x66>
 800f026:	f240 2171 	movw	r1, #625	@ 0x271
 800f02a:	4638      	mov	r0, r7
 800f02c:	f7ff ff1a 	bl	800ee64 <__i2b>
 800f030:	2300      	movs	r3, #0
 800f032:	f8c8 0008 	str.w	r0, [r8, #8]
 800f036:	4604      	mov	r4, r0
 800f038:	6003      	str	r3, [r0, #0]
 800f03a:	f04f 0900 	mov.w	r9, #0
 800f03e:	07eb      	lsls	r3, r5, #31
 800f040:	d50a      	bpl.n	800f058 <__pow5mult+0x84>
 800f042:	4631      	mov	r1, r6
 800f044:	4622      	mov	r2, r4
 800f046:	4638      	mov	r0, r7
 800f048:	f7ff ff22 	bl	800ee90 <__multiply>
 800f04c:	4631      	mov	r1, r6
 800f04e:	4680      	mov	r8, r0
 800f050:	4638      	mov	r0, r7
 800f052:	f7ff fe53 	bl	800ecfc <_Bfree>
 800f056:	4646      	mov	r6, r8
 800f058:	106d      	asrs	r5, r5, #1
 800f05a:	d00b      	beq.n	800f074 <__pow5mult+0xa0>
 800f05c:	6820      	ldr	r0, [r4, #0]
 800f05e:	b938      	cbnz	r0, 800f070 <__pow5mult+0x9c>
 800f060:	4622      	mov	r2, r4
 800f062:	4621      	mov	r1, r4
 800f064:	4638      	mov	r0, r7
 800f066:	f7ff ff13 	bl	800ee90 <__multiply>
 800f06a:	6020      	str	r0, [r4, #0]
 800f06c:	f8c0 9000 	str.w	r9, [r0]
 800f070:	4604      	mov	r4, r0
 800f072:	e7e4      	b.n	800f03e <__pow5mult+0x6a>
 800f074:	4630      	mov	r0, r6
 800f076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f07a:	bf00      	nop
 800f07c:	08010c9c 	.word	0x08010c9c
 800f080:	08010ad0 	.word	0x08010ad0
 800f084:	08010c25 	.word	0x08010c25

0800f088 <__lshift>:
 800f088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f08c:	460c      	mov	r4, r1
 800f08e:	6849      	ldr	r1, [r1, #4]
 800f090:	6923      	ldr	r3, [r4, #16]
 800f092:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f096:	68a3      	ldr	r3, [r4, #8]
 800f098:	4607      	mov	r7, r0
 800f09a:	4691      	mov	r9, r2
 800f09c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f0a0:	f108 0601 	add.w	r6, r8, #1
 800f0a4:	42b3      	cmp	r3, r6
 800f0a6:	db0b      	blt.n	800f0c0 <__lshift+0x38>
 800f0a8:	4638      	mov	r0, r7
 800f0aa:	f7ff fde7 	bl	800ec7c <_Balloc>
 800f0ae:	4605      	mov	r5, r0
 800f0b0:	b948      	cbnz	r0, 800f0c6 <__lshift+0x3e>
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	4b28      	ldr	r3, [pc, #160]	@ (800f158 <__lshift+0xd0>)
 800f0b6:	4829      	ldr	r0, [pc, #164]	@ (800f15c <__lshift+0xd4>)
 800f0b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f0bc:	f7fe ff1e 	bl	800defc <__assert_func>
 800f0c0:	3101      	adds	r1, #1
 800f0c2:	005b      	lsls	r3, r3, #1
 800f0c4:	e7ee      	b.n	800f0a4 <__lshift+0x1c>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	f100 0114 	add.w	r1, r0, #20
 800f0cc:	f100 0210 	add.w	r2, r0, #16
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	4553      	cmp	r3, sl
 800f0d4:	db33      	blt.n	800f13e <__lshift+0xb6>
 800f0d6:	6920      	ldr	r0, [r4, #16]
 800f0d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f0dc:	f104 0314 	add.w	r3, r4, #20
 800f0e0:	f019 091f 	ands.w	r9, r9, #31
 800f0e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f0e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f0ec:	d02b      	beq.n	800f146 <__lshift+0xbe>
 800f0ee:	f1c9 0e20 	rsb	lr, r9, #32
 800f0f2:	468a      	mov	sl, r1
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	6818      	ldr	r0, [r3, #0]
 800f0f8:	fa00 f009 	lsl.w	r0, r0, r9
 800f0fc:	4310      	orrs	r0, r2
 800f0fe:	f84a 0b04 	str.w	r0, [sl], #4
 800f102:	f853 2b04 	ldr.w	r2, [r3], #4
 800f106:	459c      	cmp	ip, r3
 800f108:	fa22 f20e 	lsr.w	r2, r2, lr
 800f10c:	d8f3      	bhi.n	800f0f6 <__lshift+0x6e>
 800f10e:	ebac 0304 	sub.w	r3, ip, r4
 800f112:	3b15      	subs	r3, #21
 800f114:	f023 0303 	bic.w	r3, r3, #3
 800f118:	3304      	adds	r3, #4
 800f11a:	f104 0015 	add.w	r0, r4, #21
 800f11e:	4560      	cmp	r0, ip
 800f120:	bf88      	it	hi
 800f122:	2304      	movhi	r3, #4
 800f124:	50ca      	str	r2, [r1, r3]
 800f126:	b10a      	cbz	r2, 800f12c <__lshift+0xa4>
 800f128:	f108 0602 	add.w	r6, r8, #2
 800f12c:	3e01      	subs	r6, #1
 800f12e:	4638      	mov	r0, r7
 800f130:	612e      	str	r6, [r5, #16]
 800f132:	4621      	mov	r1, r4
 800f134:	f7ff fde2 	bl	800ecfc <_Bfree>
 800f138:	4628      	mov	r0, r5
 800f13a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f13e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f142:	3301      	adds	r3, #1
 800f144:	e7c5      	b.n	800f0d2 <__lshift+0x4a>
 800f146:	3904      	subs	r1, #4
 800f148:	f853 2b04 	ldr.w	r2, [r3], #4
 800f14c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f150:	459c      	cmp	ip, r3
 800f152:	d8f9      	bhi.n	800f148 <__lshift+0xc0>
 800f154:	e7ea      	b.n	800f12c <__lshift+0xa4>
 800f156:	bf00      	nop
 800f158:	08010c14 	.word	0x08010c14
 800f15c:	08010c25 	.word	0x08010c25

0800f160 <__mcmp>:
 800f160:	690a      	ldr	r2, [r1, #16]
 800f162:	4603      	mov	r3, r0
 800f164:	6900      	ldr	r0, [r0, #16]
 800f166:	1a80      	subs	r0, r0, r2
 800f168:	b530      	push	{r4, r5, lr}
 800f16a:	d10e      	bne.n	800f18a <__mcmp+0x2a>
 800f16c:	3314      	adds	r3, #20
 800f16e:	3114      	adds	r1, #20
 800f170:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f174:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f178:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f17c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f180:	4295      	cmp	r5, r2
 800f182:	d003      	beq.n	800f18c <__mcmp+0x2c>
 800f184:	d205      	bcs.n	800f192 <__mcmp+0x32>
 800f186:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f18a:	bd30      	pop	{r4, r5, pc}
 800f18c:	42a3      	cmp	r3, r4
 800f18e:	d3f3      	bcc.n	800f178 <__mcmp+0x18>
 800f190:	e7fb      	b.n	800f18a <__mcmp+0x2a>
 800f192:	2001      	movs	r0, #1
 800f194:	e7f9      	b.n	800f18a <__mcmp+0x2a>
	...

0800f198 <__mdiff>:
 800f198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f19c:	4689      	mov	r9, r1
 800f19e:	4606      	mov	r6, r0
 800f1a0:	4611      	mov	r1, r2
 800f1a2:	4648      	mov	r0, r9
 800f1a4:	4614      	mov	r4, r2
 800f1a6:	f7ff ffdb 	bl	800f160 <__mcmp>
 800f1aa:	1e05      	subs	r5, r0, #0
 800f1ac:	d112      	bne.n	800f1d4 <__mdiff+0x3c>
 800f1ae:	4629      	mov	r1, r5
 800f1b0:	4630      	mov	r0, r6
 800f1b2:	f7ff fd63 	bl	800ec7c <_Balloc>
 800f1b6:	4602      	mov	r2, r0
 800f1b8:	b928      	cbnz	r0, 800f1c6 <__mdiff+0x2e>
 800f1ba:	4b3f      	ldr	r3, [pc, #252]	@ (800f2b8 <__mdiff+0x120>)
 800f1bc:	f240 2137 	movw	r1, #567	@ 0x237
 800f1c0:	483e      	ldr	r0, [pc, #248]	@ (800f2bc <__mdiff+0x124>)
 800f1c2:	f7fe fe9b 	bl	800defc <__assert_func>
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f1cc:	4610      	mov	r0, r2
 800f1ce:	b003      	add	sp, #12
 800f1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d4:	bfbc      	itt	lt
 800f1d6:	464b      	movlt	r3, r9
 800f1d8:	46a1      	movlt	r9, r4
 800f1da:	4630      	mov	r0, r6
 800f1dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f1e0:	bfba      	itte	lt
 800f1e2:	461c      	movlt	r4, r3
 800f1e4:	2501      	movlt	r5, #1
 800f1e6:	2500      	movge	r5, #0
 800f1e8:	f7ff fd48 	bl	800ec7c <_Balloc>
 800f1ec:	4602      	mov	r2, r0
 800f1ee:	b918      	cbnz	r0, 800f1f8 <__mdiff+0x60>
 800f1f0:	4b31      	ldr	r3, [pc, #196]	@ (800f2b8 <__mdiff+0x120>)
 800f1f2:	f240 2145 	movw	r1, #581	@ 0x245
 800f1f6:	e7e3      	b.n	800f1c0 <__mdiff+0x28>
 800f1f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f1fc:	6926      	ldr	r6, [r4, #16]
 800f1fe:	60c5      	str	r5, [r0, #12]
 800f200:	f109 0310 	add.w	r3, r9, #16
 800f204:	f109 0514 	add.w	r5, r9, #20
 800f208:	f104 0e14 	add.w	lr, r4, #20
 800f20c:	f100 0b14 	add.w	fp, r0, #20
 800f210:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f214:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f218:	9301      	str	r3, [sp, #4]
 800f21a:	46d9      	mov	r9, fp
 800f21c:	f04f 0c00 	mov.w	ip, #0
 800f220:	9b01      	ldr	r3, [sp, #4]
 800f222:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f226:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f22a:	9301      	str	r3, [sp, #4]
 800f22c:	fa1f f38a 	uxth.w	r3, sl
 800f230:	4619      	mov	r1, r3
 800f232:	b283      	uxth	r3, r0
 800f234:	1acb      	subs	r3, r1, r3
 800f236:	0c00      	lsrs	r0, r0, #16
 800f238:	4463      	add	r3, ip
 800f23a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f23e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f242:	b29b      	uxth	r3, r3
 800f244:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f248:	4576      	cmp	r6, lr
 800f24a:	f849 3b04 	str.w	r3, [r9], #4
 800f24e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f252:	d8e5      	bhi.n	800f220 <__mdiff+0x88>
 800f254:	1b33      	subs	r3, r6, r4
 800f256:	3b15      	subs	r3, #21
 800f258:	f023 0303 	bic.w	r3, r3, #3
 800f25c:	3415      	adds	r4, #21
 800f25e:	3304      	adds	r3, #4
 800f260:	42a6      	cmp	r6, r4
 800f262:	bf38      	it	cc
 800f264:	2304      	movcc	r3, #4
 800f266:	441d      	add	r5, r3
 800f268:	445b      	add	r3, fp
 800f26a:	461e      	mov	r6, r3
 800f26c:	462c      	mov	r4, r5
 800f26e:	4544      	cmp	r4, r8
 800f270:	d30e      	bcc.n	800f290 <__mdiff+0xf8>
 800f272:	f108 0103 	add.w	r1, r8, #3
 800f276:	1b49      	subs	r1, r1, r5
 800f278:	f021 0103 	bic.w	r1, r1, #3
 800f27c:	3d03      	subs	r5, #3
 800f27e:	45a8      	cmp	r8, r5
 800f280:	bf38      	it	cc
 800f282:	2100      	movcc	r1, #0
 800f284:	440b      	add	r3, r1
 800f286:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f28a:	b191      	cbz	r1, 800f2b2 <__mdiff+0x11a>
 800f28c:	6117      	str	r7, [r2, #16]
 800f28e:	e79d      	b.n	800f1cc <__mdiff+0x34>
 800f290:	f854 1b04 	ldr.w	r1, [r4], #4
 800f294:	46e6      	mov	lr, ip
 800f296:	0c08      	lsrs	r0, r1, #16
 800f298:	fa1c fc81 	uxtah	ip, ip, r1
 800f29c:	4471      	add	r1, lr
 800f29e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f2a2:	b289      	uxth	r1, r1
 800f2a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f2a8:	f846 1b04 	str.w	r1, [r6], #4
 800f2ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f2b0:	e7dd      	b.n	800f26e <__mdiff+0xd6>
 800f2b2:	3f01      	subs	r7, #1
 800f2b4:	e7e7      	b.n	800f286 <__mdiff+0xee>
 800f2b6:	bf00      	nop
 800f2b8:	08010c14 	.word	0x08010c14
 800f2bc:	08010c25 	.word	0x08010c25

0800f2c0 <__d2b>:
 800f2c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f2c4:	460f      	mov	r7, r1
 800f2c6:	2101      	movs	r1, #1
 800f2c8:	ec59 8b10 	vmov	r8, r9, d0
 800f2cc:	4616      	mov	r6, r2
 800f2ce:	f7ff fcd5 	bl	800ec7c <_Balloc>
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	b930      	cbnz	r0, 800f2e4 <__d2b+0x24>
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	4b23      	ldr	r3, [pc, #140]	@ (800f368 <__d2b+0xa8>)
 800f2da:	4824      	ldr	r0, [pc, #144]	@ (800f36c <__d2b+0xac>)
 800f2dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800f2e0:	f7fe fe0c 	bl	800defc <__assert_func>
 800f2e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f2e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f2ec:	b10d      	cbz	r5, 800f2f2 <__d2b+0x32>
 800f2ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f2f2:	9301      	str	r3, [sp, #4]
 800f2f4:	f1b8 0300 	subs.w	r3, r8, #0
 800f2f8:	d023      	beq.n	800f342 <__d2b+0x82>
 800f2fa:	4668      	mov	r0, sp
 800f2fc:	9300      	str	r3, [sp, #0]
 800f2fe:	f7ff fd84 	bl	800ee0a <__lo0bits>
 800f302:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f306:	b1d0      	cbz	r0, 800f33e <__d2b+0x7e>
 800f308:	f1c0 0320 	rsb	r3, r0, #32
 800f30c:	fa02 f303 	lsl.w	r3, r2, r3
 800f310:	430b      	orrs	r3, r1
 800f312:	40c2      	lsrs	r2, r0
 800f314:	6163      	str	r3, [r4, #20]
 800f316:	9201      	str	r2, [sp, #4]
 800f318:	9b01      	ldr	r3, [sp, #4]
 800f31a:	61a3      	str	r3, [r4, #24]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	bf0c      	ite	eq
 800f320:	2201      	moveq	r2, #1
 800f322:	2202      	movne	r2, #2
 800f324:	6122      	str	r2, [r4, #16]
 800f326:	b1a5      	cbz	r5, 800f352 <__d2b+0x92>
 800f328:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f32c:	4405      	add	r5, r0
 800f32e:	603d      	str	r5, [r7, #0]
 800f330:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f334:	6030      	str	r0, [r6, #0]
 800f336:	4620      	mov	r0, r4
 800f338:	b003      	add	sp, #12
 800f33a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f33e:	6161      	str	r1, [r4, #20]
 800f340:	e7ea      	b.n	800f318 <__d2b+0x58>
 800f342:	a801      	add	r0, sp, #4
 800f344:	f7ff fd61 	bl	800ee0a <__lo0bits>
 800f348:	9b01      	ldr	r3, [sp, #4]
 800f34a:	6163      	str	r3, [r4, #20]
 800f34c:	3020      	adds	r0, #32
 800f34e:	2201      	movs	r2, #1
 800f350:	e7e8      	b.n	800f324 <__d2b+0x64>
 800f352:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f356:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f35a:	6038      	str	r0, [r7, #0]
 800f35c:	6918      	ldr	r0, [r3, #16]
 800f35e:	f7ff fd35 	bl	800edcc <__hi0bits>
 800f362:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f366:	e7e5      	b.n	800f334 <__d2b+0x74>
 800f368:	08010c14 	.word	0x08010c14
 800f36c:	08010c25 	.word	0x08010c25

0800f370 <__sflush_r>:
 800f370:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f378:	0716      	lsls	r6, r2, #28
 800f37a:	4605      	mov	r5, r0
 800f37c:	460c      	mov	r4, r1
 800f37e:	d454      	bmi.n	800f42a <__sflush_r+0xba>
 800f380:	684b      	ldr	r3, [r1, #4]
 800f382:	2b00      	cmp	r3, #0
 800f384:	dc02      	bgt.n	800f38c <__sflush_r+0x1c>
 800f386:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f388:	2b00      	cmp	r3, #0
 800f38a:	dd48      	ble.n	800f41e <__sflush_r+0xae>
 800f38c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f38e:	2e00      	cmp	r6, #0
 800f390:	d045      	beq.n	800f41e <__sflush_r+0xae>
 800f392:	2300      	movs	r3, #0
 800f394:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f398:	682f      	ldr	r7, [r5, #0]
 800f39a:	6a21      	ldr	r1, [r4, #32]
 800f39c:	602b      	str	r3, [r5, #0]
 800f39e:	d030      	beq.n	800f402 <__sflush_r+0x92>
 800f3a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f3a2:	89a3      	ldrh	r3, [r4, #12]
 800f3a4:	0759      	lsls	r1, r3, #29
 800f3a6:	d505      	bpl.n	800f3b4 <__sflush_r+0x44>
 800f3a8:	6863      	ldr	r3, [r4, #4]
 800f3aa:	1ad2      	subs	r2, r2, r3
 800f3ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f3ae:	b10b      	cbz	r3, 800f3b4 <__sflush_r+0x44>
 800f3b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f3b2:	1ad2      	subs	r2, r2, r3
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f3b8:	6a21      	ldr	r1, [r4, #32]
 800f3ba:	4628      	mov	r0, r5
 800f3bc:	47b0      	blx	r6
 800f3be:	1c43      	adds	r3, r0, #1
 800f3c0:	89a3      	ldrh	r3, [r4, #12]
 800f3c2:	d106      	bne.n	800f3d2 <__sflush_r+0x62>
 800f3c4:	6829      	ldr	r1, [r5, #0]
 800f3c6:	291d      	cmp	r1, #29
 800f3c8:	d82b      	bhi.n	800f422 <__sflush_r+0xb2>
 800f3ca:	4a2a      	ldr	r2, [pc, #168]	@ (800f474 <__sflush_r+0x104>)
 800f3cc:	40ca      	lsrs	r2, r1
 800f3ce:	07d6      	lsls	r6, r2, #31
 800f3d0:	d527      	bpl.n	800f422 <__sflush_r+0xb2>
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	6062      	str	r2, [r4, #4]
 800f3d6:	04d9      	lsls	r1, r3, #19
 800f3d8:	6922      	ldr	r2, [r4, #16]
 800f3da:	6022      	str	r2, [r4, #0]
 800f3dc:	d504      	bpl.n	800f3e8 <__sflush_r+0x78>
 800f3de:	1c42      	adds	r2, r0, #1
 800f3e0:	d101      	bne.n	800f3e6 <__sflush_r+0x76>
 800f3e2:	682b      	ldr	r3, [r5, #0]
 800f3e4:	b903      	cbnz	r3, 800f3e8 <__sflush_r+0x78>
 800f3e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f3e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f3ea:	602f      	str	r7, [r5, #0]
 800f3ec:	b1b9      	cbz	r1, 800f41e <__sflush_r+0xae>
 800f3ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f3f2:	4299      	cmp	r1, r3
 800f3f4:	d002      	beq.n	800f3fc <__sflush_r+0x8c>
 800f3f6:	4628      	mov	r0, r5
 800f3f8:	f7ff fbf6 	bl	800ebe8 <_free_r>
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800f400:	e00d      	b.n	800f41e <__sflush_r+0xae>
 800f402:	2301      	movs	r3, #1
 800f404:	4628      	mov	r0, r5
 800f406:	47b0      	blx	r6
 800f408:	4602      	mov	r2, r0
 800f40a:	1c50      	adds	r0, r2, #1
 800f40c:	d1c9      	bne.n	800f3a2 <__sflush_r+0x32>
 800f40e:	682b      	ldr	r3, [r5, #0]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d0c6      	beq.n	800f3a2 <__sflush_r+0x32>
 800f414:	2b1d      	cmp	r3, #29
 800f416:	d001      	beq.n	800f41c <__sflush_r+0xac>
 800f418:	2b16      	cmp	r3, #22
 800f41a:	d11e      	bne.n	800f45a <__sflush_r+0xea>
 800f41c:	602f      	str	r7, [r5, #0]
 800f41e:	2000      	movs	r0, #0
 800f420:	e022      	b.n	800f468 <__sflush_r+0xf8>
 800f422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f426:	b21b      	sxth	r3, r3
 800f428:	e01b      	b.n	800f462 <__sflush_r+0xf2>
 800f42a:	690f      	ldr	r7, [r1, #16]
 800f42c:	2f00      	cmp	r7, #0
 800f42e:	d0f6      	beq.n	800f41e <__sflush_r+0xae>
 800f430:	0793      	lsls	r3, r2, #30
 800f432:	680e      	ldr	r6, [r1, #0]
 800f434:	bf08      	it	eq
 800f436:	694b      	ldreq	r3, [r1, #20]
 800f438:	600f      	str	r7, [r1, #0]
 800f43a:	bf18      	it	ne
 800f43c:	2300      	movne	r3, #0
 800f43e:	eba6 0807 	sub.w	r8, r6, r7
 800f442:	608b      	str	r3, [r1, #8]
 800f444:	f1b8 0f00 	cmp.w	r8, #0
 800f448:	dde9      	ble.n	800f41e <__sflush_r+0xae>
 800f44a:	6a21      	ldr	r1, [r4, #32]
 800f44c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f44e:	4643      	mov	r3, r8
 800f450:	463a      	mov	r2, r7
 800f452:	4628      	mov	r0, r5
 800f454:	47b0      	blx	r6
 800f456:	2800      	cmp	r0, #0
 800f458:	dc08      	bgt.n	800f46c <__sflush_r+0xfc>
 800f45a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f45e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f462:	81a3      	strh	r3, [r4, #12]
 800f464:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f46c:	4407      	add	r7, r0
 800f46e:	eba8 0800 	sub.w	r8, r8, r0
 800f472:	e7e7      	b.n	800f444 <__sflush_r+0xd4>
 800f474:	20400001 	.word	0x20400001

0800f478 <_fflush_r>:
 800f478:	b538      	push	{r3, r4, r5, lr}
 800f47a:	690b      	ldr	r3, [r1, #16]
 800f47c:	4605      	mov	r5, r0
 800f47e:	460c      	mov	r4, r1
 800f480:	b913      	cbnz	r3, 800f488 <_fflush_r+0x10>
 800f482:	2500      	movs	r5, #0
 800f484:	4628      	mov	r0, r5
 800f486:	bd38      	pop	{r3, r4, r5, pc}
 800f488:	b118      	cbz	r0, 800f492 <_fflush_r+0x1a>
 800f48a:	6a03      	ldr	r3, [r0, #32]
 800f48c:	b90b      	cbnz	r3, 800f492 <_fflush_r+0x1a>
 800f48e:	f7fe fbab 	bl	800dbe8 <__sinit>
 800f492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d0f3      	beq.n	800f482 <_fflush_r+0xa>
 800f49a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f49c:	07d0      	lsls	r0, r2, #31
 800f49e:	d404      	bmi.n	800f4aa <_fflush_r+0x32>
 800f4a0:	0599      	lsls	r1, r3, #22
 800f4a2:	d402      	bmi.n	800f4aa <_fflush_r+0x32>
 800f4a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4a6:	f7fe fd18 	bl	800deda <__retarget_lock_acquire_recursive>
 800f4aa:	4628      	mov	r0, r5
 800f4ac:	4621      	mov	r1, r4
 800f4ae:	f7ff ff5f 	bl	800f370 <__sflush_r>
 800f4b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f4b4:	07da      	lsls	r2, r3, #31
 800f4b6:	4605      	mov	r5, r0
 800f4b8:	d4e4      	bmi.n	800f484 <_fflush_r+0xc>
 800f4ba:	89a3      	ldrh	r3, [r4, #12]
 800f4bc:	059b      	lsls	r3, r3, #22
 800f4be:	d4e1      	bmi.n	800f484 <_fflush_r+0xc>
 800f4c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4c2:	f7fe fd0b 	bl	800dedc <__retarget_lock_release_recursive>
 800f4c6:	e7dd      	b.n	800f484 <_fflush_r+0xc>

0800f4c8 <fiprintf>:
 800f4c8:	b40e      	push	{r1, r2, r3}
 800f4ca:	b503      	push	{r0, r1, lr}
 800f4cc:	4601      	mov	r1, r0
 800f4ce:	ab03      	add	r3, sp, #12
 800f4d0:	4805      	ldr	r0, [pc, #20]	@ (800f4e8 <fiprintf+0x20>)
 800f4d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4d6:	6800      	ldr	r0, [r0, #0]
 800f4d8:	9301      	str	r3, [sp, #4]
 800f4da:	f000 f863 	bl	800f5a4 <_vfiprintf_r>
 800f4de:	b002      	add	sp, #8
 800f4e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4e4:	b003      	add	sp, #12
 800f4e6:	4770      	bx	lr
 800f4e8:	20000018 	.word	0x20000018

0800f4ec <_calloc_r>:
 800f4ec:	b570      	push	{r4, r5, r6, lr}
 800f4ee:	fba1 5402 	umull	r5, r4, r1, r2
 800f4f2:	b934      	cbnz	r4, 800f502 <_calloc_r+0x16>
 800f4f4:	4629      	mov	r1, r5
 800f4f6:	f7fd fd9d 	bl	800d034 <_malloc_r>
 800f4fa:	4606      	mov	r6, r0
 800f4fc:	b928      	cbnz	r0, 800f50a <_calloc_r+0x1e>
 800f4fe:	4630      	mov	r0, r6
 800f500:	bd70      	pop	{r4, r5, r6, pc}
 800f502:	220c      	movs	r2, #12
 800f504:	6002      	str	r2, [r0, #0]
 800f506:	2600      	movs	r6, #0
 800f508:	e7f9      	b.n	800f4fe <_calloc_r+0x12>
 800f50a:	462a      	mov	r2, r5
 800f50c:	4621      	mov	r1, r4
 800f50e:	f7fe fbe4 	bl	800dcda <memset>
 800f512:	e7f4      	b.n	800f4fe <_calloc_r+0x12>

0800f514 <__ascii_mbtowc>:
 800f514:	b082      	sub	sp, #8
 800f516:	b901      	cbnz	r1, 800f51a <__ascii_mbtowc+0x6>
 800f518:	a901      	add	r1, sp, #4
 800f51a:	b142      	cbz	r2, 800f52e <__ascii_mbtowc+0x1a>
 800f51c:	b14b      	cbz	r3, 800f532 <__ascii_mbtowc+0x1e>
 800f51e:	7813      	ldrb	r3, [r2, #0]
 800f520:	600b      	str	r3, [r1, #0]
 800f522:	7812      	ldrb	r2, [r2, #0]
 800f524:	1e10      	subs	r0, r2, #0
 800f526:	bf18      	it	ne
 800f528:	2001      	movne	r0, #1
 800f52a:	b002      	add	sp, #8
 800f52c:	4770      	bx	lr
 800f52e:	4610      	mov	r0, r2
 800f530:	e7fb      	b.n	800f52a <__ascii_mbtowc+0x16>
 800f532:	f06f 0001 	mvn.w	r0, #1
 800f536:	e7f8      	b.n	800f52a <__ascii_mbtowc+0x16>

0800f538 <__ascii_wctomb>:
 800f538:	4603      	mov	r3, r0
 800f53a:	4608      	mov	r0, r1
 800f53c:	b141      	cbz	r1, 800f550 <__ascii_wctomb+0x18>
 800f53e:	2aff      	cmp	r2, #255	@ 0xff
 800f540:	d904      	bls.n	800f54c <__ascii_wctomb+0x14>
 800f542:	228a      	movs	r2, #138	@ 0x8a
 800f544:	601a      	str	r2, [r3, #0]
 800f546:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f54a:	4770      	bx	lr
 800f54c:	700a      	strb	r2, [r1, #0]
 800f54e:	2001      	movs	r0, #1
 800f550:	4770      	bx	lr

0800f552 <__sfputc_r>:
 800f552:	6893      	ldr	r3, [r2, #8]
 800f554:	3b01      	subs	r3, #1
 800f556:	2b00      	cmp	r3, #0
 800f558:	b410      	push	{r4}
 800f55a:	6093      	str	r3, [r2, #8]
 800f55c:	da08      	bge.n	800f570 <__sfputc_r+0x1e>
 800f55e:	6994      	ldr	r4, [r2, #24]
 800f560:	42a3      	cmp	r3, r4
 800f562:	db01      	blt.n	800f568 <__sfputc_r+0x16>
 800f564:	290a      	cmp	r1, #10
 800f566:	d103      	bne.n	800f570 <__sfputc_r+0x1e>
 800f568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f56c:	f000 b932 	b.w	800f7d4 <__swbuf_r>
 800f570:	6813      	ldr	r3, [r2, #0]
 800f572:	1c58      	adds	r0, r3, #1
 800f574:	6010      	str	r0, [r2, #0]
 800f576:	7019      	strb	r1, [r3, #0]
 800f578:	4608      	mov	r0, r1
 800f57a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f57e:	4770      	bx	lr

0800f580 <__sfputs_r>:
 800f580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f582:	4606      	mov	r6, r0
 800f584:	460f      	mov	r7, r1
 800f586:	4614      	mov	r4, r2
 800f588:	18d5      	adds	r5, r2, r3
 800f58a:	42ac      	cmp	r4, r5
 800f58c:	d101      	bne.n	800f592 <__sfputs_r+0x12>
 800f58e:	2000      	movs	r0, #0
 800f590:	e007      	b.n	800f5a2 <__sfputs_r+0x22>
 800f592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f596:	463a      	mov	r2, r7
 800f598:	4630      	mov	r0, r6
 800f59a:	f7ff ffda 	bl	800f552 <__sfputc_r>
 800f59e:	1c43      	adds	r3, r0, #1
 800f5a0:	d1f3      	bne.n	800f58a <__sfputs_r+0xa>
 800f5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f5a4 <_vfiprintf_r>:
 800f5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a8:	460d      	mov	r5, r1
 800f5aa:	b09d      	sub	sp, #116	@ 0x74
 800f5ac:	4614      	mov	r4, r2
 800f5ae:	4698      	mov	r8, r3
 800f5b0:	4606      	mov	r6, r0
 800f5b2:	b118      	cbz	r0, 800f5bc <_vfiprintf_r+0x18>
 800f5b4:	6a03      	ldr	r3, [r0, #32]
 800f5b6:	b90b      	cbnz	r3, 800f5bc <_vfiprintf_r+0x18>
 800f5b8:	f7fe fb16 	bl	800dbe8 <__sinit>
 800f5bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5be:	07d9      	lsls	r1, r3, #31
 800f5c0:	d405      	bmi.n	800f5ce <_vfiprintf_r+0x2a>
 800f5c2:	89ab      	ldrh	r3, [r5, #12]
 800f5c4:	059a      	lsls	r2, r3, #22
 800f5c6:	d402      	bmi.n	800f5ce <_vfiprintf_r+0x2a>
 800f5c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5ca:	f7fe fc86 	bl	800deda <__retarget_lock_acquire_recursive>
 800f5ce:	89ab      	ldrh	r3, [r5, #12]
 800f5d0:	071b      	lsls	r3, r3, #28
 800f5d2:	d501      	bpl.n	800f5d8 <_vfiprintf_r+0x34>
 800f5d4:	692b      	ldr	r3, [r5, #16]
 800f5d6:	b99b      	cbnz	r3, 800f600 <_vfiprintf_r+0x5c>
 800f5d8:	4629      	mov	r1, r5
 800f5da:	4630      	mov	r0, r6
 800f5dc:	f000 f938 	bl	800f850 <__swsetup_r>
 800f5e0:	b170      	cbz	r0, 800f600 <_vfiprintf_r+0x5c>
 800f5e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5e4:	07dc      	lsls	r4, r3, #31
 800f5e6:	d504      	bpl.n	800f5f2 <_vfiprintf_r+0x4e>
 800f5e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f5ec:	b01d      	add	sp, #116	@ 0x74
 800f5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f2:	89ab      	ldrh	r3, [r5, #12]
 800f5f4:	0598      	lsls	r0, r3, #22
 800f5f6:	d4f7      	bmi.n	800f5e8 <_vfiprintf_r+0x44>
 800f5f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5fa:	f7fe fc6f 	bl	800dedc <__retarget_lock_release_recursive>
 800f5fe:	e7f3      	b.n	800f5e8 <_vfiprintf_r+0x44>
 800f600:	2300      	movs	r3, #0
 800f602:	9309      	str	r3, [sp, #36]	@ 0x24
 800f604:	2320      	movs	r3, #32
 800f606:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f60a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f60e:	2330      	movs	r3, #48	@ 0x30
 800f610:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f7c0 <_vfiprintf_r+0x21c>
 800f614:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f618:	f04f 0901 	mov.w	r9, #1
 800f61c:	4623      	mov	r3, r4
 800f61e:	469a      	mov	sl, r3
 800f620:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f624:	b10a      	cbz	r2, 800f62a <_vfiprintf_r+0x86>
 800f626:	2a25      	cmp	r2, #37	@ 0x25
 800f628:	d1f9      	bne.n	800f61e <_vfiprintf_r+0x7a>
 800f62a:	ebba 0b04 	subs.w	fp, sl, r4
 800f62e:	d00b      	beq.n	800f648 <_vfiprintf_r+0xa4>
 800f630:	465b      	mov	r3, fp
 800f632:	4622      	mov	r2, r4
 800f634:	4629      	mov	r1, r5
 800f636:	4630      	mov	r0, r6
 800f638:	f7ff ffa2 	bl	800f580 <__sfputs_r>
 800f63c:	3001      	adds	r0, #1
 800f63e:	f000 80a7 	beq.w	800f790 <_vfiprintf_r+0x1ec>
 800f642:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f644:	445a      	add	r2, fp
 800f646:	9209      	str	r2, [sp, #36]	@ 0x24
 800f648:	f89a 3000 	ldrb.w	r3, [sl]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	f000 809f 	beq.w	800f790 <_vfiprintf_r+0x1ec>
 800f652:	2300      	movs	r3, #0
 800f654:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f65c:	f10a 0a01 	add.w	sl, sl, #1
 800f660:	9304      	str	r3, [sp, #16]
 800f662:	9307      	str	r3, [sp, #28]
 800f664:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f668:	931a      	str	r3, [sp, #104]	@ 0x68
 800f66a:	4654      	mov	r4, sl
 800f66c:	2205      	movs	r2, #5
 800f66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f672:	4853      	ldr	r0, [pc, #332]	@ (800f7c0 <_vfiprintf_r+0x21c>)
 800f674:	f7f0 fdcc 	bl	8000210 <memchr>
 800f678:	9a04      	ldr	r2, [sp, #16]
 800f67a:	b9d8      	cbnz	r0, 800f6b4 <_vfiprintf_r+0x110>
 800f67c:	06d1      	lsls	r1, r2, #27
 800f67e:	bf44      	itt	mi
 800f680:	2320      	movmi	r3, #32
 800f682:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f686:	0713      	lsls	r3, r2, #28
 800f688:	bf44      	itt	mi
 800f68a:	232b      	movmi	r3, #43	@ 0x2b
 800f68c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f690:	f89a 3000 	ldrb.w	r3, [sl]
 800f694:	2b2a      	cmp	r3, #42	@ 0x2a
 800f696:	d015      	beq.n	800f6c4 <_vfiprintf_r+0x120>
 800f698:	9a07      	ldr	r2, [sp, #28]
 800f69a:	4654      	mov	r4, sl
 800f69c:	2000      	movs	r0, #0
 800f69e:	f04f 0c0a 	mov.w	ip, #10
 800f6a2:	4621      	mov	r1, r4
 800f6a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6a8:	3b30      	subs	r3, #48	@ 0x30
 800f6aa:	2b09      	cmp	r3, #9
 800f6ac:	d94b      	bls.n	800f746 <_vfiprintf_r+0x1a2>
 800f6ae:	b1b0      	cbz	r0, 800f6de <_vfiprintf_r+0x13a>
 800f6b0:	9207      	str	r2, [sp, #28]
 800f6b2:	e014      	b.n	800f6de <_vfiprintf_r+0x13a>
 800f6b4:	eba0 0308 	sub.w	r3, r0, r8
 800f6b8:	fa09 f303 	lsl.w	r3, r9, r3
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	9304      	str	r3, [sp, #16]
 800f6c0:	46a2      	mov	sl, r4
 800f6c2:	e7d2      	b.n	800f66a <_vfiprintf_r+0xc6>
 800f6c4:	9b03      	ldr	r3, [sp, #12]
 800f6c6:	1d19      	adds	r1, r3, #4
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	9103      	str	r1, [sp, #12]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	bfbb      	ittet	lt
 800f6d0:	425b      	neglt	r3, r3
 800f6d2:	f042 0202 	orrlt.w	r2, r2, #2
 800f6d6:	9307      	strge	r3, [sp, #28]
 800f6d8:	9307      	strlt	r3, [sp, #28]
 800f6da:	bfb8      	it	lt
 800f6dc:	9204      	strlt	r2, [sp, #16]
 800f6de:	7823      	ldrb	r3, [r4, #0]
 800f6e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f6e2:	d10a      	bne.n	800f6fa <_vfiprintf_r+0x156>
 800f6e4:	7863      	ldrb	r3, [r4, #1]
 800f6e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6e8:	d132      	bne.n	800f750 <_vfiprintf_r+0x1ac>
 800f6ea:	9b03      	ldr	r3, [sp, #12]
 800f6ec:	1d1a      	adds	r2, r3, #4
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	9203      	str	r2, [sp, #12]
 800f6f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f6f6:	3402      	adds	r4, #2
 800f6f8:	9305      	str	r3, [sp, #20]
 800f6fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f7d0 <_vfiprintf_r+0x22c>
 800f6fe:	7821      	ldrb	r1, [r4, #0]
 800f700:	2203      	movs	r2, #3
 800f702:	4650      	mov	r0, sl
 800f704:	f7f0 fd84 	bl	8000210 <memchr>
 800f708:	b138      	cbz	r0, 800f71a <_vfiprintf_r+0x176>
 800f70a:	9b04      	ldr	r3, [sp, #16]
 800f70c:	eba0 000a 	sub.w	r0, r0, sl
 800f710:	2240      	movs	r2, #64	@ 0x40
 800f712:	4082      	lsls	r2, r0
 800f714:	4313      	orrs	r3, r2
 800f716:	3401      	adds	r4, #1
 800f718:	9304      	str	r3, [sp, #16]
 800f71a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f71e:	4829      	ldr	r0, [pc, #164]	@ (800f7c4 <_vfiprintf_r+0x220>)
 800f720:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f724:	2206      	movs	r2, #6
 800f726:	f7f0 fd73 	bl	8000210 <memchr>
 800f72a:	2800      	cmp	r0, #0
 800f72c:	d03f      	beq.n	800f7ae <_vfiprintf_r+0x20a>
 800f72e:	4b26      	ldr	r3, [pc, #152]	@ (800f7c8 <_vfiprintf_r+0x224>)
 800f730:	bb1b      	cbnz	r3, 800f77a <_vfiprintf_r+0x1d6>
 800f732:	9b03      	ldr	r3, [sp, #12]
 800f734:	3307      	adds	r3, #7
 800f736:	f023 0307 	bic.w	r3, r3, #7
 800f73a:	3308      	adds	r3, #8
 800f73c:	9303      	str	r3, [sp, #12]
 800f73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f740:	443b      	add	r3, r7
 800f742:	9309      	str	r3, [sp, #36]	@ 0x24
 800f744:	e76a      	b.n	800f61c <_vfiprintf_r+0x78>
 800f746:	fb0c 3202 	mla	r2, ip, r2, r3
 800f74a:	460c      	mov	r4, r1
 800f74c:	2001      	movs	r0, #1
 800f74e:	e7a8      	b.n	800f6a2 <_vfiprintf_r+0xfe>
 800f750:	2300      	movs	r3, #0
 800f752:	3401      	adds	r4, #1
 800f754:	9305      	str	r3, [sp, #20]
 800f756:	4619      	mov	r1, r3
 800f758:	f04f 0c0a 	mov.w	ip, #10
 800f75c:	4620      	mov	r0, r4
 800f75e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f762:	3a30      	subs	r2, #48	@ 0x30
 800f764:	2a09      	cmp	r2, #9
 800f766:	d903      	bls.n	800f770 <_vfiprintf_r+0x1cc>
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d0c6      	beq.n	800f6fa <_vfiprintf_r+0x156>
 800f76c:	9105      	str	r1, [sp, #20]
 800f76e:	e7c4      	b.n	800f6fa <_vfiprintf_r+0x156>
 800f770:	fb0c 2101 	mla	r1, ip, r1, r2
 800f774:	4604      	mov	r4, r0
 800f776:	2301      	movs	r3, #1
 800f778:	e7f0      	b.n	800f75c <_vfiprintf_r+0x1b8>
 800f77a:	ab03      	add	r3, sp, #12
 800f77c:	9300      	str	r3, [sp, #0]
 800f77e:	462a      	mov	r2, r5
 800f780:	4b12      	ldr	r3, [pc, #72]	@ (800f7cc <_vfiprintf_r+0x228>)
 800f782:	a904      	add	r1, sp, #16
 800f784:	4630      	mov	r0, r6
 800f786:	f7fd fded 	bl	800d364 <_printf_float>
 800f78a:	4607      	mov	r7, r0
 800f78c:	1c78      	adds	r0, r7, #1
 800f78e:	d1d6      	bne.n	800f73e <_vfiprintf_r+0x19a>
 800f790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f792:	07d9      	lsls	r1, r3, #31
 800f794:	d405      	bmi.n	800f7a2 <_vfiprintf_r+0x1fe>
 800f796:	89ab      	ldrh	r3, [r5, #12]
 800f798:	059a      	lsls	r2, r3, #22
 800f79a:	d402      	bmi.n	800f7a2 <_vfiprintf_r+0x1fe>
 800f79c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f79e:	f7fe fb9d 	bl	800dedc <__retarget_lock_release_recursive>
 800f7a2:	89ab      	ldrh	r3, [r5, #12]
 800f7a4:	065b      	lsls	r3, r3, #25
 800f7a6:	f53f af1f 	bmi.w	800f5e8 <_vfiprintf_r+0x44>
 800f7aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7ac:	e71e      	b.n	800f5ec <_vfiprintf_r+0x48>
 800f7ae:	ab03      	add	r3, sp, #12
 800f7b0:	9300      	str	r3, [sp, #0]
 800f7b2:	462a      	mov	r2, r5
 800f7b4:	4b05      	ldr	r3, [pc, #20]	@ (800f7cc <_vfiprintf_r+0x228>)
 800f7b6:	a904      	add	r1, sp, #16
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	f7fe f86b 	bl	800d894 <_printf_i>
 800f7be:	e7e4      	b.n	800f78a <_vfiprintf_r+0x1e6>
 800f7c0:	08010c88 	.word	0x08010c88
 800f7c4:	08010c92 	.word	0x08010c92
 800f7c8:	0800d365 	.word	0x0800d365
 800f7cc:	0800f581 	.word	0x0800f581
 800f7d0:	08010c8e 	.word	0x08010c8e

0800f7d4 <__swbuf_r>:
 800f7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7d6:	460e      	mov	r6, r1
 800f7d8:	4614      	mov	r4, r2
 800f7da:	4605      	mov	r5, r0
 800f7dc:	b118      	cbz	r0, 800f7e6 <__swbuf_r+0x12>
 800f7de:	6a03      	ldr	r3, [r0, #32]
 800f7e0:	b90b      	cbnz	r3, 800f7e6 <__swbuf_r+0x12>
 800f7e2:	f7fe fa01 	bl	800dbe8 <__sinit>
 800f7e6:	69a3      	ldr	r3, [r4, #24]
 800f7e8:	60a3      	str	r3, [r4, #8]
 800f7ea:	89a3      	ldrh	r3, [r4, #12]
 800f7ec:	071a      	lsls	r2, r3, #28
 800f7ee:	d501      	bpl.n	800f7f4 <__swbuf_r+0x20>
 800f7f0:	6923      	ldr	r3, [r4, #16]
 800f7f2:	b943      	cbnz	r3, 800f806 <__swbuf_r+0x32>
 800f7f4:	4621      	mov	r1, r4
 800f7f6:	4628      	mov	r0, r5
 800f7f8:	f000 f82a 	bl	800f850 <__swsetup_r>
 800f7fc:	b118      	cbz	r0, 800f806 <__swbuf_r+0x32>
 800f7fe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f802:	4638      	mov	r0, r7
 800f804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f806:	6823      	ldr	r3, [r4, #0]
 800f808:	6922      	ldr	r2, [r4, #16]
 800f80a:	1a98      	subs	r0, r3, r2
 800f80c:	6963      	ldr	r3, [r4, #20]
 800f80e:	b2f6      	uxtb	r6, r6
 800f810:	4283      	cmp	r3, r0
 800f812:	4637      	mov	r7, r6
 800f814:	dc05      	bgt.n	800f822 <__swbuf_r+0x4e>
 800f816:	4621      	mov	r1, r4
 800f818:	4628      	mov	r0, r5
 800f81a:	f7ff fe2d 	bl	800f478 <_fflush_r>
 800f81e:	2800      	cmp	r0, #0
 800f820:	d1ed      	bne.n	800f7fe <__swbuf_r+0x2a>
 800f822:	68a3      	ldr	r3, [r4, #8]
 800f824:	3b01      	subs	r3, #1
 800f826:	60a3      	str	r3, [r4, #8]
 800f828:	6823      	ldr	r3, [r4, #0]
 800f82a:	1c5a      	adds	r2, r3, #1
 800f82c:	6022      	str	r2, [r4, #0]
 800f82e:	701e      	strb	r6, [r3, #0]
 800f830:	6962      	ldr	r2, [r4, #20]
 800f832:	1c43      	adds	r3, r0, #1
 800f834:	429a      	cmp	r2, r3
 800f836:	d004      	beq.n	800f842 <__swbuf_r+0x6e>
 800f838:	89a3      	ldrh	r3, [r4, #12]
 800f83a:	07db      	lsls	r3, r3, #31
 800f83c:	d5e1      	bpl.n	800f802 <__swbuf_r+0x2e>
 800f83e:	2e0a      	cmp	r6, #10
 800f840:	d1df      	bne.n	800f802 <__swbuf_r+0x2e>
 800f842:	4621      	mov	r1, r4
 800f844:	4628      	mov	r0, r5
 800f846:	f7ff fe17 	bl	800f478 <_fflush_r>
 800f84a:	2800      	cmp	r0, #0
 800f84c:	d0d9      	beq.n	800f802 <__swbuf_r+0x2e>
 800f84e:	e7d6      	b.n	800f7fe <__swbuf_r+0x2a>

0800f850 <__swsetup_r>:
 800f850:	b538      	push	{r3, r4, r5, lr}
 800f852:	4b29      	ldr	r3, [pc, #164]	@ (800f8f8 <__swsetup_r+0xa8>)
 800f854:	4605      	mov	r5, r0
 800f856:	6818      	ldr	r0, [r3, #0]
 800f858:	460c      	mov	r4, r1
 800f85a:	b118      	cbz	r0, 800f864 <__swsetup_r+0x14>
 800f85c:	6a03      	ldr	r3, [r0, #32]
 800f85e:	b90b      	cbnz	r3, 800f864 <__swsetup_r+0x14>
 800f860:	f7fe f9c2 	bl	800dbe8 <__sinit>
 800f864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f868:	0719      	lsls	r1, r3, #28
 800f86a:	d422      	bmi.n	800f8b2 <__swsetup_r+0x62>
 800f86c:	06da      	lsls	r2, r3, #27
 800f86e:	d407      	bmi.n	800f880 <__swsetup_r+0x30>
 800f870:	2209      	movs	r2, #9
 800f872:	602a      	str	r2, [r5, #0]
 800f874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f878:	81a3      	strh	r3, [r4, #12]
 800f87a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f87e:	e033      	b.n	800f8e8 <__swsetup_r+0x98>
 800f880:	0758      	lsls	r0, r3, #29
 800f882:	d512      	bpl.n	800f8aa <__swsetup_r+0x5a>
 800f884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f886:	b141      	cbz	r1, 800f89a <__swsetup_r+0x4a>
 800f888:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f88c:	4299      	cmp	r1, r3
 800f88e:	d002      	beq.n	800f896 <__swsetup_r+0x46>
 800f890:	4628      	mov	r0, r5
 800f892:	f7ff f9a9 	bl	800ebe8 <_free_r>
 800f896:	2300      	movs	r3, #0
 800f898:	6363      	str	r3, [r4, #52]	@ 0x34
 800f89a:	89a3      	ldrh	r3, [r4, #12]
 800f89c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f8a0:	81a3      	strh	r3, [r4, #12]
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	6063      	str	r3, [r4, #4]
 800f8a6:	6923      	ldr	r3, [r4, #16]
 800f8a8:	6023      	str	r3, [r4, #0]
 800f8aa:	89a3      	ldrh	r3, [r4, #12]
 800f8ac:	f043 0308 	orr.w	r3, r3, #8
 800f8b0:	81a3      	strh	r3, [r4, #12]
 800f8b2:	6923      	ldr	r3, [r4, #16]
 800f8b4:	b94b      	cbnz	r3, 800f8ca <__swsetup_r+0x7a>
 800f8b6:	89a3      	ldrh	r3, [r4, #12]
 800f8b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f8bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f8c0:	d003      	beq.n	800f8ca <__swsetup_r+0x7a>
 800f8c2:	4621      	mov	r1, r4
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	f000 f83f 	bl	800f948 <__smakebuf_r>
 800f8ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8ce:	f013 0201 	ands.w	r2, r3, #1
 800f8d2:	d00a      	beq.n	800f8ea <__swsetup_r+0x9a>
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	60a2      	str	r2, [r4, #8]
 800f8d8:	6962      	ldr	r2, [r4, #20]
 800f8da:	4252      	negs	r2, r2
 800f8dc:	61a2      	str	r2, [r4, #24]
 800f8de:	6922      	ldr	r2, [r4, #16]
 800f8e0:	b942      	cbnz	r2, 800f8f4 <__swsetup_r+0xa4>
 800f8e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f8e6:	d1c5      	bne.n	800f874 <__swsetup_r+0x24>
 800f8e8:	bd38      	pop	{r3, r4, r5, pc}
 800f8ea:	0799      	lsls	r1, r3, #30
 800f8ec:	bf58      	it	pl
 800f8ee:	6962      	ldrpl	r2, [r4, #20]
 800f8f0:	60a2      	str	r2, [r4, #8]
 800f8f2:	e7f4      	b.n	800f8de <__swsetup_r+0x8e>
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	e7f7      	b.n	800f8e8 <__swsetup_r+0x98>
 800f8f8:	20000018 	.word	0x20000018

0800f8fc <__swhatbuf_r>:
 800f8fc:	b570      	push	{r4, r5, r6, lr}
 800f8fe:	460c      	mov	r4, r1
 800f900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f904:	2900      	cmp	r1, #0
 800f906:	b096      	sub	sp, #88	@ 0x58
 800f908:	4615      	mov	r5, r2
 800f90a:	461e      	mov	r6, r3
 800f90c:	da0d      	bge.n	800f92a <__swhatbuf_r+0x2e>
 800f90e:	89a3      	ldrh	r3, [r4, #12]
 800f910:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f914:	f04f 0100 	mov.w	r1, #0
 800f918:	bf14      	ite	ne
 800f91a:	2340      	movne	r3, #64	@ 0x40
 800f91c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f920:	2000      	movs	r0, #0
 800f922:	6031      	str	r1, [r6, #0]
 800f924:	602b      	str	r3, [r5, #0]
 800f926:	b016      	add	sp, #88	@ 0x58
 800f928:	bd70      	pop	{r4, r5, r6, pc}
 800f92a:	466a      	mov	r2, sp
 800f92c:	f000 f848 	bl	800f9c0 <_fstat_r>
 800f930:	2800      	cmp	r0, #0
 800f932:	dbec      	blt.n	800f90e <__swhatbuf_r+0x12>
 800f934:	9901      	ldr	r1, [sp, #4]
 800f936:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f93a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f93e:	4259      	negs	r1, r3
 800f940:	4159      	adcs	r1, r3
 800f942:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f946:	e7eb      	b.n	800f920 <__swhatbuf_r+0x24>

0800f948 <__smakebuf_r>:
 800f948:	898b      	ldrh	r3, [r1, #12]
 800f94a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f94c:	079d      	lsls	r5, r3, #30
 800f94e:	4606      	mov	r6, r0
 800f950:	460c      	mov	r4, r1
 800f952:	d507      	bpl.n	800f964 <__smakebuf_r+0x1c>
 800f954:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f958:	6023      	str	r3, [r4, #0]
 800f95a:	6123      	str	r3, [r4, #16]
 800f95c:	2301      	movs	r3, #1
 800f95e:	6163      	str	r3, [r4, #20]
 800f960:	b003      	add	sp, #12
 800f962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f964:	ab01      	add	r3, sp, #4
 800f966:	466a      	mov	r2, sp
 800f968:	f7ff ffc8 	bl	800f8fc <__swhatbuf_r>
 800f96c:	9f00      	ldr	r7, [sp, #0]
 800f96e:	4605      	mov	r5, r0
 800f970:	4639      	mov	r1, r7
 800f972:	4630      	mov	r0, r6
 800f974:	f7fd fb5e 	bl	800d034 <_malloc_r>
 800f978:	b948      	cbnz	r0, 800f98e <__smakebuf_r+0x46>
 800f97a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f97e:	059a      	lsls	r2, r3, #22
 800f980:	d4ee      	bmi.n	800f960 <__smakebuf_r+0x18>
 800f982:	f023 0303 	bic.w	r3, r3, #3
 800f986:	f043 0302 	orr.w	r3, r3, #2
 800f98a:	81a3      	strh	r3, [r4, #12]
 800f98c:	e7e2      	b.n	800f954 <__smakebuf_r+0xc>
 800f98e:	89a3      	ldrh	r3, [r4, #12]
 800f990:	6020      	str	r0, [r4, #0]
 800f992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f996:	81a3      	strh	r3, [r4, #12]
 800f998:	9b01      	ldr	r3, [sp, #4]
 800f99a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f99e:	b15b      	cbz	r3, 800f9b8 <__smakebuf_r+0x70>
 800f9a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9a4:	4630      	mov	r0, r6
 800f9a6:	f000 f81d 	bl	800f9e4 <_isatty_r>
 800f9aa:	b128      	cbz	r0, 800f9b8 <__smakebuf_r+0x70>
 800f9ac:	89a3      	ldrh	r3, [r4, #12]
 800f9ae:	f023 0303 	bic.w	r3, r3, #3
 800f9b2:	f043 0301 	orr.w	r3, r3, #1
 800f9b6:	81a3      	strh	r3, [r4, #12]
 800f9b8:	89a3      	ldrh	r3, [r4, #12]
 800f9ba:	431d      	orrs	r5, r3
 800f9bc:	81a5      	strh	r5, [r4, #12]
 800f9be:	e7cf      	b.n	800f960 <__smakebuf_r+0x18>

0800f9c0 <_fstat_r>:
 800f9c0:	b538      	push	{r3, r4, r5, lr}
 800f9c2:	4d07      	ldr	r5, [pc, #28]	@ (800f9e0 <_fstat_r+0x20>)
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	4604      	mov	r4, r0
 800f9c8:	4608      	mov	r0, r1
 800f9ca:	4611      	mov	r1, r2
 800f9cc:	602b      	str	r3, [r5, #0]
 800f9ce:	f7f5 f9dd 	bl	8004d8c <_fstat>
 800f9d2:	1c43      	adds	r3, r0, #1
 800f9d4:	d102      	bne.n	800f9dc <_fstat_r+0x1c>
 800f9d6:	682b      	ldr	r3, [r5, #0]
 800f9d8:	b103      	cbz	r3, 800f9dc <_fstat_r+0x1c>
 800f9da:	6023      	str	r3, [r4, #0]
 800f9dc:	bd38      	pop	{r3, r4, r5, pc}
 800f9de:	bf00      	nop
 800f9e0:	20001628 	.word	0x20001628

0800f9e4 <_isatty_r>:
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	4d06      	ldr	r5, [pc, #24]	@ (800fa00 <_isatty_r+0x1c>)
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	4604      	mov	r4, r0
 800f9ec:	4608      	mov	r0, r1
 800f9ee:	602b      	str	r3, [r5, #0]
 800f9f0:	f7f5 f9dc 	bl	8004dac <_isatty>
 800f9f4:	1c43      	adds	r3, r0, #1
 800f9f6:	d102      	bne.n	800f9fe <_isatty_r+0x1a>
 800f9f8:	682b      	ldr	r3, [r5, #0]
 800f9fa:	b103      	cbz	r3, 800f9fe <_isatty_r+0x1a>
 800f9fc:	6023      	str	r3, [r4, #0]
 800f9fe:	bd38      	pop	{r3, r4, r5, pc}
 800fa00:	20001628 	.word	0x20001628

0800fa04 <_gettimeofday>:
 800fa04:	4b02      	ldr	r3, [pc, #8]	@ (800fa10 <_gettimeofday+0xc>)
 800fa06:	2258      	movs	r2, #88	@ 0x58
 800fa08:	601a      	str	r2, [r3, #0]
 800fa0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa0e:	4770      	bx	lr
 800fa10:	20001628 	.word	0x20001628

0800fa14 <_init>:
 800fa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa16:	bf00      	nop
 800fa18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa1a:	bc08      	pop	{r3}
 800fa1c:	469e      	mov	lr, r3
 800fa1e:	4770      	bx	lr

0800fa20 <_fini>:
 800fa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa22:	bf00      	nop
 800fa24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa26:	bc08      	pop	{r3}
 800fa28:	469e      	mov	lr, r3
 800fa2a:	4770      	bx	lr
