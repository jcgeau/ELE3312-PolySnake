
PacMan2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6ac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001484  0800f880  0800f880  00010880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d04  08010d04  000121d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010d04  08010d04  00011d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d0c  08010d0c  000121d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010d0c  08010d0c  00011d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08010d14  08010d14  00011d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08010d1c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e1c  200001d4  08010ef0  000121d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ff0  08010ef0  00012ff0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028075  00000000  00000000  00012204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000449d  00000000  00000000  0003a279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  0003e718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001296  00000000  00000000  0003feb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f7d  00000000  00000000  0004114e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e2a6  00000000  00000000  0006a0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7a78  00000000  00000000  00088371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017fde9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008be4  00000000  00000000  0017fe2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00188a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f864 	.word	0x0800f864

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800f864 	.word	0x0800f864

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>:
	 * @details The function is used to transform a generic color representation
	 * in the device specific color format of the ILI9341 LCD chip.
	 * @param [in] color A Color enum value.
	 * @retval A ILI9341 color enum value.
	 */
	constexpr ili9341_color_t colorToILI9341Color(Color color){
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
		switch (color){
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b12      	cmp	r3, #18
 8000fc0:	d861      	bhi.n	8001086 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd2>
 8000fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc8 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x14>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	08001015 	.word	0x08001015
 8000fcc:	0800101b 	.word	0x0800101b
 8000fd0:	08001021 	.word	0x08001021
 8000fd4:	08001027 	.word	0x08001027
 8000fd8:	0800102d 	.word	0x0800102d
 8000fdc:	08001033 	.word	0x08001033
 8000fe0:	08001039 	.word	0x08001039
 8000fe4:	0800103f 	.word	0x0800103f
 8000fe8:	08001045 	.word	0x08001045
 8000fec:	0800104b 	.word	0x0800104b
 8000ff0:	08001051 	.word	0x08001051
 8000ff4:	08001057 	.word	0x08001057
 8000ff8:	0800105d 	.word	0x0800105d
 8000ffc:	08001063 	.word	0x08001063
 8001000:	08001069 	.word	0x08001069
 8001004:	0800106f 	.word	0x0800106f
 8001008:	08001075 	.word	0x08001075
 800100c:	0800107b 	.word	0x0800107b
 8001010:	08001081 	.word	0x08001081
			case Color::BLACK:
				return ILI9341_BLACK ;
 8001014:	4b20      	ldr	r3, [pc, #128]	@ (8001098 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xe4>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	e037      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::NAVY:
				return ILI9341_NAVY;
 800101a:	4b20      	ldr	r3, [pc, #128]	@ (800109c <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xe8>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	e034      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::DARKGREEN:
				return ILI9341_DARKGREEN;
 8001020:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xec>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	e031      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::DARKCYAN:
				return ILI9341_DARKCYAN;
 8001026:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xf0>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	e02e      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::MAROON:
				return ILI9341_MAROON;
 800102c:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xf4>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	e02b      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::PURPLE:
				return ILI9341_PURPLE;
 8001032:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xf8>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	e028      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::OLIVE:
				return ILI9341_OLIVE;
 8001038:	4b1d      	ldr	r3, [pc, #116]	@ (80010b0 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xfc>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	e025      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::LIGHTGREY:
				return ILI9341_LIGHTGREY;
 800103e:	4b1d      	ldr	r3, [pc, #116]	@ (80010b4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x100>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	e022      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::DARKGREY:
				return ILI9341_DARKGREY;
 8001044:	4b1c      	ldr	r3, [pc, #112]	@ (80010b8 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x104>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	e01f      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::BLUE:
				return ILI9341_BLUE;
 800104a:	4b1c      	ldr	r3, [pc, #112]	@ (80010bc <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x108>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	e01c      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::GREEN:
				return ILI9341_GREEN;
 8001050:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x10c>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	e019      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::CYAN:
				return ILI9341_CYAN;
 8001056:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x110>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	e016      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::RED:
				return ILI9341_RED;
 800105c:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x114>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	e013      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::MAGENTA:
				return ILI9341_MAGENTA;
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x118>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	e010      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::YELLOW:
				return ILI9341_YELLOW;
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x11c>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	e00d      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::WHITE:
				return ILI9341_WHITE;
 800106e:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x120>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	e00a      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::ORANGE:
				return ILI9341_ORANGE;
 8001074:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x124>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	e007      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::GREENYELLOW:
				return ILI9341_GREENYELLOW;
 800107a:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x128>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	e004      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
			case Color::PINK:
				return ILI9341_PINK;
 8001080:	4b17      	ldr	r3, [pc, #92]	@ (80010e0 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0x12c>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	e001      	b.n	800108a <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xd6>
		}
		// Default return black
		return ILI9341_BLACK ;
 8001086:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE+0xe4>)
 8001088:	881b      	ldrh	r3, [r3, #0]
	}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	0801070e 	.word	0x0801070e
 800109c:	08010710 	.word	0x08010710
 80010a0:	08010712 	.word	0x08010712
 80010a4:	08010714 	.word	0x08010714
 80010a8:	08010716 	.word	0x08010716
 80010ac:	08010718 	.word	0x08010718
 80010b0:	0801071a 	.word	0x0801071a
 80010b4:	0801071c 	.word	0x0801071c
 80010b8:	0801071e 	.word	0x0801071e
 80010bc:	08010720 	.word	0x08010720
 80010c0:	08010722 	.word	0x08010722
 80010c4:	08010724 	.word	0x08010724
 80010c8:	08010726 	.word	0x08010726
 80010cc:	08010728 	.word	0x08010728
 80010d0:	0801072a 	.word	0x0801072a
 80010d4:	0801072c 	.word	0x0801072c
 80010d8:	0801072e 	.word	0x0801072e
 80010dc:	08010730 	.word	0x08010730
 80010e0:	08010732 	.word	0x08010732

080010e4 <_ZN7ELE33127DisplayC1Ev>:
	 * The contained methods represent a set of functions expected to be provided from a 
	 * graphical device in order to be used as an graphics output in the game application.
	 * @todo change all coordinates for unsigned values since negative values make no sense
	 * @todo add overloaded function that accept Point objects 
	 */
	class Display {
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <_ZN7ELE33127DisplayC1Ev+0x1c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	0800f95c 	.word	0x0800f95c

08001104 <_ZN7ELE33127DisplayD1Ev>:
	public:

		/** @brief Destructor for the Display interface.
		 */
		virtual ~Display() = default;
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <_ZN7ELE33127DisplayD1Ev+0x1c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	0800f95c 	.word	0x0800f95c

08001124 <_ZN7ELE33127DisplayD0Ev>:
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ffe9 	bl	8001104 <_ZN7ELE33127DisplayD1Ev>
 8001132:	2104      	movs	r1, #4
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f00a fd3b 	bl	800bbb0 <_ZdlPvj>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <_ZN7ELE331214ILI9341DisplayC1Ev>:
#include <cmath>
using namespace ELE3312;

/** @brief Default constructor for the ILI9341Display class.
  */
ILI9341Display::ILI9341Display() : ptext_attr_{nullptr}{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ffc8 	bl	80010e4 <_ZN7ELE33127DisplayC1Ev>
 8001154:	4a06      	ldr	r2, [pc, #24]	@ (8001170 <_ZN7ELE331214ILI9341DisplayC1Ev+0x2c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]

}
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	0800f900 	.word	0x0800f900

08001174 <_ZN7ELE331214ILI9341DisplayD1Ev>:

/** @brief Destructor for the ILI9341Display class.
  */
ILI9341Display::~ILI9341Display(){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	4a0b      	ldr	r2, [pc, #44]	@ (80011ac <_ZN7ELE331214ILI9341DisplayD1Ev+0x38>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	601a      	str	r2, [r3, #0]
	if(ptext_attr_ != nullptr){
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d007      	beq.n	800119a <_ZN7ELE331214ILI9341DisplayD1Ev+0x26>
		delete ptext_attr_;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <_ZN7ELE331214ILI9341DisplayD1Ev+0x26>
 8001192:	210c      	movs	r1, #12
 8001194:	4618      	mov	r0, r3
 8001196:	f00a fd0b 	bl	800bbb0 <_ZdlPvj>
	}
}
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ffb1 	bl	8001104 <_ZN7ELE33127DisplayD1Ev>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	0800f900 	.word	0x0800f900

080011b0 <_ZN7ELE331214ILI9341DisplayD0Ev>:
ILI9341Display::~ILI9341Display(){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
}
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ffdb 	bl	8001174 <_ZN7ELE331214ILI9341DisplayD1Ev>
 80011be:	2110      	movs	r1, #16
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f00a fcf5 	bl	800bbb0 <_ZdlPvj>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <_ZN7ELE331214ILI9341Display5setupEP19__SPI_HandleTypeDef>:

/** @brief Setup routine for the ILI9341Display class.
  * @param [in] hspi Handle to the SPI interface connected to the TFT display.
  */
void  ILI9341Display::setup(SPI_HandleTypeDef *hspi){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	@ 0x30
 80011d4:	af0a      	add	r7, sp, #40	@ 0x28
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
		this->lcd_ = 	ili9341_new(
 80011da:	2301      	movs	r3, #1
 80011dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80011de:	2300      	movs	r3, #0
 80011e0:	9308      	str	r3, [sp, #32]
 80011e2:	2300      	movs	r3, #0
 80011e4:	9307      	str	r3, [sp, #28]
 80011e6:	2300      	movs	r3, #0
 80011e8:	9306      	str	r3, [sp, #24]
 80011ea:	2300      	movs	r3, #0
 80011ec:	9305      	str	r3, [sp, #20]
 80011ee:	2300      	movs	r3, #0
 80011f0:	9304      	str	r3, [sp, #16]
 80011f2:	2303      	movs	r3, #3
 80011f4:	9303      	str	r3, [sp, #12]
 80011f6:	2380      	movs	r3, #128	@ 0x80
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <_ZN7ELE331214ILI9341Display5setupEP19__SPI_HandleTypeDef+0x50>)
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	2340      	movs	r3, #64	@ 0x40
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <_ZN7ELE331214ILI9341Display5setupEP19__SPI_HandleTypeDef+0x54>)
 8001204:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001208:	4906      	ldr	r1, [pc, #24]	@ (8001224 <_ZN7ELE331214ILI9341Display5setupEP19__SPI_HandleTypeDef+0x54>)
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f000 fe93 	bl	8001f36 <ili9341_new>
 8001210:	4602      	mov	r2, r0
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	609a      	str	r2, [r3, #8]
				  isoLandscapeFlip,
				  NULL, 0,
				  NULL, 0,
				  itsNotSupported,
				  itnNormalized);
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40020800 	.word	0x40020800
 8001224:	40020400 	.word	0x40020400

08001228 <_ZN7ELE331214ILI9341Display11clearScreenEv>:

/** @brief Clear the screen.
 * @details The function removes all graphical objects from the screen
 * and replaces them with a homogeneous color.
 */
void ILI9341Display::clearScreen() {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	ili9341_fill_screen(lcd_, ILI9341_BLACK);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <_ZN7ELE331214ILI9341Display11clearScreenEv+0x20>)
 8001236:	8812      	ldrh	r2, [r2, #0]
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f001 fef3 	bl	8003026 <ili9341_fill_screen>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	0801070e 	.word	0x0801070e

0800124c <_ZN7ELE331214ILI9341Display10fillScreenENS_5ColorE>:
 * @details The function fills the screen with the specified color so that
 * none of the previous displayed objects remain.
 *
 * @param [in] The desired color.
 */
void ILI9341Display::fillScreen(Color color) {
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
	ili9341_fill_screen(lcd_, ELE3312::colorToILI9341Color(color));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689c      	ldr	r4, [r3, #8]
 800125a:	6838      	ldr	r0, [r7, #0]
 800125c:	f7ff feaa 	bl	8000fb4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 8001260:	4603      	mov	r3, r0
 8001262:	4619      	mov	r1, r3
 8001264:	4620      	mov	r0, r4
 8001266:	f001 fede 	bl	8003026 <ili9341_fill_screen>
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bd90      	pop	{r4, r7, pc}

08001272 <_ZN7ELE331214ILI9341Display9drawPixelENS_5ColorEtt>:
 *
 * @param [in] color The color of the pixel
 * @param [in] x The x position of the pixel
 * @param [in] y The y position of the pixel
 */
void ILI9341Display::drawPixel(Color color, uint16_t x, uint16_t y) {
 8001272:	b590      	push	{r4, r7, lr}
 8001274:	b085      	sub	sp, #20
 8001276:	af00      	add	r7, sp, #0
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	4611      	mov	r1, r2
 800127e:	461a      	mov	r2, r3
 8001280:	460b      	mov	r3, r1
 8001282:	80fb      	strh	r3, [r7, #6]
 8001284:	4613      	mov	r3, r2
 8001286:	80bb      	strh	r3, [r7, #4]
	ili9341_draw_pixel(lcd_, ELE3312::colorToILI9341Color(color), x, y);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	689c      	ldr	r4, [r3, #8]
 800128c:	68b8      	ldr	r0, [r7, #8]
 800128e:	f7ff fe91 	bl	8000fb4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 8001292:	4603      	mov	r3, r0
 8001294:	4619      	mov	r1, r3
 8001296:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800129a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800129e:	4620      	mov	r0, r4
 80012a0:	f001 fb49 	bl	8002936 <ili9341_draw_pixel>
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}

080012ac <_ZN7ELE331214ILI9341Display8drawLineENS_5ColorEtttt>:
 * @param [in] x0 The x position of the first point.
 * @param [in] y0 The y position of the first point.
 * @param [in] x1 The x position of the second point.
 * @param [in] y1 The y position of the second point.
 */
void ILI9341Display::drawLine(Color color, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80012ac:	b5b0      	push	{r4, r5, r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	4611      	mov	r1, r2
 80012b8:	461a      	mov	r2, r3
 80012ba:	460b      	mov	r3, r1
 80012bc:	80fb      	strh	r3, [r7, #6]
 80012be:	4613      	mov	r3, r2
 80012c0:	80bb      	strh	r3, [r7, #4]
	ili9341_draw_line(lcd_, ELE3312::colorToILI9341Color(color),  x0, y0, x1, y1);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	689c      	ldr	r4, [r3, #8]
 80012c6:	68b8      	ldr	r0, [r7, #8]
 80012c8:	f7ff fe74 	bl	8000fb4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461d      	mov	r5, r3
 80012d0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80012d4:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80012d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80012dc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80012e0:	9201      	str	r2, [sp, #4]
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	4603      	mov	r3, r0
 80012e6:	460a      	mov	r2, r1
 80012e8:	4629      	mov	r1, r5
 80012ea:	4620      	mov	r0, r4
 80012ec:	f001 fb7c 	bl	80029e8 <ili9341_draw_line>
}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bdb0      	pop	{r4, r5, r7, pc}

080012f8 <_ZN7ELE331214ILI9341Display8drawRectENS_5ColorEtttt>:
 * @param [in] x The x coordinate of the lower left corner.
 * @param [in] y The y coordinate of the lower left corner.
 * @param [in] width The width of the rectangle in pixels.
 * @param [in] height The height of the rectangle in pixels.
 */
void ILI9341Display::drawRect(Color color, uint16_t x, uint16_t y, uint16_t w, uint16_t h){
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	4611      	mov	r1, r2
 8001304:	461a      	mov	r2, r3
 8001306:	460b      	mov	r3, r1
 8001308:	80fb      	strh	r3, [r7, #6]
 800130a:	4613      	mov	r3, r2
 800130c:	80bb      	strh	r3, [r7, #4]
	ili9341_draw_rect(lcd_, ELE3312::colorToILI9341Color(color), x, y, w, h);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	689c      	ldr	r4, [r3, #8]
 8001312:	68b8      	ldr	r0, [r7, #8]
 8001314:	f7ff fe4e 	bl	8000fb4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 8001318:	4603      	mov	r3, r0
 800131a:	4618      	mov	r0, r3
 800131c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001320:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001324:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	8c3b      	ldrh	r3, [r7, #32]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	460b      	mov	r3, r1
 800132e:	4601      	mov	r1, r0
 8001330:	4620      	mov	r0, r4
 8001332:	f001 fc46 	bl	8002bc2 <ili9341_draw_rect>
}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	bd90      	pop	{r4, r7, pc}

0800133e <_ZN7ELE331214ILI9341Display8drawRectENS_5ColorERKNS_4RectItEE>:
 * color, dimensions, and position on the screen.
 * @param [in] color The color of the rectangle specified as an color enumeration.
 * @param [in] rect A reference to a Rect object specifying the dimensions
 * and position of the rectangle.
 */
void ILI9341Display::drawRect(Color color, const Rect<uint16_t> &rect) {
 800133e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af02      	add	r7, sp, #8
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
	ili9341_draw_rect(lcd_, ELE3312::colorToILI9341Color(color), rect.getX1(), rect.getY1(), 
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	689c      	ldr	r4, [r3, #8]
 8001350:	68b8      	ldr	r0, [r7, #8]
 8001352:	f7ff fe2f 	bl	8000fb4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 8001356:	4603      	mov	r3, r0
 8001358:	4698      	mov	r8, r3
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fd89 	bl	8001e72 <_ZNK7ELE33124RectItE5getX1Ev>
 8001360:	4603      	mov	r3, r0
 8001362:	b21d      	sxth	r5, r3
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 fd92 	bl	8001e8e <_ZNK7ELE33124RectItE5getY1Ev>
 800136a:	4603      	mov	r3, r0
 800136c:	b21e      	sxth	r6, r3
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fd9b 	bl	8001eaa <_ZNK7ELE33124RectItE8getWidthEv>
 8001374:	4603      	mov	r3, r0
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 fdad 	bl	8001ed8 <_ZNK7ELE33124RectItE9getHeightEv>
 800137e:	4603      	mov	r3, r0
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	4633      	mov	r3, r6
 8001388:	462a      	mov	r2, r5
 800138a:	4641      	mov	r1, r8
 800138c:	4620      	mov	r0, r4
 800138e:	f001 fc18 	bl	8002bc2 <ili9341_draw_rect>
		   rect.getWidth(), rect.getHeight());
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800139c <_ZN7ELE331214ILI9341Display8fillRectENS_5ColorEtttt>:
 * @param [in] x The x position of the lower left corner.
 * @param [in] y The y position of the lower left corner.
 * @param [in] width The width of the rectangle in pixels.
 * @param [in] height The height of the rectangle in pixels.
 */
void ILI9341Display::fillRect(Color color, uint16_t x, uint16_t y, uint16_t w, uint16_t h){
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b087      	sub	sp, #28
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	4611      	mov	r1, r2
 80013a8:	461a      	mov	r2, r3
 80013aa:	460b      	mov	r3, r1
 80013ac:	80fb      	strh	r3, [r7, #6]
 80013ae:	4613      	mov	r3, r2
 80013b0:	80bb      	strh	r3, [r7, #4]
	ili9341_fill_rect(lcd_, ELE3312::colorToILI9341Color(color), x, y, w, h);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	689c      	ldr	r4, [r3, #8]
 80013b6:	68b8      	ldr	r0, [r7, #8]
 80013b8:	f7ff fdfc 	bl	8000fb4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 80013bc:	4603      	mov	r3, r0
 80013be:	4618      	mov	r0, r3
 80013c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80013c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	8c3b      	ldrh	r3, [r7, #32]
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	460b      	mov	r3, r1
 80013d2:	4601      	mov	r1, r0
 80013d4:	4620      	mov	r0, r4
 80013d6:	f001 fc65 	bl	8002ca4 <ili9341_fill_rect>
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}

080013e2 <_ZN7ELE331214ILI9341Display8fillRectENS_5ColorERKNS_4RectItEE>:
 * parameter.
 * @param [in] color The color of the filled rectangle.
 * @param [in] rect A const reference to a Rect object that specifies the
 * dimension and position of the rectangle.
 */
void ILI9341Display::fillRect(Color color, const Rect<uint16_t> &rect){
 80013e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	ili9341_fill_rect(lcd_, ELE3312::colorToILI9341Color(color),  rect.getX1(), rect.getY1(), 
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	689c      	ldr	r4, [r3, #8]
 80013f4:	68b8      	ldr	r0, [r7, #8]
 80013f6:	f7ff fddd 	bl	8000fb4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4698      	mov	r8, r3
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fd37 	bl	8001e72 <_ZNK7ELE33124RectItE5getX1Ev>
 8001404:	4603      	mov	r3, r0
 8001406:	b21d      	sxth	r5, r3
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 fd40 	bl	8001e8e <_ZNK7ELE33124RectItE5getY1Ev>
 800140e:	4603      	mov	r3, r0
 8001410:	b21e      	sxth	r6, r3
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 fd49 	bl	8001eaa <_ZNK7ELE33124RectItE8getWidthEv>
 8001418:	4603      	mov	r3, r0
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fd5b 	bl	8001ed8 <_ZNK7ELE33124RectItE9getHeightEv>
 8001422:	4603      	mov	r3, r0
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	4633      	mov	r3, r6
 800142c:	462a      	mov	r2, r5
 800142e:	4641      	mov	r1, r8
 8001430:	4620      	mov	r0, r4
 8001432:	f001 fc37 	bl	8002ca4 <ili9341_fill_rect>
		   rect.getWidth(), rect.getHeight());
}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001440 <_ZN7ELE331214ILI9341Display10drawCircleENS_5ColorEttt>:
 * @param [in] color The color of the circle.
 * @param [in] x The x position of the circle's center.
 * @param [in] y The y position of the circle's center.
 * @param [in] radius The radius of the circle in pixels.
 */
void ILI9341Display::drawCircle(Color color, uint16_t x, uint16_t y, uint16_t r) {
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b087      	sub	sp, #28
 8001444:	af02      	add	r7, sp, #8
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	4611      	mov	r1, r2
 800144c:	461a      	mov	r2, r3
 800144e:	460b      	mov	r3, r1
 8001450:	80fb      	strh	r3, [r7, #6]
 8001452:	4613      	mov	r3, r2
 8001454:	80bb      	strh	r3, [r7, #4]
	ili9341_draw_circle(lcd_, ELE3312::colorToILI9341Color(color), x, y, r);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	689c      	ldr	r4, [r3, #8]
 800145a:	68b8      	ldr	r0, [r7, #8]
 800145c:	f7ff fdaa 	bl	8000fb4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 8001460:	4603      	mov	r3, r0
 8001462:	4618      	mov	r0, r3
 8001464:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001468:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800146c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	460b      	mov	r3, r1
 8001474:	4601      	mov	r1, r0
 8001476:	4620      	mov	r0, r4
 8001478:	f001 fca6 	bl	8002dc8 <ili9341_draw_circle>
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}

08001484 <_ZN7ELE331214ILI9341Display10fillCircleENS_5ColorEttt>:
 * @param [in] color The color of the filled circle.
 * @param [in] x The x position of the center of the circle.
 * @param [in] y The y position of the center of the circle.
 * @param [in] radius The radius of the circle in pixels.
 */
void ILI9341Display::fillCircle(Color color, uint16_t x, uint16_t y, uint16_t r) {
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b087      	sub	sp, #28
 8001488:	af02      	add	r7, sp, #8
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	4611      	mov	r1, r2
 8001490:	461a      	mov	r2, r3
 8001492:	460b      	mov	r3, r1
 8001494:	80fb      	strh	r3, [r7, #6]
 8001496:	4613      	mov	r3, r2
 8001498:	80bb      	strh	r3, [r7, #4]
	ili9341_fill_circle(lcd_, ELE3312::colorToILI9341Color(color), x, y, r);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	689c      	ldr	r4, [r3, #8]
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f7ff fd88 	bl	8000fb4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014ac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	460b      	mov	r3, r1
 80014b8:	4601      	mov	r1, r0
 80014ba:	4620      	mov	r0, r4
 80014bc:	f001 fd76 	bl	8002fac <ili9341_fill_circle>
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd90      	pop	{r4, r7, pc}

080014c8 <_ZN7ELE331214ILI9341Display8drawCharEttc>:
 * specified coordinates on the screen.
 * @param [in] x The x position of the lower left corner of the character.
 * @param [in] y The y position of the lower left corner of the character.
 * @param [in] character The ASCII character to be drawn on the screen.
 */
void ILI9341Display::drawChar(uint16_t x, uint16_t y, char ch) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af02      	add	r7, sp, #8
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	4608      	mov	r0, r1
 80014d2:	4611      	mov	r1, r2
 80014d4:	461a      	mov	r2, r3
 80014d6:	4603      	mov	r3, r0
 80014d8:	817b      	strh	r3, [r7, #10]
 80014da:	460b      	mov	r3, r1
 80014dc:	813b      	strh	r3, [r7, #8]
 80014de:	4613      	mov	r3, r2
 80014e0:	71fb      	strb	r3, [r7, #7]
	if (ptext_attr_ == nullptr){
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d112      	bne.n	8001510 <_ZN7ELE331214ILI9341Display8drawCharEttc+0x48>
		ptext_attr_ = new ili9341_text_attr_t{&ili9341_font_11x18, ILI9341_WHITE , ILI9341_BLACK,x,y};
 80014ea:	200c      	movs	r0, #12
 80014ec:	f00a fb62 	bl	800bbb4 <_Znwj>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4a12      	ldr	r2, [pc, #72]	@ (800153c <_ZN7ELE331214ILI9341Display8drawCharEttc+0x74>)
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <_ZN7ELE331214ILI9341Display8drawCharEttc+0x78>)
 80014f8:	8812      	ldrh	r2, [r2, #0]
 80014fa:	809a      	strh	r2, [r3, #4]
 80014fc:	4a11      	ldr	r2, [pc, #68]	@ (8001544 <_ZN7ELE331214ILI9341Display8drawCharEttc+0x7c>)
 80014fe:	8812      	ldrh	r2, [r2, #0]
 8001500:	80da      	strh	r2, [r3, #6]
 8001502:	897a      	ldrh	r2, [r7, #10]
 8001504:	811a      	strh	r2, [r3, #8]
 8001506:	893a      	ldrh	r2, [r7, #8]
 8001508:	815a      	strh	r2, [r3, #10]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	6053      	str	r3, [r2, #4]
 800150e:	e007      	b.n	8001520 <_ZN7ELE331214ILI9341Display8drawCharEttc+0x58>
	} else {
		ptext_attr_->origin_x = x;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	897a      	ldrh	r2, [r7, #10]
 8001516:	811a      	strh	r2, [r3, #8]
		ptext_attr_->origin_y = y;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	893a      	ldrh	r2, [r7, #8]
 800151e:	815a      	strh	r2, [r3, #10]
	}
	ili9341_draw_char(lcd_, *ptext_attr_, ch);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6898      	ldr	r0, [r3, #8]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	79fa      	ldrb	r2, [r7, #7]
 800152a:	9200      	str	r2, [sp, #0]
 800152c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800152e:	f001 fd91 	bl	8003054 <ili9341_draw_char>
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	0800f9b0 	.word	0x0800f9b0
 8001540:	0801072c 	.word	0x0801072c
 8001544:	0801070e 	.word	0x0801070e

08001548 <_ZN7ELE331214ILI9341Display10drawStringEttNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5ColorE>:
 * @param [in] x The x position of the lower left corner of the text string.
 * @param [in] y The y position of the lower left corner of the text string.
 * @param [in] text The text string that is displayed on the screen.
 * @param [in] color The color of the rendered text.
 */
void ILI9341Display::drawString(uint16_t x, uint16_t y, const std::string text, Color color) {
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af02      	add	r7, sp, #8
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	460b      	mov	r3, r1
 8001554:	817b      	strh	r3, [r7, #10]
 8001556:	4613      	mov	r3, r2
 8001558:	813b      	strh	r3, [r7, #8]
	if (ptext_attr_ == nullptr){
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d115      	bne.n	800158e <_ZN7ELE331214ILI9341Display10drawStringEttNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5ColorE+0x46>
			ptext_attr_ = new ili9341_text_attr_t{&ili9341_font_11x18,  ELE3312::colorToILI9341Color(color), ILI9341_BLACK,x,y};
 8001562:	200c      	movs	r0, #12
 8001564:	f00a fb26 	bl	800bbb4 <_Znwj>
 8001568:	4603      	mov	r3, r0
 800156a:	461c      	mov	r4, r3
 800156c:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <_ZN7ELE331214ILI9341Display10drawStringEttNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5ColorE+0x88>)
 800156e:	6023      	str	r3, [r4, #0]
 8001570:	6a38      	ldr	r0, [r7, #32]
 8001572:	f7ff fd1f 	bl	8000fb4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 8001576:	4603      	mov	r3, r0
 8001578:	80a3      	strh	r3, [r4, #4]
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <_ZN7ELE331214ILI9341Display10drawStringEttNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5ColorE+0x8c>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	80e3      	strh	r3, [r4, #6]
 8001580:	897b      	ldrh	r3, [r7, #10]
 8001582:	8123      	strh	r3, [r4, #8]
 8001584:	893b      	ldrh	r3, [r7, #8]
 8001586:	8163      	strh	r3, [r4, #10]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	605c      	str	r4, [r3, #4]
 800158c:	e00e      	b.n	80015ac <_ZN7ELE331214ILI9341Display10drawStringEttNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5ColorE+0x64>
	} else {
		ptext_attr_->origin_x = x;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	897a      	ldrh	r2, [r7, #10]
 8001594:	811a      	strh	r2, [r3, #8]
		ptext_attr_->origin_y = y;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	893a      	ldrh	r2, [r7, #8]
 800159c:	815a      	strh	r2, [r3, #10]
		ptext_attr_->fg_color = ELE3312::colorToILI9341Color(color);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	685c      	ldr	r4, [r3, #4]
 80015a2:	6a38      	ldr	r0, [r7, #32]
 80015a4:	f7ff fd06 	bl	8000fb4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 80015a8:	4603      	mov	r3, r0
 80015aa:	80a3      	strh	r3, [r4, #4]
	}
	ili9341_draw_string(lcd_, *ptext_attr_, const_cast<char*>(text.c_str()));
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	689d      	ldr	r5, [r3, #8]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	685c      	ldr	r4, [r3, #4]
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f00a fb63 	bl	800bc80 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80015ba:	4603      	mov	r3, r0
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80015c2:	4628      	mov	r0, r5
 80015c4:	f001 fe2c 	bl	8003220 <ili9341_draw_string>
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bdb0      	pop	{r4, r5, r7, pc}
 80015d0:	0800f9b0 	.word	0x0800f9b0
 80015d4:	0801070e 	.word	0x0801070e

080015d8 <_ZN7ELE331214ILI9341Display10drawBitmapEPttttt>:
 * @param [in] x The x position of the lower left corner of the rectangular bitmap.
 * @param [in] y The y position of the lower left corner of the rectangular bitmap.
 * @param [in] width The width of the bitmap.
 * @param [in] height The height of the bitmap.
 */
void ILI9341Display::drawBitmap(uint16_t *data, uint16_t x, uint16_t y, uint16_t width, uint16_t height){
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b089      	sub	sp, #36	@ 0x24
 80015dc:	af02      	add	r7, sp, #8
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	4611      	mov	r1, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	460b      	mov	r3, r1
 80015e8:	80fb      	strh	r3, [r7, #6]
 80015ea:	4613      	mov	r3, r2
 80015ec:	80bb      	strh	r3, [r7, #4]
	  uint16_t size = +width*height;
 80015ee:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80015f0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80015f2:	fb12 f303 	smulbb	r3, r2, r3
 80015f6:	82fb      	strh	r3, [r7, #22]
	  // Set address region
	  ili9341_spi_tft_set_address_rect(lcd_, x, y, x + width-1, y + height);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6898      	ldr	r0, [r3, #8]
 80015fc:	88fa      	ldrh	r2, [r7, #6]
 80015fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001600:	4413      	add	r3, r2
 8001602:	b29b      	uxth	r3, r3
 8001604:	3b01      	subs	r3, #1
 8001606:	b29c      	uxth	r4, r3
 8001608:	88ba      	ldrh	r2, [r7, #4]
 800160a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800160c:	4413      	add	r3, r2
 800160e:	b29b      	uxth	r3, r3
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	88f9      	ldrh	r1, [r7, #6]
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	4623      	mov	r3, r4
 8001618:	f001 f900 	bl	800281c <ili9341_spi_tft_set_address_rect>
	  ili9341_spi_tft_select(lcd_);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fd80 	bl	8002126 <ili9341_spi_tft_select>
	  HAL_GPIO_WritePin(lcd_->data_command_port, lcd_->data_command_pin, __GPIO_PIN_SET__);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	6958      	ldr	r0, [r3, #20]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	8b1b      	ldrh	r3, [r3, #24]
 8001632:	2201      	movs	r2, #1
 8001634:	4619      	mov	r1, r3
 8001636:	f004 fdb7 	bl	80061a8 <HAL_GPIO_WritePin>
	  ili9341_transmit_color(lcd_, size*2, data, ibTrue);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6898      	ldr	r0, [r3, #8]
 800163e:	8afb      	ldrh	r3, [r7, #22]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	b299      	uxth	r1, r3
 8001644:	2301      	movs	r3, #1
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f001 f950 	bl	80028ec <ili9341_transmit_color>
	  ili9341_spi_tft_release(lcd_);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fd78 	bl	8002146 <ili9341_spi_tft_release>
}
 8001656:	bf00      	nop
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd90      	pop	{r4, r7, pc}
	...

08001660 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft>:
 * @param [in] start
 * @param [in] end
 * @param [in] color
 */
void ILI9341Display::writeFillArcHelper(int16_t cx, uint16_t cy, uint16_t oradius, uint16_t iradius, float start, float end, uint16_t color)
{
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b09e      	sub	sp, #120	@ 0x78
 8001664:	af02      	add	r7, sp, #8
 8001666:	6178      	str	r0, [r7, #20]
 8001668:	4608      	mov	r0, r1
 800166a:	4611      	mov	r1, r2
 800166c:	461a      	mov	r2, r3
 800166e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001672:	edc7 0a01 	vstr	s1, [r7, #4]
 8001676:	4603      	mov	r3, r0
 8001678:	827b      	strh	r3, [r7, #18]
 800167a:	460b      	mov	r3, r1
 800167c:	823b      	strh	r3, [r7, #16]
 800167e:	4613      	mov	r3, r2
 8001680:	81fb      	strh	r3, [r7, #14]
	const float DEGTORAD = 0.017453292519943295769236907684886F;
 8001682:	4bcd      	ldr	r3, [pc, #820]	@ (80019b8 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x358>)
 8001684:	657b      	str	r3, [r7, #84]	@ 0x54
  if ((start == 90.0) || (start == 180.0) || (start == 270.0) || (start == 360.0))
 8001686:	edd7 7a02 	vldr	s15, [r7, #8]
 800168a:	ed9f 7ad0 	vldr	s14, [pc, #832]	@ 80019cc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x36c>
 800168e:	eef4 7a47 	vcmp.f32	s15, s14
 8001692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001696:	d01a      	beq.n	80016ce <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x6e>
 8001698:	edd7 7a02 	vldr	s15, [r7, #8]
 800169c:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 80019d0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 80016a0:	eef4 7a47 	vcmp.f32	s15, s14
 80016a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a8:	d011      	beq.n	80016ce <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x6e>
 80016aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ae:	ed9f 7ac6 	vldr	s14, [pc, #792]	@ 80019c8 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x368>
 80016b2:	eef4 7a47 	vcmp.f32	s15, s14
 80016b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ba:	d008      	beq.n	80016ce <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x6e>
 80016bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c0:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 80019bc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x35c>
 80016c4:	eef4 7a47 	vcmp.f32	s15, s14
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	d10f      	bne.n	80016ee <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x8e>
  {
    start -= 0.1;
 80016ce:	68b8      	ldr	r0, [r7, #8]
 80016d0:	f7fe ff5a 	bl	8000588 <__aeabi_f2d>
 80016d4:	a3b6      	add	r3, pc, #728	@ (adr r3, 80019b0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x350>)
 80016d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016da:	f7fe fdf5 	bl	80002c8 <__aeabi_dsub>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff fa7f 	bl	8000be8 <__aeabi_d2f>
 80016ea:	4603      	mov	r3, r0
 80016ec:	60bb      	str	r3, [r7, #8]
  }

  if ((end == 90.0) || (end == 180.0) || (end == 270.0) || (end == 360.0))
 80016ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f2:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 80019cc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x36c>
 80016f6:	eef4 7a47 	vcmp.f32	s15, s14
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	d01a      	beq.n	8001736 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0xd6>
 8001700:	edd7 7a01 	vldr	s15, [r7, #4]
 8001704:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 80019d0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 8001708:	eef4 7a47 	vcmp.f32	s15, s14
 800170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001710:	d011      	beq.n	8001736 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0xd6>
 8001712:	edd7 7a01 	vldr	s15, [r7, #4]
 8001716:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 80019c8 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x368>
 800171a:	eef4 7a47 	vcmp.f32	s15, s14
 800171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001722:	d008      	beq.n	8001736 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0xd6>
 8001724:	edd7 7a01 	vldr	s15, [r7, #4]
 8001728:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 80019bc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x35c>
 800172c:	eef4 7a47 	vcmp.f32	s15, s14
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	d10f      	bne.n	8001756 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0xf6>
  {
    end -= 0.1;
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7fe ff26 	bl	8000588 <__aeabi_f2d>
 800173c:	a39c      	add	r3, pc, #624	@ (adr r3, 80019b0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x350>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe fdc1 	bl	80002c8 <__aeabi_dsub>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff fa4b 	bl	8000be8 <__aeabi_d2f>
 8001752:	4603      	mov	r3, r0
 8001754:	607b      	str	r3, [r7, #4]
  }

  float s_cos = (cos(start * DEGTORAD));
 8001756:	edd7 7a02 	vldr	s15, [r7, #8]
 800175a:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80019c0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x360>
 800175e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001762:	ee17 0a90 	vmov	r0, s15
 8001766:	f7fe ff0f 	bl	8000588 <__aeabi_f2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	ec43 2b10 	vmov	d0, r2, r3
 8001772:	f00a fad1 	bl	800bd18 <cos>
 8001776:	ec53 2b10 	vmov	r2, r3, d0
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff fa33 	bl	8000be8 <__aeabi_d2f>
 8001782:	4603      	mov	r3, r0
 8001784:	653b      	str	r3, [r7, #80]	@ 0x50
  float e_cos = (cos(end * DEGTORAD));
 8001786:	edd7 7a01 	vldr	s15, [r7, #4]
 800178a:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 80019c0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x360>
 800178e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001792:	ee17 0a90 	vmov	r0, s15
 8001796:	f7fe fef7 	bl	8000588 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	ec43 2b10 	vmov	d0, r2, r3
 80017a2:	f00a fab9 	bl	800bd18 <cos>
 80017a6:	ec53 2b10 	vmov	r2, r3, d0
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff fa1b 	bl	8000be8 <__aeabi_d2f>
 80017b2:	4603      	mov	r3, r0
 80017b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  float sslope = s_cos / (sin(start * DEGTORAD));
 80017b6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80017b8:	f7fe fee6 	bl	8000588 <__aeabi_f2d>
 80017bc:	4604      	mov	r4, r0
 80017be:	460d      	mov	r5, r1
 80017c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017c4:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 80019c0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x360>
 80017c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017cc:	ee17 0a90 	vmov	r0, s15
 80017d0:	f7fe feda 	bl	8000588 <__aeabi_f2d>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	ec43 2b10 	vmov	d0, r2, r3
 80017dc:	f00a faf0 	bl	800bdc0 <sin>
 80017e0:	ec53 2b10 	vmov	r2, r3, d0
 80017e4:	4620      	mov	r0, r4
 80017e6:	4629      	mov	r1, r5
 80017e8:	f7ff f850 	bl	800088c <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff f9f8 	bl	8000be8 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  float eslope = e_cos / (sin(end * DEGTORAD));
 80017fc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80017fe:	f7fe fec3 	bl	8000588 <__aeabi_f2d>
 8001802:	4604      	mov	r4, r0
 8001804:	460d      	mov	r5, r1
 8001806:	edd7 7a01 	vldr	s15, [r7, #4]
 800180a:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80019c0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x360>
 800180e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001812:	ee17 0a90 	vmov	r0, s15
 8001816:	f7fe feb7 	bl	8000588 <__aeabi_f2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	ec43 2b10 	vmov	d0, r2, r3
 8001822:	f00a facd 	bl	800bdc0 <sin>
 8001826:	ec53 2b10 	vmov	r2, r3, d0
 800182a:	4620      	mov	r0, r4
 800182c:	4629      	mov	r1, r5
 800182e:	f7ff f82d 	bl	800088c <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f9d5 	bl	8000be8 <__aeabi_d2f>
 800183e:	4603      	mov	r3, r0
 8001840:	647b      	str	r3, [r7, #68]	@ 0x44
  float swidth = 0.5 / s_cos;
 8001842:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001846:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800184a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800184e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  float ewidth = -0.5 / e_cos;
 8001852:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 8001856:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800185a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800185e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  --iradius;
 8001862:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8001866:	3b01      	subs	r3, #1
 8001868:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
  int32_t ir2 = iradius * iradius + iradius;
 800186c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8001870:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8001874:	fb03 f202 	mul.w	r2, r3, r2
 8001878:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800187c:	4413      	add	r3, r2
 800187e:	63bb      	str	r3, [r7, #56]	@ 0x38
  int32_t or2 = oradius * oradius + oradius;
 8001880:	89fb      	ldrh	r3, [r7, #14]
 8001882:	89fa      	ldrh	r2, [r7, #14]
 8001884:	fb03 f202 	mul.w	r2, r3, r2
 8001888:	89fb      	ldrh	r3, [r7, #14]
 800188a:	4413      	add	r3, r2
 800188c:	637b      	str	r3, [r7, #52]	@ 0x34

  uint16_t start180 = !(start < 180.0);
 800188e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001892:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80019d0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 8001896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189e:	bf4c      	ite	mi
 80018a0:	2301      	movmi	r3, #1
 80018a2:	2300      	movpl	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f083 0301 	eor.w	r3, r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	867b      	strh	r3, [r7, #50]	@ 0x32
  uint16_t end180 = end < 180.0;
 80018ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b2:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80019d0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 80018b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	bf4c      	ite	mi
 80018c0:	2301      	movmi	r3, #1
 80018c2:	2300      	movpl	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	863b      	strh	r3, [r7, #48]	@ 0x30
  uint16_t reversed = start + 180.0 < end || (end < start && start < end + 180.0);
 80018c8:	68b8      	ldr	r0, [r7, #8]
 80018ca:	f7fe fe5d 	bl	8000588 <__aeabi_f2d>
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4b3c      	ldr	r3, [pc, #240]	@ (80019c4 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x364>)
 80018d4:	f7fe fcfa 	bl	80002cc <__adddf3>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4614      	mov	r4, r2
 80018de:	461d      	mov	r5, r3
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7fe fe51 	bl	8000588 <__aeabi_f2d>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4620      	mov	r0, r4
 80018ec:	4629      	mov	r1, r5
 80018ee:	f7ff f915 	bl	8000b1c <__aeabi_dcmplt>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d11e      	bne.n	8001936 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x2d6>
 80018f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80018fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	d517      	bpl.n	800193a <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x2da>
 800190a:	68b8      	ldr	r0, [r7, #8]
 800190c:	f7fe fe3c 	bl	8000588 <__aeabi_f2d>
 8001910:	4604      	mov	r4, r0
 8001912:	460d      	mov	r5, r1
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7fe fe37 	bl	8000588 <__aeabi_f2d>
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4b29      	ldr	r3, [pc, #164]	@ (80019c4 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x364>)
 8001920:	f7fe fcd4 	bl	80002cc <__adddf3>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4620      	mov	r0, r4
 800192a:	4629      	mov	r1, r5
 800192c:	f7ff f8f6 	bl	8000b1c <__aeabi_dcmplt>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x2da>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x2dc>
 800193a:	2300      	movs	r3, #0
 800193c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

  int32_t xs = -oradius;
 800193e:	89fb      	ldrh	r3, [r7, #14]
 8001940:	425b      	negs	r3, r3
 8001942:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int32_t y = -oradius;
 8001944:	89fb      	ldrh	r3, [r7, #14]
 8001946:	425b      	negs	r3, r3
 8001948:	66bb      	str	r3, [r7, #104]	@ 0x68
  int32_t ye = oradius;
 800194a:	89fb      	ldrh	r3, [r7, #14]
 800194c:	667b      	str	r3, [r7, #100]	@ 0x64
  int32_t xe = oradius + 1;
 800194e:	89fb      	ldrh	r3, [r7, #14]
 8001950:	3301      	adds	r3, #1
 8001952:	663b      	str	r3, [r7, #96]	@ 0x60
  if (!reversed)
 8001954:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 808b 	bne.w	8001a72 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x412>
  {
    if ((end >= 270 || end < 90) && (start >= 270 || start < 90))
 800195c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001960:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80019c8 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x368>
 8001964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196c:	da08      	bge.n	8001980 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x320>
 800196e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001972:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80019cc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x36c>
 8001976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197e:	d529      	bpl.n	80019d4 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x374>
 8001980:	edd7 7a02 	vldr	s15, [r7, #8]
 8001984:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80019c8 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x368>
 8001988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	da08      	bge.n	80019a4 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x344>
 8001992:	edd7 7a02 	vldr	s15, [r7, #8]
 8001996:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80019cc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x36c>
 800199a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	d517      	bpl.n	80019d4 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x374>
    {
      xs = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80019a8:	e03a      	b.n	8001a20 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x3c0>
 80019aa:	bf00      	nop
 80019ac:	f3af 8000 	nop.w
 80019b0:	9999999a 	.word	0x9999999a
 80019b4:	3fb99999 	.word	0x3fb99999
 80019b8:	3c8efa35 	.word	0x3c8efa35
 80019bc:	43b40000 	.word	0x43b40000
 80019c0:	3c8efa35 	.word	0x3c8efa35
 80019c4:	40668000 	.word	0x40668000
 80019c8:	43870000 	.word	0x43870000
 80019cc:	42b40000 	.word	0x42b40000
 80019d0:	43340000 	.word	0x43340000
    }
    else if (end < 270 && end >= 90 && start < 270 && start >= 90)
 80019d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019d8:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 80019c8 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x368>
 80019dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e4:	d51c      	bpl.n	8001a20 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x3c0>
 80019e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ea:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 80019cc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x36c>
 80019ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f6:	db13      	blt.n	8001a20 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x3c0>
 80019f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019fc:	ed1f 7a0e 	vldr	s14, [pc, #-56]	@ 80019c8 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x368>
 8001a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a08:	d50a      	bpl.n	8001a20 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x3c0>
 8001a0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a0e:	ed1f 7a11 	vldr	s14, [pc, #-68]	@ 80019cc <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x36c>
 8001a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	db01      	blt.n	8001a20 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x3c0>
    {
      xe = 1;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	663b      	str	r3, [r7, #96]	@ 0x60
    }
    if (end >= 180 && start >= 180)
 8001a20:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a24:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 80019d0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 8001a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	db0b      	blt.n	8001a4a <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x3ea>
 8001a32:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a36:	ed1f 7a1a 	vldr	s14, [pc, #-104]	@ 80019d0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 8001a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a42:	db02      	blt.n	8001a4a <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x3ea>
    {
      ye = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a48:	e013      	b.n	8001a72 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x412>
    }
    else if (end < 180 && start < 180)
 8001a4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a4e:	ed1f 7a20 	vldr	s14, [pc, #-128]	@ 80019d0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 8001a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5a:	d50a      	bpl.n	8001a72 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x412>
 8001a5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a60:	ed1f 7a25 	vldr	s14, [pc, #-148]	@ 80019d0 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x370>
 8001a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6c:	d501      	bpl.n	8001a72 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x412>
    {
      y = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
  }
  do
  {
    int32_t y2 = y * y;
 8001a72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a74:	fb03 f303 	mul.w	r3, r3, r3
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
    int32_t x = xs;
 8001a7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (x < 0)
 8001a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	da12      	bge.n	8001aaa <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x44a>
    {
      while (x * x + y2 >= or2)
 8001a84:	e002      	b.n	8001a8c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x42c>
      {
        ++x;
 8001a86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a88:	3301      	adds	r3, #1
 8001a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
      while (x * x + y2 >= or2)
 8001a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a8e:	fb03 f203 	mul.w	r2, r3, r3
 8001a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a94:	4413      	add	r3, r2
 8001a96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	ddf4      	ble.n	8001a86 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x426>
      }
      if (xe != 1)
 8001a9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d003      	beq.n	8001aaa <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x44a>
      {
        xe = 1 - x;
 8001aa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001aa4:	f1c3 0301 	rsb	r3, r3, #1
 8001aa8:	663b      	str	r3, [r7, #96]	@ 0x60
      }
    }
    float ysslope = (y + swidth) * sslope;
 8001aaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001abc:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float yeslope = (y + ewidth) * eslope;
 8001ac8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ada:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae2:	edc7 7a08 	vstr	s15, [r7, #32]
    int32_t len = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
    do
    {
      uint16_t flg1 = start180 != (x <= ysslope);
 8001aea:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001aec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001aee:	ee07 2a90 	vmov	s15, r2
 8001af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b02:	bfac      	ite	ge
 8001b04:	2201      	movge	r2, #1
 8001b06:	2200      	movlt	r2, #0
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	bf14      	ite	ne
 8001b0e:	2301      	movne	r3, #1
 8001b10:	2300      	moveq	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	83fb      	strh	r3, [r7, #30]
      uint16_t flg2 = end180 != (x <= yeslope);
 8001b16:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001b18:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001b1a:	ee07 2a90 	vmov	s15, r2
 8001b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b22:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2e:	bfac      	ite	ge
 8001b30:	2201      	movge	r2, #1
 8001b32:	2200      	movlt	r2, #0
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	4293      	cmp	r3, r2
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	83bb      	strh	r3, [r7, #28]
      int32_t distance = x * x + y2;
 8001b42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b44:	fb03 f303 	mul.w	r3, r3, r3
 8001b48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b4a:	4413      	add	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
      if (distance >= ir2 && ((flg1 && flg2) || (reversed && (flg1 || flg2))) && x != xe && distance < or2)
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b52:	429a      	cmp	r2, r3
 8001b54:	db1a      	blt.n	8001b8c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x52c>
 8001b56:	8bfb      	ldrh	r3, [r7, #30]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x502>
 8001b5c:	8bbb      	ldrh	r3, [r7, #28]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d108      	bne.n	8001b74 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x514>
 8001b62:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d011      	beq.n	8001b8c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x52c>
 8001b68:	8bfb      	ldrh	r3, [r7, #30]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x514>
 8001b6e:	8bbb      	ldrh	r3, [r7, #28]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00b      	beq.n	8001b8c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x52c>
 8001b74:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001b76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d007      	beq.n	8001b8c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x52c>
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b80:	429a      	cmp	r2, r3
 8001b82:	da03      	bge.n	8001b8c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x52c>
      {
        ++len;
 8001b84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b86:	3301      	adds	r3, #1
 8001b88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b8a:	e038      	b.n	8001bfe <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x59e>
      }
      else
      {
        if (len)
 8001b8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d027      	beq.n	8001be2 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x582>
        {
          //writeFastHLine(cx + x - len, cy + y, len, color);
          ili9341_draw_line(lcd_, color, cx + x - len, cy + y, cx + x, cy + y);
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	6898      	ldr	r0, [r3, #8]
 8001b96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	8a7b      	ldrh	r3, [r7, #18]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	b21c      	sxth	r4, r3
 8001baa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	8a3b      	ldrh	r3, [r7, #16]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b21d      	sxth	r5, r3
 8001bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	8a7b      	ldrh	r3, [r7, #18]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001bc4:	b291      	uxth	r1, r2
 8001bc6:	8a3a      	ldrh	r2, [r7, #16]
 8001bc8:	440a      	add	r2, r1
 8001bca:	b292      	uxth	r2, r2
 8001bcc:	b212      	sxth	r2, r2
 8001bce:	f8b7 1084 	ldrh.w	r1, [r7, #132]	@ 0x84
 8001bd2:	9201      	str	r2, [sp, #4]
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	462b      	mov	r3, r5
 8001bd8:	4622      	mov	r2, r4
 8001bda:	f000 ff05 	bl	80029e8 <ili9341_draw_line>
          len = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	65bb      	str	r3, [r7, #88]	@ 0x58
        }
        if (distance >= or2)
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001be6:	429a      	cmp	r2, r3
 8001be8:	da17      	bge.n	8001c1a <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x5ba>
          break;
        if (x < 0 && distance < ir2)
 8001bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	da06      	bge.n	8001bfe <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x59e>
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	da02      	bge.n	8001bfe <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x59e>
        {
          x = -x;
 8001bf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bfa:	425b      	negs	r3, r3
 8001bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }
      }
    } while (++x <= xe);
 8001bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c00:	3301      	adds	r3, #1
 8001c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c04:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001c06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	bfd4      	ite	le
 8001c0c:	2301      	movle	r3, #1
 8001c0e:	2300      	movgt	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f47f af69 	bne.w	8001aea <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x48a>
 8001c18:	e000      	b.n	8001c1c <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x5bc>
          break;
 8001c1a:	bf00      	nop
  } while (++y <= ye);
 8001c1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c1e:	3301      	adds	r3, #1
 8001c20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001c22:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001c24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c26:	429a      	cmp	r2, r3
 8001c28:	bfd4      	ite	le
 8001c2a:	2301      	movle	r3, #1
 8001c2c:	2300      	movgt	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f47f af1e 	bne.w	8001a72 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft+0x412>
}
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	3770      	adds	r7, #112	@ 0x70
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bdb0      	pop	{r4, r5, r7, pc}

08001c40 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE>:
 * @param [in] start The start of the segment in radians.
 * @param [in] end  The end of the segment in radians.
 * @param [in] color The color of the filled segment of a circle.
 */
void ILI9341Display::fillArc( uint16_t x, uint16_t y, uint16_t r1, uint16_t r2, float start, float end, Color color)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b08d      	sub	sp, #52	@ 0x34
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	6178      	str	r0, [r7, #20]
 8001c48:	4608      	mov	r0, r1
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c52:	edc7 0a01 	vstr	s1, [r7, #4]
 8001c56:	4603      	mov	r3, r0
 8001c58:	827b      	strh	r3, [r7, #18]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	823b      	strh	r3, [r7, #16]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	81fb      	strh	r3, [r7, #14]
	const float FLT_EPSILON = 0.00001;
 8001c62:	4b47      	ldr	r3, [pc, #284]	@ (8001d80 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x140>)
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (r1 < r2)
 8001c66:	89fa      	ldrh	r2, [r7, #14]
 8001c68:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d205      	bcs.n	8001c7a <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x3a>
  {
    //_swap_int16_t(r1, r2);
	  int16_t t = r1;
 8001c6e:	89fb      	ldrh	r3, [r7, #14]
 8001c70:	847b      	strh	r3, [r7, #34]	@ 0x22
	  r1 = r2;
 8001c72:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c74:	81fb      	strh	r3, [r7, #14]
	  r2 = t;
 8001c76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001c78:	873b      	strh	r3, [r7, #56]	@ 0x38
  }
  if (r1 < 1)
 8001c7a:	89fb      	ldrh	r3, [r7, #14]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x44>
  {
    r1 = 1;
 8001c80:	2301      	movs	r3, #1
 8001c82:	81fb      	strh	r3, [r7, #14]
  }
  if (r2 < 1)
 8001c84:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x4e>
  {
    r2 = 1;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	873b      	strh	r3, [r7, #56]	@ 0x38
  }
  int equal = (int)( fabs(start - end) < FLT_EPSILON );
 8001c8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9a:	eef0 7ae7 	vabs.f32	s15, s15
 8001c9e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001d84 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x144>
 8001ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001caa:	bf4c      	ite	mi
 8001cac:	2301      	movmi	r3, #1
 8001cae:	2300      	movpl	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	61fb      	str	r3, [r7, #28]
  start = fmodf(start, 360);
 8001cb4:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8001d88 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x148>
 8001cb8:	ed97 0a02 	vldr	s0, [r7, #8]
 8001cbc:	f00a f8d4 	bl	800be68 <fmodf>
 8001cc0:	ed87 0a02 	vstr	s0, [r7, #8]
  end = fmodf(end, 360);
 8001cc4:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8001d88 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x148>
 8001cc8:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ccc:	f00a f8cc 	bl	800be68 <fmodf>
 8001cd0:	ed87 0a01 	vstr	s0, [r7, #4]
  if (start < 0)
 8001cd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	d507      	bpl.n	8001cf2 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0xb2>
    start += 360.0;
 8001ce2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ce6:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001d88 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x148>
 8001cea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cee:	edc7 7a02 	vstr	s15, [r7, #8]
  if (end < 0)
 8001cf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	d507      	bpl.n	8001d10 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0xd0>
    end += 360.0;
 8001d00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d04:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001d88 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x148>
 8001d08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d0c:	edc7 7a01 	vstr	s15, [r7, #4]
  if (!equal && (fabsf(start - end) <= 0.0001))
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d118      	bne.n	8001d48 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x108>
 8001d16:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d22:	eef0 7ae7 	vabs.f32	s15, s15
 8001d26:	ee17 0a90 	vmov	r0, s15
 8001d2a:	f7fe fc2d 	bl	8000588 <__aeabi_f2d>
 8001d2e:	a312      	add	r3, pc, #72	@ (adr r3, 8001d78 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x138>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fefc 	bl	8000b30 <__aeabi_dcmple>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x108>
  {
    start = .0;
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
    end = 360.0;
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <_ZN7ELE331214ILI9341Display7fillArcEttttffNS_5ColorE+0x14c>)
 8001d46:	607b      	str	r3, [r7, #4]
  }

  //startWrite();
  writeFillArcHelper( x, y, r1, r2, start, end, ELE3312::colorToILI9341Color(color));
 8001d48:	f9b7 4012 	ldrsh.w	r4, [r7, #18]
 8001d4c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001d4e:	f7ff f931 	bl	8000fb4 <_ZN7ELE331219colorToILI9341ColorENS_5ColorE>
 8001d52:	4603      	mov	r3, r0
 8001d54:	89f9      	ldrh	r1, [r7, #14]
 8001d56:	8a3a      	ldrh	r2, [r7, #16]
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001d62:	ed97 0a02 	vldr	s0, [r7, #8]
 8001d66:	460b      	mov	r3, r1
 8001d68:	4621      	mov	r1, r4
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff fc78 	bl	8001660 <_ZN7ELE331214ILI9341Display18writeFillArcHelperEstttfft>
  //endWrite();
}
 8001d70:	bf00      	nop
 8001d72:	372c      	adds	r7, #44	@ 0x2c
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd90      	pop	{r4, r7, pc}
 8001d78:	eb1c432d 	.word	0xeb1c432d
 8001d7c:	3f1a36e2 	.word	0x3f1a36e2
 8001d80:	3727c5ac 	.word	0x3727c5ac
 8001d84:	3727c5ac 	.word	0x3727c5ac
 8001d88:	43b40000 	.word	0x43b40000
 8001d8c:	43b40000 	.word	0x43b40000

08001d90 <_ZNK7ELE331214ILI9341Display14getScreenWidthEv>:


/** @brief Returns the width of the screen in pixels
 * @retval The width of the screen in pixels;
 */
inline uint16_t ILI9341Display::getScreenWidth() const  {
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	return 320;
 8001d98:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_ZNK7ELE331214ILI9341Display15getScreenHeightEv>:

/** @brief Returns the height of the screen in pixels.
 * @retval The height of the screen in pixels.
 */
inline uint16_t ILI9341Display::getScreenHeight() const  {
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	return 240;
 8001db0:	23f0      	movs	r3, #240	@ 0xf0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <_ZN7ELE331214ILI9341Display18setBackgroundColorENS_5ColorE>:

/** @brief Returns the current background color.
 * @retval The current background color.
 */
void ILI9341Display::setBackgroundColor(Color color)  {
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
	backgroundColor = color;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	60da      	str	r2, [r3, #12]
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_ZNK7ELE331214ILI9341Display18getBackgroundColorEv>:
 * @details The background color is used by functions that need to
 * erase graphical objects from the screen while maintaining a uniform
 * appearance of the displayed graphics.
 * @param color The new background color.
 */
inline Color ILI9341Display::getBackgroundColor() const  {
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
	return backgroundColor;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <_ZN7ELE331214ILI9341Display10readMemoryEttttPh>:
 * @param y0 The y position of the top-left corner.
 * @param x1 The x position of the bottom-right corner.
 * @param y1 The y position of the bottom-right corner.
 * @param data An array in which the pixel data will be stored.
 */
void ILI9341Display::readMemory(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t data[]){
 8001df2:	b590      	push	{r4, r7, lr}
 8001df4:	b08d      	sub	sp, #52	@ 0x34
 8001df6:	af04      	add	r7, sp, #16
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	4608      	mov	r0, r1
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4603      	mov	r3, r0
 8001e02:	817b      	strh	r3, [r7, #10]
 8001e04:	460b      	mov	r3, r1
 8001e06:	813b      	strh	r3, [r7, #8]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	80fb      	strh	r3, [r7, #6]
	int nX = x1-x0;
 8001e0c:	88fa      	ldrh	r2, [r7, #6]
 8001e0e:	897b      	ldrh	r3, [r7, #10]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	61bb      	str	r3, [r7, #24]
	int nY = y1-y0;
 8001e14:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001e16:	893b      	ldrh	r3, [r7, #8]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	617b      	str	r3, [r7, #20]
	int size = nX*nY;
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	61fb      	str	r3, [r7, #28]
	if (size == 0 && nX > 0){
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d105      	bne.n	8001e38 <_ZN7ELE331214ILI9341Display10readMemoryEttttPh+0x46>
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	dd02      	ble.n	8001e38 <_ZN7ELE331214ILI9341Display10readMemoryEttttPh+0x46>
		size = nX;
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e007      	b.n	8001e48 <_ZN7ELE331214ILI9341Display10readMemoryEttttPh+0x56>
	} else if (size == 0 && nY > 0){
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d104      	bne.n	8001e48 <_ZN7ELE331214ILI9341Display10readMemoryEttttPh+0x56>
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	dd01      	ble.n	8001e48 <_ZN7ELE331214ILI9341Display10readMemoryEttttPh+0x56>
		size = nY;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	61fb      	str	r3, [r7, #28]
	}
	ili9341_read_memory(lcd_, x0, y0, x1, y1, data, size*3);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6898      	ldr	r0, [r3, #8]
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	88fc      	ldrh	r4, [r7, #6]
 8001e56:	893a      	ldrh	r2, [r7, #8]
 8001e58:	8979      	ldrh	r1, [r7, #10]
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4623      	mov	r3, r4
 8001e66:	f000 fc49 	bl	80026fc <ili9341_read_memory>
}
 8001e6a:	bf00      	nop
 8001e6c:	3724      	adds	r7, #36	@ 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd90      	pop	{r4, r7, pc}

08001e72 <_ZNK7ELE33124RectItE5getX1Ev>:

	T getHeight() const {
		return p2.getY() - p1.getY();
	}

	T getX1() const {
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
		return p1.getX();
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f841 	bl	8001f06 <_ZNK7ELE33125PointItE4getXEv>
 8001e84:	4603      	mov	r3, r0
	}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_ZNK7ELE33124RectItE5getY1Ev>:

	T getX2() const {
		return p2.getX();
	}

	T getY1() const {
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
		return p1.getY();
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f83f 	bl	8001f1e <_ZNK7ELE33125PointItE4getYEv>
 8001ea0:	4603      	mov	r3, r0
	}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <_ZNK7ELE33124RectItE8getWidthEv>:
	T getWidth() const  {
 8001eaa:	b590      	push	{r4, r7, lr}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
		return p2.getX() - p1.getX();
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3308      	adds	r3, #8
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 f825 	bl	8001f06 <_ZNK7ELE33125PointItE4getXEv>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461c      	mov	r4, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 f81e 	bl	8001f06 <_ZNK7ELE33125PointItE4getXEv>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	1ae3      	subs	r3, r4, r3
 8001ece:	b29b      	uxth	r3, r3
	}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd90      	pop	{r4, r7, pc}

08001ed8 <_ZNK7ELE33124RectItE9getHeightEv>:
	T getHeight() const {
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
		return p2.getY() - p1.getY();
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3308      	adds	r3, #8
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 f81a 	bl	8001f1e <_ZNK7ELE33125PointItE4getYEv>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461c      	mov	r4, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 f813 	bl	8001f1e <_ZNK7ELE33125PointItE4getYEv>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	1ae3      	subs	r3, r4, r3
 8001efc:	b29b      	uxth	r3, r3
	}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd90      	pop	{r4, r7, pc}

08001f06 <_ZNK7ELE33125PointItE4getXEv>:
	friend bool operator== (const Point<O> &p1, const Point<O> &p2);

	/** @brief Returns the x coordinate.
	 * @retval The x coordinate.
	 */
	T getX() const{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
		return x;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	881b      	ldrh	r3, [r3, #0]
	}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <_ZNK7ELE33125PointItE4getYEv>:

	/** @brief Returns the y coordinate.
	 * @retval The y coordinate.
	 */
	T getY() const{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
		return y;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	885b      	ldrh	r3, [r3, #2]
	}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <ili9341_new>:
    GPIO_TypeDef *touch_select_port, uint16_t touch_select_pin,
    GPIO_TypeDef *touch_irq_port,    uint16_t touch_irq_pin,

    ili9341_touch_support_t   touch_support,
    ili9341_touch_normalize_t touch_normalize)
{
 8001f36:	b590      	push	{r4, r7, lr}
 8001f38:	b09b      	sub	sp, #108	@ 0x6c
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	4613      	mov	r3, r2
 8001f44:	80fb      	strh	r3, [r7, #6]
  ili9341_t *lcd = NULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	667b      	str	r3, [r7, #100]	@ 0x64

  if (NULL != spi_hal) {
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80e5 	beq.w	800211c <ili9341_new+0x1e6>

    if ( (NULL != reset_port)        && IS_GPIO_PIN(reset_pin)         &&
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80e1 	beq.w	800211c <ili9341_new+0x1e6>
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80dd 	beq.w	800211c <ili9341_new+0x1e6>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80d9 	beq.w	800211c <ili9341_new+0x1e6>
         (NULL != tft_select_port)   && IS_GPIO_PIN(tft_select_pin)    &&
 8001f6a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 80d4 	beq.w	800211c <ili9341_new+0x1e6>
 8001f74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80d0 	beq.w	800211c <ili9341_new+0x1e6>
         (NULL != data_command_port) && IS_GPIO_PIN(data_command_pin)  &&
 8001f7c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80cb 	beq.w	800211c <ili9341_new+0x1e6>
 8001f86:	f997 3084 	ldrsb.w	r3, [r7, #132]	@ 0x84
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f2c0 80c6 	blt.w	800211c <ili9341_new+0x1e6>
         (orientation > isoNONE)     && (orientation < isoCOUNT)       ) {
 8001f90:	f997 3084 	ldrsb.w	r3, [r7, #132]	@ 0x84
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	f300 80c1 	bgt.w	800211c <ili9341_new+0x1e6>

      // we must either NOT support the touch interface, OR we must have valid
      // touch interface parameters
      if ( itsSupported != touch_support ||
 8001f9a:	f997 3098 	ldrsb.w	r3, [r7, #152]	@ 0x98
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d113      	bne.n	8001fca <ili9341_new+0x94>
 8001fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80b8 	beq.w	800211c <ili9341_new+0x1e6>
           ( (NULL != touch_select_port) && IS_GPIO_PIN(touch_select_pin) &&
 8001fac:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 80b3 	beq.w	800211c <ili9341_new+0x1e6>
 8001fb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80ae 	beq.w	800211c <ili9341_new+0x1e6>
             (NULL != touch_irq_port)    && IS_GPIO_PIN(touch_irq_pin)    )) {
 8001fc0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80a9 	beq.w	800211c <ili9341_new+0x1e6>

        if (NULL != (lcd = malloc(sizeof(ili9341_t)))) {
 8001fca:	2068      	movs	r0, #104	@ 0x68
 8001fcc:	f00a ffc8 	bl	800cf60 <malloc>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8001fd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80a0 	beq.w	800211c <ili9341_new+0x1e6>

          lcd->spi_hal              = spi_hal;
 8001fdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	601a      	str	r2, [r3, #0]

          lcd->reset_port           = reset_port;
 8001fe2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	605a      	str	r2, [r3, #4]
          lcd->reset_pin            = reset_pin;
 8001fe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fea:	88fa      	ldrh	r2, [r7, #6]
 8001fec:	811a      	strh	r2, [r3, #8]
          lcd->tft_select_port      = tft_select_port;
 8001fee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	60da      	str	r2, [r3, #12]
          lcd->tft_select_pin       = tft_select_pin;
 8001ff4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ff6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8001ffa:	821a      	strh	r2, [r3, #16]
          lcd->data_command_port    = data_command_port;
 8001ffc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ffe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002000:	615a      	str	r2, [r3, #20]
          lcd->data_command_pin     = data_command_pin;
 8002002:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002004:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8002008:	831a      	strh	r2, [r3, #24]

          lcd->orientation          = orientation;
 800200a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800200c:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 8002010:	769a      	strb	r2, [r3, #26]
          lcd->screen_size          = ili9341_screen_size(orientation);
 8002012:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 8002014:	f997 3084 	ldrsb.w	r3, [r7, #132]	@ 0x84
 8002018:	4618      	mov	r0, r3
 800201a:	f000 fb23 	bl	8002664 <ili9341_screen_size>
 800201e:	4603      	mov	r3, r0
 8002020:	61e3      	str	r3, [r4, #28]

          if (touch_support) {
 8002022:	f997 3098 	ldrsb.w	r3, [r7, #152]	@ 0x98
 8002026:	2b00      	cmp	r3, #0
 8002028:	d03d      	beq.n	80020a6 <ili9341_new+0x170>

            lcd->touch_select_port    = touch_select_port;
 800202a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800202c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002030:	621a      	str	r2, [r3, #32]
            lcd->touch_select_pin     = touch_select_pin;
 8002032:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002034:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8002038:	849a      	strh	r2, [r3, #36]	@ 0x24
            lcd->touch_irq_port       = touch_irq_port;
 800203a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800203c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002040:	629a      	str	r2, [r3, #40]	@ 0x28
            lcd->touch_irq_pin        = touch_irq_pin;
 8002042:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002044:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8002048:	859a      	strh	r2, [r3, #44]	@ 0x2c

            lcd->touch_support        = touch_support;
 800204a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800204c:	f897 2098 	ldrb.w	r2, [r7, #152]	@ 0x98
 8002050:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
            lcd->touch_normalize      = touch_normalize;
 8002054:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002056:	f897 209c 	ldrb.w	r2, [r7, #156]	@ 0x9c
 800205a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 800205e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002060:	2200      	movs	r2, #0
 8002062:	861a      	strh	r2, [r3, #48]	@ 0x30
 8002064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002066:	2200      	movs	r2, #0
 8002068:	865a      	strh	r2, [r3, #50]	@ 0x32
            lcd->touch_calibration    = itcNONE;
 800206a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800206c:	22ff      	movs	r2, #255	@ 0xff
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8002072:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002074:	3336      	adds	r3, #54	@ 0x36
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 800207c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800207e:	3340      	adds	r3, #64	@ 0x40
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
 800208c:	615a      	str	r2, [r3, #20]
 800208e:	619a      	str	r2, [r3, #24]

            lcd->touch_pressed        = itpNotPressed;
 8002090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002092:	2200      	movs	r2, #0
 8002094:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            lcd->touch_pressed_begin  = NULL;
 8002098:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800209a:	2200      	movs	r2, #0
 800209c:	661a      	str	r2, [r3, #96]	@ 0x60
            lcd->touch_pressed_end    = NULL;
 800209e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020a0:	2200      	movs	r2, #0
 80020a2:	665a      	str	r2, [r3, #100]	@ 0x64
 80020a4:	e037      	b.n	8002116 <ili9341_new+0x1e0>

          } else {

            lcd->touch_select_port    = NULL;
 80020a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
            lcd->touch_select_pin     = 0;
 80020ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020ae:	2200      	movs	r2, #0
 80020b0:	849a      	strh	r2, [r3, #36]	@ 0x24
            lcd->touch_irq_port       = NULL;
 80020b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020b4:	2200      	movs	r2, #0
 80020b6:	629a      	str	r2, [r3, #40]	@ 0x28
            lcd->touch_irq_pin        = 0;
 80020b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020ba:	2200      	movs	r2, #0
 80020bc:	859a      	strh	r2, [r3, #44]	@ 0x2c

            lcd->touch_support        = touch_support;
 80020be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020c0:	f897 2098 	ldrb.w	r2, [r7, #152]	@ 0x98
 80020c4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
            lcd->touch_normalize      = itnNONE;
 80020c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020ca:	22ff      	movs	r2, #255	@ 0xff
 80020cc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
            lcd->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 80020d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020d2:	2200      	movs	r2, #0
 80020d4:	861a      	strh	r2, [r3, #48]	@ 0x30
 80020d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020d8:	2200      	movs	r2, #0
 80020da:	865a      	strh	r2, [r3, #50]	@ 0x32
            lcd->touch_calibration    = itcNONE;
 80020dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020de:	22ff      	movs	r2, #255	@ 0xff
 80020e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            lcd->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 80020e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020e6:	3336      	adds	r3, #54	@ 0x36
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
            lcd->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 80020ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020f0:	3340      	adds	r3, #64	@ 0x40
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	611a      	str	r2, [r3, #16]
 80020fe:	615a      	str	r2, [r3, #20]
 8002100:	619a      	str	r2, [r3, #24]

            lcd->touch_pressed        = itpNONE;
 8002102:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002104:	22ff      	movs	r2, #255	@ 0xff
 8002106:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            lcd->touch_pressed_begin  = NULL;
 800210a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800210c:	2200      	movs	r2, #0
 800210e:	661a      	str	r2, [r3, #96]	@ 0x60
            lcd->touch_pressed_end    = NULL;
 8002110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002112:	2200      	movs	r2, #0
 8002114:	665a      	str	r2, [r3, #100]	@ 0x64
          }

          ili9341_initialize(lcd);
 8002116:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002118:	f000 f944 	bl	80023a4 <ili9341_initialize>
        }
      }
    }
  }

  return lcd;
 800211c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 800211e:	4618      	mov	r0, r3
 8002120:	376c      	adds	r7, #108	@ 0x6c
 8002122:	46bd      	mov	sp, r7
 8002124:	bd90      	pop	{r4, r7, pc}

08002126 <ili9341_spi_tft_select>:
              * (touch_a_x * touch_b_y - touch_b_x * touch_a_y) ) )
      ) / delta + 0.5;
}

void ili9341_spi_tft_select(ili9341_t *lcd)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  // clear bit indicates the TFT is -active- slave SPI device
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_CLR__);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68d8      	ldr	r0, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	8a1b      	ldrh	r3, [r3, #16]
 8002136:	2200      	movs	r2, #0
 8002138:	4619      	mov	r1, r3
 800213a:	f004 f835 	bl	80061a8 <HAL_GPIO_WritePin>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <ili9341_spi_tft_release>:

void ili9341_spi_tft_release(ili9341_t *lcd)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  // set bit indicates the TFT is -inactive- slave SPI device
  HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_SET__);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68d8      	ldr	r0, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	8a1b      	ldrh	r3, [r3, #16]
 8002156:	2201      	movs	r2, #1
 8002158:	4619      	mov	r1, r3
 800215a:	f004 f825 	bl	80061a8 <HAL_GPIO_WritePin>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <ili9341_spi_touch_select>:

void ili9341_spi_touch_select(ili9341_t *lcd)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  // clear bit indicates the touch screen is -active- slave SPI device
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_CLR__);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a18      	ldr	r0, [r3, #32]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002176:	2200      	movs	r2, #0
 8002178:	4619      	mov	r1, r3
 800217a:	f004 f815 	bl	80061a8 <HAL_GPIO_WritePin>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <ili9341_spi_touch_release>:

void ili9341_spi_touch_release(ili9341_t *lcd)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  // set bit indicates the touch screen is -inactive- slave SPI device
  HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_SET__);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a18      	ldr	r0, [r3, #32]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002196:	2201      	movs	r2, #1
 8002198:	4619      	mov	r1, r3
 800219a:	f004 f805 	bl	80061a8 <HAL_GPIO_WritePin>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <ili9341_spi_slave_select>:

void ili9341_spi_slave_select(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	70fb      	strb	r3, [r7, #3]
  switch (spi_slave) {
 80021b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <ili9341_spi_slave_select+0x1a>
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d004      	beq.n	80021c8 <ili9341_spi_slave_select+0x22>
    case issDisplayTFT:  ili9341_spi_tft_select(lcd);   break;
    case issTouchScreen: ili9341_spi_touch_select(lcd); break;
    default: break;
 80021be:	e007      	b.n	80021d0 <ili9341_spi_slave_select+0x2a>
    case issDisplayTFT:  ili9341_spi_tft_select(lcd);   break;
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ffb0 	bl	8002126 <ili9341_spi_tft_select>
 80021c6:	e003      	b.n	80021d0 <ili9341_spi_slave_select+0x2a>
    case issTouchScreen: ili9341_spi_touch_select(lcd); break;
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ffcc 	bl	8002166 <ili9341_spi_touch_select>
 80021ce:	bf00      	nop
  }
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <ili9341_spi_slave_release>:

void ili9341_spi_slave_release(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	70fb      	strb	r3, [r7, #3]
  switch (spi_slave) {
 80021e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <ili9341_spi_slave_release+0x1a>
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d004      	beq.n	80021fa <ili9341_spi_slave_release+0x22>

    case issDisplayTFT:  ili9341_spi_tft_release(lcd);   break;
    case issTouchScreen: ili9341_spi_touch_release(lcd); break;
    default: break;
 80021f0:	e007      	b.n	8002202 <ili9341_spi_slave_release+0x2a>
    case issDisplayTFT:  ili9341_spi_tft_release(lcd);   break;
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffa7 	bl	8002146 <ili9341_spi_tft_release>
 80021f8:	e003      	b.n	8002202 <ili9341_spi_slave_release+0x2a>
    case issTouchScreen: ili9341_spi_touch_release(lcd); break;
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ffc3 	bl	8002186 <ili9341_spi_touch_release>
 8002200:	bf00      	nop
  }
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <ili9341_spi_write_command>:

void ili9341_spi_write_command(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint8_t command)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	70fb      	strb	r3, [r7, #3]
 8002216:	4613      	mov	r3, r2
 8002218:	70bb      	strb	r3, [r7, #2]
  __SLAVE_SELECT(lcd, spi_slave);
 800221a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800221e:	2b00      	cmp	r3, #0
 8002220:	db09      	blt.n	8002236 <ili9341_spi_write_command+0x2c>
 8002222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002226:	2b01      	cmp	r3, #1
 8002228:	dc05      	bgt.n	8002236 <ili9341_spi_write_command+0x2c>
 800222a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800222e:	4619      	mov	r1, r3
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ffb8 	bl	80021a6 <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6958      	ldr	r0, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	8b1b      	ldrh	r3, [r3, #24]
 800223e:	2200      	movs	r2, #0
 8002240:	4619      	mov	r1, r3
 8002242:	f003 ffb1 	bl	80061a8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	1cb9      	adds	r1, r7, #2
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
 8002250:	2201      	movs	r2, #1
 8002252:	f006 fc86 	bl	8008b62 <HAL_SPI_Transmit>

  __SLAVE_RELEASE(lcd, spi_slave);
 8002256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800225a:	2b00      	cmp	r3, #0
 800225c:	db09      	blt.n	8002272 <ili9341_spi_write_command+0x68>
 800225e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002262:	2b01      	cmp	r3, #1
 8002264:	dc05      	bgt.n	8002272 <ili9341_spi_write_command+0x68>
 8002266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800226a:	4619      	mov	r1, r3
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ffb3 	bl	80021d8 <ili9341_spi_slave_release>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <ili9341_spi_write_data>:

void ili9341_spi_write_data(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint16_t data_sz, uint8_t data[])
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	72fb      	strb	r3, [r7, #11]
 8002288:	4613      	mov	r3, r2
 800228a:	813b      	strh	r3, [r7, #8]
  __SLAVE_SELECT(lcd, spi_slave);
 800228c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db09      	blt.n	80022a8 <ili9341_spi_write_data+0x2e>
 8002294:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002298:	2b01      	cmp	r3, #1
 800229a:	dc05      	bgt.n	80022a8 <ili9341_spi_write_data+0x2e>
 800229c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022a0:	4619      	mov	r1, r3
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f7ff ff7f 	bl	80021a6 <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6958      	ldr	r0, [r3, #20]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8b1b      	ldrh	r3, [r3, #24]
 80022b0:	2201      	movs	r2, #1
 80022b2:	4619      	mov	r1, r3
 80022b4:	f003 ff78 	bl	80061a8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	893a      	ldrh	r2, [r7, #8]
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	f006 fc4d 	bl	8008b62 <HAL_SPI_Transmit>

  __SLAVE_RELEASE(lcd, spi_slave);
 80022c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	db09      	blt.n	80022e4 <ili9341_spi_write_data+0x6a>
 80022d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	dc05      	bgt.n	80022e4 <ili9341_spi_write_data+0x6a>
 80022d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022dc:	4619      	mov	r1, r3
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7ff ff7a 	bl	80021d8 <ili9341_spi_slave_release>
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <ili9341_spi_write_command_data>:
  __SLAVE_RELEASE(lcd, spi_slave);
}

void ili9341_spi_write_command_data(ili9341_t *lcd,
    ili9341_spi_slave_t spi_slave, uint8_t command, uint16_t data_sz, uint8_t data[])
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	4608      	mov	r0, r1
 80022f6:	4611      	mov	r1, r2
 80022f8:	461a      	mov	r2, r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	70fb      	strb	r3, [r7, #3]
 80022fe:	460b      	mov	r3, r1
 8002300:	70bb      	strb	r3, [r7, #2]
 8002302:	4613      	mov	r3, r2
 8002304:	803b      	strh	r3, [r7, #0]
  __SLAVE_SELECT(lcd, spi_slave);
 8002306:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800230a:	2b00      	cmp	r3, #0
 800230c:	db09      	blt.n	8002322 <ili9341_spi_write_command_data+0x36>
 800230e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002312:	2b01      	cmp	r3, #1
 8002314:	dc05      	bgt.n	8002322 <ili9341_spi_write_command_data+0x36>
 8002316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800231a:	4619      	mov	r1, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff42 	bl	80021a6 <ili9341_spi_slave_select>

  ili9341_spi_write_command(lcd, issNONE, command);
 8002322:	78bb      	ldrb	r3, [r7, #2]
 8002324:	461a      	mov	r2, r3
 8002326:	f04f 31ff 	mov.w	r1, #4294967295
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ff6d 	bl	800220a <ili9341_spi_write_command>
  ili9341_spi_write_data(lcd, issNONE, data_sz, data);
 8002330:	883a      	ldrh	r2, [r7, #0]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff ff9e 	bl	800227a <ili9341_spi_write_data>

  __SLAVE_RELEASE(lcd, spi_slave);
 800233e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002342:	2b00      	cmp	r3, #0
 8002344:	db09      	blt.n	800235a <ili9341_spi_write_command_data+0x6e>
 8002346:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234a:	2b01      	cmp	r3, #1
 800234c:	dc05      	bgt.n	800235a <ili9341_spi_write_command_data+0x6e>
 800234e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002352:	4619      	mov	r1, r3
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ff3f 	bl	80021d8 <ili9341_spi_slave_release>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <ili9341_reset>:

// -------------------------------------------------------- private functions --

static void ili9341_reset(ili9341_t *lcd)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  // the reset pin on ILI9341 is active low, so driving low temporarily will
  // reset the device (also resets the touch screen peripheral)
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_CLR__);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6858      	ldr	r0, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	891b      	ldrh	r3, [r3, #8]
 8002372:	2200      	movs	r2, #0
 8002374:	4619      	mov	r1, r3
 8002376:	f003 ff17 	bl	80061a8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800237a:	20c8      	movs	r0, #200	@ 0xc8
 800237c:	f002 fd46 	bl	8004e0c <HAL_Delay>
  HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_SET__);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6858      	ldr	r0, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	891b      	ldrh	r3, [r3, #8]
 8002388:	2201      	movs	r2, #1
 800238a:	4619      	mov	r1, r3
 800238c:	f003 ff0c 	bl	80061a8 <HAL_GPIO_WritePin>

  // ensure both slave lines are open
  ili9341_spi_tft_release(lcd);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff fed8 	bl	8002146 <ili9341_spi_tft_release>
  ili9341_spi_touch_release(lcd);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff fef5 	bl	8002186 <ili9341_spi_touch_release>
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <ili9341_initialize>:

static void ili9341_initialize(ili9341_t *lcd)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b09f      	sub	sp, #124	@ 0x7c
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	6078      	str	r0, [r7, #4]
  ili9341_reset(lcd);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ffd8 	bl	8002362 <ili9341_reset>
  ili9341_spi_tft_select(lcd);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff feb7 	bl	8002126 <ili9341_spi_tft_select>

  // command list is based on https://github.com/martnak/STM32-ILI9341

  // SOFTWARE RESET
  ili9341_spi_write_command(lcd, issNONE, 0x01);
 80023b8:	2201      	movs	r2, #1
 80023ba:	f04f 31ff 	mov.w	r1, #4294967295
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ff23 	bl	800220a <ili9341_spi_write_command>
  HAL_Delay(1000);
 80023c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023c8:	f002 fd20 	bl	8004e0c <HAL_Delay>

  // POWER CONTROL A
  ili9341_spi_write_command_data(lcd, issNONE,
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 80023cc:	4a9d      	ldr	r2, [pc, #628]	@ (8002644 <ili9341_initialize+0x2a0>)
 80023ce:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80023d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023d6:	6018      	str	r0, [r3, #0]
 80023d8:	3304      	adds	r3, #4
 80023da:	7019      	strb	r1, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 80023dc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2305      	movs	r3, #5
 80023e4:	22cb      	movs	r2, #203	@ 0xcb
 80023e6:	f04f 31ff 	mov.w	r1, #4294967295
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ff7e 	bl	80022ec <ili9341_spi_write_command_data>

  // POWER CONTROL B
  ili9341_spi_write_command_data(lcd, issNONE,
      0xCF, 3, (uint8_t[]){ 0x00, 0xC1, 0x30 });
 80023f0:	4a95      	ldr	r2, [pc, #596]	@ (8002648 <ili9341_initialize+0x2a4>)
 80023f2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	4611      	mov	r1, r2
 80023fa:	8019      	strh	r1, [r3, #0]
 80023fc:	3302      	adds	r3, #2
 80023fe:	0c12      	lsrs	r2, r2, #16
 8002400:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8002402:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2303      	movs	r3, #3
 800240a:	22cf      	movs	r2, #207	@ 0xcf
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff6b 	bl	80022ec <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL A
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE8, 3, (uint8_t[]){ 0x85, 0x00, 0x78 });
 8002416:	4a8d      	ldr	r2, [pc, #564]	@ (800264c <ili9341_initialize+0x2a8>)
 8002418:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	4611      	mov	r1, r2
 8002420:	8019      	strh	r1, [r3, #0]
 8002422:	3302      	adds	r3, #2
 8002424:	0c12      	lsrs	r2, r2, #16
 8002426:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8002428:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2303      	movs	r3, #3
 8002430:	22e8      	movs	r2, #232	@ 0xe8
 8002432:	f04f 31ff 	mov.w	r1, #4294967295
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ff58 	bl	80022ec <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL B
  ili9341_spi_write_command_data(lcd, issNONE,
      0xEA, 2, (uint8_t[]){ 0x00, 0x00 });
 800243c:	2300      	movs	r3, #0
 800243e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8002442:	2300      	movs	r3, #0
 8002444:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  ili9341_spi_write_command_data(lcd, issNONE,
 8002448:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2302      	movs	r3, #2
 8002450:	22ea      	movs	r2, #234	@ 0xea
 8002452:	f04f 31ff 	mov.w	r1, #4294967295
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ff48 	bl	80022ec <ili9341_spi_write_command_data>

  // POWER ON SEQUENCE CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xED, 4, (uint8_t[]){ 0x64, 0x03, 0x12, 0x81 });
 800245c:	4b7c      	ldr	r3, [pc, #496]	@ (8002650 <ili9341_initialize+0x2ac>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	65bb      	str	r3, [r7, #88]	@ 0x58
  ili9341_spi_write_command_data(lcd, issNONE,
 8002462:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2304      	movs	r3, #4
 800246a:	22ed      	movs	r2, #237	@ 0xed
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff3b 	bl	80022ec <ili9341_spi_write_command_data>

  // PUMP RATIO CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xF7, 1, (uint8_t[]){ 0x20 });
 8002476:	2320      	movs	r3, #32
 8002478:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  ili9341_spi_write_command_data(lcd, issNONE,
 800247c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2301      	movs	r3, #1
 8002484:	22f7      	movs	r2, #247	@ 0xf7
 8002486:	f04f 31ff 	mov.w	r1, #4294967295
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ff2e 	bl	80022ec <ili9341_spi_write_command_data>

  // POWER CONTROL,VRH[5:0]
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC0, 1, (uint8_t[]){ 0x23 });
 8002490:	2323      	movs	r3, #35	@ 0x23
 8002492:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  ili9341_spi_write_command_data(lcd, issNONE,
 8002496:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2301      	movs	r3, #1
 800249e:	22c0      	movs	r2, #192	@ 0xc0
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff21 	bl	80022ec <ili9341_spi_write_command_data>

  // POWER CONTROL,SAP[2:0];BT[3:0]
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC1, 1, (uint8_t[]){ 0x10 });
 80024aa:	2310      	movs	r3, #16
 80024ac:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  ili9341_spi_write_command_data(lcd, issNONE,
 80024b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	2301      	movs	r3, #1
 80024b8:	22c1      	movs	r2, #193	@ 0xc1
 80024ba:	f04f 31ff 	mov.w	r1, #4294967295
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff ff14 	bl	80022ec <ili9341_spi_write_command_data>

  // VCM CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC5, 2, (uint8_t[]){ 0x3E, 0x28 });
 80024c4:	4b63      	ldr	r3, [pc, #396]	@ (8002654 <ili9341_initialize+0x2b0>)
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
  ili9341_spi_write_command_data(lcd, issNONE,
 80024cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2302      	movs	r3, #2
 80024d4:	22c5      	movs	r2, #197	@ 0xc5
 80024d6:	f04f 31ff 	mov.w	r1, #4294967295
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ff06 	bl	80022ec <ili9341_spi_write_command_data>

  // VCM CONTROL 2
  ili9341_spi_write_command_data(lcd, issNONE,
      0xC7, 1, (uint8_t[]){ 0x86 });
 80024e0:	2386      	movs	r3, #134	@ 0x86
 80024e2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  ili9341_spi_write_command_data(lcd, issNONE,
 80024e6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2301      	movs	r3, #1
 80024ee:	22c7      	movs	r2, #199	@ 0xc7
 80024f0:	f04f 31ff 	mov.w	r1, #4294967295
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff fef9 	bl	80022ec <ili9341_spi_write_command_data>

  // MEMORY ACCESS CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0x36, 1, (uint8_t[]){ 0x48 });
 80024fa:	2348      	movs	r3, #72	@ 0x48
 80024fc:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
  ili9341_spi_write_command_data(lcd, issNONE,
 8002500:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	2301      	movs	r3, #1
 8002508:	2236      	movs	r2, #54	@ 0x36
 800250a:	f04f 31ff 	mov.w	r1, #4294967295
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff feec 	bl	80022ec <ili9341_spi_write_command_data>

  // PIXEL FORMAT
  ili9341_spi_write_command_data(lcd, issNONE,
      0x3A, 1, (uint8_t[]){ 0x55 });
 8002514:	2355      	movs	r3, #85	@ 0x55
 8002516:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  ili9341_spi_write_command_data(lcd, issNONE,
 800251a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2301      	movs	r3, #1
 8002522:	223a      	movs	r2, #58	@ 0x3a
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff fedf 	bl	80022ec <ili9341_spi_write_command_data>

  // FRAME RATIO CONTROL, STANDARD RGB COLOR
  ili9341_spi_write_command_data(lcd, issNONE,
      0xB1, 2, (uint8_t[]){ 0x00, 0x18 });
 800252e:	2300      	movs	r3, #0
 8002530:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8002534:	2318      	movs	r3, #24
 8002536:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  ili9341_spi_write_command_data(lcd, issNONE,
 800253a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2302      	movs	r3, #2
 8002542:	22b1      	movs	r2, #177	@ 0xb1
 8002544:	f04f 31ff 	mov.w	r1, #4294967295
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff fecf 	bl	80022ec <ili9341_spi_write_command_data>

  // DISPLAY FUNCTION CONTROL
  ili9341_spi_write_command_data(lcd, issNONE,
      0xB6, 3, (uint8_t[]){ 0x08, 0x82, 0x27 });
 800254e:	4a42      	ldr	r2, [pc, #264]	@ (8002658 <ili9341_initialize+0x2b4>)
 8002550:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	4611      	mov	r1, r2
 8002558:	8019      	strh	r1, [r3, #0]
 800255a:	3302      	adds	r3, #2
 800255c:	0c12      	lsrs	r2, r2, #16
 800255e:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 8002560:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2303      	movs	r3, #3
 8002568:	22b6      	movs	r2, #182	@ 0xb6
 800256a:	f04f 31ff 	mov.w	r1, #4294967295
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff febc 	bl	80022ec <ili9341_spi_write_command_data>

  // 3GAMMA FUNCTION DISABLE
  ili9341_spi_write_command_data(lcd, issNONE,
      0xF2, 1, (uint8_t[]){ 0x00 });
 8002574:	2300      	movs	r3, #0
 8002576:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  ili9341_spi_write_command_data(lcd, issNONE,
 800257a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	2301      	movs	r3, #1
 8002582:	22f2      	movs	r2, #242	@ 0xf2
 8002584:	f04f 31ff 	mov.w	r1, #4294967295
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff feaf 	bl	80022ec <ili9341_spi_write_command_data>

  // GAMMA CURVE SELECTED
  ili9341_spi_write_command_data(lcd, issNONE,
      0x26, 1, (uint8_t[]){ 0x01 });
 800258e:	2301      	movs	r3, #1
 8002590:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  ili9341_spi_write_command_data(lcd, issNONE,
 8002594:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2301      	movs	r3, #1
 800259c:	2226      	movs	r2, #38	@ 0x26
 800259e:	f04f 31ff 	mov.w	r1, #4294967295
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fea2 	bl	80022ec <ili9341_spi_write_command_data>

  // POSITIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE0, 15, (uint8_t[]){ 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80025a8:	4b2c      	ldr	r3, [pc, #176]	@ (800265c <ili9341_initialize+0x2b8>)
 80025aa:	f107 041c 	add.w	r4, r7, #28
 80025ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b0:	c407      	stmia	r4!, {r0, r1, r2}
 80025b2:	8023      	strh	r3, [r4, #0]
 80025b4:	3402      	adds	r4, #2
 80025b6:	0c1b      	lsrs	r3, r3, #16
 80025b8:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 80025ba:	f107 031c 	add.w	r3, r7, #28
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	230f      	movs	r3, #15
 80025c2:	22e0      	movs	r2, #224	@ 0xe0
 80025c4:	f04f 31ff 	mov.w	r1, #4294967295
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fe8f 	bl	80022ec <ili9341_spi_write_command_data>
                             0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 });

  // NEGATIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(lcd, issNONE,
      0xE1, 15, (uint8_t[]){ 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80025ce:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <ili9341_initialize+0x2bc>)
 80025d0:	f107 040c 	add.w	r4, r7, #12
 80025d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025d6:	c407      	stmia	r4!, {r0, r1, r2}
 80025d8:	8023      	strh	r3, [r4, #0]
 80025da:	3402      	adds	r4, #2
 80025dc:	0c1b      	lsrs	r3, r3, #16
 80025de:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(lcd, issNONE,
 80025e0:	f107 030c 	add.w	r3, r7, #12
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	230f      	movs	r3, #15
 80025e8:	22e1      	movs	r2, #225	@ 0xe1
 80025ea:	f04f 31ff 	mov.w	r1, #4294967295
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff fe7c 	bl	80022ec <ili9341_spi_write_command_data>
                             0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F });

  // EXIT SLEEP
  ili9341_spi_write_command(lcd, issNONE, 0x11);
 80025f4:	2211      	movs	r2, #17
 80025f6:	f04f 31ff 	mov.w	r1, #4294967295
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff fe05 	bl	800220a <ili9341_spi_write_command>
  HAL_Delay(120);
 8002600:	2078      	movs	r0, #120	@ 0x78
 8002602:	f002 fc03 	bl	8004e0c <HAL_Delay>

  // TURN ON DISPLAY
  ili9341_spi_write_command(lcd, issNONE, 0x29);
 8002606:	2229      	movs	r2, #41	@ 0x29
 8002608:	f04f 31ff 	mov.w	r1, #4294967295
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff fdfc 	bl	800220a <ili9341_spi_write_command>

  // MADCTL
  ili9341_spi_write_command_data(lcd, issNONE,
      0x36, 1, (uint8_t[]){ ili9341_screen_rotation(lcd->orientation) });
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8002618:	4618      	mov	r0, r3
 800261a:	f000 f853 	bl	80026c4 <ili9341_screen_rotation>
 800261e:	4603      	mov	r3, r0
 8002620:	723b      	strb	r3, [r7, #8]
  ili9341_spi_write_command_data(lcd, issNONE,
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2301      	movs	r3, #1
 800262a:	2236      	movs	r2, #54	@ 0x36
 800262c:	f04f 31ff 	mov.w	r1, #4294967295
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff fe5b 	bl	80022ec <ili9341_spi_write_command_data>

  ili9341_spi_tft_release(lcd);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff fd85 	bl	8002146 <ili9341_spi_tft_release>
}
 800263c:	bf00      	nop
 800263e:	3774      	adds	r7, #116	@ 0x74
 8002640:	46bd      	mov	sp, r7
 8002642:	bd90      	pop	{r4, r7, pc}
 8002644:	0800f880 	.word	0x0800f880
 8002648:	0800f888 	.word	0x0800f888
 800264c:	0800f88c 	.word	0x0800f88c
 8002650:	0800f890 	.word	0x0800f890
 8002654:	0800f894 	.word	0x0800f894
 8002658:	0800f898 	.word	0x0800f898
 800265c:	0800f89c 	.word	0x0800f89c
 8002660:	0800f8ac 	.word	0x0800f8ac

08002664 <ili9341_screen_size>:

static ili9341_two_dimension_t ili9341_screen_size(
    ili9341_screen_orientation_t orientation)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	@ 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	2b03      	cmp	r3, #3
 8002674:	d011      	beq.n	800269a <ili9341_screen_size+0x36>
 8002676:	2b03      	cmp	r3, #3
 8002678:	dc03      	bgt.n	8002682 <ili9341_screen_size+0x1e>
 800267a:	2b01      	cmp	r3, #1
 800267c:	d005      	beq.n	800268a <ili9341_screen_size+0x26>
 800267e:	2b02      	cmp	r3, #2
 8002680:	d007      	beq.n	8002692 <ili9341_screen_size+0x2e>
    default:
    case isoDown:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 8002682:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <ili9341_screen_size+0x58>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	e00a      	b.n	80026a0 <ili9341_screen_size+0x3c>
    case isoRight:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 800268a:	4b0d      	ldr	r3, [pc, #52]	@ (80026c0 <ili9341_screen_size+0x5c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	e006      	b.n	80026a0 <ili9341_screen_size+0x3c>
    case isoUp:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 8002692:	4b0a      	ldr	r3, [pc, #40]	@ (80026bc <ili9341_screen_size+0x58>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	e002      	b.n	80026a0 <ili9341_screen_size+0x3c>
    case isoLeft:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 800269a:	4b09      	ldr	r3, [pc, #36]	@ (80026c0 <ili9341_screen_size+0x5c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	61fb      	str	r3, [r7, #28]
  }
}
 80026a0:	2300      	movs	r3, #0
 80026a2:	8bba      	ldrh	r2, [r7, #28]
 80026a4:	f362 030f 	bfi	r3, r2, #0, #16
 80026a8:	8bfa      	ldrh	r2, [r7, #30]
 80026aa:	f362 431f 	bfi	r3, r2, #16, #16
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	@ 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	0800f8bc 	.word	0x0800f8bc
 80026c0:	0800f8c0 	.word	0x0800f8c0

080026c4 <ili9341_screen_rotation>:

static uint8_t ili9341_screen_rotation(
    ili9341_screen_orientation_t orientation)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d00b      	beq.n	80026ee <ili9341_screen_rotation+0x2a>
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	dc03      	bgt.n	80026e2 <ili9341_screen_rotation+0x1e>
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d003      	beq.n	80026e6 <ili9341_screen_rotation+0x22>
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d003      	beq.n	80026ea <ili9341_screen_rotation+0x26>
    default:
    case isoDown:
      return 0x40 | 0x08;
 80026e2:	2348      	movs	r3, #72	@ 0x48
 80026e4:	e004      	b.n	80026f0 <ili9341_screen_rotation+0x2c>
    case isoRight:
      return 0x40 | 0x80 | 0x20 | 0x08;
 80026e6:	23e8      	movs	r3, #232	@ 0xe8
 80026e8:	e002      	b.n	80026f0 <ili9341_screen_rotation+0x2c>
    case isoUp:
      return 0x80 | 0x08;
 80026ea:	2388      	movs	r3, #136	@ 0x88
 80026ec:	e000      	b.n	80026f0 <ili9341_screen_rotation+0x2c>
    case isoLeft:
      return 0x20 | 0x08;
 80026ee:	2328      	movs	r3, #40	@ 0x28
  }
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <ili9341_read_memory>:
 * @param x1 The x position of the lower right corner
 * @param y1 The y position of the lower right corner
 * @param size The size of the data buffer
 */
void ili9341_read_memory(ili9341_t *lcd, uint16_t x0, uint16_t y0,
		uint16_t x1, uint16_t y1, uint8_t data[], size_t size){
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	@ 0x28
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	4608      	mov	r0, r1
 8002706:	4611      	mov	r1, r2
 8002708:	461a      	mov	r2, r3
 800270a:	4603      	mov	r3, r0
 800270c:	817b      	strh	r3, [r7, #10]
 800270e:	460b      	mov	r3, r1
 8002710:	813b      	strh	r3, [r7, #8]
 8002712:	4613      	mov	r3, r2
 8002714:	80fb      	strh	r3, [r7, #6]
	if (x0 > x1 || y0 > y1) {
 8002716:	897a      	ldrh	r2, [r7, #10]
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	429a      	cmp	r2, r3
 800271c:	d864      	bhi.n	80027e8 <ili9341_read_memory+0xec>
 800271e:	893a      	ldrh	r2, [r7, #8]
 8002720:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002722:	429a      	cmp	r2, r3
 8002724:	d860      	bhi.n	80027e8 <ili9341_read_memory+0xec>
	    }

	// Announce the area of data we are going to read
	// This is essentially copied from the set_address_rect function
	// But we need it without the ram write function
	ili9341_spi_tft_select(lcd);
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f7ff fcfd 	bl	8002126 <ili9341_spi_tft_select>

	  // column address set
	  ili9341_spi_write_command_data(lcd, issNONE,
	      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 800272c:	897b      	ldrh	r3, [r7, #10]
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	b29b      	uxth	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	773b      	strb	r3, [r7, #28]
 8002736:	897b      	ldrh	r3, [r7, #10]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	777b      	strb	r3, [r7, #29]
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	b29b      	uxth	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	77bb      	strb	r3, [r7, #30]
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	77fb      	strb	r3, [r7, #31]
	  ili9341_spi_write_command_data(lcd, issNONE,
 800274c:	f107 031c 	add.w	r3, r7, #28
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	2304      	movs	r3, #4
 8002754:	222a      	movs	r2, #42	@ 0x2a
 8002756:	f04f 31ff 	mov.w	r1, #4294967295
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7ff fdc6 	bl	80022ec <ili9341_spi_write_command_data>
	                            (x1 >> 8) & 0xFF, x1 & 0xFF });

	  // row address set
	  ili9341_spi_write_command_data(lcd, issNONE,
	      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 8002760:	893b      	ldrh	r3, [r7, #8]
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	b29b      	uxth	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	763b      	strb	r3, [r7, #24]
 800276a:	893b      	ldrh	r3, [r7, #8]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	767b      	strb	r3, [r7, #25]
 8002770:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	b29b      	uxth	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	76bb      	strb	r3, [r7, #26]
 800277a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800277c:	b2db      	uxtb	r3, r3
 800277e:	76fb      	strb	r3, [r7, #27]
	  ili9341_spi_write_command_data(lcd, issNONE,
 8002780:	f107 0318 	add.w	r3, r7, #24
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2304      	movs	r3, #4
 8002788:	222b      	movs	r2, #43	@ 0x2b
 800278a:	f04f 31ff 	mov.w	r1, #4294967295
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff fdac 	bl	80022ec <ili9341_spi_write_command_data>
	                            (y1 >> 8) & 0xFF, y1 & 0xFF });
	  // Memory Read
	  //ili9341_spi_write_command(lcd, issNONE, 0x2E);
	  __SLAVE_SELECT(lcd, issNONE);

	   HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6958      	ldr	r0, [r3, #20]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8b1b      	ldrh	r3, [r3, #24]
 800279c:	2200      	movs	r2, #0
 800279e:	4619      	mov	r1, r3
 80027a0:	f003 fd02 	bl	80061a8 <HAL_GPIO_WritePin>
	   HAL_SPI_Transmit(lcd->spi_hal, (uint8_t[]){0x2E}, 1, __SPI_MAX_DELAY__);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	232e      	movs	r3, #46	@ 0x2e
 80027aa:	753b      	strb	r3, [r7, #20]
 80027ac:	f107 0114 	add.w	r1, r7, #20
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
 80027b4:	2201      	movs	r2, #1
 80027b6:	f006 f9d4 	bl	8008b62 <HAL_SPI_Transmit>


	  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6958      	ldr	r0, [r3, #20]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8b1b      	ldrh	r3, [r3, #24]
 80027c2:	2201      	movs	r2, #1
 80027c4:	4619      	mov	r1, r3
 80027c6:	f003 fcef 	bl	80061a8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(lcd->spi_hal, data, size +1, __SPI_MAX_DELAY__);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	f04f 33ff 	mov.w	r3, #4294967295
 80027da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027dc:	f006 fb05 	bl	8008dea <HAL_SPI_Receive>

	  __SLAVE_RELEASE(lcd, issNONE);
	  ili9341_spi_tft_release(lcd);
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f7ff fcb0 	bl	8002146 <ili9341_spi_tft_release>
 80027e6:	e000      	b.n	80027ea <ili9341_read_memory+0xee>
	        return;
 80027e8:	bf00      	nop

}
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <glyph_index>:
/* nothing */

// ------------------------------------------------------- exported functions --

uint8_t glyph_index(unsigned char glyph)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  if ((glyph >= __ILI9341_FONT_FIRST_GLYPH__) &&
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	2b1f      	cmp	r3, #31
 80027fe:	d906      	bls.n	800280e <glyph_index+0x1e>
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	2b7e      	cmp	r3, #126	@ 0x7e
 8002804:	d803      	bhi.n	800280e <glyph_index+0x1e>
      (glyph <= __ILI9341_FONT_LAST_GLYPH__)) {
    return glyph - __ILI9341_FONT_FIRST_GLYPH__;
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	3b20      	subs	r3, #32
 800280a:	b2db      	uxtb	r3, r3
 800280c:	e000      	b.n	8002810 <glyph_index+0x20>
  }
  return 0; // on error, return index of ASCII space (0x20)
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <ili9341_spi_tft_set_address_rect>:
  return __ILI9341_COLOR565_RGB(rgb);
}

void ili9341_spi_tft_set_address_rect(ili9341_t *lcd,
    uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	4608      	mov	r0, r1
 8002826:	4611      	mov	r1, r2
 8002828:	461a      	mov	r2, r3
 800282a:	4603      	mov	r3, r0
 800282c:	817b      	strh	r3, [r7, #10]
 800282e:	460b      	mov	r3, r1
 8002830:	813b      	strh	r3, [r7, #8]
 8002832:	4613      	mov	r3, r2
 8002834:	80fb      	strh	r3, [r7, #6]
  ili9341_spi_tft_select(lcd);
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f7ff fc75 	bl	8002126 <ili9341_spi_tft_select>

  // column address set
  ili9341_spi_write_command_data(lcd, issNONE,
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 800283c:	897b      	ldrh	r3, [r7, #10]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	b29b      	uxth	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	753b      	strb	r3, [r7, #20]
 8002846:	897b      	ldrh	r3, [r7, #10]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	757b      	strb	r3, [r7, #21]
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	b29b      	uxth	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	75bb      	strb	r3, [r7, #22]
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	75fb      	strb	r3, [r7, #23]
  ili9341_spi_write_command_data(lcd, issNONE,
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	2304      	movs	r3, #4
 8002864:	222a      	movs	r2, #42	@ 0x2a
 8002866:	f04f 31ff 	mov.w	r1, #4294967295
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f7ff fd3e 	bl	80022ec <ili9341_spi_write_command_data>
                            (x1 >> 8) & 0xFF, x1 & 0xFF });

  // row address set
  ili9341_spi_write_command_data(lcd, issNONE,
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 8002870:	893b      	ldrh	r3, [r7, #8]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	b29b      	uxth	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	743b      	strb	r3, [r7, #16]
 800287a:	893b      	ldrh	r3, [r7, #8]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	747b      	strb	r3, [r7, #17]
 8002880:	8c3b      	ldrh	r3, [r7, #32]
 8002882:	0a1b      	lsrs	r3, r3, #8
 8002884:	b29b      	uxth	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	74bb      	strb	r3, [r7, #18]
 800288a:	8c3b      	ldrh	r3, [r7, #32]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	74fb      	strb	r3, [r7, #19]
  ili9341_spi_write_command_data(lcd, issNONE,
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2304      	movs	r3, #4
 8002898:	222b      	movs	r2, #43	@ 0x2b
 800289a:	f04f 31ff 	mov.w	r1, #4294967295
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7ff fd24 	bl	80022ec <ili9341_spi_write_command_data>
                            (y1 >> 8) & 0xFF, y1 & 0xFF });

  // write to RAM
  ili9341_spi_write_command(lcd, issNONE, 0x2C);
 80028a4:	222c      	movs	r2, #44	@ 0x2c
 80028a6:	f04f 31ff 	mov.w	r1, #4294967295
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f7ff fcad 	bl	800220a <ili9341_spi_write_command>

  ili9341_spi_tft_release(lcd);
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7ff fc48 	bl	8002146 <ili9341_spi_tft_release>
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <ili9341_transmit_wait>:

void ili9341_transmit_wait(ili9341_t *lcd)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  if (NULL == lcd)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00b      	beq.n	80028e4 <ili9341_transmit_wait+0x26>
    { return; }

  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
 80028cc:	e000      	b.n	80028d0 <ili9341_transmit_wait+0x12>
    { continue; }
 80028ce:	bf00      	nop
  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 f9e4 	bl	8005ca4 <HAL_DMA_GetState>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d0f5      	beq.n	80028ce <ili9341_transmit_wait+0x10>
 80028e2:	e000      	b.n	80028e6 <ili9341_transmit_wait+0x28>
    { return; }
 80028e4:	bf00      	nop
}
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <ili9341_transmit_color>:

void ili9341_transmit_color(ili9341_t *lcd, uint16_t size,
    uint16_t color[]/* already byte-swapped (LE) */, ili9341_bool_t wait)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	461a      	mov	r2, r3
 80028f8:	460b      	mov	r3, r1
 80028fa:	817b      	strh	r3, [r7, #10]
 80028fc:	4613      	mov	r3, r2
 80028fe:	727b      	strb	r3, [r7, #9]
  if ((NULL == lcd) || (0 == size) || (NULL == color))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d013      	beq.n	800292e <ili9341_transmit_color+0x42>
 8002906:	897b      	ldrh	r3, [r7, #10]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d010      	beq.n	800292e <ili9341_transmit_color+0x42>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00d      	beq.n	800292e <ili9341_transmit_color+0x42>
    { return; }

  HAL_SPI_Transmit_DMA(lcd->spi_hal, (uint8_t *)color, size);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	897a      	ldrh	r2, [r7, #10]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4618      	mov	r0, r3
 800291c:	f006 fd28 	bl	8009370 <HAL_SPI_Transmit_DMA>

  if (ibOK(wait))
 8002920:	7a7b      	ldrb	r3, [r7, #9]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d004      	beq.n	8002930 <ili9341_transmit_color+0x44>
    { ili9341_transmit_wait(lcd); }
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7ff ffc9 	bl	80028be <ili9341_transmit_wait>
 800292c:	e000      	b.n	8002930 <ili9341_transmit_color+0x44>
    { return; }
 800292e:	bf00      	nop
}
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <ili9341_draw_pixel>:

void ili9341_draw_pixel(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b088      	sub	sp, #32
 800293a:	af02      	add	r7, sp, #8
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	4608      	mov	r0, r1
 8002940:	4611      	mov	r1, r2
 8002942:	461a      	mov	r2, r3
 8002944:	4603      	mov	r3, r0
 8002946:	817b      	strh	r3, [r7, #10]
 8002948:	460b      	mov	r3, r1
 800294a:	813b      	strh	r3, [r7, #8]
 800294c:	4613      	mov	r3, r2
 800294e:	80fb      	strh	r3, [r7, #6]
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, NULL, NULL)))
 8002950:	1dba      	adds	r2, r7, #6
 8002952:	f107 0108 	add.w	r1, r7, #8
 8002956:	2300      	movs	r3, #0
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2300      	movs	r3, #0
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fcac 	bl	80032ba <ili9341_clip_rect>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d03b      	beq.n	80029e0 <ili9341_draw_pixel+0xaa>
    { return; }

  uint16_t color_le = __LEu16(&color);
 8002968:	f107 030a 	add.w	r3, r7, #10
 800296c:	3301      	adds	r3, #1
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	b21a      	sxth	r2, r3
 8002972:	f107 030a 	add.w	r3, r7, #10
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	b21b      	sxth	r3, r3
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	b21b      	sxth	r3, r3
 800297e:	4313      	orrs	r3, r2
 8002980:	b21b      	sxth	r3, r3
 8002982:	b29b      	uxth	r3, r3
 8002984:	82fb      	strh	r3, [r7, #22]

  // select target region
  ili9341_spi_tft_set_address_rect(lcd, x, y, x + 1, y + 1);
 8002986:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800298a:	b299      	uxth	r1, r3
 800298c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002990:	b29a      	uxth	r2, r3
 8002992:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002996:	b29b      	uxth	r3, r3
 8002998:	3301      	adds	r3, #1
 800299a:	b298      	uxth	r0, r3
 800299c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	4603      	mov	r3, r0
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f7ff ff36 	bl	800281c <ili9341_spi_tft_set_address_rect>

  ili9341_spi_tft_select(lcd);
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7ff fbb8 	bl	8002126 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6958      	ldr	r0, [r3, #20]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8b1b      	ldrh	r3, [r3, #24]
 80029be:	2201      	movs	r2, #1
 80029c0:	4619      	mov	r1, r3
 80029c2:	f003 fbf1 	bl	80061a8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(lcd->spi_hal, (uint8_t *)&color_le, 2U, __SPI_MAX_DELAY__);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	f107 0116 	add.w	r1, r7, #22
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295
 80029d2:	2202      	movs	r2, #2
 80029d4:	f006 f8c5 	bl	8008b62 <HAL_SPI_Transmit>

  ili9341_spi_tft_release(lcd);
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f7ff fbb4 	bl	8002146 <ili9341_spi_tft_release>
 80029de:	e000      	b.n	80029e2 <ili9341_draw_pixel+0xac>
    { return; }
 80029e0:	bf00      	nop
}
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <ili9341_draw_line>:

void ili9341_draw_line(ili9341_t *lcd, ili9341_color_t color,
    int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b08d      	sub	sp, #52	@ 0x34
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	4608      	mov	r0, r1
 80029f2:	4611      	mov	r1, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	817b      	strh	r3, [r7, #10]
 80029fa:	460b      	mov	r3, r1
 80029fc:	813b      	strh	r3, [r7, #8]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  int16_t dx = x1 - x0;
 8002a02:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002a04:	893b      	ldrh	r3, [r7, #8]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	83fb      	strh	r3, [r7, #30]
  int16_t dy = y1 - y0;
 8002a0c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	83bb      	strh	r3, [r7, #28]

  int16_t x, y;
  int16_t err;
  int16_t step;

  if (0 == dx) {
 8002a16:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d117      	bne.n	8002a4e <ili9341_draw_line+0x66>
    // vertical line
    if (0 == dy)
 8002a1e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80c7 	beq.w	8002bb6 <ili9341_draw_line+0x1ce>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(lcd, color, x0, y0, 1, abs(dy));
 8002a28:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bfb8      	it	lt
 8002a30:	425b      	neglt	r3, r3
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002a38:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002a3c:	8979      	ldrh	r1, [r7, #10]
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	2301      	movs	r3, #1
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	4603      	mov	r3, r0
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f92c 	bl	8002ca4 <ili9341_fill_rect>
    return;
 8002a4c:	e0b6      	b.n	8002bbc <ili9341_draw_line+0x1d4>
  }
  else if (0 == dy) {
 8002a4e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d117      	bne.n	8002a86 <ili9341_draw_line+0x9e>
    // horizontal line
    if (0 == dx)
 8002a56:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80ad 	beq.w	8002bba <ili9341_draw_line+0x1d2>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(lcd, color, x0, y0, abs(dx), 1);
 8002a60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bfb8      	it	lt
 8002a68:	425b      	neglt	r3, r3
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002a70:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002a74:	8979      	ldrh	r1, [r7, #10]
 8002a76:	2401      	movs	r4, #1
 8002a78:	9401      	str	r4, [sp, #4]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f910 	bl	8002ca4 <ili9341_fill_rect>
    return;
 8002a84:	e09a      	b.n	8002bbc <ili9341_draw_line+0x1d4>
  }

  ili9341_bool_t is_steep = abs(dy) > abs(dx);
 8002a86:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bfb8      	it	lt
 8002a8e:	425b      	neglt	r3, r3
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bfb8      	it	lt
 8002a9a:	425b      	neglt	r3, r3
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	bf8c      	ite	hi
 8002aa2:	2301      	movhi	r3, #1
 8002aa4:	2300      	movls	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	76fb      	strb	r3, [r7, #27]
  if (is_steep) {
 8002aaa:	7efb      	ldrb	r3, [r7, #27]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00b      	beq.n	8002ac8 <ili9341_draw_line+0xe0>
    __SWAP(int16_t, x0, y0);
 8002ab0:	893b      	ldrh	r3, [r7, #8]
 8002ab2:	833b      	strh	r3, [r7, #24]
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	813b      	strh	r3, [r7, #8]
 8002ab8:	8b3b      	ldrh	r3, [r7, #24]
 8002aba:	80fb      	strh	r3, [r7, #6]
    __SWAP(int16_t, x1, y1);
 8002abc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002abe:	82fb      	strh	r3, [r7, #22]
 8002ac0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002ac2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8002ac4:	8afb      	ldrh	r3, [r7, #22]
 8002ac6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  }

  if (x0 > x1) {
 8002ac8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002acc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	dd0b      	ble.n	8002aec <ili9341_draw_line+0x104>
    __SWAP(int16_t, x0, x1);
 8002ad4:	893b      	ldrh	r3, [r7, #8]
 8002ad6:	82bb      	strh	r3, [r7, #20]
 8002ad8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002ada:	813b      	strh	r3, [r7, #8]
 8002adc:	8abb      	ldrh	r3, [r7, #20]
 8002ade:	873b      	strh	r3, [r7, #56]	@ 0x38
    __SWAP(int16_t, y0, y1);
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	827b      	strh	r3, [r7, #18]
 8002ae4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002ae6:	80fb      	strh	r3, [r7, #6]
 8002ae8:	8a7b      	ldrh	r3, [r7, #18]
 8002aea:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  }

  dx = x1 - x0;
 8002aec:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002aee:	893b      	ldrh	r3, [r7, #8]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	83fb      	strh	r3, [r7, #30]
  dy = abs(y1 - y0);
 8002af6:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	@ 0x3c
 8002afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bfb8      	it	lt
 8002b04:	425b      	neglt	r3, r3
 8002b06:	83bb      	strh	r3, [r7, #28]
  err = dx >> 1;
 8002b08:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b0c:	105b      	asrs	r3, r3, #1
 8002b0e:	847b      	strh	r3, [r7, #34]	@ 0x22

  if (y0 < y1)
 8002b10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b14:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	da02      	bge.n	8002b22 <ili9341_draw_line+0x13a>
    { step = 1; }
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	843b      	strh	r3, [r7, #32]
 8002b20:	e042      	b.n	8002ba8 <ili9341_draw_line+0x1c0>
  else
    { step = -1; }
 8002b22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b26:	843b      	strh	r3, [r7, #32]

  while (x0 <= x1) {
 8002b28:	e03e      	b.n	8002ba8 <ili9341_draw_line+0x1c0>

    if (is_steep)
 8002b2a:	7efb      	ldrb	r3, [r7, #27]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <ili9341_draw_line+0x152>
      { x = y0; y = x0; }
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b34:	893b      	ldrh	r3, [r7, #8]
 8002b36:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002b38:	e003      	b.n	8002b42 <ili9341_draw_line+0x15a>
    else
      { x = x0; y = y0; }
 8002b3a:	893b      	ldrh	r3, [r7, #8]
 8002b3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	84bb      	strh	r3, [r7, #36]	@ 0x24

    // continue algorithm even if current pixel is outside of screen
    // bounds, so that the line is drawn at correct position once
    // it actually enters screen bounds (if ever).
    if ( (x >= 0) && (x <= lcd->screen_size.width) &&
 8002b42:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	db17      	blt.n	8002b7a <ili9341_draw_line+0x192>
 8002b4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	8b92      	ldrh	r2, [r2, #28]
 8002b52:	4293      	cmp	r3, r2
 8002b54:	dc11      	bgt.n	8002b7a <ili9341_draw_line+0x192>
 8002b56:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	db0d      	blt.n	8002b7a <ili9341_draw_line+0x192>
         (y >= 0) && (y <= lcd->screen_size.height) ) {
 8002b5e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	8bd2      	ldrh	r2, [r2, #30]
 8002b66:	4293      	cmp	r3, r2
 8002b68:	dc07      	bgt.n	8002b7a <ili9341_draw_line+0x192>
      ili9341_draw_pixel(lcd, color, x, y);
 8002b6a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002b6e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8002b72:	8979      	ldrh	r1, [r7, #10]
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7ff fede 	bl	8002936 <ili9341_draw_pixel>
    }

    err -= dy;
 8002b7a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002b7c:	8bbb      	ldrh	r3, [r7, #28]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (err < 0) {
 8002b84:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	da09      	bge.n	8002ba0 <ili9341_draw_line+0x1b8>
      y0 += step;
 8002b8c:	88fa      	ldrh	r2, [r7, #6]
 8002b8e:	8c3b      	ldrh	r3, [r7, #32]
 8002b90:	4413      	add	r3, r2
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	80fb      	strh	r3, [r7, #6]
      err += dx;
 8002b96:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002b98:	8bfb      	ldrh	r3, [r7, #30]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    ++x0;
 8002ba0:	893b      	ldrh	r3, [r7, #8]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	813b      	strh	r3, [r7, #8]
  while (x0 <= x1) {
 8002ba8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002bac:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	ddba      	ble.n	8002b2a <ili9341_draw_line+0x142>
 8002bb4:	e002      	b.n	8002bbc <ili9341_draw_line+0x1d4>
      { return; } // distance = 0, no line to draw
 8002bb6:	bf00      	nop
 8002bb8:	e000      	b.n	8002bbc <ili9341_draw_line+0x1d4>
      { return; } // distance = 0, no line to draw
 8002bba:	bf00      	nop
  }
}
 8002bbc:	372c      	adds	r7, #44	@ 0x2c
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd90      	pop	{r4, r7, pc}

08002bc2 <ili9341_draw_rect>:

void ili9341_draw_rect(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y, uint16_t w, uint16_t h)
{
 8002bc2:	b590      	push	{r4, r7, lr}
 8002bc4:	b087      	sub	sp, #28
 8002bc6:	af02      	add	r7, sp, #8
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	4608      	mov	r0, r1
 8002bcc:	4611      	mov	r1, r2
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	817b      	strh	r3, [r7, #10]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	813b      	strh	r3, [r7, #8]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	80fb      	strh	r3, [r7, #6]
  ili9341_draw_line(lcd, color,     x,     y,   x+w,     y );
 8002bdc:	893a      	ldrh	r2, [r7, #8]
 8002bde:	8c3b      	ldrh	r3, [r7, #32]
 8002be0:	4413      	add	r3, r2
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	b21b      	sxth	r3, r3
 8002be6:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8002bea:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8002bee:	8979      	ldrh	r1, [r7, #10]
 8002bf0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bf4:	9201      	str	r2, [sp, #4]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	4623      	mov	r3, r4
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f7ff fef3 	bl	80029e8 <ili9341_draw_line>
  ili9341_draw_line(lcd, color,     x, y+h-1,   x+w, y+h-1 );
 8002c02:	88fa      	ldrh	r2, [r7, #6]
 8002c04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c06:	4413      	add	r3, r2
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	b21c      	sxth	r4, r3
 8002c10:	893a      	ldrh	r2, [r7, #8]
 8002c12:	8c3b      	ldrh	r3, [r7, #32]
 8002c14:	4413      	add	r3, r2
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	b21b      	sxth	r3, r3
 8002c1a:	88f9      	ldrh	r1, [r7, #6]
 8002c1c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c1e:	440a      	add	r2, r1
 8002c20:	b292      	uxth	r2, r2
 8002c22:	3a01      	subs	r2, #1
 8002c24:	b292      	uxth	r2, r2
 8002c26:	b212      	sxth	r2, r2
 8002c28:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8002c2c:	8979      	ldrh	r1, [r7, #10]
 8002c2e:	9201      	str	r2, [sp, #4]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	4623      	mov	r3, r4
 8002c34:	4602      	mov	r2, r0
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f7ff fed6 	bl	80029e8 <ili9341_draw_line>
  ili9341_draw_line(lcd, color,     x,     y,     x,   y+h );
 8002c3c:	88fa      	ldrh	r2, [r7, #6]
 8002c3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c40:	4413      	add	r3, r2
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	b21b      	sxth	r3, r3
 8002c46:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002c4a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002c4e:	8979      	ldrh	r1, [r7, #10]
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	4603      	mov	r3, r0
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f7ff fec4 	bl	80029e8 <ili9341_draw_line>
  ili9341_draw_line(lcd, color, x+w-1,     y, x+w-1,   y+h );
 8002c60:	893a      	ldrh	r2, [r7, #8]
 8002c62:	8c3b      	ldrh	r3, [r7, #32]
 8002c64:	4413      	add	r3, r2
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	b218      	sxth	r0, r3
 8002c6e:	893a      	ldrh	r2, [r7, #8]
 8002c70:	8c3b      	ldrh	r3, [r7, #32]
 8002c72:	4413      	add	r3, r2
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	b21b      	sxth	r3, r3
 8002c7c:	88f9      	ldrh	r1, [r7, #6]
 8002c7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c80:	440a      	add	r2, r1
 8002c82:	b292      	uxth	r2, r2
 8002c84:	b212      	sxth	r2, r2
 8002c86:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8002c8a:	8979      	ldrh	r1, [r7, #10]
 8002c8c:	9201      	str	r2, [sp, #4]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	4623      	mov	r3, r4
 8002c92:	4602      	mov	r2, r0
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7ff fea7 	bl	80029e8 <ili9341_draw_line>
}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd90      	pop	{r4, r7, pc}
	...

08002ca4 <ili9341_fill_rect>:

void ili9341_fill_rect(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y, uint16_t w, uint16_t h)
{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b08d      	sub	sp, #52	@ 0x34
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	4608      	mov	r0, r1
 8002cae:	4611      	mov	r1, r2
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	817b      	strh	r3, [r7, #10]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	813b      	strh	r3, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	80fb      	strh	r3, [r7, #6]
  // verify we have something within screen dimensions to be drawn
  if (ibNOT(ili9341_clip_rect(lcd, &x, &y, &w, &h)))
 8002cbe:	1dba      	adds	r2, r7, #6
 8002cc0:	f107 0108 	add.w	r1, r7, #8
 8002cc4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 faf3 	bl	80032ba <ili9341_clip_rect>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d070      	beq.n	8002dbc <ili9341_fill_rect+0x118>
    { return; }

  uint32_t num_pixels = w * h;
 8002cda:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002cdc:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	617b      	str	r3, [r7, #20]
  uint32_t rect_wc    = num_pixels;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t block_wc = rect_wc;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	623b      	str	r3, [r7, #32]
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cf2:	d902      	bls.n	8002cfa <ili9341_fill_rect+0x56>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 8002cf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cf8:	623b      	str	r3, [r7, #32]

  // fill entire block with ordered color data
  uint16_t color_le = __LEu16(&color);
 8002cfa:	f107 030a 	add.w	r3, r7, #10
 8002cfe:	3301      	adds	r3, #1
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	b21a      	sxth	r2, r3
 8002d04:	f107 030a 	add.w	r3, r7, #10
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b21b      	sxth	r3, r3
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	b21b      	sxth	r3, r3
 8002d10:	4313      	orrs	r3, r2
 8002d12:	b21b      	sxth	r3, r3
 8002d14:	827b      	strh	r3, [r7, #18]
  for (uint16_t i = 0; i < block_wc; ++i)
 8002d16:	2300      	movs	r3, #0
 8002d18:	83fb      	strh	r3, [r7, #30]
 8002d1a:	e007      	b.n	8002d2c <ili9341_fill_rect+0x88>
    { spi_tx_block[i] = color_le; }
 8002d1c:	8bfb      	ldrh	r3, [r7, #30]
 8002d1e:	4929      	ldr	r1, [pc, #164]	@ (8002dc4 <ili9341_fill_rect+0x120>)
 8002d20:	8a7a      	ldrh	r2, [r7, #18]
 8002d22:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint16_t i = 0; i < block_wc; ++i)
 8002d26:	8bfb      	ldrh	r3, [r7, #30]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	83fb      	strh	r3, [r7, #30]
 8002d2c:	8bfb      	ldrh	r3, [r7, #30]
 8002d2e:	6a3a      	ldr	r2, [r7, #32]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d8f3      	bhi.n	8002d1c <ili9341_fill_rect+0x78>

  // select target region
  ili9341_spi_tft_set_address_rect(lcd, x, y, (x + w - 1), (y + h - 1));
 8002d34:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d38:	b299      	uxth	r1, r3
 8002d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d3e:	b298      	uxth	r0, r3
 8002d40:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002d48:	4413      	add	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29c      	uxth	r4, r3
 8002d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002d58:	4413      	add	r3, r2
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	4623      	mov	r3, r4
 8002d64:	4602      	mov	r2, r0
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f7ff fd58 	bl	800281c <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select(lcd);
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f7ff f9da 	bl	8002126 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6958      	ldr	r0, [r3, #20]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8b1b      	ldrh	r3, [r3, #24]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f003 fa13 	bl	80061a8 <HAL_GPIO_WritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 8002d82:	e014      	b.n	8002dae <ili9341_fill_rect+0x10a>
    curr_wc = rect_wc;
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	61bb      	str	r3, [r7, #24]
    if (curr_wc > block_wc)
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d901      	bls.n	8002d94 <ili9341_fill_rect+0xf0>
      { curr_wc = block_wc; }
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	61bb      	str	r3, [r7, #24]
    ili9341_transmit_color(lcd, curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	b299      	uxth	r1, r3
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	4a09      	ldr	r2, [pc, #36]	@ (8002dc4 <ili9341_fill_rect+0x120>)
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7ff fda3 	bl	80028ec <ili9341_transmit_color>
    rect_wc -= curr_wc;
 8002da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
  while (rect_wc > 0) {
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e7      	bne.n	8002d84 <ili9341_fill_rect+0xe0>
  }

  ili9341_spi_tft_release(lcd);
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7ff f9c6 	bl	8002146 <ili9341_spi_tft_release>
 8002dba:	e000      	b.n	8002dbe <ili9341_fill_rect+0x11a>
    { return; }
 8002dbc:	bf00      	nop
}
 8002dbe:	372c      	adds	r7, #44	@ 0x2c
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd90      	pop	{r4, r7, pc}
 8002dc4:	200001f0 	.word	0x200001f0

08002dc8 <ili9341_draw_circle>:

void ili9341_draw_circle(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y, int16_t r)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	817b      	strh	r3, [r7, #10]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	813b      	strh	r3, [r7, #8]
 8002dde:	4613      	mov	r3, r2
 8002de0:	80fb      	strh	r3, [r7, #6]
  int16_t f = 1 - r;
 8002de2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002de4:	f1c3 0301 	rsb	r3, r3, #1
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	83fb      	strh	r3, [r7, #30]
  int16_t fx = 1;
 8002dec:	2301      	movs	r3, #1
 8002dee:	83bb      	strh	r3, [r7, #28]
  int16_t fy = -2 * r;
 8002df0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002df2:	461a      	mov	r2, r3
 8002df4:	03d2      	lsls	r2, r2, #15
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	837b      	strh	r3, [r7, #26]
  int16_t ix = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	833b      	strh	r3, [r7, #24]
  int16_t iy = r;
 8002e02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e04:	82fb      	strh	r3, [r7, #22]

  ili9341_draw_pixel(lcd, color, x, y + r);
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e0a:	4413      	add	r3, r2
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e14:	8979      	ldrh	r1, [r7, #10]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f7ff fd8d 	bl	8002936 <ili9341_draw_pixel>
  ili9341_draw_pixel(lcd, color, x, y - r);
 8002e1c:	88fa      	ldrh	r2, [r7, #6]
 8002e1e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e2a:	8979      	ldrh	r1, [r7, #10]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f7ff fd82 	bl	8002936 <ili9341_draw_pixel>
  ili9341_draw_pixel(lcd, color, x + r, y);
 8002e32:	893a      	ldrh	r2, [r7, #8]
 8002e34:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e36:	4413      	add	r3, r2
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	b21a      	sxth	r2, r3
 8002e3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e40:	8979      	ldrh	r1, [r7, #10]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff fd77 	bl	8002936 <ili9341_draw_pixel>
  ili9341_draw_pixel(lcd, color, x - r, y);
 8002e48:	893a      	ldrh	r2, [r7, #8]
 8002e4a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	b21a      	sxth	r2, r3
 8002e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e56:	8979      	ldrh	r1, [r7, #10]
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7ff fd6c 	bl	8002936 <ili9341_draw_pixel>

  while (ix < iy) {
 8002e5e:	e099      	b.n	8002f94 <ili9341_draw_circle+0x1cc>

    if (f >= 0) {
 8002e60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	db0e      	blt.n	8002e86 <ili9341_draw_circle+0xbe>
      iy--;
 8002e68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	82fb      	strh	r3, [r7, #22]
      fy += 2;
 8002e74:	8b7b      	ldrh	r3, [r7, #26]
 8002e76:	3302      	adds	r3, #2
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	837b      	strh	r3, [r7, #26]
      f += fy;
 8002e7c:	8bfa      	ldrh	r2, [r7, #30]
 8002e7e:	8b7b      	ldrh	r3, [r7, #26]
 8002e80:	4413      	add	r3, r2
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	83fb      	strh	r3, [r7, #30]
    }

    ix++;
 8002e86:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	833b      	strh	r3, [r7, #24]
    fx += 2;
 8002e92:	8bbb      	ldrh	r3, [r7, #28]
 8002e94:	3302      	adds	r3, #2
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	83bb      	strh	r3, [r7, #28]
    f += fx;
 8002e9a:	8bfa      	ldrh	r2, [r7, #30]
 8002e9c:	8bbb      	ldrh	r3, [r7, #28]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	83fb      	strh	r3, [r7, #30]

    ili9341_draw_pixel(lcd, color, x + ix, y + iy);
 8002ea4:	893a      	ldrh	r2, [r7, #8]
 8002ea6:	8b3b      	ldrh	r3, [r7, #24]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	b218      	sxth	r0, r3
 8002eae:	88fa      	ldrh	r2, [r7, #6]
 8002eb0:	8afb      	ldrh	r3, [r7, #22]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	b21b      	sxth	r3, r3
 8002eb8:	8979      	ldrh	r1, [r7, #10]
 8002eba:	4602      	mov	r2, r0
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7ff fd3a 	bl	8002936 <ili9341_draw_pixel>
    ili9341_draw_pixel(lcd, color, x - ix, y + iy);
 8002ec2:	893a      	ldrh	r2, [r7, #8]
 8002ec4:	8b3b      	ldrh	r3, [r7, #24]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	b218      	sxth	r0, r3
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	8afb      	ldrh	r3, [r7, #22]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	b21b      	sxth	r3, r3
 8002ed6:	8979      	ldrh	r1, [r7, #10]
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f7ff fd2b 	bl	8002936 <ili9341_draw_pixel>
    ili9341_draw_pixel(lcd, color, x + ix, y - iy);
 8002ee0:	893a      	ldrh	r2, [r7, #8]
 8002ee2:	8b3b      	ldrh	r3, [r7, #24]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	b218      	sxth	r0, r3
 8002eea:	88fa      	ldrh	r2, [r7, #6]
 8002eec:	8afb      	ldrh	r3, [r7, #22]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	b21b      	sxth	r3, r3
 8002ef4:	8979      	ldrh	r1, [r7, #10]
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7ff fd1c 	bl	8002936 <ili9341_draw_pixel>
    ili9341_draw_pixel(lcd, color, x - ix, y - iy);
 8002efe:	893a      	ldrh	r2, [r7, #8]
 8002f00:	8b3b      	ldrh	r3, [r7, #24]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	b218      	sxth	r0, r3
 8002f08:	88fa      	ldrh	r2, [r7, #6]
 8002f0a:	8afb      	ldrh	r3, [r7, #22]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	b21b      	sxth	r3, r3
 8002f12:	8979      	ldrh	r1, [r7, #10]
 8002f14:	4602      	mov	r2, r0
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f7ff fd0d 	bl	8002936 <ili9341_draw_pixel>
    ili9341_draw_pixel(lcd, color, x + iy, y + ix);
 8002f1c:	893a      	ldrh	r2, [r7, #8]
 8002f1e:	8afb      	ldrh	r3, [r7, #22]
 8002f20:	4413      	add	r3, r2
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	b218      	sxth	r0, r3
 8002f26:	88fa      	ldrh	r2, [r7, #6]
 8002f28:	8b3b      	ldrh	r3, [r7, #24]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	b21b      	sxth	r3, r3
 8002f30:	8979      	ldrh	r1, [r7, #10]
 8002f32:	4602      	mov	r2, r0
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f7ff fcfe 	bl	8002936 <ili9341_draw_pixel>
    ili9341_draw_pixel(lcd, color, x - iy, y + ix);
 8002f3a:	893a      	ldrh	r2, [r7, #8]
 8002f3c:	8afb      	ldrh	r3, [r7, #22]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	b218      	sxth	r0, r3
 8002f44:	88fa      	ldrh	r2, [r7, #6]
 8002f46:	8b3b      	ldrh	r3, [r7, #24]
 8002f48:	4413      	add	r3, r2
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	b21b      	sxth	r3, r3
 8002f4e:	8979      	ldrh	r1, [r7, #10]
 8002f50:	4602      	mov	r2, r0
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff fcef 	bl	8002936 <ili9341_draw_pixel>
    ili9341_draw_pixel(lcd, color, x + iy, y - ix);
 8002f58:	893a      	ldrh	r2, [r7, #8]
 8002f5a:	8afb      	ldrh	r3, [r7, #22]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	b218      	sxth	r0, r3
 8002f62:	88fa      	ldrh	r2, [r7, #6]
 8002f64:	8b3b      	ldrh	r3, [r7, #24]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	b21b      	sxth	r3, r3
 8002f6c:	8979      	ldrh	r1, [r7, #10]
 8002f6e:	4602      	mov	r2, r0
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f7ff fce0 	bl	8002936 <ili9341_draw_pixel>
    ili9341_draw_pixel(lcd, color, x - iy, y - ix);
 8002f76:	893a      	ldrh	r2, [r7, #8]
 8002f78:	8afb      	ldrh	r3, [r7, #22]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	b218      	sxth	r0, r3
 8002f80:	88fa      	ldrh	r2, [r7, #6]
 8002f82:	8b3b      	ldrh	r3, [r7, #24]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	b21b      	sxth	r3, r3
 8002f8a:	8979      	ldrh	r1, [r7, #10]
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f7ff fcd1 	bl	8002936 <ili9341_draw_pixel>
  while (ix < iy) {
 8002f94:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002f98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	f6ff af5f 	blt.w	8002e60 <ili9341_draw_circle+0x98>
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	bf00      	nop
 8002fa6:	3720      	adds	r7, #32
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <ili9341_fill_circle>:

void ili9341_fill_circle(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y, int16_t r)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af04      	add	r7, sp, #16
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	817b      	strh	r3, [r7, #10]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	813b      	strh	r3, [r7, #8]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	80fb      	strh	r3, [r7, #6]
  ili9341_draw_line(lcd, color, x, y - r, x, (y - r) + (2 * r) + 1);
 8002fc6:	88fa      	ldrh	r2, [r7, #6]
 8002fc8:	8b3b      	ldrh	r3, [r7, #24]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	b218      	sxth	r0, r3
 8002fd0:	88fa      	ldrh	r2, [r7, #6]
 8002fd2:	8b3b      	ldrh	r3, [r7, #24]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	8b3b      	ldrh	r3, [r7, #24]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	b21b      	sxth	r3, r3
 8002fe8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002fec:	8979      	ldrh	r1, [r7, #10]
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff fcf5 	bl	80029e8 <ili9341_draw_line>
  ili9341_fill_quarter_circle(lcd, color, x, y, r, 3, 0);
 8002ffe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003002:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003006:	8979      	ldrh	r1, [r7, #10]
 8003008:	2300      	movs	r3, #0
 800300a:	9302      	str	r3, [sp, #8]
 800300c:	2303      	movs	r3, #3
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	4603      	mov	r3, r0
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f9ed 	bl	80033f8 <ili9341_fill_quarter_circle>
}
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <ili9341_fill_screen>:

void ili9341_fill_screen(ili9341_t *lcd, ili9341_color_t color)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af02      	add	r7, sp, #8
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	807b      	strh	r3, [r7, #2]
  ili9341_fill_rect(lcd, color,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	8b9b      	ldrh	r3, [r3, #28]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	8bd2      	ldrh	r2, [r2, #30]
 800303a:	8879      	ldrh	r1, [r7, #2]
 800303c:	9201      	str	r2, [sp, #4]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2300      	movs	r3, #0
 8003042:	2200      	movs	r2, #0
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fe2d 	bl	8002ca4 <ili9341_fill_rect>
      0, 0, lcd->screen_size.width, lcd->screen_size.height);
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <ili9341_draw_char>:
  ili9341_spi_tft_release(lcd);
  ili9341_transmit_wait(lcd);
}

void ili9341_draw_char(ili9341_t *lcd, ili9341_text_attr_t attr, char ch)
{
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b093      	sub	sp, #76	@ 0x4c
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	4638      	mov	r0, r7
 800305e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  // verify we have something within screen dimensions to be drawn
  int16_t  _x = attr.origin_x;
 8003062:	893b      	ldrh	r3, [r7, #8]
 8003064:	b21b      	sxth	r3, r3
 8003066:	837b      	strh	r3, [r7, #26]
  int16_t  _y = attr.origin_y;
 8003068:	897b      	ldrh	r3, [r7, #10]
 800306a:	b21b      	sxth	r3, r3
 800306c:	833b      	strh	r3, [r7, #24]
  uint16_t _w = attr.font->width;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	82fb      	strh	r3, [r7, #22]
  uint16_t _h = attr.font->height;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	82bb      	strh	r3, [r7, #20]
  if (ibNOT(ili9341_clip_rect(lcd, &_x, &_y, &_w, &_h)))
 800307a:	f107 0016 	add.w	r0, r7, #22
 800307e:	f107 0218 	add.w	r2, r7, #24
 8003082:	f107 011a 	add.w	r1, r7, #26
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	4603      	mov	r3, r0
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f913 	bl	80032ba <ili9341_clip_rect>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80bc 	beq.w	8003214 <ili9341_draw_char+0x1c0>
    { return; }

  // 16-bit color, so need 2 bytes for each pixel being filled
  uint32_t num_pixels = attr.font->width * attr.font->height;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	785b      	ldrb	r3, [r3, #1]
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t rect_wc    = num_pixels;
 80030ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint16_t fg_le = __LEu16(&(attr.fg_color));
 80030b0:	463b      	mov	r3, r7
 80030b2:	3304      	adds	r3, #4
 80030b4:	3301      	adds	r3, #1
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	b21a      	sxth	r2, r3
 80030ba:	463b      	mov	r3, r7
 80030bc:	3304      	adds	r3, #4
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	b21b      	sxth	r3, r3
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	b21b      	sxth	r3, r3
 80030c6:	4313      	orrs	r3, r2
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t bg_le = __LEu16(&(attr.bg_color));
 80030cc:	463b      	mov	r3, r7
 80030ce:	3306      	adds	r3, #6
 80030d0:	3301      	adds	r3, #1
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	b21a      	sxth	r2, r3
 80030d6:	463b      	mov	r3, r7
 80030d8:	3306      	adds	r3, #6
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	b21b      	sxth	r3, r3
 80030de:	021b      	lsls	r3, r3, #8
 80030e0:	b21b      	sxth	r3, r3
 80030e2:	4313      	orrs	r3, r2
 80030e4:	b21b      	sxth	r3, r3
 80030e6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint32_t block_wc = rect_wc;
 80030e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 80030ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f2:	d902      	bls.n	80030fa <ili9341_draw_char+0xa6>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 80030f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030f8:	63bb      	str	r3, [r7, #56]	@ 0x38

  // initialize the buffer with glyph from selected font
  uint8_t ch_index = glyph_index(ch);
 80030fa:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fb76 	bl	80027f0 <glyph_index>
 8003104:	4603      	mov	r3, r0
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 800310a:	2300      	movs	r3, #0
 800310c:	637b      	str	r3, [r7, #52]	@ 0x34
 800310e:	e03d      	b.n	800318c <ili9341_draw_char+0x138>
    uint32_t gl = (uint32_t)attr.font->glyph[ch_index * attr.font->height + yi];
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003116:	6839      	ldr	r1, [r7, #0]
 8003118:	7849      	ldrb	r1, [r1, #1]
 800311a:	fb01 f303 	mul.w	r3, r1, r3
 800311e:	4619      	mov	r1, r3
 8003120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003122:	440b      	add	r3, r1
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4413      	add	r3, r2
 8003128:	885b      	ldrh	r3, [r3, #2]
 800312a:	61fb      	str	r3, [r7, #28]
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 800312c:	2300      	movs	r3, #0
 800312e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003130:	e023      	b.n	800317a <ili9341_draw_char+0x126>
      if ((gl << xi) & 0x8000)
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00c      	beq.n	800315c <ili9341_draw_char+0x108>
        { spi_tx_block[yi * attr.font->width + xi] = fg_le; }
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314a:	fb03 f202 	mul.w	r2, r3, r2
 800314e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003150:	4413      	add	r3, r2
 8003152:	4932      	ldr	r1, [pc, #200]	@ (800321c <ili9341_draw_char+0x1c8>)
 8003154:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003156:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800315a:	e00b      	b.n	8003174 <ili9341_draw_char+0x120>
      else
        { spi_tx_block[yi * attr.font->width + xi] = bg_le; }
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003164:	fb03 f202 	mul.w	r2, r3, r2
 8003168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316a:	4413      	add	r3, r2
 800316c:	492b      	ldr	r1, [pc, #172]	@ (800321c <ili9341_draw_char+0x1c8>)
 800316e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003170:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 8003174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003176:	3301      	adds	r3, #1
 8003178:	633b      	str	r3, [r7, #48]	@ 0x30
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003182:	4293      	cmp	r3, r2
 8003184:	d3d5      	bcc.n	8003132 <ili9341_draw_char+0xde>
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 8003186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003188:	3301      	adds	r3, #1
 800318a:	637b      	str	r3, [r7, #52]	@ 0x34
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	785b      	ldrb	r3, [r3, #1]
 8003190:	461a      	mov	r2, r3
 8003192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003194:	4293      	cmp	r3, r2
 8003196:	d3bb      	bcc.n	8003110 <ili9341_draw_char+0xbc>
    }
  }

  // select target region
  ili9341_spi_tft_set_address_rect(lcd,
 8003198:	8939      	ldrh	r1, [r7, #8]
 800319a:	8978      	ldrh	r0, [r7, #10]
      attr.origin_x, attr.origin_y,
      attr.origin_x + attr.font->width - 1, attr.origin_y + attr.font->height - 1);
 800319c:	893b      	ldrh	r3, [r7, #8]
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	7812      	ldrb	r2, [r2, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(lcd,
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29c      	uxth	r4, r3
      attr.origin_x + attr.font->width - 1, attr.origin_y + attr.font->height - 1);
 80031aa:	897b      	ldrh	r3, [r7, #10]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	7852      	ldrb	r2, [r2, #1]
 80031b0:	4413      	add	r3, r2
 80031b2:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(lcd,
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	4623      	mov	r3, r4
 80031bc:	4602      	mov	r2, r0
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff fb2c 	bl	800281c <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select(lcd);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7fe ffae 	bl	8002126 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6958      	ldr	r0, [r3, #20]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8b1b      	ldrh	r3, [r3, #24]
 80031d2:	2201      	movs	r2, #1
 80031d4:	4619      	mov	r1, r3
 80031d6:	f002 ffe7 	bl	80061a8 <HAL_GPIO_WritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 80031da:	e014      	b.n	8003206 <ili9341_draw_char+0x1b2>
    curr_wc = rect_wc;
 80031dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (curr_wc > block_wc)
 80031e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d901      	bls.n	80031ec <ili9341_draw_char+0x198>
      { curr_wc = block_wc; }
 80031e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ili9341_transmit_color(lcd, curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 80031ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	b299      	uxth	r1, r3
 80031f4:	2301      	movs	r3, #1
 80031f6:	4a09      	ldr	r2, [pc, #36]	@ (800321c <ili9341_draw_char+0x1c8>)
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f7ff fb77 	bl	80028ec <ili9341_transmit_color>
    rect_wc -= curr_wc;
 80031fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	63fb      	str	r3, [r7, #60]	@ 0x3c
  while (rect_wc > 0) {
 8003206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e7      	bne.n	80031dc <ili9341_draw_char+0x188>
  }

  ili9341_spi_tft_release(lcd);
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f7fe ff9a 	bl	8002146 <ili9341_spi_tft_release>
 8003212:	e000      	b.n	8003216 <ili9341_draw_char+0x1c2>
    { return; }
 8003214:	bf00      	nop
}
 8003216:	3744      	adds	r7, #68	@ 0x44
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}
 800321c:	200001f0 	.word	0x200001f0

08003220 <ili9341_draw_string>:

void ili9341_draw_string(ili9341_t *lcd, ili9341_text_attr_t attr, char str[])
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	4638      	mov	r0, r7
 800322a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  int16_t curr_x = attr.origin_x;
 800322e:	893b      	ldrh	r3, [r7, #8]
 8003230:	82fb      	strh	r3, [r7, #22]
  int16_t curr_y = attr.origin_y;
 8003232:	897b      	ldrh	r3, [r7, #10]
 8003234:	82bb      	strh	r3, [r7, #20]
  int16_t start_x = attr.origin_x;
 8003236:	893b      	ldrh	r3, [r7, #8]
 8003238:	827b      	strh	r3, [r7, #18]

  while ('\0' != *str) {
 800323a:	e036      	b.n	80032aa <ili9341_draw_string+0x8a>
    if('\r' == *str)
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b0d      	cmp	r3, #13
 8003242:	d102      	bne.n	800324a <ili9341_draw_string+0x2a>
    {
      curr_x = start_x;
 8003244:	8a7b      	ldrh	r3, [r7, #18]
 8003246:	82fb      	strh	r3, [r7, #22]
 8003248:	e02c      	b.n	80032a4 <ili9341_draw_string+0x84>
    }
    else if('\n' == *str)
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b0a      	cmp	r3, #10
 8003250:	d109      	bne.n	8003266 <ili9341_draw_string+0x46>
    {
      curr_y += attr.font->height;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	785b      	ldrb	r3, [r3, #1]
 8003256:	461a      	mov	r2, r3
 8003258:	8abb      	ldrh	r3, [r7, #20]
 800325a:	4413      	add	r3, r2
 800325c:	b29b      	uxth	r3, r3
 800325e:	82bb      	strh	r3, [r7, #20]
      curr_x = start_x;
 8003260:	8a7b      	ldrh	r3, [r7, #18]
 8003262:	82fb      	strh	r3, [r7, #22]
 8003264:	e01e      	b.n	80032a4 <ili9341_draw_string+0x84>
    }
    else
    {
      if ( (curr_x > lcd->screen_size.width) ||
 8003266:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	8b92      	ldrh	r2, [r2, #28]
 800326e:	4293      	cmp	r3, r2
 8003270:	dc1f      	bgt.n	80032b2 <ili9341_draw_string+0x92>
          (curr_y > lcd->screen_size.height) )
 8003272:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	8bd2      	ldrh	r2, [r2, #30]
      if ( (curr_x > lcd->screen_size.width) ||
 800327a:	4293      	cmp	r3, r2
 800327c:	dc19      	bgt.n	80032b2 <ili9341_draw_string+0x92>
        { break; }

      attr.origin_x = curr_x;
 800327e:	8afb      	ldrh	r3, [r7, #22]
 8003280:	813b      	strh	r3, [r7, #8]
      attr.origin_y = curr_y;
 8003282:	8abb      	ldrh	r3, [r7, #20]
 8003284:	817b      	strh	r3, [r7, #10]

      ili9341_draw_char(lcd, attr, *str);
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	463b      	mov	r3, r7
 800328e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7ff fedf 	bl	8003054 <ili9341_draw_char>

      curr_x += attr.font->width;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	8afb      	ldrh	r3, [r7, #22]
 800329e:	4413      	add	r3, r2
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	82fb      	strh	r3, [r7, #22]
    }
    ++str;
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	3301      	adds	r3, #1
 80032a8:	623b      	str	r3, [r7, #32]
  while ('\0' != *str) {
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1c4      	bne.n	800323c <ili9341_draw_string+0x1c>
  }
}
 80032b2:	bf00      	nop
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <ili9341_clip_rect>:

// ------------------------------------------------------- private functions --

static ili9341_bool_t ili9341_clip_rect(ili9341_t *lcd,
    int16_t *x, int16_t *y, uint16_t *w, uint16_t *h)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b085      	sub	sp, #20
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	603b      	str	r3, [r7, #0]
  // must have an origin to do anything
  if ((NULL == x) || (NULL == y))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <ili9341_clip_rect+0x1a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <ili9341_clip_rect+0x1e>
    { return ibFalse; }
 80032d4:	2300      	movs	r3, #0
 80032d6:	e089      	b.n	80033ec <ili9341_clip_rect+0x132>

  //  1. rect origin beyond screen dimensions, nothing to draw
  if ((*x >= lcd->screen_size.width) || (*y >= lcd->screen_size.height))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032de:	461a      	mov	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8b9b      	ldrh	r3, [r3, #28]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	da07      	bge.n	80032f8 <ili9341_clip_rect+0x3e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032ee:	461a      	mov	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8bdb      	ldrh	r3, [r3, #30]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	db01      	blt.n	80032fc <ili9341_clip_rect+0x42>
    { return ibFalse; }
 80032f8:	2300      	movs	r3, #0
 80032fa:	e077      	b.n	80033ec <ili9341_clip_rect+0x132>

  //  2. rect width or height is 0, nothing to draw
  if ((NULL != w) && (NULL != h)) {
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00c      	beq.n	800331c <ili9341_clip_rect+0x62>
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <ili9341_clip_rect+0x62>
    if ((0U == *w) || (0U == *h))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <ili9341_clip_rect+0x5e>
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <ili9341_clip_rect+0x62>
      { return ibFalse; }
 8003318:	2300      	movs	r3, #0
 800331a:	e067      	b.n	80033ec <ili9341_clip_rect+0x132>
  }

  // 3. rect origin has negative component, adjust origin and dimensions
  if (*x < 0) {
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003322:	2b00      	cmp	r3, #0
 8003324:	da0f      	bge.n	8003346 <ili9341_clip_rect+0x8c>
    if (NULL != w)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d009      	beq.n	8003340 <ili9341_clip_rect+0x86>
      { *w -= *x; }
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	881a      	ldrh	r2, [r3, #0]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003336:	b29b      	uxth	r3, r3
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	b29a      	uxth	r2, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	801a      	strh	r2, [r3, #0]
    *x = 0;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2200      	movs	r2, #0
 8003344:	801a      	strh	r2, [r3, #0]
  }
  if (*y < 0) {
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800334c:	2b00      	cmp	r3, #0
 800334e:	da0f      	bge.n	8003370 <ili9341_clip_rect+0xb6>
    if (NULL != h)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <ili9341_clip_rect+0xb0>
      { *h -= *y; }
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	881a      	ldrh	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003360:	b29b      	uxth	r3, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	b29a      	uxth	r2, r3
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	801a      	strh	r2, [r3, #0]
    *y = 0;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	801a      	strh	r2, [r3, #0]
  }

  if ((NULL != w) && (NULL != h)) {
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d039      	beq.n	80033ea <ili9341_clip_rect+0x130>
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d036      	beq.n	80033ea <ili9341_clip_rect+0x130>

    //  4. rect width beyond screen width, reduce rect width
    if ((*x + *w - 1) >= lcd->screen_size.width)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003382:	461a      	mov	r2, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	4413      	add	r3, r2
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	8b92      	ldrh	r2, [r2, #28]
 800338e:	4293      	cmp	r3, r2
 8003390:	dd09      	ble.n	80033a6 <ili9341_clip_rect+0xec>
      { *w = lcd->screen_size.width - *x; }
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8b9a      	ldrh	r2, [r3, #28]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800339c:	b29b      	uxth	r3, r3
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	801a      	strh	r2, [r3, #0]

    //  5. rect height beyond screen height, reduce rect height
    if ((*y + *h - 1) >= lcd->screen_size.height)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ac:	461a      	mov	r2, r3
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	4413      	add	r3, r2
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	8bd2      	ldrh	r2, [r2, #30]
 80033b8:	4293      	cmp	r3, r2
 80033ba:	dd09      	ble.n	80033d0 <ili9341_clip_rect+0x116>
      { *h = lcd->screen_size.height - *y; }
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8bda      	ldrh	r2, [r3, #30]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	801a      	strh	r2, [r3, #0]

    return (*w > 0U) && (*h > 0U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <ili9341_clip_rect+0x12a>
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <ili9341_clip_rect+0x12a>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <ili9341_clip_rect+0x12c>
 80033e4:	2300      	movs	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	e000      	b.n	80033ec <ili9341_clip_rect+0x132>
  }

  return ibTrue;
 80033ea:	2301      	movs	r3, #1
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <ili9341_fill_quarter_circle>:

static void ili9341_fill_quarter_circle(ili9341_t *lcd, ili9341_color_t color,
    int16_t x, int16_t y, int16_t r, uint8_t corners, int16_t delta)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08c      	sub	sp, #48	@ 0x30
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	4608      	mov	r0, r1
 8003402:	4611      	mov	r1, r2
 8003404:	461a      	mov	r2, r3
 8003406:	4603      	mov	r3, r0
 8003408:	817b      	strh	r3, [r7, #10]
 800340a:	460b      	mov	r3, r1
 800340c:	813b      	strh	r3, [r7, #8]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  int16_t f = 1 - r;
 8003412:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003414:	f1c3 0301 	rsb	r3, r3, #1
 8003418:	b29b      	uxth	r3, r3
 800341a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t fx = 1;
 800341c:	2301      	movs	r3, #1
 800341e:	84bb      	strh	r3, [r7, #36]	@ 0x24
  int16_t fy = -2 * r;
 8003420:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003422:	461a      	mov	r2, r3
 8003424:	03d2      	lsls	r2, r2, #15
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	b29b      	uxth	r3, r3
 800342c:	847b      	strh	r3, [r7, #34]	@ 0x22
  int16_t ix = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	843b      	strh	r3, [r7, #32]
  int16_t iy = r;
 8003432:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003434:	83fb      	strh	r3, [r7, #30]
  int16_t px = ix;
 8003436:	8c3b      	ldrh	r3, [r7, #32]
 8003438:	83bb      	strh	r3, [r7, #28]
  int16_t py = iy;
 800343a:	8bfb      	ldrh	r3, [r7, #30]
 800343c:	837b      	strh	r3, [r7, #26]
  int16_t tx;
  int16_t ty;

  delta += 1;
 800343e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003440:	3301      	adds	r3, #1
 8003442:	b29b      	uxth	r3, r3
 8003444:	873b      	strh	r3, [r7, #56]	@ 0x38

  while (ix < iy) {
 8003446:	e0cd      	b.n	80035e4 <ili9341_fill_quarter_circle+0x1ec>

    if (f >= 0) {
 8003448:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800344c:	2b00      	cmp	r3, #0
 800344e:	db0e      	blt.n	800346e <ili9341_fill_quarter_circle+0x76>
      iy--;
 8003450:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29b      	uxth	r3, r3
 800345a:	83fb      	strh	r3, [r7, #30]
      fy += 2;
 800345c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800345e:	3302      	adds	r3, #2
 8003460:	b29b      	uxth	r3, r3
 8003462:	847b      	strh	r3, [r7, #34]	@ 0x22
      f += fy;
 8003464:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003466:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003468:	4413      	add	r3, r2
 800346a:	b29b      	uxth	r3, r3
 800346c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    ix++;
 800346e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003472:	b29b      	uxth	r3, r3
 8003474:	3301      	adds	r3, #1
 8003476:	b29b      	uxth	r3, r3
 8003478:	843b      	strh	r3, [r7, #32]
    fx += 2;
 800347a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800347c:	3302      	adds	r3, #2
 800347e:	b29b      	uxth	r3, r3
 8003480:	84bb      	strh	r3, [r7, #36]	@ 0x24
    f += fx;
 8003482:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003484:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003486:	4413      	add	r3, r2
 8003488:	b29b      	uxth	r3, r3
 800348a:	84fb      	strh	r3, [r7, #38]	@ 0x26


    if (ix < (iy + 1)) {
 800348c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003490:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003494:	429a      	cmp	r2, r3
 8003496:	db4d      	blt.n	8003534 <ili9341_fill_quarter_circle+0x13c>
      if (corners & 1) {
 8003498:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <ili9341_fill_quarter_circle+0xee>
        tx = x + ix;
 80034a4:	893a      	ldrh	r2, [r7, #8]
 80034a6:	8c3b      	ldrh	r3, [r7, #32]
 80034a8:	4413      	add	r3, r2
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	833b      	strh	r3, [r7, #24]
        ty = y - iy;
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	8bfb      	ldrh	r3, [r7, #30]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	82fb      	strh	r3, [r7, #22]
        ili9341_draw_line(lcd, color, tx, ty, tx, ty + 2 * iy + delta);
 80034b8:	8bfb      	ldrh	r3, [r7, #30]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	8afb      	ldrh	r3, [r7, #22]
 80034c0:	4413      	add	r3, r2
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80034c6:	4413      	add	r3, r2
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	b21b      	sxth	r3, r3
 80034cc:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80034d0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80034d4:	8979      	ldrh	r1, [r7, #10]
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	4603      	mov	r3, r0
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff fa81 	bl	80029e8 <ili9341_draw_line>
      }
      if (corners & 2) {
 80034e6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d020      	beq.n	8003534 <ili9341_fill_quarter_circle+0x13c>
        tx = x - ix;
 80034f2:	893a      	ldrh	r2, [r7, #8]
 80034f4:	8c3b      	ldrh	r3, [r7, #32]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	833b      	strh	r3, [r7, #24]
        ty = y - iy;
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	8bfb      	ldrh	r3, [r7, #30]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	b29b      	uxth	r3, r3
 8003504:	82fb      	strh	r3, [r7, #22]
        ili9341_draw_line(lcd, color, tx, ty, tx, ty + 2 * iy + delta);
 8003506:	8bfb      	ldrh	r3, [r7, #30]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	8afb      	ldrh	r3, [r7, #22]
 800350e:	4413      	add	r3, r2
 8003510:	b29a      	uxth	r2, r3
 8003512:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003514:	4413      	add	r3, r2
 8003516:	b29b      	uxth	r3, r3
 8003518:	b21b      	sxth	r3, r3
 800351a:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 800351e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003522:	8979      	ldrh	r1, [r7, #10]
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	4603      	mov	r3, r0
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f7ff fa5a 	bl	80029e8 <ili9341_draw_line>
      }
    }

    if (iy != py) {
 8003534:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003538:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800353c:	429a      	cmp	r2, r3
 800353e:	d04f      	beq.n	80035e0 <ili9341_fill_quarter_circle+0x1e8>
      if (corners & 1) {
 8003540:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d020      	beq.n	800358e <ili9341_fill_quarter_circle+0x196>
        tx = x + py;
 800354c:	893a      	ldrh	r2, [r7, #8]
 800354e:	8b7b      	ldrh	r3, [r7, #26]
 8003550:	4413      	add	r3, r2
 8003552:	b29b      	uxth	r3, r3
 8003554:	833b      	strh	r3, [r7, #24]
        ty = y - px;
 8003556:	88fa      	ldrh	r2, [r7, #6]
 8003558:	8bbb      	ldrh	r3, [r7, #28]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	b29b      	uxth	r3, r3
 800355e:	82fb      	strh	r3, [r7, #22]
        ili9341_draw_line(lcd, color, tx, ty, tx, ty + 2 * px + delta);
 8003560:	8bbb      	ldrh	r3, [r7, #28]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	8afb      	ldrh	r3, [r7, #22]
 8003568:	4413      	add	r3, r2
 800356a:	b29a      	uxth	r2, r3
 800356c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800356e:	4413      	add	r3, r2
 8003570:	b29b      	uxth	r3, r3
 8003572:	b21b      	sxth	r3, r3
 8003574:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8003578:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800357c:	8979      	ldrh	r1, [r7, #10]
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	4603      	mov	r3, r0
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f7ff fa2d 	bl	80029e8 <ili9341_draw_line>
      }
      if (corners & 2) {
 800358e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d020      	beq.n	80035dc <ili9341_fill_quarter_circle+0x1e4>
        tx = x - py;
 800359a:	893a      	ldrh	r2, [r7, #8]
 800359c:	8b7b      	ldrh	r3, [r7, #26]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	833b      	strh	r3, [r7, #24]
        ty = y - px;
 80035a4:	88fa      	ldrh	r2, [r7, #6]
 80035a6:	8bbb      	ldrh	r3, [r7, #28]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	82fb      	strh	r3, [r7, #22]
        ili9341_draw_line(lcd, color, tx, ty, tx, ty + 2 * px + delta);
 80035ae:	8bbb      	ldrh	r3, [r7, #28]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	8afb      	ldrh	r3, [r7, #22]
 80035b6:	4413      	add	r3, r2
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80035bc:	4413      	add	r3, r2
 80035be:	b29b      	uxth	r3, r3
 80035c0:	b21b      	sxth	r3, r3
 80035c2:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80035c6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80035ca:	8979      	ldrh	r1, [r7, #10]
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	4603      	mov	r3, r0
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7ff fa06 	bl	80029e8 <ili9341_draw_line>
      }
      py = iy;
 80035dc:	8bfb      	ldrh	r3, [r7, #30]
 80035de:	837b      	strh	r3, [r7, #26]
    }

    px = ix;
 80035e0:	8c3b      	ldrh	r3, [r7, #32]
 80035e2:	83bb      	strh	r3, [r7, #28]
  while (ix < iy) {
 80035e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80035e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	f6ff af2b 	blt.w	8003448 <ili9341_fill_quarter_circle+0x50>
  }
}
 80035f2:	bf00      	nop
 80035f4:	bf00      	nop
 80035f6:	3728      	adds	r7, #40	@ 0x28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <cpp_main>:
ILI9341Display display;

/** @brief main function of the game.
  * @param [in] handles A pointer to a structure with peripheral handles from the HAL.
  */
 void cpp_main(peripheral_handles *handles) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b09c      	sub	sp, #112	@ 0x70
 8003600:	af02      	add	r7, sp, #8
 8003602:	6078      	str	r0, [r7, #4]
	 display.setup(handles->hspi_tft);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	4619      	mov	r1, r3
 800360a:	4847      	ldr	r0, [pc, #284]	@ (8003728 <cpp_main+0x12c>)
 800360c:	f7fd fde0 	bl	80011d0 <_ZN7ELE331214ILI9341Display5setupEP19__SPI_HandleTypeDef>
	 display.clearScreen();
 8003610:	4845      	ldr	r0, [pc, #276]	@ (8003728 <cpp_main+0x12c>)
 8003612:	f7fd fe09 	bl	8001228 <_ZN7ELE331214ILI9341Display11clearScreenEv>
 8003616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800361a:	667b      	str	r3, [r7, #100]	@ 0x64
     display.drawString(50,50, "PolySnake");
 800361c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003620:	f107 030c 	add.w	r3, r7, #12
 8003624:	4941      	ldr	r1, [pc, #260]	@ (800372c <cpp_main+0x130>)
 8003626:	4618      	mov	r0, r3
 8003628:	f008 fb48 	bl	800bcbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800362c:	f107 030c 	add.w	r3, r7, #12
 8003630:	220f      	movs	r2, #15
 8003632:	9200      	str	r2, [sp, #0]
 8003634:	2232      	movs	r2, #50	@ 0x32
 8003636:	2132      	movs	r1, #50	@ 0x32
 8003638:	483b      	ldr	r0, [pc, #236]	@ (8003728 <cpp_main+0x12c>)
 800363a:	f7fd ff85 	bl	8001548 <_ZN7ELE331214ILI9341Display10drawStringEttNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5ColorE>
 800363e:	f107 030c 	add.w	r3, r7, #12
 8003642:	4618      	mov	r0, r3
 8003644:	f008 fb16 	bl	800bc74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8003648:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800364c:	4618      	mov	r0, r3
 800364e:	f000 f8bd 	bl	80037cc <_ZNSt15__new_allocatorIcED1Ev>
     display.fillRect(Color::GREEN, {50, 80, 100, 100});
 8003652:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003656:	2364      	movs	r3, #100	@ 0x64
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2364      	movs	r3, #100	@ 0x64
 800365c:	2250      	movs	r2, #80	@ 0x50
 800365e:	2132      	movs	r1, #50	@ 0x32
 8003660:	f000 f866 	bl	8003730 <_ZN7ELE33124RectItEC1Etttt>
 8003664:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003668:	461a      	mov	r2, r3
 800366a:	210a      	movs	r1, #10
 800366c:	482e      	ldr	r0, [pc, #184]	@ (8003728 <cpp_main+0x12c>)
 800366e:	f7fd feb8 	bl	80013e2 <_ZN7ELE331214ILI9341Display8fillRectENS_5ColorERKNS_4RectItEE>
 8003672:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f880 	bl	800377c <_ZN7ELE33124RectItED1Ev>
     display.fillRect(Color::GREEN, {80, 100, 100, 130});
 800367c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8003680:	2382      	movs	r3, #130	@ 0x82
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2364      	movs	r3, #100	@ 0x64
 8003686:	2264      	movs	r2, #100	@ 0x64
 8003688:	2150      	movs	r1, #80	@ 0x50
 800368a:	f000 f851 	bl	8003730 <_ZN7ELE33124RectItEC1Etttt>
 800368e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003692:	461a      	mov	r2, r3
 8003694:	210a      	movs	r1, #10
 8003696:	4824      	ldr	r0, [pc, #144]	@ (8003728 <cpp_main+0x12c>)
 8003698:	f7fd fea3 	bl	80013e2 <_ZN7ELE331214ILI9341Display8fillRectENS_5ColorERKNS_4RectItEE>
 800369c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 f86b 	bl	800377c <_ZN7ELE33124RectItED1Ev>
     display.fillRect(Color::GREEN, {100, 110, 110, 130});
 80036a6:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80036aa:	2382      	movs	r3, #130	@ 0x82
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	236e      	movs	r3, #110	@ 0x6e
 80036b0:	226e      	movs	r2, #110	@ 0x6e
 80036b2:	2164      	movs	r1, #100	@ 0x64
 80036b4:	f000 f83c 	bl	8003730 <_ZN7ELE33124RectItEC1Etttt>
 80036b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80036bc:	461a      	mov	r2, r3
 80036be:	210a      	movs	r1, #10
 80036c0:	4819      	ldr	r0, [pc, #100]	@ (8003728 <cpp_main+0x12c>)
 80036c2:	f7fd fe8e 	bl	80013e2 <_ZN7ELE331214ILI9341Display8fillRectENS_5ColorERKNS_4RectItEE>
 80036c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f856 	bl	800377c <_ZN7ELE33124RectItED1Ev>
     display.fillRect(Color::YELLOW, {110, 110, 130, 130});
 80036d0:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80036d4:	2382      	movs	r3, #130	@ 0x82
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2382      	movs	r3, #130	@ 0x82
 80036da:	226e      	movs	r2, #110	@ 0x6e
 80036dc:	216e      	movs	r1, #110	@ 0x6e
 80036de:	f000 f827 	bl	8003730 <_ZN7ELE33124RectItEC1Etttt>
 80036e2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80036e6:	461a      	mov	r2, r3
 80036e8:	210e      	movs	r1, #14
 80036ea:	480f      	ldr	r0, [pc, #60]	@ (8003728 <cpp_main+0x12c>)
 80036ec:	f7fd fe79 	bl	80013e2 <_ZN7ELE331214ILI9341Display8fillRectENS_5ColorERKNS_4RectItEE>
 80036f0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f841 	bl	800377c <_ZN7ELE33124RectItED1Ev>
     display.fillRect(Color::RED, {150, 110, 170, 130});
 80036fa:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80036fe:	2382      	movs	r3, #130	@ 0x82
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	23aa      	movs	r3, #170	@ 0xaa
 8003704:	226e      	movs	r2, #110	@ 0x6e
 8003706:	2196      	movs	r1, #150	@ 0x96
 8003708:	f000 f812 	bl	8003730 <_ZN7ELE33124RectItEC1Etttt>
 800370c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003710:	461a      	mov	r2, r3
 8003712:	210c      	movs	r1, #12
 8003714:	4804      	ldr	r0, [pc, #16]	@ (8003728 <cpp_main+0x12c>)
 8003716:	f7fd fe64 	bl	80013e2 <_ZN7ELE331214ILI9341Display8fillRectENS_5ColorERKNS_4RectItEE>
 800371a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f82c 	bl	800377c <_ZN7ELE33124RectItED1Ev>
	 while(1) {
 8003724:	bf00      	nop
 8003726:	e7fd      	b.n	8003724 <cpp_main+0x128>
 8003728:	200009f0 	.word	0x200009f0
 800372c:	0800f8c4 	.word	0x0800f8c4

08003730 <_ZN7ELE33124RectItEC1Etttt>:
	Rect(T x1, T y1, T x2, T y2) : p1{x1, y1}, p2{x2, y2} {}
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	4608      	mov	r0, r1
 800373a:	4611      	mov	r1, r2
 800373c:	461a      	mov	r2, r3
 800373e:	4603      	mov	r3, r0
 8003740:	817b      	strh	r3, [r7, #10]
 8003742:	460b      	mov	r3, r1
 8003744:	813b      	strh	r3, [r7, #8]
 8003746:	4613      	mov	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
 800374a:	4a0b      	ldr	r2, [pc, #44]	@ (8003778 <_ZN7ELE33124RectItEC1Etttt+0x48>)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	3304      	adds	r3, #4
 8003754:	893a      	ldrh	r2, [r7, #8]
 8003756:	8979      	ldrh	r1, [r7, #10]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 f842 	bl	80037e2 <_ZN7ELE33125PointItEC1Ett>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3308      	adds	r3, #8
 8003762:	8b3a      	ldrh	r2, [r7, #24]
 8003764:	88f9      	ldrh	r1, [r7, #6]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 f83b 	bl	80037e2 <_ZN7ELE33125PointItEC1Ett>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	0801073c 	.word	0x0801073c

0800377c <_ZN7ELE33124RectItED1Ev>:
	virtual ~Rect() {}
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	4a08      	ldr	r2, [pc, #32]	@ (80037a8 <_ZN7ELE33124RectItED1Ev+0x2c>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3308      	adds	r3, #8
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f83c 	bl	800380c <_ZN7ELE33125PointItED1Ev>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3304      	adds	r3, #4
 8003798:	4618      	mov	r0, r3
 800379a:	f000 f837 	bl	800380c <_ZN7ELE33125PointItED1Ev>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	0801073c 	.word	0x0801073c

080037ac <_ZN7ELE33124RectItED0Ev>:
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ffe1 	bl	800377c <_ZN7ELE33124RectItED1Ev>
 80037ba:	210c      	movs	r1, #12
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f008 f9f7 	bl	800bbb0 <_ZdlPvj>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <_ZNSt15__new_allocatorIcED1Ev>:
#if __cplusplus >= 201103L
      __new_allocator& operator=(const __new_allocator&) = default;
#endif

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <_ZN7ELE33125PointItEC1Ett>:
	Point(T x, T y) : x{x}, y{y} {}
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	460b      	mov	r3, r1
 80037ec:	807b      	strh	r3, [r7, #2]
 80037ee:	4613      	mov	r3, r2
 80037f0:	803b      	strh	r3, [r7, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	887a      	ldrh	r2, [r7, #2]
 80037f6:	801a      	strh	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	883a      	ldrh	r2, [r7, #0]
 80037fc:	805a      	strh	r2, [r3, #2]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <_ZN7ELE33125PointItED1Ev>:
	~Point() {}
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <_Z41__static_initialization_and_destruction_0v>:
		 //Your infinite CPP loop
	 }
}
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
ILI9341Display display;
 8003828:	4802      	ldr	r0, [pc, #8]	@ (8003834 <_Z41__static_initialization_and_destruction_0v+0x10>)
 800382a:	f7fd fc8b 	bl	8001144 <_ZN7ELE331214ILI9341DisplayC1Ev>
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	200009f0 	.word	0x200009f0

08003838 <_Z41__static_initialization_and_destruction_1v>:
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
ILI9341Display display;
 800383c:	4802      	ldr	r0, [pc, #8]	@ (8003848 <_Z41__static_initialization_and_destruction_1v+0x10>)
 800383e:	f7fd fc99 	bl	8001174 <_ZN7ELE331214ILI9341DisplayD1Ev>
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	200009f0 	.word	0x200009f0

0800384c <_GLOBAL__sub_I_display>:
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
 8003850:	f7ff ffe8 	bl	8003824 <_Z41__static_initialization_and_destruction_0v>
 8003854:	bd80      	pop	{r7, pc}

08003856 <_GLOBAL__sub_D_display>:
 8003856:	b580      	push	{r7, lr}
 8003858:	af00      	add	r7, sp, #0
 800385a:	f7ff ffed 	bl	8003838 <_Z41__static_initialization_and_destruction_1v>
 800385e:	bd80      	pop	{r7, pc}

08003860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003860:	b5b0      	push	{r4, r5, r7, lr}
 8003862:	b08a      	sub	sp, #40	@ 0x28
 8003864:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003866:	f001 fa5f 	bl	8004d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800386a:	f000 f82b 	bl	80038c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800386e:	f000 fbed 	bl	800404c <MX_GPIO_Init>
  MX_DMA_Init();
 8003872:	f000 fb9d 	bl	8003fb0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003876:	f000 fb71 	bl	8003f5c <MX_USART2_UART_Init>
  MX_DAC_Init();
 800387a:	f000 f8e3 	bl	8003a44 <MX_DAC_Init>
  MX_TIM6_Init();
 800387e:	f000 fb0d 	bl	8003e9c <MX_TIM6_Init>
  MX_TIM2_Init();
 8003882:	f000 fa25 	bl	8003cd0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8003886:	f000 fabd 	bl	8003e04 <MX_TIM4_Init>
  MX_SPI1_Init();
 800388a:	f000 f933 	bl	8003af4 <MX_SPI1_Init>
  MX_UART5_Init();
 800388e:	f000 fb3b 	bl	8003f08 <MX_UART5_Init>
  MX_I2C3_Init();
 8003892:	f000 f901 	bl	8003a98 <MX_I2C3_Init>
  MX_ADC1_Init();
 8003896:	f000 f883 	bl	80039a0 <MX_ADC1_Init>
  MX_TIM1_Init();
 800389a:	f000 f961 	bl	8003b60 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  peripheral_handles handles = {
 800389e:	4b08      	ldr	r3, [pc, #32]	@ (80038c0 <main+0x60>)
 80038a0:	463c      	mov	r4, r7
 80038a2:	461d      	mov	r5, r3
 80038a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80038b0:	e884 0003 	stmia.w	r4, {r0, r1}
  	  .hadc = &hadc1,
  	  .gpio_keypad = GPIOC
    };

  // Run CPP main
  cpp_main(&handles);
 80038b4:	463b      	mov	r3, r7
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fea0 	bl	80035fc <cpp_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80038bc:	bf00      	nop
 80038be:	e7fd      	b.n	80038bc <main+0x5c>
 80038c0:	0800f8d0 	.word	0x0800f8d0

080038c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b094      	sub	sp, #80	@ 0x50
 80038c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038ca:	f107 031c 	add.w	r3, r7, #28
 80038ce:	2234      	movs	r2, #52	@ 0x34
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f00a f95d 	bl	800db92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038d8:	f107 0308 	add.w	r3, r7, #8
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038e8:	2300      	movs	r3, #0
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003998 <SystemClock_Config+0xd4>)
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	4a29      	ldr	r2, [pc, #164]	@ (8003998 <SystemClock_Config+0xd4>)
 80038f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80038f8:	4b27      	ldr	r3, [pc, #156]	@ (8003998 <SystemClock_Config+0xd4>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003900:	607b      	str	r3, [r7, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003904:	2300      	movs	r3, #0
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	4b24      	ldr	r3, [pc, #144]	@ (800399c <SystemClock_Config+0xd8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003910:	4a22      	ldr	r2, [pc, #136]	@ (800399c <SystemClock_Config+0xd8>)
 8003912:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b20      	ldr	r3, [pc, #128]	@ (800399c <SystemClock_Config+0xd8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003924:	2302      	movs	r3, #2
 8003926:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003928:	2301      	movs	r3, #1
 800392a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800392c:	2310      	movs	r3, #16
 800392e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003930:	2302      	movs	r3, #2
 8003932:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003934:	2300      	movs	r3, #0
 8003936:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003938:	2310      	movs	r3, #16
 800393a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800393c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003940:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003942:	2304      	movs	r3, #4
 8003944:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003946:	2302      	movs	r3, #2
 8003948:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800394a:	2302      	movs	r3, #2
 800394c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800394e:	f107 031c 	add.w	r3, r7, #28
 8003952:	4618      	mov	r0, r3
 8003954:	f004 fdde 	bl	8008514 <HAL_RCC_OscConfig>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800395e:	f000 fc23 	bl	80041a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003962:	230f      	movs	r3, #15
 8003964:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003966:	2302      	movs	r3, #2
 8003968:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800396e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003974:	2300      	movs	r3, #0
 8003976:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003978:	f107 0308 	add.w	r3, r7, #8
 800397c:	2102      	movs	r1, #2
 800397e:	4618      	mov	r0, r3
 8003980:	f004 fa7e 	bl	8007e80 <HAL_RCC_ClockConfig>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800398a:	f000 fc0d 	bl	80041a8 <Error_Handler>
  }
}
 800398e:	bf00      	nop
 8003990:	3750      	adds	r7, #80	@ 0x50
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800
 800399c:	40007000 	.word	0x40007000

080039a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80039a6:	463b      	mov	r3, r7
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80039b2:	4b21      	ldr	r3, [pc, #132]	@ (8003a38 <MX_ADC1_Init+0x98>)
 80039b4:	4a21      	ldr	r2, [pc, #132]	@ (8003a3c <MX_ADC1_Init+0x9c>)
 80039b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80039b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a38 <MX_ADC1_Init+0x98>)
 80039ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80039be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80039c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a38 <MX_ADC1_Init+0x98>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80039c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a38 <MX_ADC1_Init+0x98>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80039cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a38 <MX_ADC1_Init+0x98>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80039d2:	4b19      	ldr	r3, [pc, #100]	@ (8003a38 <MX_ADC1_Init+0x98>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80039da:	4b17      	ldr	r3, [pc, #92]	@ (8003a38 <MX_ADC1_Init+0x98>)
 80039dc:	2200      	movs	r2, #0
 80039de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039e0:	4b15      	ldr	r3, [pc, #84]	@ (8003a38 <MX_ADC1_Init+0x98>)
 80039e2:	4a17      	ldr	r2, [pc, #92]	@ (8003a40 <MX_ADC1_Init+0xa0>)
 80039e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039e6:	4b14      	ldr	r3, [pc, #80]	@ (8003a38 <MX_ADC1_Init+0x98>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80039ec:	4b12      	ldr	r3, [pc, #72]	@ (8003a38 <MX_ADC1_Init+0x98>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80039f2:	4b11      	ldr	r3, [pc, #68]	@ (8003a38 <MX_ADC1_Init+0x98>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80039fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003a38 <MX_ADC1_Init+0x98>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a00:	480d      	ldr	r0, [pc, #52]	@ (8003a38 <MX_ADC1_Init+0x98>)
 8003a02:	f001 fa27 	bl	8004e54 <HAL_ADC_Init>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003a0c:	f000 fbcc 	bl	80041a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003a10:	2308      	movs	r3, #8
 8003a12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003a14:	2301      	movs	r3, #1
 8003a16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4805      	ldr	r0, [pc, #20]	@ (8003a38 <MX_ADC1_Init+0x98>)
 8003a22:	f001 fa5b 	bl	8004edc <HAL_ADC_ConfigChannel>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003a2c:	f000 fbbc 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003a30:	bf00      	nop
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20000a00 	.word	0x20000a00
 8003a3c:	40012000 	.word	0x40012000
 8003a40:	0f000001 	.word	0x0f000001

08003a44 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003a4a:	463b      	mov	r3, r7
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003a52:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <MX_DAC_Init+0x4c>)
 8003a54:	4a0f      	ldr	r2, [pc, #60]	@ (8003a94 <MX_DAC_Init+0x50>)
 8003a56:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003a58:	480d      	ldr	r0, [pc, #52]	@ (8003a90 <MX_DAC_Init+0x4c>)
 8003a5a:	f001 fd85 	bl	8005568 <HAL_DAC_Init>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003a64:	f000 fba0 	bl	80041a8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8003a68:	232c      	movs	r3, #44	@ 0x2c
 8003a6a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003a70:	463b      	mov	r3, r7
 8003a72:	2200      	movs	r2, #0
 8003a74:	4619      	mov	r1, r3
 8003a76:	4806      	ldr	r0, [pc, #24]	@ (8003a90 <MX_DAC_Init+0x4c>)
 8003a78:	f001 fd98 	bl	80055ac <HAL_DAC_ConfigChannel>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003a82:	f000 fb91 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000a48 	.word	0x20000a48
 8003a94:	40007400 	.word	0x40007400

08003a98 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003a9c:	4b12      	ldr	r3, [pc, #72]	@ (8003ae8 <MX_I2C3_Init+0x50>)
 8003a9e:	4a13      	ldr	r2, [pc, #76]	@ (8003aec <MX_I2C3_Init+0x54>)
 8003aa0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003aa2:	4b11      	ldr	r3, [pc, #68]	@ (8003ae8 <MX_I2C3_Init+0x50>)
 8003aa4:	4a12      	ldr	r2, [pc, #72]	@ (8003af0 <MX_I2C3_Init+0x58>)
 8003aa6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae8 <MX_I2C3_Init+0x50>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003aae:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae8 <MX_I2C3_Init+0x50>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <MX_I2C3_Init+0x50>)
 8003ab6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003aba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003abc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae8 <MX_I2C3_Init+0x50>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003ac2:	4b09      	ldr	r3, [pc, #36]	@ (8003ae8 <MX_I2C3_Init+0x50>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ac8:	4b07      	ldr	r3, [pc, #28]	@ (8003ae8 <MX_I2C3_Init+0x50>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ace:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <MX_I2C3_Init+0x50>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003ad4:	4804      	ldr	r0, [pc, #16]	@ (8003ae8 <MX_I2C3_Init+0x50>)
 8003ad6:	f002 fb81 	bl	80061dc <HAL_I2C_Init>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003ae0:	f000 fb62 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003ae4:	bf00      	nop
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000abc 	.word	0x20000abc
 8003aec:	40005c00 	.word	0x40005c00
 8003af0:	000186a0 	.word	0x000186a0

08003af4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003af8:	4b17      	ldr	r3, [pc, #92]	@ (8003b58 <MX_SPI1_Init+0x64>)
 8003afa:	4a18      	ldr	r2, [pc, #96]	@ (8003b5c <MX_SPI1_Init+0x68>)
 8003afc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003afe:	4b16      	ldr	r3, [pc, #88]	@ (8003b58 <MX_SPI1_Init+0x64>)
 8003b00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b06:	4b14      	ldr	r3, [pc, #80]	@ (8003b58 <MX_SPI1_Init+0x64>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b0c:	4b12      	ldr	r3, [pc, #72]	@ (8003b58 <MX_SPI1_Init+0x64>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b12:	4b11      	ldr	r3, [pc, #68]	@ (8003b58 <MX_SPI1_Init+0x64>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b18:	4b0f      	ldr	r3, [pc, #60]	@ (8003b58 <MX_SPI1_Init+0x64>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b58 <MX_SPI1_Init+0x64>)
 8003b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b26:	4b0c      	ldr	r3, [pc, #48]	@ (8003b58 <MX_SPI1_Init+0x64>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b58 <MX_SPI1_Init+0x64>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b32:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <MX_SPI1_Init+0x64>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b38:	4b07      	ldr	r3, [pc, #28]	@ (8003b58 <MX_SPI1_Init+0x64>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003b3e:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <MX_SPI1_Init+0x64>)
 8003b40:	220a      	movs	r2, #10
 8003b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b44:	4804      	ldr	r0, [pc, #16]	@ (8003b58 <MX_SPI1_Init+0x64>)
 8003b46:	f004 ff83 	bl	8008a50 <HAL_SPI_Init>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003b50:	f000 fb2a 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b54:	bf00      	nop
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20000b10 	.word	0x20000b10
 8003b5c:	40013000 	.word	0x40013000

08003b60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b096      	sub	sp, #88	@ 0x58
 8003b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b66:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	605a      	str	r2, [r3, #4]
 8003b70:	609a      	str	r2, [r3, #8]
 8003b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	605a      	str	r2, [r3, #4]
 8003b88:	609a      	str	r2, [r3, #8]
 8003b8a:	60da      	str	r2, [r3, #12]
 8003b8c:	611a      	str	r2, [r3, #16]
 8003b8e:	615a      	str	r2, [r3, #20]
 8003b90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b92:	1d3b      	adds	r3, r7, #4
 8003b94:	2220      	movs	r2, #32
 8003b96:	2100      	movs	r1, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f009 fffa 	bl	800db92 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8003ccc <MX_TIM1_Init+0x16c>)
 8003ba2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003ba4:	4b48      	ldr	r3, [pc, #288]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003baa:	4b47      	ldr	r3, [pc, #284]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003bb0:	4b45      	ldr	r3, [pc, #276]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003bb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb8:	4b43      	ldr	r3, [pc, #268]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003bbe:	4b42      	ldr	r3, [pc, #264]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bc4:	4b40      	ldr	r3, [pc, #256]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003bc6:	2280      	movs	r2, #128	@ 0x80
 8003bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003bca:	483f      	ldr	r0, [pc, #252]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003bcc:	f005 ff78 	bl	8009ac0 <HAL_TIM_Base_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003bd6:	f000 fae7 	bl	80041a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bde:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003be0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003be4:	4619      	mov	r1, r3
 8003be6:	4838      	ldr	r0, [pc, #224]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003be8:	f006 faba 	bl	800a160 <HAL_TIM_ConfigClockSource>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003bf2:	f000 fad9 	bl	80041a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003bf6:	4834      	ldr	r0, [pc, #208]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003bf8:	f005 ffb1 	bl	8009b5e <HAL_TIM_PWM_Init>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003c02:	f000 fad1 	bl	80041a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003c12:	4619      	mov	r1, r3
 8003c14:	482c      	ldr	r0, [pc, #176]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003c16:	f006 ffb7 	bl	800ab88 <HAL_TIMEx_MasterConfigSynchronization>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003c20:	f000 fac2 	bl	80041a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c24:	2360      	movs	r3, #96	@ 0x60
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c30:	2300      	movs	r3, #0
 8003c32:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c34:	2300      	movs	r3, #0
 8003c36:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c44:	2204      	movs	r2, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	481f      	ldr	r0, [pc, #124]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003c4a:	f006 f9c7 	bl	8009fdc <HAL_TIM_PWM_ConfigChannel>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003c54:	f000 faa8 	bl	80041a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4819      	ldr	r0, [pc, #100]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003c62:	f006 f9bb 	bl	8009fdc <HAL_TIM_PWM_ConfigChannel>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003c6c:	f000 fa9c 	bl	80041a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c74:	220c      	movs	r2, #12
 8003c76:	4619      	mov	r1, r3
 8003c78:	4813      	ldr	r0, [pc, #76]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003c7a:	f006 f9af 	bl	8009fdc <HAL_TIM_PWM_ConfigChannel>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003c84:	f000 fa90 	bl	80041a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ca0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ca6:	1d3b      	adds	r3, r7, #4
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4807      	ldr	r0, [pc, #28]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003cac:	f006 ffe8 	bl	800ac80 <HAL_TIMEx_ConfigBreakDeadTime>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8003cb6:	f000 fa77 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003cba:	4803      	ldr	r0, [pc, #12]	@ (8003cc8 <MX_TIM1_Init+0x168>)
 8003cbc:	f000 fd20 	bl	8004700 <HAL_TIM_MspPostInit>

}
 8003cc0:	bf00      	nop
 8003cc2:	3758      	adds	r7, #88	@ 0x58
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000c28 	.word	0x20000c28
 8003ccc:	40010000 	.word	0x40010000

08003cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b092      	sub	sp, #72	@ 0x48
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cd6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	605a      	str	r2, [r3, #4]
 8003ce0:	609a      	str	r2, [r3, #8]
 8003ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ce4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003cee:	f107 0320 	add.w	r3, r7, #32
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	605a      	str	r2, [r3, #4]
 8003cf8:	609a      	str	r2, [r3, #8]
 8003cfa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cfc:	1d3b      	adds	r3, r7, #4
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	605a      	str	r2, [r3, #4]
 8003d04:	609a      	str	r2, [r3, #8]
 8003d06:	60da      	str	r2, [r3, #12]
 8003d08:	611a      	str	r2, [r3, #16]
 8003d0a:	615a      	str	r2, [r3, #20]
 8003d0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8003dfc <MX_TIM2_Init+0x12c>)
 8003d10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003d14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8003d16:	4b39      	ldr	r3, [pc, #228]	@ (8003dfc <MX_TIM2_Init+0x12c>)
 8003d18:	2253      	movs	r2, #83	@ 0x53
 8003d1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d1c:	4b37      	ldr	r3, [pc, #220]	@ (8003dfc <MX_TIM2_Init+0x12c>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199999;
 8003d22:	4b36      	ldr	r3, [pc, #216]	@ (8003dfc <MX_TIM2_Init+0x12c>)
 8003d24:	4a36      	ldr	r2, [pc, #216]	@ (8003e00 <MX_TIM2_Init+0x130>)
 8003d26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d28:	4b34      	ldr	r3, [pc, #208]	@ (8003dfc <MX_TIM2_Init+0x12c>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d2e:	4b33      	ldr	r3, [pc, #204]	@ (8003dfc <MX_TIM2_Init+0x12c>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d34:	4831      	ldr	r0, [pc, #196]	@ (8003dfc <MX_TIM2_Init+0x12c>)
 8003d36:	f005 fec3 	bl	8009ac0 <HAL_TIM_Base_Init>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003d40:	f000 fa32 	bl	80041a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d48:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003d4e:	4619      	mov	r1, r3
 8003d50:	482a      	ldr	r0, [pc, #168]	@ (8003dfc <MX_TIM2_Init+0x12c>)
 8003d52:	f006 fa05 	bl	800a160 <HAL_TIM_ConfigClockSource>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003d5c:	f000 fa24 	bl	80041a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003d60:	4826      	ldr	r0, [pc, #152]	@ (8003dfc <MX_TIM2_Init+0x12c>)
 8003d62:	f005 ff55 	bl	8009c10 <HAL_TIM_IC_Init>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003d6c:	f000 fa1c 	bl	80041a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003d70:	4822      	ldr	r0, [pc, #136]	@ (8003dfc <MX_TIM2_Init+0x12c>)
 8003d72:	f005 fef4 	bl	8009b5e <HAL_TIM_PWM_Init>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8003d7c:	f000 fa14 	bl	80041a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d80:	2300      	movs	r3, #0
 8003d82:	633b      	str	r3, [r7, #48]	@ 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	481b      	ldr	r0, [pc, #108]	@ (8003dfc <MX_TIM2_Init+0x12c>)
 8003d90:	f006 fefa 	bl	800ab88 <HAL_TIMEx_MasterConfigSynchronization>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8003d9a:	f000 fa05 	bl	80041a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003d9e:	230a      	movs	r3, #10
 8003da0:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003da2:	2301      	movs	r3, #1
 8003da4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003da6:	2300      	movs	r3, #0
 8003da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigIC.ICFilter = 0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003dae:	f107 0320 	add.w	r3, r7, #32
 8003db2:	2200      	movs	r2, #0
 8003db4:	4619      	mov	r1, r3
 8003db6:	4811      	ldr	r0, [pc, #68]	@ (8003dfc <MX_TIM2_Init+0x12c>)
 8003db8:	f006 f873 	bl	8009ea2 <HAL_TIM_IC_ConfigChannel>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8003dc2:	f000 f9f1 	bl	80041a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dc6:	2360      	movs	r3, #96	@ 0x60
 8003dc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8003dca:	230a      	movs	r3, #10
 8003dcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	2204      	movs	r2, #4
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4807      	ldr	r0, [pc, #28]	@ (8003dfc <MX_TIM2_Init+0x12c>)
 8003dde:	f006 f8fd 	bl	8009fdc <HAL_TIM_PWM_ConfigChannel>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8003de8:	f000 f9de 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003dec:	4803      	ldr	r0, [pc, #12]	@ (8003dfc <MX_TIM2_Init+0x12c>)
 8003dee:	f000 fc87 	bl	8004700 <HAL_TIM_MspPostInit>

}
 8003df2:	bf00      	nop
 8003df4:	3748      	adds	r7, #72	@ 0x48
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000c70 	.word	0x20000c70
 8003e00:	00030d3f 	.word	0x00030d3f

08003e04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e0a:	f107 0308 	add.w	r3, r7, #8
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	605a      	str	r2, [r3, #4]
 8003e14:	609a      	str	r2, [r3, #8]
 8003e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e18:	463b      	mov	r3, r7
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003e20:	4b1c      	ldr	r3, [pc, #112]	@ (8003e94 <MX_TIM4_Init+0x90>)
 8003e22:	4a1d      	ldr	r2, [pc, #116]	@ (8003e98 <MX_TIM4_Init+0x94>)
 8003e24:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8003e26:	4b1b      	ldr	r3, [pc, #108]	@ (8003e94 <MX_TIM4_Init+0x90>)
 8003e28:	2253      	movs	r2, #83	@ 0x53
 8003e2a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e2c:	4b19      	ldr	r3, [pc, #100]	@ (8003e94 <MX_TIM4_Init+0x90>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24;
 8003e32:	4b18      	ldr	r3, [pc, #96]	@ (8003e94 <MX_TIM4_Init+0x90>)
 8003e34:	2218      	movs	r2, #24
 8003e36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e38:	4b16      	ldr	r3, [pc, #88]	@ (8003e94 <MX_TIM4_Init+0x90>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e3e:	4b15      	ldr	r3, [pc, #84]	@ (8003e94 <MX_TIM4_Init+0x90>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003e44:	4813      	ldr	r0, [pc, #76]	@ (8003e94 <MX_TIM4_Init+0x90>)
 8003e46:	f005 fe3b 	bl	8009ac0 <HAL_TIM_Base_Init>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8003e50:	f000 f9aa 	bl	80041a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003e5a:	f107 0308 	add.w	r3, r7, #8
 8003e5e:	4619      	mov	r1, r3
 8003e60:	480c      	ldr	r0, [pc, #48]	@ (8003e94 <MX_TIM4_Init+0x90>)
 8003e62:	f006 f97d 	bl	800a160 <HAL_TIM_ConfigClockSource>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8003e6c:	f000 f99c 	bl	80041a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003e70:	2320      	movs	r3, #32
 8003e72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003e78:	463b      	mov	r3, r7
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4805      	ldr	r0, [pc, #20]	@ (8003e94 <MX_TIM4_Init+0x90>)
 8003e7e:	f006 fe83 	bl	800ab88 <HAL_TIMEx_MasterConfigSynchronization>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8003e88:	f000 f98e 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003e8c:	bf00      	nop
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20000cb8 	.word	0x20000cb8
 8003e98:	40000800 	.word	0x40000800

08003e9c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ea2:	463b      	mov	r3, r7
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003eaa:	4b15      	ldr	r3, [pc, #84]	@ (8003f00 <MX_TIM6_Init+0x64>)
 8003eac:	4a15      	ldr	r2, [pc, #84]	@ (8003f04 <MX_TIM6_Init+0x68>)
 8003eae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8003eb0:	4b13      	ldr	r3, [pc, #76]	@ (8003f00 <MX_TIM6_Init+0x64>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb6:	4b12      	ldr	r3, [pc, #72]	@ (8003f00 <MX_TIM6_Init+0x64>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003ebc:	4b10      	ldr	r3, [pc, #64]	@ (8003f00 <MX_TIM6_Init+0x64>)
 8003ebe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ec2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f00 <MX_TIM6_Init+0x64>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003eca:	480d      	ldr	r0, [pc, #52]	@ (8003f00 <MX_TIM6_Init+0x64>)
 8003ecc:	f005 fdf8 	bl	8009ac0 <HAL_TIM_Base_Init>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003ed6:	f000 f967 	bl	80041a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eda:	2300      	movs	r3, #0
 8003edc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003ee2:	463b      	mov	r3, r7
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4806      	ldr	r0, [pc, #24]	@ (8003f00 <MX_TIM6_Init+0x64>)
 8003ee8:	f006 fe4e 	bl	800ab88 <HAL_TIMEx_MasterConfigSynchronization>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003ef2:	f000 f959 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000d00 	.word	0x20000d00
 8003f04:	40001000 	.word	0x40001000

08003f08 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003f0c:	4b11      	ldr	r3, [pc, #68]	@ (8003f54 <MX_UART5_Init+0x4c>)
 8003f0e:	4a12      	ldr	r2, [pc, #72]	@ (8003f58 <MX_UART5_Init+0x50>)
 8003f10:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003f12:	4b10      	ldr	r3, [pc, #64]	@ (8003f54 <MX_UART5_Init+0x4c>)
 8003f14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f18:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f54 <MX_UART5_Init+0x4c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003f20:	4b0c      	ldr	r3, [pc, #48]	@ (8003f54 <MX_UART5_Init+0x4c>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003f26:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <MX_UART5_Init+0x4c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003f2c:	4b09      	ldr	r3, [pc, #36]	@ (8003f54 <MX_UART5_Init+0x4c>)
 8003f2e:	220c      	movs	r2, #12
 8003f30:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f32:	4b08      	ldr	r3, [pc, #32]	@ (8003f54 <MX_UART5_Init+0x4c>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f38:	4b06      	ldr	r3, [pc, #24]	@ (8003f54 <MX_UART5_Init+0x4c>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003f3e:	4805      	ldr	r0, [pc, #20]	@ (8003f54 <MX_UART5_Init+0x4c>)
 8003f40:	f006 ff04 	bl	800ad4c <HAL_UART_Init>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003f4a:	f000 f92d 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000d48 	.word	0x20000d48
 8003f58:	40005000 	.word	0x40005000

08003f5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f60:	4b11      	ldr	r3, [pc, #68]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f62:	4a12      	ldr	r2, [pc, #72]	@ (8003fac <MX_USART2_UART_Init+0x50>)
 8003f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f66:	4b10      	ldr	r3, [pc, #64]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f74:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f80:	4b09      	ldr	r3, [pc, #36]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f82:	220c      	movs	r2, #12
 8003f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f86:	4b08      	ldr	r3, [pc, #32]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f92:	4805      	ldr	r0, [pc, #20]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f94:	f006 feda 	bl	800ad4c <HAL_UART_Init>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003f9e:	f000 f903 	bl	80041a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000d90 	.word	0x20000d90
 8003fac:	40004400 	.word	0x40004400

08003fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	4b23      	ldr	r3, [pc, #140]	@ (8004048 <MX_DMA_Init+0x98>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	4a22      	ldr	r2, [pc, #136]	@ (8004048 <MX_DMA_Init+0x98>)
 8003fc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fc6:	4b20      	ldr	r3, [pc, #128]	@ (8004048 <MX_DMA_Init+0x98>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fce:	607b      	str	r3, [r7, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8004048 <MX_DMA_Init+0x98>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	4a1b      	ldr	r2, [pc, #108]	@ (8004048 <MX_DMA_Init+0x98>)
 8003fdc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fe2:	4b19      	ldr	r3, [pc, #100]	@ (8004048 <MX_DMA_Init+0x98>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	200b      	movs	r0, #11
 8003ff4:	f001 fa7b 	bl	80054ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003ff8:	200b      	movs	r0, #11
 8003ffa:	f001 fa94 	bl	8005526 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003ffe:	2200      	movs	r2, #0
 8004000:	2100      	movs	r1, #0
 8004002:	2010      	movs	r0, #16
 8004004:	f001 fa73 	bl	80054ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004008:	2010      	movs	r0, #16
 800400a:	f001 fa8c 	bl	8005526 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800400e:	2200      	movs	r2, #0
 8004010:	2100      	movs	r1, #0
 8004012:	202f      	movs	r0, #47	@ 0x2f
 8004014:	f001 fa6b 	bl	80054ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004018:	202f      	movs	r0, #47	@ 0x2f
 800401a:	f001 fa84 	bl	8005526 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800401e:	2200      	movs	r2, #0
 8004020:	2100      	movs	r1, #0
 8004022:	2038      	movs	r0, #56	@ 0x38
 8004024:	f001 fa63 	bl	80054ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004028:	2038      	movs	r0, #56	@ 0x38
 800402a:	f001 fa7c 	bl	8005526 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800402e:	2200      	movs	r2, #0
 8004030:	2100      	movs	r1, #0
 8004032:	203b      	movs	r0, #59	@ 0x3b
 8004034:	f001 fa5b 	bl	80054ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004038:	203b      	movs	r0, #59	@ 0x3b
 800403a:	f001 fa74 	bl	8005526 <HAL_NVIC_EnableIRQ>

}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800

0800404c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	@ 0x28
 8004050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004052:	f107 0314 	add.w	r3, r7, #20
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	609a      	str	r2, [r3, #8]
 800405e:	60da      	str	r2, [r3, #12]
 8004060:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	4b4d      	ldr	r3, [pc, #308]	@ (800419c <MX_GPIO_Init+0x150>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	4a4c      	ldr	r2, [pc, #304]	@ (800419c <MX_GPIO_Init+0x150>)
 800406c:	f043 0304 	orr.w	r3, r3, #4
 8004070:	6313      	str	r3, [r2, #48]	@ 0x30
 8004072:	4b4a      	ldr	r3, [pc, #296]	@ (800419c <MX_GPIO_Init+0x150>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	4b46      	ldr	r3, [pc, #280]	@ (800419c <MX_GPIO_Init+0x150>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	4a45      	ldr	r2, [pc, #276]	@ (800419c <MX_GPIO_Init+0x150>)
 8004088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800408c:	6313      	str	r3, [r2, #48]	@ 0x30
 800408e:	4b43      	ldr	r3, [pc, #268]	@ (800419c <MX_GPIO_Init+0x150>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	4b3f      	ldr	r3, [pc, #252]	@ (800419c <MX_GPIO_Init+0x150>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	4a3e      	ldr	r2, [pc, #248]	@ (800419c <MX_GPIO_Init+0x150>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040aa:	4b3c      	ldr	r3, [pc, #240]	@ (800419c <MX_GPIO_Init+0x150>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	607b      	str	r3, [r7, #4]
 80040ba:	4b38      	ldr	r3, [pc, #224]	@ (800419c <MX_GPIO_Init+0x150>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040be:	4a37      	ldr	r2, [pc, #220]	@ (800419c <MX_GPIO_Init+0x150>)
 80040c0:	f043 0302 	orr.w	r3, r3, #2
 80040c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040c6:	4b35      	ldr	r3, [pc, #212]	@ (800419c <MX_GPIO_Init+0x150>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	4b31      	ldr	r3, [pc, #196]	@ (800419c <MX_GPIO_Init+0x150>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	4a30      	ldr	r2, [pc, #192]	@ (800419c <MX_GPIO_Init+0x150>)
 80040dc:	f043 0308 	orr.w	r3, r3, #8
 80040e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040e2:	4b2e      	ldr	r3, [pc, #184]	@ (800419c <MX_GPIO_Init+0x150>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW1_Pin|ROW2_Pin|ROW3_Pin|TFT_DC_Pin
 80040ee:	2200      	movs	r2, #0
 80040f0:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 80040f4:	482a      	ldr	r0, [pc, #168]	@ (80041a0 <MX_GPIO_Init+0x154>)
 80040f6:	f002 f857 	bl	80061a8 <HAL_GPIO_WritePin>
                          |ROW4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Void_Display_Reset_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 80040fa:	2200      	movs	r2, #0
 80040fc:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8004100:	4828      	ldr	r0, [pc, #160]	@ (80041a4 <MX_GPIO_Init+0x158>)
 8004102:	f002 f851 	bl	80061a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004106:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800410a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800410c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004116:	f107 0314 	add.w	r3, r7, #20
 800411a:	4619      	mov	r1, r3
 800411c:	4820      	ldr	r0, [pc, #128]	@ (80041a0 <MX_GPIO_Init+0x154>)
 800411e:	f001 feaf 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin;
 8004122:	230f      	movs	r3, #15
 8004124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004126:	2300      	movs	r3, #0
 8004128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800412a:	2301      	movs	r3, #1
 800412c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800412e:	f107 0314 	add.w	r3, r7, #20
 8004132:	4619      	mov	r1, r3
 8004134:	481a      	ldr	r0, [pc, #104]	@ (80041a0 <MX_GPIO_Init+0x154>)
 8004136:	f001 fea3 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin;
 800413a:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 800413e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004140:	2311      	movs	r3, #17
 8004142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004144:	2300      	movs	r3, #0
 8004146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004148:	2300      	movs	r3, #0
 800414a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800414c:	f107 0314 	add.w	r3, r7, #20
 8004150:	4619      	mov	r1, r3
 8004152:	4813      	ldr	r0, [pc, #76]	@ (80041a0 <MX_GPIO_Init+0x154>)
 8004154:	f001 fe94 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : Void_Display_Reset_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = Void_Display_Reset_Pin|TFT_CS_Pin;
 8004158:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800415c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800415e:	2301      	movs	r3, #1
 8004160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004166:	2300      	movs	r3, #0
 8004168:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800416a:	f107 0314 	add.w	r3, r7, #20
 800416e:	4619      	mov	r1, r3
 8004170:	480c      	ldr	r0, [pc, #48]	@ (80041a4 <MX_GPIO_Init+0x158>)
 8004172:	f001 fe85 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin;
 8004176:	2380      	movs	r3, #128	@ 0x80
 8004178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800417a:	2301      	movs	r3, #1
 800417c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004182:	2300      	movs	r3, #0
 8004184:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_DC_GPIO_Port, &GPIO_InitStruct);
 8004186:	f107 0314 	add.w	r3, r7, #20
 800418a:	4619      	mov	r1, r3
 800418c:	4804      	ldr	r0, [pc, #16]	@ (80041a0 <MX_GPIO_Init+0x154>)
 800418e:	f001 fe77 	bl	8005e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004192:	bf00      	nop
 8004194:	3728      	adds	r7, #40	@ 0x28
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40023800 	.word	0x40023800
 80041a0:	40020800 	.word	0x40020800
 80041a4:	40020400 	.word	0x40020400

080041a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041ac:	b672      	cpsid	i
}
 80041ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041b0:	bf00      	nop
 80041b2:	e7fd      	b.n	80041b0 <Error_Handler+0x8>

080041b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	607b      	str	r3, [r7, #4]
 80041be:	4b10      	ldr	r3, [pc, #64]	@ (8004200 <HAL_MspInit+0x4c>)
 80041c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c2:	4a0f      	ldr	r2, [pc, #60]	@ (8004200 <HAL_MspInit+0x4c>)
 80041c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80041ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004200 <HAL_MspInit+0x4c>)
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041d2:	607b      	str	r3, [r7, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	2300      	movs	r3, #0
 80041d8:	603b      	str	r3, [r7, #0]
 80041da:	4b09      	ldr	r3, [pc, #36]	@ (8004200 <HAL_MspInit+0x4c>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	4a08      	ldr	r2, [pc, #32]	@ (8004200 <HAL_MspInit+0x4c>)
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041e6:	4b06      	ldr	r3, [pc, #24]	@ (8004200 <HAL_MspInit+0x4c>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80041f2:	2007      	movs	r0, #7
 80041f4:	f001 f970 	bl	80054d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40023800 	.word	0x40023800

08004204 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	@ 0x28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420c:	f107 0314 	add.w	r3, r7, #20
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	60da      	str	r2, [r3, #12]
 800421a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a17      	ldr	r2, [pc, #92]	@ (8004280 <HAL_ADC_MspInit+0x7c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d127      	bne.n	8004276 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	4b16      	ldr	r3, [pc, #88]	@ (8004284 <HAL_ADC_MspInit+0x80>)
 800422c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422e:	4a15      	ldr	r2, [pc, #84]	@ (8004284 <HAL_ADC_MspInit+0x80>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004234:	6453      	str	r3, [r2, #68]	@ 0x44
 8004236:	4b13      	ldr	r3, [pc, #76]	@ (8004284 <HAL_ADC_MspInit+0x80>)
 8004238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	4b0f      	ldr	r3, [pc, #60]	@ (8004284 <HAL_ADC_MspInit+0x80>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424a:	4a0e      	ldr	r2, [pc, #56]	@ (8004284 <HAL_ADC_MspInit+0x80>)
 800424c:	f043 0302 	orr.w	r3, r3, #2
 8004250:	6313      	str	r3, [r2, #48]	@ 0x30
 8004252:	4b0c      	ldr	r3, [pc, #48]	@ (8004284 <HAL_ADC_MspInit+0x80>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 800425e:	2301      	movs	r3, #1
 8004260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004262:	2303      	movs	r3, #3
 8004264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 800426a:	f107 0314 	add.w	r3, r7, #20
 800426e:	4619      	mov	r1, r3
 8004270:	4805      	ldr	r0, [pc, #20]	@ (8004288 <HAL_ADC_MspInit+0x84>)
 8004272:	f001 fe05 	bl	8005e80 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004276:	bf00      	nop
 8004278:	3728      	adds	r7, #40	@ 0x28
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40012000 	.word	0x40012000
 8004284:	40023800 	.word	0x40023800
 8004288:	40020400 	.word	0x40020400

0800428c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08a      	sub	sp, #40	@ 0x28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004294:	f107 0314 	add.w	r3, r7, #20
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	609a      	str	r2, [r3, #8]
 80042a0:	60da      	str	r2, [r3, #12]
 80042a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a30      	ldr	r2, [pc, #192]	@ (800436c <HAL_DAC_MspInit+0xe0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d159      	bne.n	8004362 <HAL_DAC_MspInit+0xd6>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004370 <HAL_DAC_MspInit+0xe4>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	4a2e      	ldr	r2, [pc, #184]	@ (8004370 <HAL_DAC_MspInit+0xe4>)
 80042b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80042be:	4b2c      	ldr	r3, [pc, #176]	@ (8004370 <HAL_DAC_MspInit+0xe4>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	4b28      	ldr	r3, [pc, #160]	@ (8004370 <HAL_DAC_MspInit+0xe4>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d2:	4a27      	ldr	r2, [pc, #156]	@ (8004370 <HAL_DAC_MspInit+0xe4>)
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042da:	4b25      	ldr	r3, [pc, #148]	@ (8004370 <HAL_DAC_MspInit+0xe4>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80042e6:	2310      	movs	r3, #16
 80042e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042ea:	2303      	movs	r3, #3
 80042ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f2:	f107 0314 	add.w	r3, r7, #20
 80042f6:	4619      	mov	r1, r3
 80042f8:	481e      	ldr	r0, [pc, #120]	@ (8004374 <HAL_DAC_MspInit+0xe8>)
 80042fa:	f001 fdc1 	bl	8005e80 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80042fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004378 <HAL_DAC_MspInit+0xec>)
 8004300:	4a1e      	ldr	r2, [pc, #120]	@ (800437c <HAL_DAC_MspInit+0xf0>)
 8004302:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8004304:	4b1c      	ldr	r3, [pc, #112]	@ (8004378 <HAL_DAC_MspInit+0xec>)
 8004306:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800430a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800430c:	4b1a      	ldr	r3, [pc, #104]	@ (8004378 <HAL_DAC_MspInit+0xec>)
 800430e:	2240      	movs	r2, #64	@ 0x40
 8004310:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004312:	4b19      	ldr	r3, [pc, #100]	@ (8004378 <HAL_DAC_MspInit+0xec>)
 8004314:	2200      	movs	r2, #0
 8004316:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8004318:	4b17      	ldr	r3, [pc, #92]	@ (8004378 <HAL_DAC_MspInit+0xec>)
 800431a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800431e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004320:	4b15      	ldr	r3, [pc, #84]	@ (8004378 <HAL_DAC_MspInit+0xec>)
 8004322:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004326:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004328:	4b13      	ldr	r3, [pc, #76]	@ (8004378 <HAL_DAC_MspInit+0xec>)
 800432a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800432e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8004330:	4b11      	ldr	r3, [pc, #68]	@ (8004378 <HAL_DAC_MspInit+0xec>)
 8004332:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004336:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8004338:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <HAL_DAC_MspInit+0xec>)
 800433a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800433e:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004340:	4b0d      	ldr	r3, [pc, #52]	@ (8004378 <HAL_DAC_MspInit+0xec>)
 8004342:	2200      	movs	r2, #0
 8004344:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8004346:	480c      	ldr	r0, [pc, #48]	@ (8004378 <HAL_DAC_MspInit+0xec>)
 8004348:	f001 f98a 	bl	8005660 <HAL_DMA_Init>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8004352:	f7ff ff29 	bl	80041a8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a07      	ldr	r2, [pc, #28]	@ (8004378 <HAL_DAC_MspInit+0xec>)
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	4a06      	ldr	r2, [pc, #24]	@ (8004378 <HAL_DAC_MspInit+0xec>)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8004362:	bf00      	nop
 8004364:	3728      	adds	r7, #40	@ 0x28
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40007400 	.word	0x40007400
 8004370:	40023800 	.word	0x40023800
 8004374:	40020000 	.word	0x40020000
 8004378:	20000a5c 	.word	0x20000a5c
 800437c:	40026088 	.word	0x40026088

08004380 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08a      	sub	sp, #40	@ 0x28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004388:	f107 0314 	add.w	r3, r7, #20
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	609a      	str	r2, [r3, #8]
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a31      	ldr	r2, [pc, #196]	@ (8004464 <HAL_I2C_MspInit+0xe4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d15b      	bne.n	800445a <HAL_I2C_MspInit+0xda>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043a2:	2300      	movs	r3, #0
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	4b30      	ldr	r3, [pc, #192]	@ (8004468 <HAL_I2C_MspInit+0xe8>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004468 <HAL_I2C_MspInit+0xe8>)
 80043ac:	f043 0304 	orr.w	r3, r3, #4
 80043b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004468 <HAL_I2C_MspInit+0xe8>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	4b29      	ldr	r3, [pc, #164]	@ (8004468 <HAL_I2C_MspInit+0xe8>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c6:	4a28      	ldr	r2, [pc, #160]	@ (8004468 <HAL_I2C_MspInit+0xe8>)
 80043c8:	f043 0301 	orr.w	r3, r3, #1
 80043cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ce:	4b26      	ldr	r3, [pc, #152]	@ (8004468 <HAL_I2C_MspInit+0xe8>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80043da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043e0:	2312      	movs	r3, #18
 80043e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e8:	2303      	movs	r3, #3
 80043ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80043ec:	2304      	movs	r3, #4
 80043ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043f0:	f107 0314 	add.w	r3, r7, #20
 80043f4:	4619      	mov	r1, r3
 80043f6:	481d      	ldr	r0, [pc, #116]	@ (800446c <HAL_I2C_MspInit+0xec>)
 80043f8:	f001 fd42 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80043fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004402:	2312      	movs	r3, #18
 8004404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004406:	2300      	movs	r3, #0
 8004408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800440a:	2303      	movs	r3, #3
 800440c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800440e:	2304      	movs	r3, #4
 8004410:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004412:	f107 0314 	add.w	r3, r7, #20
 8004416:	4619      	mov	r1, r3
 8004418:	4815      	ldr	r0, [pc, #84]	@ (8004470 <HAL_I2C_MspInit+0xf0>)
 800441a:	f001 fd31 	bl	8005e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800441e:	2300      	movs	r3, #0
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	4b11      	ldr	r3, [pc, #68]	@ (8004468 <HAL_I2C_MspInit+0xe8>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	4a10      	ldr	r2, [pc, #64]	@ (8004468 <HAL_I2C_MspInit+0xe8>)
 8004428:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800442c:	6413      	str	r3, [r2, #64]	@ 0x40
 800442e:	4b0e      	ldr	r3, [pc, #56]	@ (8004468 <HAL_I2C_MspInit+0xe8>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	68bb      	ldr	r3, [r7, #8]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 800443a:	2200      	movs	r2, #0
 800443c:	2100      	movs	r1, #0
 800443e:	2048      	movs	r0, #72	@ 0x48
 8004440:	f001 f855 	bl	80054ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8004444:	2048      	movs	r0, #72	@ 0x48
 8004446:	f001 f86e 	bl	8005526 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 800444a:	2200      	movs	r2, #0
 800444c:	2100      	movs	r1, #0
 800444e:	2049      	movs	r0, #73	@ 0x49
 8004450:	f001 f84d 	bl	80054ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8004454:	2049      	movs	r0, #73	@ 0x49
 8004456:	f001 f866 	bl	8005526 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800445a:	bf00      	nop
 800445c:	3728      	adds	r7, #40	@ 0x28
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40005c00 	.word	0x40005c00
 8004468:	40023800 	.word	0x40023800
 800446c:	40020800 	.word	0x40020800
 8004470:	40020000 	.word	0x40020000

08004474 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	@ 0x28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800447c:	f107 0314 	add.w	r3, r7, #20
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a4c      	ldr	r2, [pc, #304]	@ (80045c4 <HAL_SPI_MspInit+0x150>)
 8004492:	4293      	cmp	r3, r2
 8004494:	f040 8092 	bne.w	80045bc <HAL_SPI_MspInit+0x148>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	4b4a      	ldr	r3, [pc, #296]	@ (80045c8 <HAL_SPI_MspInit+0x154>)
 800449e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a0:	4a49      	ldr	r2, [pc, #292]	@ (80045c8 <HAL_SPI_MspInit+0x154>)
 80044a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80044a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80044a8:	4b47      	ldr	r3, [pc, #284]	@ (80045c8 <HAL_SPI_MspInit+0x154>)
 80044aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	4b43      	ldr	r3, [pc, #268]	@ (80045c8 <HAL_SPI_MspInit+0x154>)
 80044ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044bc:	4a42      	ldr	r2, [pc, #264]	@ (80045c8 <HAL_SPI_MspInit+0x154>)
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80044c4:	4b40      	ldr	r3, [pc, #256]	@ (80045c8 <HAL_SPI_MspInit+0x154>)
 80044c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80044d0:	23e0      	movs	r3, #224	@ 0xe0
 80044d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d4:	2302      	movs	r3, #2
 80044d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044dc:	2303      	movs	r3, #3
 80044de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044e0:	2305      	movs	r3, #5
 80044e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e4:	f107 0314 	add.w	r3, r7, #20
 80044e8:	4619      	mov	r1, r3
 80044ea:	4838      	ldr	r0, [pc, #224]	@ (80045cc <HAL_SPI_MspInit+0x158>)
 80044ec:	f001 fcc8 	bl	8005e80 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80044f0:	4b37      	ldr	r3, [pc, #220]	@ (80045d0 <HAL_SPI_MspInit+0x15c>)
 80044f2:	4a38      	ldr	r2, [pc, #224]	@ (80045d4 <HAL_SPI_MspInit+0x160>)
 80044f4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80044f6:	4b36      	ldr	r3, [pc, #216]	@ (80045d0 <HAL_SPI_MspInit+0x15c>)
 80044f8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80044fc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044fe:	4b34      	ldr	r3, [pc, #208]	@ (80045d0 <HAL_SPI_MspInit+0x15c>)
 8004500:	2200      	movs	r2, #0
 8004502:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004504:	4b32      	ldr	r3, [pc, #200]	@ (80045d0 <HAL_SPI_MspInit+0x15c>)
 8004506:	2200      	movs	r2, #0
 8004508:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800450a:	4b31      	ldr	r3, [pc, #196]	@ (80045d0 <HAL_SPI_MspInit+0x15c>)
 800450c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004510:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004512:	4b2f      	ldr	r3, [pc, #188]	@ (80045d0 <HAL_SPI_MspInit+0x15c>)
 8004514:	2200      	movs	r2, #0
 8004516:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004518:	4b2d      	ldr	r3, [pc, #180]	@ (80045d0 <HAL_SPI_MspInit+0x15c>)
 800451a:	2200      	movs	r2, #0
 800451c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800451e:	4b2c      	ldr	r3, [pc, #176]	@ (80045d0 <HAL_SPI_MspInit+0x15c>)
 8004520:	2200      	movs	r2, #0
 8004522:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004524:	4b2a      	ldr	r3, [pc, #168]	@ (80045d0 <HAL_SPI_MspInit+0x15c>)
 8004526:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800452a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800452c:	4b28      	ldr	r3, [pc, #160]	@ (80045d0 <HAL_SPI_MspInit+0x15c>)
 800452e:	2200      	movs	r2, #0
 8004530:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004532:	4827      	ldr	r0, [pc, #156]	@ (80045d0 <HAL_SPI_MspInit+0x15c>)
 8004534:	f001 f894 	bl	8005660 <HAL_DMA_Init>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800453e:	f7ff fe33 	bl	80041a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a22      	ldr	r2, [pc, #136]	@ (80045d0 <HAL_SPI_MspInit+0x15c>)
 8004546:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004548:	4a21      	ldr	r2, [pc, #132]	@ (80045d0 <HAL_SPI_MspInit+0x15c>)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800454e:	4b22      	ldr	r3, [pc, #136]	@ (80045d8 <HAL_SPI_MspInit+0x164>)
 8004550:	4a22      	ldr	r2, [pc, #136]	@ (80045dc <HAL_SPI_MspInit+0x168>)
 8004552:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004554:	4b20      	ldr	r3, [pc, #128]	@ (80045d8 <HAL_SPI_MspInit+0x164>)
 8004556:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800455a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800455c:	4b1e      	ldr	r3, [pc, #120]	@ (80045d8 <HAL_SPI_MspInit+0x164>)
 800455e:	2240      	movs	r2, #64	@ 0x40
 8004560:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004562:	4b1d      	ldr	r3, [pc, #116]	@ (80045d8 <HAL_SPI_MspInit+0x164>)
 8004564:	2200      	movs	r2, #0
 8004566:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004568:	4b1b      	ldr	r3, [pc, #108]	@ (80045d8 <HAL_SPI_MspInit+0x164>)
 800456a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800456e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004570:	4b19      	ldr	r3, [pc, #100]	@ (80045d8 <HAL_SPI_MspInit+0x164>)
 8004572:	2200      	movs	r2, #0
 8004574:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004576:	4b18      	ldr	r3, [pc, #96]	@ (80045d8 <HAL_SPI_MspInit+0x164>)
 8004578:	2200      	movs	r2, #0
 800457a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800457c:	4b16      	ldr	r3, [pc, #88]	@ (80045d8 <HAL_SPI_MspInit+0x164>)
 800457e:	2200      	movs	r2, #0
 8004580:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004582:	4b15      	ldr	r3, [pc, #84]	@ (80045d8 <HAL_SPI_MspInit+0x164>)
 8004584:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004588:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800458a:	4b13      	ldr	r3, [pc, #76]	@ (80045d8 <HAL_SPI_MspInit+0x164>)
 800458c:	2200      	movs	r2, #0
 800458e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004590:	4811      	ldr	r0, [pc, #68]	@ (80045d8 <HAL_SPI_MspInit+0x164>)
 8004592:	f001 f865 	bl	8005660 <HAL_DMA_Init>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 800459c:	f7ff fe04 	bl	80041a8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a0d      	ldr	r2, [pc, #52]	@ (80045d8 <HAL_SPI_MspInit+0x164>)
 80045a4:	649a      	str	r2, [r3, #72]	@ 0x48
 80045a6:	4a0c      	ldr	r2, [pc, #48]	@ (80045d8 <HAL_SPI_MspInit+0x164>)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80045ac:	2200      	movs	r2, #0
 80045ae:	2100      	movs	r1, #0
 80045b0:	2023      	movs	r0, #35	@ 0x23
 80045b2:	f000 ff9c 	bl	80054ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80045b6:	2023      	movs	r0, #35	@ 0x23
 80045b8:	f000 ffb5 	bl	8005526 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80045bc:	bf00      	nop
 80045be:	3728      	adds	r7, #40	@ 0x28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40013000 	.word	0x40013000
 80045c8:	40023800 	.word	0x40023800
 80045cc:	40020000 	.word	0x40020000
 80045d0:	20000b68 	.word	0x20000b68
 80045d4:	40026410 	.word	0x40026410
 80045d8:	20000bc8 	.word	0x20000bc8
 80045dc:	40026458 	.word	0x40026458

080045e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08c      	sub	sp, #48	@ 0x30
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e8:	f107 031c 	add.w	r3, r7, #28
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a3b      	ldr	r2, [pc, #236]	@ (80046ec <HAL_TIM_Base_MspInit+0x10c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10e      	bne.n	8004620 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	4b3a      	ldr	r3, [pc, #232]	@ (80046f0 <HAL_TIM_Base_MspInit+0x110>)
 8004608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460a:	4a39      	ldr	r2, [pc, #228]	@ (80046f0 <HAL_TIM_Base_MspInit+0x110>)
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	6453      	str	r3, [r2, #68]	@ 0x44
 8004612:	4b37      	ldr	r3, [pc, #220]	@ (80046f0 <HAL_TIM_Base_MspInit+0x110>)
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 800461e:	e060      	b.n	80046e2 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004628:	d134      	bne.n	8004694 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	4b30      	ldr	r3, [pc, #192]	@ (80046f0 <HAL_TIM_Base_MspInit+0x110>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004632:	4a2f      	ldr	r2, [pc, #188]	@ (80046f0 <HAL_TIM_Base_MspInit+0x110>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	6413      	str	r3, [r2, #64]	@ 0x40
 800463a:	4b2d      	ldr	r3, [pc, #180]	@ (80046f0 <HAL_TIM_Base_MspInit+0x110>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	4b29      	ldr	r3, [pc, #164]	@ (80046f0 <HAL_TIM_Base_MspInit+0x110>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464e:	4a28      	ldr	r2, [pc, #160]	@ (80046f0 <HAL_TIM_Base_MspInit+0x110>)
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	6313      	str	r3, [r2, #48]	@ 0x30
 8004656:	4b26      	ldr	r3, [pc, #152]	@ (80046f0 <HAL_TIM_Base_MspInit+0x110>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_INPUT_CAPTURE_Pin;
 8004662:	2301      	movs	r3, #1
 8004664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004666:	2302      	movs	r3, #2
 8004668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466a:	2300      	movs	r3, #0
 800466c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800466e:	2300      	movs	r3, #0
 8004670:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004672:	2301      	movs	r3, #1
 8004674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ECHO_INPUT_CAPTURE_GPIO_Port, &GPIO_InitStruct);
 8004676:	f107 031c 	add.w	r3, r7, #28
 800467a:	4619      	mov	r1, r3
 800467c:	481d      	ldr	r0, [pc, #116]	@ (80046f4 <HAL_TIM_Base_MspInit+0x114>)
 800467e:	f001 fbff 	bl	8005e80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004682:	2200      	movs	r2, #0
 8004684:	2100      	movs	r1, #0
 8004686:	201c      	movs	r0, #28
 8004688:	f000 ff31 	bl	80054ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800468c:	201c      	movs	r0, #28
 800468e:	f000 ff4a 	bl	8005526 <HAL_NVIC_EnableIRQ>
}
 8004692:	e026      	b.n	80046e2 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM4)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a17      	ldr	r2, [pc, #92]	@ (80046f8 <HAL_TIM_Base_MspInit+0x118>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10e      	bne.n	80046bc <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	4b13      	ldr	r3, [pc, #76]	@ (80046f0 <HAL_TIM_Base_MspInit+0x110>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	4a12      	ldr	r2, [pc, #72]	@ (80046f0 <HAL_TIM_Base_MspInit+0x110>)
 80046a8:	f043 0304 	orr.w	r3, r3, #4
 80046ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80046ae:	4b10      	ldr	r3, [pc, #64]	@ (80046f0 <HAL_TIM_Base_MspInit+0x110>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
}
 80046ba:	e012      	b.n	80046e2 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM6)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a0e      	ldr	r2, [pc, #56]	@ (80046fc <HAL_TIM_Base_MspInit+0x11c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d10d      	bne.n	80046e2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	4b09      	ldr	r3, [pc, #36]	@ (80046f0 <HAL_TIM_Base_MspInit+0x110>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	4a08      	ldr	r2, [pc, #32]	@ (80046f0 <HAL_TIM_Base_MspInit+0x110>)
 80046d0:	f043 0310 	orr.w	r3, r3, #16
 80046d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80046d6:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <HAL_TIM_Base_MspInit+0x110>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]
}
 80046e2:	bf00      	nop
 80046e4:	3730      	adds	r7, #48	@ 0x30
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40010000 	.word	0x40010000
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40020000 	.word	0x40020000
 80046f8:	40000800 	.word	0x40000800
 80046fc:	40001000 	.word	0x40001000

08004700 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08a      	sub	sp, #40	@ 0x28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004708:	f107 0314 	add.w	r3, r7, #20
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a24      	ldr	r2, [pc, #144]	@ (80047b0 <HAL_TIM_MspPostInit+0xb0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d11f      	bne.n	8004762 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004722:	2300      	movs	r3, #0
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	4b23      	ldr	r3, [pc, #140]	@ (80047b4 <HAL_TIM_MspPostInit+0xb4>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	4a22      	ldr	r2, [pc, #136]	@ (80047b4 <HAL_TIM_MspPostInit+0xb4>)
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	6313      	str	r3, [r2, #48]	@ 0x30
 8004732:	4b20      	ldr	r3, [pc, #128]	@ (80047b4 <HAL_TIM_MspPostInit+0xb4>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 800473e:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8004742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004744:	2302      	movs	r3, #2
 8004746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004748:	2300      	movs	r3, #0
 800474a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800474c:	2300      	movs	r3, #0
 800474e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004750:	2301      	movs	r3, #1
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004754:	f107 0314 	add.w	r3, r7, #20
 8004758:	4619      	mov	r1, r3
 800475a:	4817      	ldr	r0, [pc, #92]	@ (80047b8 <HAL_TIM_MspPostInit+0xb8>)
 800475c:	f001 fb90 	bl	8005e80 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004760:	e022      	b.n	80047a8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476a:	d11d      	bne.n	80047a8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <HAL_TIM_MspPostInit+0xb4>)
 8004772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004774:	4a0f      	ldr	r2, [pc, #60]	@ (80047b4 <HAL_TIM_MspPostInit+0xb4>)
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	6313      	str	r3, [r2, #48]	@ 0x30
 800477c:	4b0d      	ldr	r3, [pc, #52]	@ (80047b4 <HAL_TIM_MspPostInit+0xb4>)
 800477e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004788:	2302      	movs	r3, #2
 800478a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478c:	2302      	movs	r3, #2
 800478e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004790:	2300      	movs	r3, #0
 8004792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004794:	2300      	movs	r3, #0
 8004796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004798:	2301      	movs	r3, #1
 800479a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800479c:	f107 0314 	add.w	r3, r7, #20
 80047a0:	4619      	mov	r1, r3
 80047a2:	4805      	ldr	r0, [pc, #20]	@ (80047b8 <HAL_TIM_MspPostInit+0xb8>)
 80047a4:	f001 fb6c 	bl	8005e80 <HAL_GPIO_Init>
}
 80047a8:	bf00      	nop
 80047aa:	3728      	adds	r7, #40	@ 0x28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40010000 	.word	0x40010000
 80047b4:	40023800 	.word	0x40023800
 80047b8:	40020000 	.word	0x40020000

080047bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08c      	sub	sp, #48	@ 0x30
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c4:	f107 031c 	add.w	r3, r7, #28
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	605a      	str	r2, [r3, #4]
 80047ce:	609a      	str	r2, [r3, #8]
 80047d0:	60da      	str	r2, [r3, #12]
 80047d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a78      	ldr	r2, [pc, #480]	@ (80049bc <HAL_UART_MspInit+0x200>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	f040 80b1 	bne.w	8004942 <HAL_UART_MspInit+0x186>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80047e0:	2300      	movs	r3, #0
 80047e2:	61bb      	str	r3, [r7, #24]
 80047e4:	4b76      	ldr	r3, [pc, #472]	@ (80049c0 <HAL_UART_MspInit+0x204>)
 80047e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e8:	4a75      	ldr	r2, [pc, #468]	@ (80049c0 <HAL_UART_MspInit+0x204>)
 80047ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80047f0:	4b73      	ldr	r3, [pc, #460]	@ (80049c0 <HAL_UART_MspInit+0x204>)
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	4b6f      	ldr	r3, [pc, #444]	@ (80049c0 <HAL_UART_MspInit+0x204>)
 8004802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004804:	4a6e      	ldr	r2, [pc, #440]	@ (80049c0 <HAL_UART_MspInit+0x204>)
 8004806:	f043 0304 	orr.w	r3, r3, #4
 800480a:	6313      	str	r3, [r2, #48]	@ 0x30
 800480c:	4b6c      	ldr	r3, [pc, #432]	@ (80049c0 <HAL_UART_MspInit+0x204>)
 800480e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004818:	2300      	movs	r3, #0
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	4b68      	ldr	r3, [pc, #416]	@ (80049c0 <HAL_UART_MspInit+0x204>)
 800481e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004820:	4a67      	ldr	r2, [pc, #412]	@ (80049c0 <HAL_UART_MspInit+0x204>)
 8004822:	f043 0308 	orr.w	r3, r3, #8
 8004826:	6313      	str	r3, [r2, #48]	@ 0x30
 8004828:	4b65      	ldr	r3, [pc, #404]	@ (80049c0 <HAL_UART_MspInit+0x204>)
 800482a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483a:	2302      	movs	r3, #2
 800483c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483e:	2300      	movs	r3, #0
 8004840:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004842:	2303      	movs	r3, #3
 8004844:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004846:	2308      	movs	r3, #8
 8004848:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800484a:	f107 031c 	add.w	r3, r7, #28
 800484e:	4619      	mov	r1, r3
 8004850:	485c      	ldr	r0, [pc, #368]	@ (80049c4 <HAL_UART_MspInit+0x208>)
 8004852:	f001 fb15 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004856:	2304      	movs	r3, #4
 8004858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800485a:	2302      	movs	r3, #2
 800485c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004862:	2303      	movs	r3, #3
 8004864:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004866:	2308      	movs	r3, #8
 8004868:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800486a:	f107 031c 	add.w	r3, r7, #28
 800486e:	4619      	mov	r1, r3
 8004870:	4855      	ldr	r0, [pc, #340]	@ (80049c8 <HAL_UART_MspInit+0x20c>)
 8004872:	f001 fb05 	bl	8005e80 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8004876:	4b55      	ldr	r3, [pc, #340]	@ (80049cc <HAL_UART_MspInit+0x210>)
 8004878:	4a55      	ldr	r2, [pc, #340]	@ (80049d0 <HAL_UART_MspInit+0x214>)
 800487a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800487c:	4b53      	ldr	r3, [pc, #332]	@ (80049cc <HAL_UART_MspInit+0x210>)
 800487e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004882:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004884:	4b51      	ldr	r3, [pc, #324]	@ (80049cc <HAL_UART_MspInit+0x210>)
 8004886:	2200      	movs	r2, #0
 8004888:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800488a:	4b50      	ldr	r3, [pc, #320]	@ (80049cc <HAL_UART_MspInit+0x210>)
 800488c:	2200      	movs	r2, #0
 800488e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004890:	4b4e      	ldr	r3, [pc, #312]	@ (80049cc <HAL_UART_MspInit+0x210>)
 8004892:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004896:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004898:	4b4c      	ldr	r3, [pc, #304]	@ (80049cc <HAL_UART_MspInit+0x210>)
 800489a:	2200      	movs	r2, #0
 800489c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800489e:	4b4b      	ldr	r3, [pc, #300]	@ (80049cc <HAL_UART_MspInit+0x210>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80048a4:	4b49      	ldr	r3, [pc, #292]	@ (80049cc <HAL_UART_MspInit+0x210>)
 80048a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048aa:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048ac:	4b47      	ldr	r3, [pc, #284]	@ (80049cc <HAL_UART_MspInit+0x210>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048b2:	4b46      	ldr	r3, [pc, #280]	@ (80049cc <HAL_UART_MspInit+0x210>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80048b8:	4844      	ldr	r0, [pc, #272]	@ (80049cc <HAL_UART_MspInit+0x210>)
 80048ba:	f000 fed1 	bl	8005660 <HAL_DMA_Init>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80048c4:	f7ff fc70 	bl	80041a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a40      	ldr	r2, [pc, #256]	@ (80049cc <HAL_UART_MspInit+0x210>)
 80048cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80048ce:	4a3f      	ldr	r2, [pc, #252]	@ (80049cc <HAL_UART_MspInit+0x210>)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80048d4:	4b3f      	ldr	r3, [pc, #252]	@ (80049d4 <HAL_UART_MspInit+0x218>)
 80048d6:	4a40      	ldr	r2, [pc, #256]	@ (80049d8 <HAL_UART_MspInit+0x21c>)
 80048d8:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80048da:	4b3e      	ldr	r3, [pc, #248]	@ (80049d4 <HAL_UART_MspInit+0x218>)
 80048dc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80048e0:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048e2:	4b3c      	ldr	r3, [pc, #240]	@ (80049d4 <HAL_UART_MspInit+0x218>)
 80048e4:	2240      	movs	r2, #64	@ 0x40
 80048e6:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048e8:	4b3a      	ldr	r3, [pc, #232]	@ (80049d4 <HAL_UART_MspInit+0x218>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048ee:	4b39      	ldr	r3, [pc, #228]	@ (80049d4 <HAL_UART_MspInit+0x218>)
 80048f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048f4:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048f6:	4b37      	ldr	r3, [pc, #220]	@ (80049d4 <HAL_UART_MspInit+0x218>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048fc:	4b35      	ldr	r3, [pc, #212]	@ (80049d4 <HAL_UART_MspInit+0x218>)
 80048fe:	2200      	movs	r2, #0
 8004900:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8004902:	4b34      	ldr	r3, [pc, #208]	@ (80049d4 <HAL_UART_MspInit+0x218>)
 8004904:	2200      	movs	r2, #0
 8004906:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004908:	4b32      	ldr	r3, [pc, #200]	@ (80049d4 <HAL_UART_MspInit+0x218>)
 800490a:	2200      	movs	r2, #0
 800490c:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800490e:	4b31      	ldr	r3, [pc, #196]	@ (80049d4 <HAL_UART_MspInit+0x218>)
 8004910:	2200      	movs	r2, #0
 8004912:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004914:	482f      	ldr	r0, [pc, #188]	@ (80049d4 <HAL_UART_MspInit+0x218>)
 8004916:	f000 fea3 	bl	8005660 <HAL_DMA_Init>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8004920:	f7ff fc42 	bl	80041a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a2b      	ldr	r2, [pc, #172]	@ (80049d4 <HAL_UART_MspInit+0x218>)
 8004928:	639a      	str	r2, [r3, #56]	@ 0x38
 800492a:	4a2a      	ldr	r2, [pc, #168]	@ (80049d4 <HAL_UART_MspInit+0x218>)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004930:	2200      	movs	r2, #0
 8004932:	2100      	movs	r1, #0
 8004934:	2035      	movs	r0, #53	@ 0x35
 8004936:	f000 fdda 	bl	80054ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800493a:	2035      	movs	r0, #53	@ 0x35
 800493c:	f000 fdf3 	bl	8005526 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8004940:	e038      	b.n	80049b4 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a25      	ldr	r2, [pc, #148]	@ (80049dc <HAL_UART_MspInit+0x220>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d133      	bne.n	80049b4 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	4b1b      	ldr	r3, [pc, #108]	@ (80049c0 <HAL_UART_MspInit+0x204>)
 8004952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004954:	4a1a      	ldr	r2, [pc, #104]	@ (80049c0 <HAL_UART_MspInit+0x204>)
 8004956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800495a:	6413      	str	r3, [r2, #64]	@ 0x40
 800495c:	4b18      	ldr	r3, [pc, #96]	@ (80049c0 <HAL_UART_MspInit+0x204>)
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004968:	2300      	movs	r3, #0
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	4b14      	ldr	r3, [pc, #80]	@ (80049c0 <HAL_UART_MspInit+0x204>)
 800496e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004970:	4a13      	ldr	r2, [pc, #76]	@ (80049c0 <HAL_UART_MspInit+0x204>)
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	6313      	str	r3, [r2, #48]	@ 0x30
 8004978:	4b11      	ldr	r3, [pc, #68]	@ (80049c0 <HAL_UART_MspInit+0x204>)
 800497a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004984:	230c      	movs	r3, #12
 8004986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004988:	2302      	movs	r3, #2
 800498a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498c:	2300      	movs	r3, #0
 800498e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004990:	2303      	movs	r3, #3
 8004992:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004994:	2307      	movs	r3, #7
 8004996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004998:	f107 031c 	add.w	r3, r7, #28
 800499c:	4619      	mov	r1, r3
 800499e:	4810      	ldr	r0, [pc, #64]	@ (80049e0 <HAL_UART_MspInit+0x224>)
 80049a0:	f001 fa6e 	bl	8005e80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80049a4:	2200      	movs	r2, #0
 80049a6:	2100      	movs	r1, #0
 80049a8:	2026      	movs	r0, #38	@ 0x26
 80049aa:	f000 fda0 	bl	80054ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80049ae:	2026      	movs	r0, #38	@ 0x26
 80049b0:	f000 fdb9 	bl	8005526 <HAL_NVIC_EnableIRQ>
}
 80049b4:	bf00      	nop
 80049b6:	3730      	adds	r7, #48	@ 0x30
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40005000 	.word	0x40005000
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40020800 	.word	0x40020800
 80049c8:	40020c00 	.word	0x40020c00
 80049cc:	20000dd8 	.word	0x20000dd8
 80049d0:	40026010 	.word	0x40026010
 80049d4:	20000e38 	.word	0x20000e38
 80049d8:	400260b8 	.word	0x400260b8
 80049dc:	40004400 	.word	0x40004400
 80049e0:	40020000 	.word	0x40020000

080049e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049e8:	bf00      	nop
 80049ea:	e7fd      	b.n	80049e8 <NMI_Handler+0x4>

080049ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049f0:	bf00      	nop
 80049f2:	e7fd      	b.n	80049f0 <HardFault_Handler+0x4>

080049f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049f8:	bf00      	nop
 80049fa:	e7fd      	b.n	80049f8 <MemManage_Handler+0x4>

080049fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a00:	bf00      	nop
 8004a02:	e7fd      	b.n	8004a00 <BusFault_Handler+0x4>

08004a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <UsageFault_Handler+0x4>

08004a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a2c:	bf00      	nop
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a3a:	f000 f9c7 	bl	8004dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8004a3e:	f000 fd8c 	bl	800555a <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004a4c:	4802      	ldr	r0, [pc, #8]	@ (8004a58 <DMA1_Stream0_IRQHandler+0x10>)
 8004a4e:	f000 ff9f 	bl	8005990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000dd8 	.word	0x20000dd8

08004a5c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8004a60:	4802      	ldr	r0, [pc, #8]	@ (8004a6c <DMA1_Stream5_IRQHandler+0x10>)
 8004a62:	f000 ff95 	bl	8005990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20000a5c 	.word	0x20000a5c

08004a70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a74:	4802      	ldr	r0, [pc, #8]	@ (8004a80 <TIM2_IRQHandler+0x10>)
 8004a76:	f005 f924 	bl	8009cc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000c70 	.word	0x20000c70

08004a84 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004a88:	4802      	ldr	r0, [pc, #8]	@ (8004a94 <SPI1_IRQHandler+0x10>)
 8004a8a:	f004 fd23 	bl	80094d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000b10 	.word	0x20000b10

08004a98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a9c:	4802      	ldr	r0, [pc, #8]	@ (8004aa8 <USART2_IRQHandler+0x10>)
 8004a9e:	f006 f9a5 	bl	800adec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000d90 	.word	0x20000d90

08004aac <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004ab0:	4802      	ldr	r0, [pc, #8]	@ (8004abc <DMA1_Stream7_IRQHandler+0x10>)
 8004ab2:	f000 ff6d 	bl	8005990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000e38 	.word	0x20000e38

08004ac0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004ac4:	4802      	ldr	r0, [pc, #8]	@ (8004ad0 <UART5_IRQHandler+0x10>)
 8004ac6:	f006 f991 	bl	800adec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000d48 	.word	0x20000d48

08004ad4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004ad8:	4802      	ldr	r0, [pc, #8]	@ (8004ae4 <DMA2_Stream0_IRQHandler+0x10>)
 8004ada:	f000 ff59 	bl	8005990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000b68 	.word	0x20000b68

08004ae8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004aec:	4802      	ldr	r0, [pc, #8]	@ (8004af8 <DMA2_Stream3_IRQHandler+0x10>)
 8004aee:	f000 ff4f 	bl	8005990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004af2:	bf00      	nop
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20000bc8 	.word	0x20000bc8

08004afc <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8004b00:	4802      	ldr	r0, [pc, #8]	@ (8004b0c <I2C3_EV_IRQHandler+0x10>)
 8004b02:	f001 fcc4 	bl	800648e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20000abc 	.word	0x20000abc

08004b10 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8004b14:	4802      	ldr	r0, [pc, #8]	@ (8004b20 <I2C3_ER_IRQHandler+0x10>)
 8004b16:	f001 fe2b 	bl	8006770 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8004b1a:	bf00      	nop
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000abc 	.word	0x20000abc

08004b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return 1;
 8004b28:	2301      	movs	r3, #1
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <_kill>:

int _kill(int pid, int sig)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b3e:	f009 f8cf 	bl	800dce0 <__errno>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2216      	movs	r2, #22
 8004b46:	601a      	str	r2, [r3, #0]
  return -1;
 8004b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <_exit>:

void _exit (int status)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff ffe7 	bl	8004b34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b66:	bf00      	nop
 8004b68:	e7fd      	b.n	8004b66 <_exit+0x12>

08004b6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b086      	sub	sp, #24
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	e00a      	b.n	8004b92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b7c:	f3af 8000 	nop.w
 8004b80:	4601      	mov	r1, r0
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	60ba      	str	r2, [r7, #8]
 8004b88:	b2ca      	uxtb	r2, r1
 8004b8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	dbf0      	blt.n	8004b7c <_read+0x12>
  }

  return len;
 8004b9a:	687b      	ldr	r3, [r7, #4]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	e009      	b.n	8004bca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	60ba      	str	r2, [r7, #8]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	dbf1      	blt.n	8004bb6 <_write+0x12>
  }
  return len;
 8004bd2:	687b      	ldr	r3, [r7, #4]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <_close>:

int _close(int file)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c04:	605a      	str	r2, [r3, #4]
  return 0;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <_isatty>:

int _isatty(int file)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c1c:	2301      	movs	r3, #1
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c4c:	4a14      	ldr	r2, [pc, #80]	@ (8004ca0 <_sbrk+0x5c>)
 8004c4e:	4b15      	ldr	r3, [pc, #84]	@ (8004ca4 <_sbrk+0x60>)
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c58:	4b13      	ldr	r3, [pc, #76]	@ (8004ca8 <_sbrk+0x64>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c60:	4b11      	ldr	r3, [pc, #68]	@ (8004ca8 <_sbrk+0x64>)
 8004c62:	4a12      	ldr	r2, [pc, #72]	@ (8004cac <_sbrk+0x68>)
 8004c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c66:	4b10      	ldr	r3, [pc, #64]	@ (8004ca8 <_sbrk+0x64>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d207      	bcs.n	8004c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c74:	f009 f834 	bl	800dce0 <__errno>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	220c      	movs	r2, #12
 8004c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c82:	e009      	b.n	8004c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c84:	4b08      	ldr	r3, [pc, #32]	@ (8004ca8 <_sbrk+0x64>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c8a:	4b07      	ldr	r3, [pc, #28]	@ (8004ca8 <_sbrk+0x64>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4413      	add	r3, r2
 8004c92:	4a05      	ldr	r2, [pc, #20]	@ (8004ca8 <_sbrk+0x64>)
 8004c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c96:	68fb      	ldr	r3, [r7, #12]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20020000 	.word	0x20020000
 8004ca4:	00000400 	.word	0x00000400
 8004ca8:	20000e98 	.word	0x20000e98
 8004cac:	20000ff0 	.word	0x20000ff0

08004cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004cb4:	4b06      	ldr	r3, [pc, #24]	@ (8004cd0 <SystemInit+0x20>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cba:	4a05      	ldr	r2, [pc, #20]	@ (8004cd0 <SystemInit+0x20>)
 8004cbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cc4:	bf00      	nop
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	e000ed00 	.word	0xe000ed00

08004cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004cd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004d0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004cd8:	f7ff ffea 	bl	8004cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004cdc:	480c      	ldr	r0, [pc, #48]	@ (8004d10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004cde:	490d      	ldr	r1, [pc, #52]	@ (8004d14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8004d18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ce4:	e002      	b.n	8004cec <LoopCopyDataInit>

08004ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cea:	3304      	adds	r3, #4

08004cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cf0:	d3f9      	bcc.n	8004ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8004d1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8004d20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cf8:	e001      	b.n	8004cfe <LoopFillZerobss>

08004cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cfc:	3204      	adds	r2, #4

08004cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d00:	d3fb      	bcc.n	8004cfa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004d02:	f008 fff3 	bl	800dcec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d06:	f7fe fdab 	bl	8003860 <main>
  bx  lr    
 8004d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004d0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d14:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004d18:	08010d1c 	.word	0x08010d1c
  ldr r2, =_sbss
 8004d1c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8004d20:	20000ff0 	.word	0x20000ff0

08004d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d24:	e7fe      	b.n	8004d24 <ADC_IRQHandler>
	...

08004d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d68 <HAL_Init+0x40>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0d      	ldr	r2, [pc, #52]	@ (8004d68 <HAL_Init+0x40>)
 8004d32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d38:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <HAL_Init+0x40>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8004d68 <HAL_Init+0x40>)
 8004d3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d44:	4b08      	ldr	r3, [pc, #32]	@ (8004d68 <HAL_Init+0x40>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a07      	ldr	r2, [pc, #28]	@ (8004d68 <HAL_Init+0x40>)
 8004d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d50:	2003      	movs	r0, #3
 8004d52:	f000 fbc1 	bl	80054d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d56:	2000      	movs	r0, #0
 8004d58:	f000 f808 	bl	8004d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d5c:	f7ff fa2a 	bl	80041b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023c00 	.word	0x40023c00

08004d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d74:	4b12      	ldr	r3, [pc, #72]	@ (8004dc0 <HAL_InitTick+0x54>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4b12      	ldr	r3, [pc, #72]	@ (8004dc4 <HAL_InitTick+0x58>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fbd9 	bl	8005542 <HAL_SYSTICK_Config>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e00e      	b.n	8004db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b0f      	cmp	r3, #15
 8004d9e:	d80a      	bhi.n	8004db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004da0:	2200      	movs	r2, #0
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	f000 fba1 	bl	80054ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004dac:	4a06      	ldr	r2, [pc, #24]	@ (8004dc8 <HAL_InitTick+0x5c>)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e000      	b.n	8004db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20000000 	.word	0x20000000
 8004dc4:	20000008 	.word	0x20000008
 8004dc8:	20000004 	.word	0x20000004

08004dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004dd0:	4b06      	ldr	r3, [pc, #24]	@ (8004dec <HAL_IncTick+0x20>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <HAL_IncTick+0x24>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4413      	add	r3, r2
 8004ddc:	4a04      	ldr	r2, [pc, #16]	@ (8004df0 <HAL_IncTick+0x24>)
 8004dde:	6013      	str	r3, [r2, #0]
}
 8004de0:	bf00      	nop
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000008 	.word	0x20000008
 8004df0:	20000e9c 	.word	0x20000e9c

08004df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  return uwTick;
 8004df8:	4b03      	ldr	r3, [pc, #12]	@ (8004e08 <HAL_GetTick+0x14>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000e9c 	.word	0x20000e9c

08004e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e14:	f7ff ffee 	bl	8004df4 <HAL_GetTick>
 8004e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d005      	beq.n	8004e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e26:	4b0a      	ldr	r3, [pc, #40]	@ (8004e50 <HAL_Delay+0x44>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e32:	bf00      	nop
 8004e34:	f7ff ffde 	bl	8004df4 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d8f7      	bhi.n	8004e34 <HAL_Delay+0x28>
  {
  }
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000008 	.word	0x20000008

08004e54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e033      	b.n	8004ed2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d109      	bne.n	8004e86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff f9c6 	bl	8004204 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d118      	bne.n	8004ec4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004e9a:	f023 0302 	bic.w	r3, r3, #2
 8004e9e:	f043 0202 	orr.w	r2, r3, #2
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f94a 	bl	8005140 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb6:	f023 0303 	bic.w	r3, r3, #3
 8004eba:	f043 0201 	orr.w	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ec2:	e001      	b.n	8004ec8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_ADC_ConfigChannel+0x1c>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e113      	b.n	8005120 <HAL_ADC_ConfigChannel+0x244>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b09      	cmp	r3, #9
 8004f06:	d925      	bls.n	8004f54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68d9      	ldr	r1, [r3, #12]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	4613      	mov	r3, r2
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3b1e      	subs	r3, #30
 8004f1e:	2207      	movs	r2, #7
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	43da      	mvns	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	400a      	ands	r2, r1
 8004f2c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68d9      	ldr	r1, [r3, #12]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	4618      	mov	r0, r3
 8004f40:	4603      	mov	r3, r0
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4403      	add	r3, r0
 8004f46:	3b1e      	subs	r3, #30
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	e022      	b.n	8004f9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6919      	ldr	r1, [r3, #16]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	4613      	mov	r3, r2
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	4413      	add	r3, r2
 8004f68:	2207      	movs	r2, #7
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43da      	mvns	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	400a      	ands	r2, r1
 8004f76:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6919      	ldr	r1, [r3, #16]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	4618      	mov	r0, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	4403      	add	r3, r0
 8004f90:	409a      	lsls	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b06      	cmp	r3, #6
 8004fa0:	d824      	bhi.n	8004fec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3b05      	subs	r3, #5
 8004fb4:	221f      	movs	r2, #31
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43da      	mvns	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	400a      	ands	r2, r1
 8004fc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	3b05      	subs	r3, #5
 8004fde:	fa00 f203 	lsl.w	r2, r0, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004fea:	e04c      	b.n	8005086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b0c      	cmp	r3, #12
 8004ff2:	d824      	bhi.n	800503e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	3b23      	subs	r3, #35	@ 0x23
 8005006:	221f      	movs	r2, #31
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	43da      	mvns	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	400a      	ands	r2, r1
 8005014:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	4618      	mov	r0, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	3b23      	subs	r3, #35	@ 0x23
 8005030:	fa00 f203 	lsl.w	r2, r0, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	631a      	str	r2, [r3, #48]	@ 0x30
 800503c:	e023      	b.n	8005086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	3b41      	subs	r3, #65	@ 0x41
 8005050:	221f      	movs	r2, #31
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	43da      	mvns	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	400a      	ands	r2, r1
 800505e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	b29b      	uxth	r3, r3
 800506c:	4618      	mov	r0, r3
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	3b41      	subs	r3, #65	@ 0x41
 800507a:	fa00 f203 	lsl.w	r2, r0, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005086:	4b29      	ldr	r3, [pc, #164]	@ (800512c <HAL_ADC_ConfigChannel+0x250>)
 8005088:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a28      	ldr	r2, [pc, #160]	@ (8005130 <HAL_ADC_ConfigChannel+0x254>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d10f      	bne.n	80050b4 <HAL_ADC_ConfigChannel+0x1d8>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b12      	cmp	r3, #18
 800509a:	d10b      	bne.n	80050b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005130 <HAL_ADC_ConfigChannel+0x254>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d12b      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x23a>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005134 <HAL_ADC_ConfigChannel+0x258>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <HAL_ADC_ConfigChannel+0x1f4>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b11      	cmp	r3, #17
 80050ce:	d122      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a11      	ldr	r2, [pc, #68]	@ (8005134 <HAL_ADC_ConfigChannel+0x258>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d111      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80050f2:	4b11      	ldr	r3, [pc, #68]	@ (8005138 <HAL_ADC_ConfigChannel+0x25c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a11      	ldr	r2, [pc, #68]	@ (800513c <HAL_ADC_ConfigChannel+0x260>)
 80050f8:	fba2 2303 	umull	r2, r3, r2, r3
 80050fc:	0c9a      	lsrs	r2, r3, #18
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005108:	e002      	b.n	8005110 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	3b01      	subs	r3, #1
 800510e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f9      	bne.n	800510a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	40012300 	.word	0x40012300
 8005130:	40012000 	.word	0x40012000
 8005134:	10000012 	.word	0x10000012
 8005138:	20000000 	.word	0x20000000
 800513c:	431bde83 	.word	0x431bde83

08005140 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005148:	4b79      	ldr	r3, [pc, #484]	@ (8005330 <ADC_Init+0x1f0>)
 800514a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	431a      	orrs	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005174:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6859      	ldr	r1, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	021a      	lsls	r2, r3, #8
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005198:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6859      	ldr	r1, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6899      	ldr	r1, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d2:	4a58      	ldr	r2, [pc, #352]	@ (8005334 <ADC_Init+0x1f4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d022      	beq.n	800521e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80051e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6899      	ldr	r1, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005208:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6899      	ldr	r1, [r3, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	609a      	str	r2, [r3, #8]
 800521c:	e00f      	b.n	800523e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800522c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800523c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0202 	bic.w	r2, r2, #2
 800524c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6899      	ldr	r1, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	7e1b      	ldrb	r3, [r3, #24]
 8005258:	005a      	lsls	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01b      	beq.n	80052a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800527a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800528a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6859      	ldr	r1, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005296:	3b01      	subs	r3, #1
 8005298:	035a      	lsls	r2, r3, #13
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
 80052a2:	e007      	b.n	80052b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052b2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80052c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	051a      	lsls	r2, r3, #20
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80052e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6899      	ldr	r1, [r3, #8]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80052f6:	025a      	lsls	r2, r3, #9
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800530e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6899      	ldr	r1, [r3, #8]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	029a      	lsls	r2, r3, #10
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	609a      	str	r2, [r3, #8]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	40012300 	.word	0x40012300
 8005334:	0f000001 	.word	0x0f000001

08005338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005348:	4b0c      	ldr	r3, [pc, #48]	@ (800537c <__NVIC_SetPriorityGrouping+0x44>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005354:	4013      	ands	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005360:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800536a:	4a04      	ldr	r2, [pc, #16]	@ (800537c <__NVIC_SetPriorityGrouping+0x44>)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	60d3      	str	r3, [r2, #12]
}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	e000ed00 	.word	0xe000ed00

08005380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005384:	4b04      	ldr	r3, [pc, #16]	@ (8005398 <__NVIC_GetPriorityGrouping+0x18>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	0a1b      	lsrs	r3, r3, #8
 800538a:	f003 0307 	and.w	r3, r3, #7
}
 800538e:	4618      	mov	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	e000ed00 	.word	0xe000ed00

0800539c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	db0b      	blt.n	80053c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	f003 021f 	and.w	r2, r3, #31
 80053b4:	4907      	ldr	r1, [pc, #28]	@ (80053d4 <__NVIC_EnableIRQ+0x38>)
 80053b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	2001      	movs	r0, #1
 80053be:	fa00 f202 	lsl.w	r2, r0, r2
 80053c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	e000e100 	.word	0xe000e100

080053d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	6039      	str	r1, [r7, #0]
 80053e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	db0a      	blt.n	8005402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	490c      	ldr	r1, [pc, #48]	@ (8005424 <__NVIC_SetPriority+0x4c>)
 80053f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f6:	0112      	lsls	r2, r2, #4
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	440b      	add	r3, r1
 80053fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005400:	e00a      	b.n	8005418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	b2da      	uxtb	r2, r3
 8005406:	4908      	ldr	r1, [pc, #32]	@ (8005428 <__NVIC_SetPriority+0x50>)
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	3b04      	subs	r3, #4
 8005410:	0112      	lsls	r2, r2, #4
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	440b      	add	r3, r1
 8005416:	761a      	strb	r2, [r3, #24]
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	e000e100 	.word	0xe000e100
 8005428:	e000ed00 	.word	0xe000ed00

0800542c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800542c:	b480      	push	{r7}
 800542e:	b089      	sub	sp, #36	@ 0x24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f1c3 0307 	rsb	r3, r3, #7
 8005446:	2b04      	cmp	r3, #4
 8005448:	bf28      	it	cs
 800544a:	2304      	movcs	r3, #4
 800544c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	3304      	adds	r3, #4
 8005452:	2b06      	cmp	r3, #6
 8005454:	d902      	bls.n	800545c <NVIC_EncodePriority+0x30>
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3b03      	subs	r3, #3
 800545a:	e000      	b.n	800545e <NVIC_EncodePriority+0x32>
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005460:	f04f 32ff 	mov.w	r2, #4294967295
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	43da      	mvns	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	401a      	ands	r2, r3
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005474:	f04f 31ff 	mov.w	r1, #4294967295
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	fa01 f303 	lsl.w	r3, r1, r3
 800547e:	43d9      	mvns	r1, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005484:	4313      	orrs	r3, r2
         );
}
 8005486:	4618      	mov	r0, r3
 8005488:	3724      	adds	r7, #36	@ 0x24
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
	...

08005494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3b01      	subs	r3, #1
 80054a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054a4:	d301      	bcc.n	80054aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054a6:	2301      	movs	r3, #1
 80054a8:	e00f      	b.n	80054ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054aa:	4a0a      	ldr	r2, [pc, #40]	@ (80054d4 <SysTick_Config+0x40>)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054b2:	210f      	movs	r1, #15
 80054b4:	f04f 30ff 	mov.w	r0, #4294967295
 80054b8:	f7ff ff8e 	bl	80053d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054bc:	4b05      	ldr	r3, [pc, #20]	@ (80054d4 <SysTick_Config+0x40>)
 80054be:	2200      	movs	r2, #0
 80054c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054c2:	4b04      	ldr	r3, [pc, #16]	@ (80054d4 <SysTick_Config+0x40>)
 80054c4:	2207      	movs	r2, #7
 80054c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	e000e010 	.word	0xe000e010

080054d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff ff29 	bl	8005338 <__NVIC_SetPriorityGrouping>
}
 80054e6:	bf00      	nop
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b086      	sub	sp, #24
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	4603      	mov	r3, r0
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005500:	f7ff ff3e 	bl	8005380 <__NVIC_GetPriorityGrouping>
 8005504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	68b9      	ldr	r1, [r7, #8]
 800550a:	6978      	ldr	r0, [r7, #20]
 800550c:	f7ff ff8e 	bl	800542c <NVIC_EncodePriority>
 8005510:	4602      	mov	r2, r0
 8005512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005516:	4611      	mov	r1, r2
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff ff5d 	bl	80053d8 <__NVIC_SetPriority>
}
 800551e:	bf00      	nop
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b082      	sub	sp, #8
 800552a:	af00      	add	r7, sp, #0
 800552c:	4603      	mov	r3, r0
 800552e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff ff31 	bl	800539c <__NVIC_EnableIRQ>
}
 800553a:	bf00      	nop
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff ffa2 	bl	8005494 <SysTick_Config>
 8005550:	4603      	mov	r3, r0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800555a:	b480      	push	{r7}
 800555c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800555e:	bf00      	nop
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e014      	b.n	80055a4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	791b      	ldrb	r3, [r3, #4]
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d105      	bne.n	8005590 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fe fe7e 	bl	800428c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b089      	sub	sp, #36	@ 0x24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_DAC_ConfigChannel+0x1c>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e042      	b.n	8005652 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	795b      	ldrb	r3, [r3, #5]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_DAC_ConfigChannel+0x2c>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e03c      	b.n	8005652 <HAL_DAC_ConfigChannel+0xa6>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2202      	movs	r2, #2
 80055e2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80055fa:	43db      	mvns	r3, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	4013      	ands	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	4313      	orrs	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6819      	ldr	r1, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	22c0      	movs	r2, #192	@ 0xc0
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	43da      	mvns	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	400a      	ands	r2, r1
 8005642:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005650:	7ffb      	ldrb	r3, [r7, #31]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3724      	adds	r7, #36	@ 0x24
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800566c:	f7ff fbc2 	bl	8004df4 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e099      	b.n	80057b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0201 	bic.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800569c:	e00f      	b.n	80056be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800569e:	f7ff fba9 	bl	8004df4 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b05      	cmp	r3, #5
 80056aa:	d908      	bls.n	80056be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2203      	movs	r2, #3
 80056b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e078      	b.n	80057b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e8      	bne.n	800569e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4b38      	ldr	r3, [pc, #224]	@ (80057b8 <HAL_DMA_Init+0x158>)
 80056d8:	4013      	ands	r3, r2
 80056da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005702:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005714:	2b04      	cmp	r3, #4
 8005716:	d107      	bne.n	8005728 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005720:	4313      	orrs	r3, r2
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0307 	bic.w	r3, r3, #7
 800573e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574e:	2b04      	cmp	r3, #4
 8005750:	d117      	bne.n	8005782 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00e      	beq.n	8005782 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fb0f 	bl	8005d88 <DMA_CheckFifoParam>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2240      	movs	r2, #64	@ 0x40
 8005774:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800577e:	2301      	movs	r3, #1
 8005780:	e016      	b.n	80057b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fac6 	bl	8005d1c <DMA_CalcBaseAndBitshift>
 8005790:	4603      	mov	r3, r0
 8005792:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005798:	223f      	movs	r2, #63	@ 0x3f
 800579a:	409a      	lsls	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	f010803f 	.word	0xf010803f

080057bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_DMA_Start_IT+0x26>
 80057de:	2302      	movs	r3, #2
 80057e0:	e040      	b.n	8005864 <HAL_DMA_Start_IT+0xa8>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d12f      	bne.n	8005856 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2202      	movs	r2, #2
 80057fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	68b9      	ldr	r1, [r7, #8]
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 fa58 	bl	8005cc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005814:	223f      	movs	r2, #63	@ 0x3f
 8005816:	409a      	lsls	r2, r3
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0216 	orr.w	r2, r2, #22
 800582a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0208 	orr.w	r2, r2, #8
 8005842:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	e005      	b.n	8005862 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800585e:	2302      	movs	r3, #2
 8005860:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005862:	7dfb      	ldrb	r3, [r7, #23]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005878:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800587a:	f7ff fabb 	bl	8004df4 <HAL_GetTick>
 800587e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d008      	beq.n	800589e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2280      	movs	r2, #128	@ 0x80
 8005890:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e052      	b.n	8005944 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0216 	bic.w	r2, r2, #22
 80058ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695a      	ldr	r2, [r3, #20]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d103      	bne.n	80058ce <HAL_DMA_Abort+0x62>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0208 	bic.w	r2, r2, #8
 80058dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0201 	bic.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058ee:	e013      	b.n	8005918 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058f0:	f7ff fa80 	bl	8004df4 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b05      	cmp	r3, #5
 80058fc:	d90c      	bls.n	8005918 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2220      	movs	r2, #32
 8005902:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2203      	movs	r2, #3
 8005908:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e015      	b.n	8005944 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e4      	bne.n	80058f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800592a:	223f      	movs	r2, #63	@ 0x3f
 800592c:	409a      	lsls	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d004      	beq.n	800596a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2280      	movs	r2, #128	@ 0x80
 8005964:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e00c      	b.n	8005984 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2205      	movs	r2, #5
 800596e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0201 	bic.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800599c:	4b8e      	ldr	r3, [pc, #568]	@ (8005bd8 <HAL_DMA_IRQHandler+0x248>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a8e      	ldr	r2, [pc, #568]	@ (8005bdc <HAL_DMA_IRQHandler+0x24c>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	0a9b      	lsrs	r3, r3, #10
 80059a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ba:	2208      	movs	r2, #8
 80059bc:	409a      	lsls	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d01a      	beq.n	80059fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d013      	beq.n	80059fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0204 	bic.w	r2, r2, #4
 80059e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059e8:	2208      	movs	r2, #8
 80059ea:	409a      	lsls	r2, r3
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f4:	f043 0201 	orr.w	r2, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a00:	2201      	movs	r2, #1
 8005a02:	409a      	lsls	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4013      	ands	r3, r2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d012      	beq.n	8005a32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a1e:	2201      	movs	r2, #1
 8005a20:	409a      	lsls	r2, r3
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a2a:	f043 0202 	orr.w	r2, r3, #2
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a36:	2204      	movs	r2, #4
 8005a38:	409a      	lsls	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d012      	beq.n	8005a68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00b      	beq.n	8005a68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a54:	2204      	movs	r2, #4
 8005a56:	409a      	lsls	r2, r3
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a60:	f043 0204 	orr.w	r2, r3, #4
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a6c:	2210      	movs	r2, #16
 8005a6e:	409a      	lsls	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4013      	ands	r3, r2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d043      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d03c      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a8a:	2210      	movs	r2, #16
 8005a8c:	409a      	lsls	r2, r3
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d018      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d108      	bne.n	8005ac0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d024      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	4798      	blx	r3
 8005abe:	e01f      	b.n	8005b00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01b      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	4798      	blx	r3
 8005ad0:	e016      	b.n	8005b00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d107      	bne.n	8005af0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0208 	bic.w	r2, r2, #8
 8005aee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b04:	2220      	movs	r2, #32
 8005b06:	409a      	lsls	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 808f 	beq.w	8005c30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8087 	beq.w	8005c30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b26:	2220      	movs	r2, #32
 8005b28:	409a      	lsls	r2, r3
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b05      	cmp	r3, #5
 8005b38:	d136      	bne.n	8005ba8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0216 	bic.w	r2, r2, #22
 8005b48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d103      	bne.n	8005b6a <HAL_DMA_IRQHandler+0x1da>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0208 	bic.w	r2, r2, #8
 8005b78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b7e:	223f      	movs	r2, #63	@ 0x3f
 8005b80:	409a      	lsls	r2, r3
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d07e      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	4798      	blx	r3
        }
        return;
 8005ba6:	e079      	b.n	8005c9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01d      	beq.n	8005bf2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10d      	bne.n	8005be0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d031      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	4798      	blx	r3
 8005bd4:	e02c      	b.n	8005c30 <HAL_DMA_IRQHandler+0x2a0>
 8005bd6:	bf00      	nop
 8005bd8:	20000000 	.word	0x20000000
 8005bdc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d023      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	4798      	blx	r3
 8005bf0:	e01e      	b.n	8005c30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10f      	bne.n	8005c20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0210 	bic.w	r2, r2, #16
 8005c0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d032      	beq.n	8005c9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d022      	beq.n	8005c8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2205      	movs	r2, #5
 8005c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0201 	bic.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d307      	bcc.n	8005c78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f2      	bne.n	8005c5c <HAL_DMA_IRQHandler+0x2cc>
 8005c76:	e000      	b.n	8005c7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	4798      	blx	r3
 8005c9a:	e000      	b.n	8005c9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c9c:	bf00      	nop
    }
  }
}
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cb2:	b2db      	uxtb	r3, r3
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005cdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	2b40      	cmp	r3, #64	@ 0x40
 8005cec:	d108      	bne.n	8005d00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005cfe:	e007      	b.n	8005d10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	60da      	str	r2, [r3, #12]
}
 8005d10:	bf00      	nop
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	3b10      	subs	r3, #16
 8005d2c:	4a14      	ldr	r2, [pc, #80]	@ (8005d80 <DMA_CalcBaseAndBitshift+0x64>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	091b      	lsrs	r3, r3, #4
 8005d34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d36:	4a13      	ldr	r2, [pc, #76]	@ (8005d84 <DMA_CalcBaseAndBitshift+0x68>)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d909      	bls.n	8005d5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005d52:	f023 0303 	bic.w	r3, r3, #3
 8005d56:	1d1a      	adds	r2, r3, #4
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8005d5c:	e007      	b.n	8005d6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005d66:	f023 0303 	bic.w	r3, r3, #3
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	aaaaaaab 	.word	0xaaaaaaab
 8005d84:	0801075c 	.word	0x0801075c

08005d88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d11f      	bne.n	8005de2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d856      	bhi.n	8005e56 <DMA_CheckFifoParam+0xce>
 8005da8:	a201      	add	r2, pc, #4	@ (adr r2, 8005db0 <DMA_CheckFifoParam+0x28>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005dc1 	.word	0x08005dc1
 8005db4:	08005dd3 	.word	0x08005dd3
 8005db8:	08005dc1 	.word	0x08005dc1
 8005dbc:	08005e57 	.word	0x08005e57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d046      	beq.n	8005e5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dd0:	e043      	b.n	8005e5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005dda:	d140      	bne.n	8005e5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de0:	e03d      	b.n	8005e5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dea:	d121      	bne.n	8005e30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d837      	bhi.n	8005e62 <DMA_CheckFifoParam+0xda>
 8005df2:	a201      	add	r2, pc, #4	@ (adr r2, 8005df8 <DMA_CheckFifoParam+0x70>)
 8005df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df8:	08005e09 	.word	0x08005e09
 8005dfc:	08005e0f 	.word	0x08005e0f
 8005e00:	08005e09 	.word	0x08005e09
 8005e04:	08005e21 	.word	0x08005e21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e0c:	e030      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d025      	beq.n	8005e66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e1e:	e022      	b.n	8005e66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e28:	d11f      	bne.n	8005e6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e2e:	e01c      	b.n	8005e6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d903      	bls.n	8005e3e <DMA_CheckFifoParam+0xb6>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d003      	beq.n	8005e44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e3c:	e018      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
      break;
 8005e42:	e015      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00e      	beq.n	8005e6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	73fb      	strb	r3, [r7, #15]
      break;
 8005e54:	e00b      	b.n	8005e6e <DMA_CheckFifoParam+0xe6>
      break;
 8005e56:	bf00      	nop
 8005e58:	e00a      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      break;
 8005e5a:	bf00      	nop
 8005e5c:	e008      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      break;
 8005e5e:	bf00      	nop
 8005e60:	e006      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      break;
 8005e62:	bf00      	nop
 8005e64:	e004      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      break;
 8005e66:	bf00      	nop
 8005e68:	e002      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      break;   
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <DMA_CheckFifoParam+0xe8>
      break;
 8005e6e:	bf00      	nop
    }
  } 
  
  return status; 
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop

08005e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	@ 0x24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e96:	2300      	movs	r3, #0
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	e165      	b.n	8006168 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4013      	ands	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	f040 8154 	bne.w	8006162 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d005      	beq.n	8005ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d130      	bne.n	8005f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	2203      	movs	r2, #3
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	43db      	mvns	r3, r3
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f08:	2201      	movs	r2, #1
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	43db      	mvns	r3, r3
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	4013      	ands	r3, r2
 8005f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	091b      	lsrs	r3, r3, #4
 8005f1e:	f003 0201 	and.w	r2, r3, #1
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f003 0303 	and.w	r3, r3, #3
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d017      	beq.n	8005f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	2203      	movs	r2, #3
 8005f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f50:	43db      	mvns	r3, r3
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	4013      	ands	r3, r2
 8005f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	fa02 f303 	lsl.w	r3, r2, r3
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f003 0303 	and.w	r3, r3, #3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d123      	bne.n	8005fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	08da      	lsrs	r2, r3, #3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3208      	adds	r2, #8
 8005f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	220f      	movs	r2, #15
 8005f94:	fa02 f303 	lsl.w	r3, r2, r3
 8005f98:	43db      	mvns	r3, r3
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	08da      	lsrs	r2, r3, #3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3208      	adds	r2, #8
 8005fbe:	69b9      	ldr	r1, [r7, #24]
 8005fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	2203      	movs	r2, #3
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f003 0203 	and.w	r2, r3, #3
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 80ae 	beq.w	8006162 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	4b5d      	ldr	r3, [pc, #372]	@ (8006180 <HAL_GPIO_Init+0x300>)
 800600c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800600e:	4a5c      	ldr	r2, [pc, #368]	@ (8006180 <HAL_GPIO_Init+0x300>)
 8006010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006014:	6453      	str	r3, [r2, #68]	@ 0x44
 8006016:	4b5a      	ldr	r3, [pc, #360]	@ (8006180 <HAL_GPIO_Init+0x300>)
 8006018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006022:	4a58      	ldr	r2, [pc, #352]	@ (8006184 <HAL_GPIO_Init+0x304>)
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	089b      	lsrs	r3, r3, #2
 8006028:	3302      	adds	r3, #2
 800602a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800602e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	220f      	movs	r2, #15
 800603a:	fa02 f303 	lsl.w	r3, r2, r3
 800603e:	43db      	mvns	r3, r3
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	4013      	ands	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a4f      	ldr	r2, [pc, #316]	@ (8006188 <HAL_GPIO_Init+0x308>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d025      	beq.n	800609a <HAL_GPIO_Init+0x21a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a4e      	ldr	r2, [pc, #312]	@ (800618c <HAL_GPIO_Init+0x30c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d01f      	beq.n	8006096 <HAL_GPIO_Init+0x216>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a4d      	ldr	r2, [pc, #308]	@ (8006190 <HAL_GPIO_Init+0x310>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d019      	beq.n	8006092 <HAL_GPIO_Init+0x212>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a4c      	ldr	r2, [pc, #304]	@ (8006194 <HAL_GPIO_Init+0x314>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d013      	beq.n	800608e <HAL_GPIO_Init+0x20e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a4b      	ldr	r2, [pc, #300]	@ (8006198 <HAL_GPIO_Init+0x318>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00d      	beq.n	800608a <HAL_GPIO_Init+0x20a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a4a      	ldr	r2, [pc, #296]	@ (800619c <HAL_GPIO_Init+0x31c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d007      	beq.n	8006086 <HAL_GPIO_Init+0x206>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a49      	ldr	r2, [pc, #292]	@ (80061a0 <HAL_GPIO_Init+0x320>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d101      	bne.n	8006082 <HAL_GPIO_Init+0x202>
 800607e:	2306      	movs	r3, #6
 8006080:	e00c      	b.n	800609c <HAL_GPIO_Init+0x21c>
 8006082:	2307      	movs	r3, #7
 8006084:	e00a      	b.n	800609c <HAL_GPIO_Init+0x21c>
 8006086:	2305      	movs	r3, #5
 8006088:	e008      	b.n	800609c <HAL_GPIO_Init+0x21c>
 800608a:	2304      	movs	r3, #4
 800608c:	e006      	b.n	800609c <HAL_GPIO_Init+0x21c>
 800608e:	2303      	movs	r3, #3
 8006090:	e004      	b.n	800609c <HAL_GPIO_Init+0x21c>
 8006092:	2302      	movs	r3, #2
 8006094:	e002      	b.n	800609c <HAL_GPIO_Init+0x21c>
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <HAL_GPIO_Init+0x21c>
 800609a:	2300      	movs	r3, #0
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	f002 0203 	and.w	r2, r2, #3
 80060a2:	0092      	lsls	r2, r2, #2
 80060a4:	4093      	lsls	r3, r2
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060ac:	4935      	ldr	r1, [pc, #212]	@ (8006184 <HAL_GPIO_Init+0x304>)
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	089b      	lsrs	r3, r3, #2
 80060b2:	3302      	adds	r3, #2
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060ba:	4b3a      	ldr	r3, [pc, #232]	@ (80061a4 <HAL_GPIO_Init+0x324>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	43db      	mvns	r3, r3
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	4013      	ands	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060de:	4a31      	ldr	r2, [pc, #196]	@ (80061a4 <HAL_GPIO_Init+0x324>)
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060e4:	4b2f      	ldr	r3, [pc, #188]	@ (80061a4 <HAL_GPIO_Init+0x324>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	43db      	mvns	r3, r3
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	4013      	ands	r3, r2
 80060f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006108:	4a26      	ldr	r2, [pc, #152]	@ (80061a4 <HAL_GPIO_Init+0x324>)
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800610e:	4b25      	ldr	r3, [pc, #148]	@ (80061a4 <HAL_GPIO_Init+0x324>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	43db      	mvns	r3, r3
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	4013      	ands	r3, r2
 800611c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006132:	4a1c      	ldr	r2, [pc, #112]	@ (80061a4 <HAL_GPIO_Init+0x324>)
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006138:	4b1a      	ldr	r3, [pc, #104]	@ (80061a4 <HAL_GPIO_Init+0x324>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	43db      	mvns	r3, r3
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	4013      	ands	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800615c:	4a11      	ldr	r2, [pc, #68]	@ (80061a4 <HAL_GPIO_Init+0x324>)
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	3301      	adds	r3, #1
 8006166:	61fb      	str	r3, [r7, #28]
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2b0f      	cmp	r3, #15
 800616c:	f67f ae96 	bls.w	8005e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006170:	bf00      	nop
 8006172:	bf00      	nop
 8006174:	3724      	adds	r7, #36	@ 0x24
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40023800 	.word	0x40023800
 8006184:	40013800 	.word	0x40013800
 8006188:	40020000 	.word	0x40020000
 800618c:	40020400 	.word	0x40020400
 8006190:	40020800 	.word	0x40020800
 8006194:	40020c00 	.word	0x40020c00
 8006198:	40021000 	.word	0x40021000
 800619c:	40021400 	.word	0x40021400
 80061a0:	40021800 	.word	0x40021800
 80061a4:	40013c00 	.word	0x40013c00

080061a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	807b      	strh	r3, [r7, #2]
 80061b4:	4613      	mov	r3, r2
 80061b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061b8:	787b      	ldrb	r3, [r7, #1]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061be:	887a      	ldrh	r2, [r7, #2]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061c4:	e003      	b.n	80061ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061c6:	887b      	ldrh	r3, [r7, #2]
 80061c8:	041a      	lsls	r2, r3, #16
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	619a      	str	r2, [r3, #24]
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e12b      	b.n	8006446 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fe f8bc 	bl	8004380 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2224      	movs	r2, #36	@ 0x24
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0201 	bic.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800622e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800623e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006240:	f001 ff10 	bl	8008064 <HAL_RCC_GetPCLK1Freq>
 8006244:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	4a81      	ldr	r2, [pc, #516]	@ (8006450 <HAL_I2C_Init+0x274>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d807      	bhi.n	8006260 <HAL_I2C_Init+0x84>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4a80      	ldr	r2, [pc, #512]	@ (8006454 <HAL_I2C_Init+0x278>)
 8006254:	4293      	cmp	r3, r2
 8006256:	bf94      	ite	ls
 8006258:	2301      	movls	r3, #1
 800625a:	2300      	movhi	r3, #0
 800625c:	b2db      	uxtb	r3, r3
 800625e:	e006      	b.n	800626e <HAL_I2C_Init+0x92>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4a7d      	ldr	r2, [pc, #500]	@ (8006458 <HAL_I2C_Init+0x27c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	bf94      	ite	ls
 8006268:	2301      	movls	r3, #1
 800626a:	2300      	movhi	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e0e7      	b.n	8006446 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a78      	ldr	r2, [pc, #480]	@ (800645c <HAL_I2C_Init+0x280>)
 800627a:	fba2 2303 	umull	r2, r3, r2, r3
 800627e:	0c9b      	lsrs	r3, r3, #18
 8006280:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	430a      	orrs	r2, r1
 8006294:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	4a6a      	ldr	r2, [pc, #424]	@ (8006450 <HAL_I2C_Init+0x274>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d802      	bhi.n	80062b0 <HAL_I2C_Init+0xd4>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	3301      	adds	r3, #1
 80062ae:	e009      	b.n	80062c4 <HAL_I2C_Init+0xe8>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80062b6:	fb02 f303 	mul.w	r3, r2, r3
 80062ba:	4a69      	ldr	r2, [pc, #420]	@ (8006460 <HAL_I2C_Init+0x284>)
 80062bc:	fba2 2303 	umull	r2, r3, r2, r3
 80062c0:	099b      	lsrs	r3, r3, #6
 80062c2:	3301      	adds	r3, #1
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	6812      	ldr	r2, [r2, #0]
 80062c8:	430b      	orrs	r3, r1
 80062ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80062d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	495c      	ldr	r1, [pc, #368]	@ (8006450 <HAL_I2C_Init+0x274>)
 80062e0:	428b      	cmp	r3, r1
 80062e2:	d819      	bhi.n	8006318 <HAL_I2C_Init+0x13c>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	1e59      	subs	r1, r3, #1
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80062f2:	1c59      	adds	r1, r3, #1
 80062f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80062f8:	400b      	ands	r3, r1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <HAL_I2C_Init+0x138>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	1e59      	subs	r1, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	fbb1 f3f3 	udiv	r3, r1, r3
 800630c:	3301      	adds	r3, #1
 800630e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006312:	e051      	b.n	80063b8 <HAL_I2C_Init+0x1dc>
 8006314:	2304      	movs	r3, #4
 8006316:	e04f      	b.n	80063b8 <HAL_I2C_Init+0x1dc>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d111      	bne.n	8006344 <HAL_I2C_Init+0x168>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	1e58      	subs	r0, r3, #1
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6859      	ldr	r1, [r3, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	440b      	add	r3, r1
 800632e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006332:	3301      	adds	r3, #1
 8006334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006338:	2b00      	cmp	r3, #0
 800633a:	bf0c      	ite	eq
 800633c:	2301      	moveq	r3, #1
 800633e:	2300      	movne	r3, #0
 8006340:	b2db      	uxtb	r3, r3
 8006342:	e012      	b.n	800636a <HAL_I2C_Init+0x18e>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	1e58      	subs	r0, r3, #1
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6859      	ldr	r1, [r3, #4]
 800634c:	460b      	mov	r3, r1
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	0099      	lsls	r1, r3, #2
 8006354:	440b      	add	r3, r1
 8006356:	fbb0 f3f3 	udiv	r3, r0, r3
 800635a:	3301      	adds	r3, #1
 800635c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006360:	2b00      	cmp	r3, #0
 8006362:	bf0c      	ite	eq
 8006364:	2301      	moveq	r3, #1
 8006366:	2300      	movne	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <HAL_I2C_Init+0x196>
 800636e:	2301      	movs	r3, #1
 8006370:	e022      	b.n	80063b8 <HAL_I2C_Init+0x1dc>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10e      	bne.n	8006398 <HAL_I2C_Init+0x1bc>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	1e58      	subs	r0, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6859      	ldr	r1, [r3, #4]
 8006382:	460b      	mov	r3, r1
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	440b      	add	r3, r1
 8006388:	fbb0 f3f3 	udiv	r3, r0, r3
 800638c:	3301      	adds	r3, #1
 800638e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006396:	e00f      	b.n	80063b8 <HAL_I2C_Init+0x1dc>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	1e58      	subs	r0, r3, #1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6859      	ldr	r1, [r3, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	440b      	add	r3, r1
 80063a6:	0099      	lsls	r1, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80063ae:	3301      	adds	r3, #1
 80063b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	6809      	ldr	r1, [r1, #0]
 80063bc:	4313      	orrs	r3, r2
 80063be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69da      	ldr	r2, [r3, #28]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80063e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6911      	ldr	r1, [r2, #16]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	68d2      	ldr	r2, [r2, #12]
 80063f2:	4311      	orrs	r1, r2
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6812      	ldr	r2, [r2, #0]
 80063f8:	430b      	orrs	r3, r1
 80063fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695a      	ldr	r2, [r3, #20]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2220      	movs	r2, #32
 8006432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	000186a0 	.word	0x000186a0
 8006454:	001e847f 	.word	0x001e847f
 8006458:	003d08ff 	.word	0x003d08ff
 800645c:	431bde83 	.word	0x431bde83
 8006460:	10624dd3 	.word	0x10624dd3

08006464 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006476:	2b80      	cmp	r3, #128	@ 0x80
 8006478:	d103      	bne.n	8006482 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2200      	movs	r2, #0
 8006480:	611a      	str	r2, [r3, #16]
  }
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b088      	sub	sp, #32
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a6:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064b6:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	2b10      	cmp	r3, #16
 80064bc:	d003      	beq.n	80064c6 <HAL_I2C_EV_IRQHandler+0x38>
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	2b40      	cmp	r3, #64	@ 0x40
 80064c2:	f040 80c1 	bne.w	8006648 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10d      	bne.n	80064fc <HAL_I2C_EV_IRQHandler+0x6e>
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80064e6:	d003      	beq.n	80064f0 <HAL_I2C_EV_IRQHandler+0x62>
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80064ee:	d101      	bne.n	80064f4 <HAL_I2C_EV_IRQHandler+0x66>
 80064f0:	2301      	movs	r3, #1
 80064f2:	e000      	b.n	80064f6 <HAL_I2C_EV_IRQHandler+0x68>
 80064f4:	2300      	movs	r3, #0
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	f000 8132 	beq.w	8006760 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00c      	beq.n	8006520 <HAL_I2C_EV_IRQHandler+0x92>
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	0a5b      	lsrs	r3, r3, #9
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d006      	beq.n	8006520 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f001 fc98 	bl	8007e48 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fd9b 	bl	8007054 <I2C_Master_SB>
 800651e:	e092      	b.n	8006646 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	08db      	lsrs	r3, r3, #3
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d009      	beq.n	8006540 <HAL_I2C_EV_IRQHandler+0xb2>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	0a5b      	lsrs	r3, r3, #9
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fe11 	bl	8007160 <I2C_Master_ADD10>
 800653e:	e082      	b.n	8006646 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	085b      	lsrs	r3, r3, #1
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d009      	beq.n	8006560 <HAL_I2C_EV_IRQHandler+0xd2>
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	0a5b      	lsrs	r3, r3, #9
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fe2b 	bl	80071b4 <I2C_Master_ADDR>
 800655e:	e072      	b.n	8006646 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	089b      	lsrs	r3, r3, #2
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d03b      	beq.n	80065e4 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006576:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800657a:	f000 80f3 	beq.w	8006764 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	09db      	lsrs	r3, r3, #7
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00f      	beq.n	80065aa <HAL_I2C_EV_IRQHandler+0x11c>
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	0a9b      	lsrs	r3, r3, #10
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d009      	beq.n	80065aa <HAL_I2C_EV_IRQHandler+0x11c>
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	089b      	lsrs	r3, r3, #2
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d103      	bne.n	80065aa <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f9f3 	bl	800698e <I2C_MasterTransmit_TXE>
 80065a8:	e04d      	b.n	8006646 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	089b      	lsrs	r3, r3, #2
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 80d6 	beq.w	8006764 <HAL_I2C_EV_IRQHandler+0x2d6>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	0a5b      	lsrs	r3, r3, #9
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80cf 	beq.w	8006764 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80065c6:	7bbb      	ldrb	r3, [r7, #14]
 80065c8:	2b21      	cmp	r3, #33	@ 0x21
 80065ca:	d103      	bne.n	80065d4 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fa7a 	bl	8006ac6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065d2:	e0c7      	b.n	8006764 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	2b40      	cmp	r3, #64	@ 0x40
 80065d8:	f040 80c4 	bne.w	8006764 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fae8 	bl	8006bb2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065e2:	e0bf      	b.n	8006764 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065f2:	f000 80b7 	beq.w	8006764 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	099b      	lsrs	r3, r3, #6
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00f      	beq.n	8006622 <HAL_I2C_EV_IRQHandler+0x194>
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	0a9b      	lsrs	r3, r3, #10
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <HAL_I2C_EV_IRQHandler+0x194>
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	089b      	lsrs	r3, r3, #2
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fb61 	bl	8006ce2 <I2C_MasterReceive_RXNE>
 8006620:	e011      	b.n	8006646 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	089b      	lsrs	r3, r3, #2
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 809a 	beq.w	8006764 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	0a5b      	lsrs	r3, r3, #9
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8093 	beq.w	8006764 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fc17 	bl	8006e72 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006644:	e08e      	b.n	8006764 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006646:	e08d      	b.n	8006764 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d004      	beq.n	800665a <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	e007      	b.n	800666a <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d012      	beq.n	800669c <HAL_I2C_EV_IRQHandler+0x20e>
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	0a5b      	lsrs	r3, r3, #9
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00c      	beq.n	800669c <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006692:	69b9      	ldr	r1, [r7, #24]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 ffdc 	bl	8007652 <I2C_Slave_ADDR>
 800669a:	e066      	b.n	800676a <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	091b      	lsrs	r3, r3, #4
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d009      	beq.n	80066bc <HAL_I2C_EV_IRQHandler+0x22e>
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	0a5b      	lsrs	r3, r3, #9
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 f817 	bl	80076e8 <I2C_Slave_STOPF>
 80066ba:	e056      	b.n	800676a <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
 80066be:	2b21      	cmp	r3, #33	@ 0x21
 80066c0:	d002      	beq.n	80066c8 <HAL_I2C_EV_IRQHandler+0x23a>
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	2b29      	cmp	r3, #41	@ 0x29
 80066c6:	d125      	bne.n	8006714 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	09db      	lsrs	r3, r3, #7
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00f      	beq.n	80066f4 <HAL_I2C_EV_IRQHandler+0x266>
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	0a9b      	lsrs	r3, r3, #10
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d009      	beq.n	80066f4 <HAL_I2C_EV_IRQHandler+0x266>
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	089b      	lsrs	r3, r3, #2
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d103      	bne.n	80066f4 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fef2 	bl	80074d6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80066f2:	e039      	b.n	8006768 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	089b      	lsrs	r3, r3, #2
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d033      	beq.n	8006768 <HAL_I2C_EV_IRQHandler+0x2da>
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	0a5b      	lsrs	r3, r3, #9
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d02d      	beq.n	8006768 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 ff1f 	bl	8007550 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006712:	e029      	b.n	8006768 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	099b      	lsrs	r3, r3, #6
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00f      	beq.n	8006740 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	0a9b      	lsrs	r3, r3, #10
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d009      	beq.n	8006740 <HAL_I2C_EV_IRQHandler+0x2b2>
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	089b      	lsrs	r3, r3, #2
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d103      	bne.n	8006740 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 ff2a 	bl	8007592 <I2C_SlaveReceive_RXNE>
 800673e:	e014      	b.n	800676a <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	089b      	lsrs	r3, r3, #2
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00e      	beq.n	800676a <HAL_I2C_EV_IRQHandler+0x2dc>
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	0a5b      	lsrs	r3, r3, #9
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d008      	beq.n	800676a <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 ff58 	bl	800760e <I2C_SlaveReceive_BTF>
 800675e:	e004      	b.n	800676a <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006760:	bf00      	nop
 8006762:	e002      	b.n	800676a <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006764:	bf00      	nop
 8006766:	e000      	b.n	800676a <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006768:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800676a:	3720      	adds	r7, #32
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b08a      	sub	sp, #40	@ 0x28
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006788:	2300      	movs	r3, #0
 800678a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006792:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	0a1b      	lsrs	r3, r3, #8
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00e      	beq.n	80067be <HAL_I2C_ER_IRQHandler+0x4e>
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	0a1b      	lsrs	r3, r3, #8
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d008      	beq.n	80067be <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80067ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ae:	f043 0301 	orr.w	r3, r3, #1
 80067b2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80067bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	0a5b      	lsrs	r3, r3, #9
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00e      	beq.n	80067e8 <HAL_I2C_ER_IRQHandler+0x78>
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	0a1b      	lsrs	r3, r3, #8
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d008      	beq.n	80067e8 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80067d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d8:	f043 0302 	orr.w	r3, r3, #2
 80067dc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80067e6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	0a9b      	lsrs	r3, r3, #10
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d03f      	beq.n	8006874 <HAL_I2C_ER_IRQHandler+0x104>
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	0a1b      	lsrs	r3, r3, #8
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d039      	beq.n	8006874 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006800:	7efb      	ldrb	r3, [r7, #27]
 8006802:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006808:	b29b      	uxth	r3, r3
 800680a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006812:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006818:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800681a:	7ebb      	ldrb	r3, [r7, #26]
 800681c:	2b20      	cmp	r3, #32
 800681e:	d112      	bne.n	8006846 <HAL_I2C_ER_IRQHandler+0xd6>
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10f      	bne.n	8006846 <HAL_I2C_ER_IRQHandler+0xd6>
 8006826:	7cfb      	ldrb	r3, [r7, #19]
 8006828:	2b21      	cmp	r3, #33	@ 0x21
 800682a:	d008      	beq.n	800683e <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800682c:	7cfb      	ldrb	r3, [r7, #19]
 800682e:	2b29      	cmp	r3, #41	@ 0x29
 8006830:	d005      	beq.n	800683e <HAL_I2C_ER_IRQHandler+0xce>
 8006832:	7cfb      	ldrb	r3, [r7, #19]
 8006834:	2b28      	cmp	r3, #40	@ 0x28
 8006836:	d106      	bne.n	8006846 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b21      	cmp	r3, #33	@ 0x21
 800683c:	d103      	bne.n	8006846 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 f882 	bl	8007948 <I2C_Slave_AF>
 8006844:	e016      	b.n	8006874 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800684e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006852:	f043 0304 	orr.w	r3, r3, #4
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006858:	7efb      	ldrb	r3, [r7, #27]
 800685a:	2b10      	cmp	r3, #16
 800685c:	d002      	beq.n	8006864 <HAL_I2C_ER_IRQHandler+0xf4>
 800685e:	7efb      	ldrb	r3, [r7, #27]
 8006860:	2b40      	cmp	r3, #64	@ 0x40
 8006862:	d107      	bne.n	8006874 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006872:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	0adb      	lsrs	r3, r3, #11
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00e      	beq.n	800689e <HAL_I2C_ER_IRQHandler+0x12e>
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	0a1b      	lsrs	r3, r3, #8
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d008      	beq.n	800689e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800688c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688e:	f043 0308 	orr.w	r3, r3, #8
 8006892:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800689c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d008      	beq.n	80068b6 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068aa:	431a      	orrs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 f8bd 	bl	8007a30 <I2C_ITError>
  }
}
 80068b6:	bf00      	nop
 80068b8:	3728      	adds	r7, #40	@ 0x28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	460b      	mov	r3, r1
 8006918:	70fb      	strb	r3, [r7, #3]
 800691a:	4613      	mov	r3, r2
 800691c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800696e:	bf00      	nop
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800699c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069a4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d150      	bne.n	8006a56 <I2C_MasterTransmit_TXE+0xc8>
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	2b21      	cmp	r3, #33	@ 0x21
 80069b8:	d14d      	bne.n	8006a56 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d01d      	beq.n	80069fc <I2C_MasterTransmit_TXE+0x6e>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b20      	cmp	r3, #32
 80069c4:	d01a      	beq.n	80069fc <I2C_MasterTransmit_TXE+0x6e>
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80069cc:	d016      	beq.n	80069fc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80069dc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2211      	movs	r2, #17
 80069e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff ff62 	bl	80068be <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80069fa:	e060      	b.n	8006abe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006a0a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a1a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b40      	cmp	r3, #64	@ 0x40
 8006a34:	d107      	bne.n	8006a46 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff ff7d 	bl	800693e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a44:	e03b      	b.n	8006abe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff ff35 	bl	80068be <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a54:	e033      	b.n	8006abe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	2b21      	cmp	r3, #33	@ 0x21
 8006a5a:	d005      	beq.n	8006a68 <I2C_MasterTransmit_TXE+0xda>
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	2b40      	cmp	r3, #64	@ 0x40
 8006a60:	d12d      	bne.n	8006abe <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	2b22      	cmp	r3, #34	@ 0x22
 8006a66:	d12a      	bne.n	8006abe <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d108      	bne.n	8006a84 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a80:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006a82:	e01c      	b.n	8006abe <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b40      	cmp	r3, #64	@ 0x40
 8006a8e:	d103      	bne.n	8006a98 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f88e 	bl	8006bb2 <I2C_MemoryTransmit_TXE_BTF>
}
 8006a96:	e012      	b.n	8006abe <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9c:	781a      	ldrb	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006abc:	e7ff      	b.n	8006abe <I2C_MasterTransmit_TXE+0x130>
 8006abe:	bf00      	nop
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b084      	sub	sp, #16
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b21      	cmp	r3, #33	@ 0x21
 8006ade:	d164      	bne.n	8006baa <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d012      	beq.n	8006b10 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aee:	781a      	ldrb	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006b0e:	e04c      	b.n	8006baa <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d01d      	beq.n	8006b52 <I2C_MasterTransmit_BTF+0x8c>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d01a      	beq.n	8006b52 <I2C_MasterTransmit_BTF+0x8c>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b22:	d016      	beq.n	8006b52 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b32:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2211      	movs	r2, #17
 8006b38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff feb7 	bl	80068be <HAL_I2C_MasterTxCpltCallback>
}
 8006b50:	e02b      	b.n	8006baa <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b60:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b70:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b40      	cmp	r3, #64	@ 0x40
 8006b8a:	d107      	bne.n	8006b9c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff fed2 	bl	800693e <HAL_I2C_MemTxCpltCallback>
}
 8006b9a:	e006      	b.n	8006baa <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff fe8a 	bl	80068be <HAL_I2C_MasterTxCpltCallback>
}
 8006baa:	bf00      	nop
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bc0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d11d      	bne.n	8006c06 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d10b      	bne.n	8006bea <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be2:	1c9a      	adds	r2, r3, #2
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006be8:	e077      	b.n	8006cda <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	121b      	asrs	r3, r3, #8
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006c04:	e069      	b.n	8006cda <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d10b      	bne.n	8006c26 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006c24:	e059      	b.n	8006cda <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d152      	bne.n	8006cd4 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	2b22      	cmp	r3, #34	@ 0x22
 8006c32:	d10d      	bne.n	8006c50 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c42:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006c4e:	e044      	b.n	8006cda <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d015      	beq.n	8006c86 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	2b21      	cmp	r3, #33	@ 0x21
 8006c5e:	d112      	bne.n	8006c86 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c64:	781a      	ldrb	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006c84:	e029      	b.n	8006cda <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d124      	bne.n	8006cda <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	2b21      	cmp	r3, #33	@ 0x21
 8006c94:	d121      	bne.n	8006cda <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ca4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cb4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff fe36 	bl	800693e <HAL_I2C_MemTxCpltCallback>
}
 8006cd2:	e002      	b.n	8006cda <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7ff fbc5 	bl	8006464 <I2C_Flush_DR>
}
 8006cda:	bf00      	nop
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b22      	cmp	r3, #34	@ 0x22
 8006cf4:	f040 80b9 	bne.w	8006e6a <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfc:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d921      	bls.n	8006d50 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	691a      	ldr	r2, [r3, #16]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	f040 8096 	bne.w	8006e6a <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d4c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006d4e:	e08c      	b.n	8006e6a <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d07f      	beq.n	8006e58 <I2C_MasterReceive_RXNE+0x176>
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d002      	beq.n	8006d64 <I2C_MasterReceive_RXNE+0x82>
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d179      	bne.n	8006e58 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f001 f83d 	bl	8007de4 <I2C_WaitOnSTOPRequestThroughIT>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d14c      	bne.n	8006e0a <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d7e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d8e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	691a      	ldr	r2, [r3, #16]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b40      	cmp	r3, #64	@ 0x40
 8006dc8:	d10a      	bne.n	8006de0 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff fdba 	bl	8006952 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006dde:	e044      	b.n	8006e6a <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d002      	beq.n	8006df4 <I2C_MasterReceive_RXNE+0x112>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	d103      	bne.n	8006dfc <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	631a      	str	r2, [r3, #48]	@ 0x30
 8006dfa:	e002      	b.n	8006e02 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2212      	movs	r2, #18
 8006e00:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff fd65 	bl	80068d2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e08:	e02f      	b.n	8006e6a <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e18:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	691a      	ldr	r2, [r3, #16]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7ff fd88 	bl	8006966 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e56:	e008      	b.n	8006e6a <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e66:	605a      	str	r2, [r3, #4]
}
 8006e68:	e7ff      	b.n	8006e6a <I2C_MasterReceive_RXNE+0x188>
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d11b      	bne.n	8006ec2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e98:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691a      	ldr	r2, [r3, #16]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea4:	b2d2      	uxtb	r2, r2
 8006ea6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006ec0:	e0c4      	b.n	800704c <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d129      	bne.n	8006f20 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eda:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d00a      	beq.n	8006ef8 <I2C_MasterReceive_BTF+0x86>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d007      	beq.n	8006ef8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ef6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691a      	ldr	r2, [r3, #16]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	3b01      	subs	r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006f1e:	e095      	b.n	800704c <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d17d      	bne.n	8007026 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d002      	beq.n	8006f36 <I2C_MasterReceive_BTF+0xc4>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b10      	cmp	r3, #16
 8006f34:	d108      	bne.n	8006f48 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	e016      	b.n	8006f76 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d002      	beq.n	8006f54 <I2C_MasterReceive_BTF+0xe2>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d108      	bne.n	8006f66 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	e007      	b.n	8006f76 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f74:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691a      	ldr	r2, [r3, #16]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006fd0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b40      	cmp	r3, #64	@ 0x40
 8006fe4:	d10a      	bne.n	8006ffc <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fcac 	bl	8006952 <HAL_I2C_MemRxCpltCallback>
}
 8006ffa:	e027      	b.n	800704c <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b08      	cmp	r3, #8
 8007008:	d002      	beq.n	8007010 <I2C_MasterReceive_BTF+0x19e>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b20      	cmp	r3, #32
 800700e:	d103      	bne.n	8007018 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	631a      	str	r2, [r3, #48]	@ 0x30
 8007016:	e002      	b.n	800701e <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2212      	movs	r2, #18
 800701c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff fc57 	bl	80068d2 <HAL_I2C_MasterRxCpltCallback>
}
 8007024:	e012      	b.n	800704c <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	691a      	ldr	r2, [r3, #16]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007042:	b29b      	uxth	r3, r3
 8007044:	3b01      	subs	r3, #1
 8007046:	b29a      	uxth	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800704c:	bf00      	nop
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b40      	cmp	r3, #64	@ 0x40
 8007066:	d117      	bne.n	8007098 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800706c:	2b00      	cmp	r3, #0
 800706e:	d109      	bne.n	8007084 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007074:	b2db      	uxtb	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007080:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007082:	e067      	b.n	8007154 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f043 0301 	orr.w	r3, r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	611a      	str	r2, [r3, #16]
}
 8007096:	e05d      	b.n	8007154 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070a0:	d133      	bne.n	800710a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b21      	cmp	r3, #33	@ 0x21
 80070ac:	d109      	bne.n	80070c2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	461a      	mov	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80070be:	611a      	str	r2, [r3, #16]
 80070c0:	e008      	b.n	80070d4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	f043 0301 	orr.w	r3, r3, #1
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d004      	beq.n	80070e6 <I2C_Master_SB+0x92>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d108      	bne.n	80070f8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d032      	beq.n	8007154 <I2C_Master_SB+0x100>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d02d      	beq.n	8007154 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007106:	605a      	str	r2, [r3, #4]
}
 8007108:	e024      	b.n	8007154 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10e      	bne.n	8007130 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007116:	b29b      	uxth	r3, r3
 8007118:	11db      	asrs	r3, r3, #7
 800711a:	b2db      	uxtb	r3, r3
 800711c:	f003 0306 	and.w	r3, r3, #6
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f063 030f 	orn	r3, r3, #15
 8007126:	b2da      	uxtb	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	611a      	str	r2, [r3, #16]
}
 800712e:	e011      	b.n	8007154 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007134:	2b01      	cmp	r3, #1
 8007136:	d10d      	bne.n	8007154 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800713c:	b29b      	uxth	r3, r3
 800713e:	11db      	asrs	r3, r3, #7
 8007140:	b2db      	uxtb	r3, r3
 8007142:	f003 0306 	and.w	r3, r3, #6
 8007146:	b2db      	uxtb	r3, r3
 8007148:	f063 030e 	orn	r3, r3, #14
 800714c:	b2da      	uxtb	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	611a      	str	r2, [r3, #16]
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800716c:	b2da      	uxtb	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007178:	2b00      	cmp	r3, #0
 800717a:	d004      	beq.n	8007186 <I2C_Master_ADD10+0x26>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d108      	bne.n	8007198 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00c      	beq.n	80071a8 <I2C_Master_ADD10+0x48>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d007      	beq.n	80071a8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071a6:	605a      	str	r2, [r3, #4]
  }
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b091      	sub	sp, #68	@ 0x44
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d0:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b22      	cmp	r3, #34	@ 0x22
 80071dc:	f040 8169 	bne.w	80074b2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10f      	bne.n	8007208 <I2C_Master_ADDR+0x54>
 80071e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80071ec:	2b40      	cmp	r3, #64	@ 0x40
 80071ee:	d10b      	bne.n	8007208 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f0:	2300      	movs	r3, #0
 80071f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	633b      	str	r3, [r7, #48]	@ 0x30
 8007204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007206:	e160      	b.n	80074ca <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800720c:	2b00      	cmp	r3, #0
 800720e:	d11d      	bne.n	800724c <I2C_Master_ADDR+0x98>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007218:	d118      	bne.n	800724c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800721a:	2300      	movs	r3, #0
 800721c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800722e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800723e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	651a      	str	r2, [r3, #80]	@ 0x50
 800724a:	e13e      	b.n	80074ca <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007250:	b29b      	uxth	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d113      	bne.n	800727e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007256:	2300      	movs	r3, #0
 8007258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800726a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	e115      	b.n	80074aa <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007282:	b29b      	uxth	r3, r3
 8007284:	2b01      	cmp	r3, #1
 8007286:	f040 808a 	bne.w	800739e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800728a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007290:	d137      	bne.n	8007302 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072a0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072b0:	d113      	bne.n	80072da <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072c0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c2:	2300      	movs	r3, #0
 80072c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d8:	e0e7      	b.n	80074aa <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072da:	2300      	movs	r3, #0
 80072dc:	623b      	str	r3, [r7, #32]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	623b      	str	r3, [r7, #32]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	623b      	str	r3, [r7, #32]
 80072ee:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	e0d3      	b.n	80074aa <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007304:	2b08      	cmp	r3, #8
 8007306:	d02e      	beq.n	8007366 <I2C_Master_ADDR+0x1b2>
 8007308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730a:	2b20      	cmp	r3, #32
 800730c:	d02b      	beq.n	8007366 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800730e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007310:	2b12      	cmp	r3, #18
 8007312:	d102      	bne.n	800731a <I2C_Master_ADDR+0x166>
 8007314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007316:	2b01      	cmp	r3, #1
 8007318:	d125      	bne.n	8007366 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800731a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731c:	2b04      	cmp	r3, #4
 800731e:	d00e      	beq.n	800733e <I2C_Master_ADDR+0x18a>
 8007320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007322:	2b02      	cmp	r3, #2
 8007324:	d00b      	beq.n	800733e <I2C_Master_ADDR+0x18a>
 8007326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007328:	2b10      	cmp	r3, #16
 800732a:	d008      	beq.n	800733e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	e007      	b.n	800734e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800734c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800734e:	2300      	movs	r3, #0
 8007350:	61fb      	str	r3, [r7, #28]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	61fb      	str	r3, [r7, #28]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	61fb      	str	r3, [r7, #28]
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	e0a1      	b.n	80074aa <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007374:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007376:	2300      	movs	r3, #0
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	61bb      	str	r3, [r7, #24]
 800738a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	e085      	b.n	80074aa <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d14d      	bne.n	8007444 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80073a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d016      	beq.n	80073dc <I2C_Master_ADDR+0x228>
 80073ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d013      	beq.n	80073dc <I2C_Master_ADDR+0x228>
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	2b10      	cmp	r3, #16
 80073b8:	d010      	beq.n	80073dc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073c8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	e007      	b.n	80073ec <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073ea:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073fa:	d117      	bne.n	800742c <I2C_Master_ADDR+0x278>
 80073fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007402:	d00b      	beq.n	800741c <I2C_Master_ADDR+0x268>
 8007404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007406:	2b01      	cmp	r3, #1
 8007408:	d008      	beq.n	800741c <I2C_Master_ADDR+0x268>
 800740a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740c:	2b08      	cmp	r3, #8
 800740e:	d005      	beq.n	800741c <I2C_Master_ADDR+0x268>
 8007410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007412:	2b10      	cmp	r3, #16
 8007414:	d002      	beq.n	800741c <I2C_Master_ADDR+0x268>
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	2b20      	cmp	r3, #32
 800741a:	d107      	bne.n	800742c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800742a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800742c:	2300      	movs	r3, #0
 800742e:	617b      	str	r3, [r7, #20]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	e032      	b.n	80074aa <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007452:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800745e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007462:	d117      	bne.n	8007494 <I2C_Master_ADDR+0x2e0>
 8007464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007466:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800746a:	d00b      	beq.n	8007484 <I2C_Master_ADDR+0x2d0>
 800746c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746e:	2b01      	cmp	r3, #1
 8007470:	d008      	beq.n	8007484 <I2C_Master_ADDR+0x2d0>
 8007472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007474:	2b08      	cmp	r3, #8
 8007476:	d005      	beq.n	8007484 <I2C_Master_ADDR+0x2d0>
 8007478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747a:	2b10      	cmp	r3, #16
 800747c:	d002      	beq.n	8007484 <I2C_Master_ADDR+0x2d0>
 800747e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007480:	2b20      	cmp	r3, #32
 8007482:	d107      	bne.n	8007494 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007492:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007494:	2300      	movs	r3, #0
 8007496:	613b      	str	r3, [r7, #16]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	613b      	str	r3, [r7, #16]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80074b0:	e00b      	b.n	80074ca <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	60fb      	str	r3, [r7, #12]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	68fb      	ldr	r3, [r7, #12]
}
 80074c8:	e7ff      	b.n	80074ca <I2C_Master_ADDR+0x316>
 80074ca:	bf00      	nop
 80074cc:	3744      	adds	r7, #68	@ 0x44
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d02b      	beq.n	8007548 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f4:	781a      	ldrb	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800750a:	b29b      	uxth	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007518:	b29b      	uxth	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d114      	bne.n	8007548 <I2C_SlaveTransmit_TXE+0x72>
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	2b29      	cmp	r3, #41	@ 0x29
 8007522:	d111      	bne.n	8007548 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007532:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2221      	movs	r2, #33	@ 0x21
 8007538:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2228      	movs	r2, #40	@ 0x28
 800753e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff f9cf 	bl	80068e6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007548:	bf00      	nop
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800755c:	b29b      	uxth	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d011      	beq.n	8007586 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007566:	781a      	ldrb	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d02c      	beq.n	8007606 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	691a      	ldr	r2, [r3, #16]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d114      	bne.n	8007606 <I2C_SlaveReceive_RXNE+0x74>
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	2b2a      	cmp	r3, #42	@ 0x2a
 80075e0:	d111      	bne.n	8007606 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2222      	movs	r2, #34	@ 0x22
 80075f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2228      	movs	r2, #40	@ 0x28
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff f97a 	bl	80068fa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007606:	bf00      	nop
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800761a:	b29b      	uxth	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d012      	beq.n	8007646 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	691a      	ldr	r2, [r3, #16]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762a:	b2d2      	uxtb	r2, r2
 800762c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800763c:	b29b      	uxth	r3, r3
 800763e:	3b01      	subs	r3, #1
 8007640:	b29a      	uxth	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800765c:	2300      	movs	r3, #0
 800765e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007666:	b2db      	uxtb	r3, r3
 8007668:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800766c:	2b28      	cmp	r3, #40	@ 0x28
 800766e:	d127      	bne.n	80076c0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800767e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	089b      	lsrs	r3, r3, #2
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800768c:	2301      	movs	r3, #1
 800768e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	09db      	lsrs	r3, r3, #7
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d103      	bne.n	80076a4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	81bb      	strh	r3, [r7, #12]
 80076a2:	e002      	b.n	80076aa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80076b2:	89ba      	ldrh	r2, [r7, #12]
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7ff f928 	bl	800690e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80076be:	e00e      	b.n	80076de <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076c0:	2300      	movs	r3, #0
 80076c2:	60bb      	str	r3, [r7, #8]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	60bb      	str	r3, [r7, #8]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	60bb      	str	r3, [r7, #8]
 80076d4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80076de:	bf00      	nop
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076f6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007706:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007708:	2300      	movs	r3, #0
 800770a:	60bb      	str	r3, [r7, #8]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	60bb      	str	r3, [r7, #8]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0201 	orr.w	r2, r2, #1
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007734:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007744:	d172      	bne.n	800782c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	2b22      	cmp	r3, #34	@ 0x22
 800774a:	d002      	beq.n	8007752 <I2C_Slave_STOPF+0x6a>
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007750:	d135      	bne.n	80077be <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	b29a      	uxth	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d005      	beq.n	8007776 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776e:	f043 0204 	orr.w	r2, r3, #4
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007784:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe fa8a 	bl	8005ca4 <HAL_DMA_GetState>
 8007790:	4603      	mov	r3, r0
 8007792:	2b01      	cmp	r3, #1
 8007794:	d049      	beq.n	800782a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779a:	4a69      	ldr	r2, [pc, #420]	@ (8007940 <I2C_Slave_STOPF+0x258>)
 800779c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe f8d2 	bl	800594c <HAL_DMA_Abort_IT>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d03d      	beq.n	800782a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80077b8:	4610      	mov	r0, r2
 80077ba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077bc:	e035      	b.n	800782a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d005      	beq.n	80077e2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077da:	f043 0204 	orr.w	r2, r3, #4
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe fa54 	bl	8005ca4 <HAL_DMA_GetState>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d014      	beq.n	800782c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007806:	4a4e      	ldr	r2, [pc, #312]	@ (8007940 <I2C_Slave_STOPF+0x258>)
 8007808:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800780e:	4618      	mov	r0, r3
 8007810:	f7fe f89c 	bl	800594c <HAL_DMA_Abort_IT>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d008      	beq.n	800782c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800781e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
 8007828:	e000      	b.n	800782c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800782a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d03e      	beq.n	80078b4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b04      	cmp	r3, #4
 8007842:	d112      	bne.n	800786a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	691a      	ldr	r2, [r3, #16]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784e:	b2d2      	uxtb	r2, r2
 8007850:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007860:	b29b      	uxth	r3, r3
 8007862:	3b01      	subs	r3, #1
 8007864:	b29a      	uxth	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007874:	2b40      	cmp	r3, #64	@ 0x40
 8007876:	d112      	bne.n	800789e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691a      	ldr	r2, [r3, #16]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007882:	b2d2      	uxtb	r2, r2
 8007884:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007894:	b29b      	uxth	r3, r3
 8007896:	3b01      	subs	r3, #1
 8007898:	b29a      	uxth	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d005      	beq.n	80078b4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ac:	f043 0204 	orr.w	r2, r3, #4
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f8b7 	bl	8007a30 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80078c2:	e039      	b.n	8007938 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80078c8:	d109      	bne.n	80078de <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2228      	movs	r2, #40	@ 0x28
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7ff f80e 	bl	80068fa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b28      	cmp	r3, #40	@ 0x28
 80078e8:	d111      	bne.n	800790e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a15      	ldr	r2, [pc, #84]	@ (8007944 <I2C_Slave_STOPF+0x25c>)
 80078ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff f80f 	bl	800692a <HAL_I2C_ListenCpltCallback>
}
 800790c:	e014      	b.n	8007938 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007912:	2b22      	cmp	r3, #34	@ 0x22
 8007914:	d002      	beq.n	800791c <I2C_Slave_STOPF+0x234>
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	2b22      	cmp	r3, #34	@ 0x22
 800791a:	d10d      	bne.n	8007938 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2220      	movs	r2, #32
 8007926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fe ffe1 	bl	80068fa <HAL_I2C_SlaveRxCpltCallback>
}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	08007c95 	.word	0x08007c95
 8007944:	ffff0000 	.word	0xffff0000

08007948 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007956:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2b08      	cmp	r3, #8
 8007962:	d002      	beq.n	800796a <I2C_Slave_AF+0x22>
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b20      	cmp	r3, #32
 8007968:	d129      	bne.n	80079be <I2C_Slave_AF+0x76>
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	2b28      	cmp	r3, #40	@ 0x28
 800796e:	d126      	bne.n	80079be <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a2e      	ldr	r2, [pc, #184]	@ (8007a2c <I2C_Slave_AF+0xe4>)
 8007974:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007984:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800798e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800799e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7fe ffb7 	bl	800692a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80079bc:	e031      	b.n	8007a22 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80079be:	7bfb      	ldrb	r3, [r7, #15]
 80079c0:	2b21      	cmp	r3, #33	@ 0x21
 80079c2:	d129      	bne.n	8007a18 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a19      	ldr	r2, [pc, #100]	@ (8007a2c <I2C_Slave_AF+0xe4>)
 80079c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2221      	movs	r2, #33	@ 0x21
 80079ce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2220      	movs	r2, #32
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80079ee:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80079f8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a08:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7fe fd2a 	bl	8006464 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7fe ff68 	bl	80068e6 <HAL_I2C_SlaveTxCpltCallback>
}
 8007a16:	e004      	b.n	8007a22 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007a20:	615a      	str	r2, [r3, #20]
}
 8007a22:	bf00      	nop
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	ffff0000 	.word	0xffff0000

08007a30 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b10      	cmp	r3, #16
 8007a4c:	d002      	beq.n	8007a54 <I2C_ITError+0x24>
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	2b40      	cmp	r3, #64	@ 0x40
 8007a52:	d10a      	bne.n	8007a6a <I2C_ITError+0x3a>
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	2b22      	cmp	r3, #34	@ 0x22
 8007a58:	d107      	bne.n	8007a6a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a68:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007a70:	2b28      	cmp	r3, #40	@ 0x28
 8007a72:	d107      	bne.n	8007a84 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2228      	movs	r2, #40	@ 0x28
 8007a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007a82:	e015      	b.n	8007ab0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a92:	d00a      	beq.n	8007aaa <I2C_ITError+0x7a>
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	2b60      	cmp	r3, #96	@ 0x60
 8007a98:	d007      	beq.n	8007aaa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007aba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007abe:	d162      	bne.n	8007b86 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ace:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d020      	beq.n	8007b20 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ae2:	4a6a      	ldr	r2, [pc, #424]	@ (8007c8c <I2C_ITError+0x25c>)
 8007ae4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fd ff2e 	bl	800594c <HAL_DMA_Abort_IT>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 8089 	beq.w	8007c0a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 0201 	bic.w	r2, r2, #1
 8007b06:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	4798      	blx	r3
 8007b1e:	e074      	b.n	8007c0a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b24:	4a59      	ldr	r2, [pc, #356]	@ (8007c8c <I2C_ITError+0x25c>)
 8007b26:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fd ff0d 	bl	800594c <HAL_DMA_Abort_IT>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d068      	beq.n	8007c0a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b42:	2b40      	cmp	r3, #64	@ 0x40
 8007b44:	d10b      	bne.n	8007b5e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	691a      	ldr	r2, [r3, #16]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b50:	b2d2      	uxtb	r2, r2
 8007b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0201 	bic.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	e041      	b.n	8007c0a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b60      	cmp	r3, #96	@ 0x60
 8007b90:	d125      	bne.n	8007bde <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007baa:	2b40      	cmp	r3, #64	@ 0x40
 8007bac:	d10b      	bne.n	8007bc6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	691a      	ldr	r2, [r3, #16]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb8:	b2d2      	uxtb	r2, r2
 8007bba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0201 	bic.w	r2, r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7fe fecf 	bl	800697a <HAL_I2C_AbortCpltCallback>
 8007bdc:	e015      	b.n	8007c0a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be8:	2b40      	cmp	r3, #64	@ 0x40
 8007bea:	d10b      	bne.n	8007c04 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7fe feae 	bl	8006966 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c0e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10e      	bne.n	8007c38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d109      	bne.n	8007c38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d104      	bne.n	8007c38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d007      	beq.n	8007c48 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007c46:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c4e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	2b04      	cmp	r3, #4
 8007c5a:	d113      	bne.n	8007c84 <I2C_ITError+0x254>
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	2b28      	cmp	r3, #40	@ 0x28
 8007c60:	d110      	bne.n	8007c84 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a0a      	ldr	r2, [pc, #40]	@ (8007c90 <I2C_ITError+0x260>)
 8007c66:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7fe fe53 	bl	800692a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	08007c95 	.word	0x08007c95
 8007c90:	ffff0000 	.word	0xffff0000

08007c94 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007cae:	4b4b      	ldr	r3, [pc, #300]	@ (8007ddc <I2C_DMAAbort+0x148>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	08db      	lsrs	r3, r3, #3
 8007cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8007de0 <I2C_DMAAbort+0x14c>)
 8007cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cba:	0a1a      	lsrs	r2, r3, #8
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	00da      	lsls	r2, r3, #3
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d106      	bne.n	8007cdc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd2:	f043 0220 	orr.w	r2, r3, #32
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007cda:	e00a      	b.n	8007cf2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cf0:	d0ea      	beq.n	8007cc8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cfe:	2200      	movs	r2, #0
 8007d00:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d0e:	2200      	movs	r2, #0
 8007d10:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d20:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2200      	movs	r2, #0
 8007d26:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d34:	2200      	movs	r2, #0
 8007d36:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d003      	beq.n	8007d48 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d44:	2200      	movs	r2, #0
 8007d46:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f022 0201 	bic.w	r2, r2, #1
 8007d56:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b60      	cmp	r3, #96	@ 0x60
 8007d62:	d10e      	bne.n	8007d82 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2220      	movs	r2, #32
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	2200      	movs	r2, #0
 8007d78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007d7a:	6978      	ldr	r0, [r7, #20]
 8007d7c:	f7fe fdfd 	bl	800697a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d80:	e027      	b.n	8007dd2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d82:	7cfb      	ldrb	r3, [r7, #19]
 8007d84:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d88:	2b28      	cmp	r3, #40	@ 0x28
 8007d8a:	d117      	bne.n	8007dbc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0201 	orr.w	r2, r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007daa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	2200      	movs	r2, #0
 8007db0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2228      	movs	r2, #40	@ 0x28
 8007db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007dba:	e007      	b.n	8007dcc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	2220      	movs	r2, #32
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007dcc:	6978      	ldr	r0, [r7, #20]
 8007dce:	f7fe fdca 	bl	8006966 <HAL_I2C_ErrorCallback>
}
 8007dd2:	bf00      	nop
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	20000000 	.word	0x20000000
 8007de0:	14f8b589 	.word	0x14f8b589

08007de4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007df0:	4b13      	ldr	r3, [pc, #76]	@ (8007e40 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	08db      	lsrs	r3, r3, #3
 8007df6:	4a13      	ldr	r2, [pc, #76]	@ (8007e44 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007df8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfc:	0a1a      	lsrs	r2, r3, #8
 8007dfe:	4613      	mov	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d107      	bne.n	8007e22 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e16:	f043 0220 	orr.w	r2, r3, #32
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e008      	b.n	8007e34 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e30:	d0e9      	beq.n	8007e06 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	20000000 	.word	0x20000000
 8007e44:	14f8b589 	.word	0x14f8b589

08007e48 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e54:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007e58:	d103      	bne.n	8007e62 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007e60:	e007      	b.n	8007e72 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e66:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007e6a:	d102      	bne.n	8007e72 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2208      	movs	r2, #8
 8007e70:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007e72:	bf00      	nop
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
	...

08007e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e0cc      	b.n	800802e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e94:	4b68      	ldr	r3, [pc, #416]	@ (8008038 <HAL_RCC_ClockConfig+0x1b8>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 030f 	and.w	r3, r3, #15
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d90c      	bls.n	8007ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ea2:	4b65      	ldr	r3, [pc, #404]	@ (8008038 <HAL_RCC_ClockConfig+0x1b8>)
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	b2d2      	uxtb	r2, r2
 8007ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eaa:	4b63      	ldr	r3, [pc, #396]	@ (8008038 <HAL_RCC_ClockConfig+0x1b8>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 030f 	and.w	r3, r3, #15
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d001      	beq.n	8007ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e0b8      	b.n	800802e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d020      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ed4:	4b59      	ldr	r3, [pc, #356]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	4a58      	ldr	r2, [pc, #352]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007eda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ede:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0308 	and.w	r3, r3, #8
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d005      	beq.n	8007ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007eec:	4b53      	ldr	r3, [pc, #332]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	4a52      	ldr	r2, [pc, #328]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007ef2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ef8:	4b50      	ldr	r3, [pc, #320]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	494d      	ldr	r1, [pc, #308]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d044      	beq.n	8007fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d107      	bne.n	8007f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f1e:	4b47      	ldr	r3, [pc, #284]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d119      	bne.n	8007f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e07f      	b.n	800802e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d003      	beq.n	8007f3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d107      	bne.n	8007f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d109      	bne.n	8007f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e06f      	b.n	800802e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e067      	b.n	800802e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f5e:	4b37      	ldr	r3, [pc, #220]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f023 0203 	bic.w	r2, r3, #3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	4934      	ldr	r1, [pc, #208]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f70:	f7fc ff40 	bl	8004df4 <HAL_GetTick>
 8007f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f76:	e00a      	b.n	8007f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f78:	f7fc ff3c 	bl	8004df4 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e04f      	b.n	800802e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f003 020c 	and.w	r2, r3, #12
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d1eb      	bne.n	8007f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fa0:	4b25      	ldr	r3, [pc, #148]	@ (8008038 <HAL_RCC_ClockConfig+0x1b8>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d20c      	bcs.n	8007fc8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fae:	4b22      	ldr	r3, [pc, #136]	@ (8008038 <HAL_RCC_ClockConfig+0x1b8>)
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	b2d2      	uxtb	r2, r2
 8007fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fb6:	4b20      	ldr	r3, [pc, #128]	@ (8008038 <HAL_RCC_ClockConfig+0x1b8>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d001      	beq.n	8007fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e032      	b.n	800802e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d008      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fd4:	4b19      	ldr	r3, [pc, #100]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	4916      	ldr	r1, [pc, #88]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d009      	beq.n	8008006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ff2:	4b12      	ldr	r3, [pc, #72]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	490e      	ldr	r1, [pc, #56]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8008002:	4313      	orrs	r3, r2
 8008004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008006:	f000 f855 	bl	80080b4 <HAL_RCC_GetSysClockFreq>
 800800a:	4602      	mov	r2, r0
 800800c:	4b0b      	ldr	r3, [pc, #44]	@ (800803c <HAL_RCC_ClockConfig+0x1bc>)
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	091b      	lsrs	r3, r3, #4
 8008012:	f003 030f 	and.w	r3, r3, #15
 8008016:	490a      	ldr	r1, [pc, #40]	@ (8008040 <HAL_RCC_ClockConfig+0x1c0>)
 8008018:	5ccb      	ldrb	r3, [r1, r3]
 800801a:	fa22 f303 	lsr.w	r3, r2, r3
 800801e:	4a09      	ldr	r2, [pc, #36]	@ (8008044 <HAL_RCC_ClockConfig+0x1c4>)
 8008020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008022:	4b09      	ldr	r3, [pc, #36]	@ (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4618      	mov	r0, r3
 8008028:	f7fc fea0 	bl	8004d6c <HAL_InitTick>

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	40023c00 	.word	0x40023c00
 800803c:	40023800 	.word	0x40023800
 8008040:	08010744 	.word	0x08010744
 8008044:	20000000 	.word	0x20000000
 8008048:	20000004 	.word	0x20000004

0800804c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008050:	4b03      	ldr	r3, [pc, #12]	@ (8008060 <HAL_RCC_GetHCLKFreq+0x14>)
 8008052:	681b      	ldr	r3, [r3, #0]
}
 8008054:	4618      	mov	r0, r3
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	20000000 	.word	0x20000000

08008064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008068:	f7ff fff0 	bl	800804c <HAL_RCC_GetHCLKFreq>
 800806c:	4602      	mov	r2, r0
 800806e:	4b05      	ldr	r3, [pc, #20]	@ (8008084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	0a9b      	lsrs	r3, r3, #10
 8008074:	f003 0307 	and.w	r3, r3, #7
 8008078:	4903      	ldr	r1, [pc, #12]	@ (8008088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800807a:	5ccb      	ldrb	r3, [r1, r3]
 800807c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008080:	4618      	mov	r0, r3
 8008082:	bd80      	pop	{r7, pc}
 8008084:	40023800 	.word	0x40023800
 8008088:	08010754 	.word	0x08010754

0800808c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008090:	f7ff ffdc 	bl	800804c <HAL_RCC_GetHCLKFreq>
 8008094:	4602      	mov	r2, r0
 8008096:	4b05      	ldr	r3, [pc, #20]	@ (80080ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	0b5b      	lsrs	r3, r3, #13
 800809c:	f003 0307 	and.w	r3, r3, #7
 80080a0:	4903      	ldr	r1, [pc, #12]	@ (80080b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080a2:	5ccb      	ldrb	r3, [r1, r3]
 80080a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	40023800 	.word	0x40023800
 80080b0:	08010754 	.word	0x08010754

080080b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080b8:	b0ae      	sub	sp, #184	@ 0xb8
 80080ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80080bc:	2300      	movs	r3, #0
 80080be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080da:	4bcb      	ldr	r3, [pc, #812]	@ (8008408 <HAL_RCC_GetSysClockFreq+0x354>)
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f003 030c 	and.w	r3, r3, #12
 80080e2:	2b0c      	cmp	r3, #12
 80080e4:	f200 8206 	bhi.w	80084f4 <HAL_RCC_GetSysClockFreq+0x440>
 80080e8:	a201      	add	r2, pc, #4	@ (adr r2, 80080f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008125 	.word	0x08008125
 80080f4:	080084f5 	.word	0x080084f5
 80080f8:	080084f5 	.word	0x080084f5
 80080fc:	080084f5 	.word	0x080084f5
 8008100:	0800812d 	.word	0x0800812d
 8008104:	080084f5 	.word	0x080084f5
 8008108:	080084f5 	.word	0x080084f5
 800810c:	080084f5 	.word	0x080084f5
 8008110:	08008135 	.word	0x08008135
 8008114:	080084f5 	.word	0x080084f5
 8008118:	080084f5 	.word	0x080084f5
 800811c:	080084f5 	.word	0x080084f5
 8008120:	08008325 	.word	0x08008325
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008124:	4bb9      	ldr	r3, [pc, #740]	@ (800840c <HAL_RCC_GetSysClockFreq+0x358>)
 8008126:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800812a:	e1e7      	b.n	80084fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800812c:	4bb8      	ldr	r3, [pc, #736]	@ (8008410 <HAL_RCC_GetSysClockFreq+0x35c>)
 800812e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008132:	e1e3      	b.n	80084fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008134:	4bb4      	ldr	r3, [pc, #720]	@ (8008408 <HAL_RCC_GetSysClockFreq+0x354>)
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800813c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008140:	4bb1      	ldr	r3, [pc, #708]	@ (8008408 <HAL_RCC_GetSysClockFreq+0x354>)
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d071      	beq.n	8008230 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800814c:	4bae      	ldr	r3, [pc, #696]	@ (8008408 <HAL_RCC_GetSysClockFreq+0x354>)
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	099b      	lsrs	r3, r3, #6
 8008152:	2200      	movs	r2, #0
 8008154:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008158:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800815c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008164:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008168:	2300      	movs	r3, #0
 800816a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800816e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008172:	4622      	mov	r2, r4
 8008174:	462b      	mov	r3, r5
 8008176:	f04f 0000 	mov.w	r0, #0
 800817a:	f04f 0100 	mov.w	r1, #0
 800817e:	0159      	lsls	r1, r3, #5
 8008180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008184:	0150      	lsls	r0, r2, #5
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	4621      	mov	r1, r4
 800818c:	1a51      	subs	r1, r2, r1
 800818e:	6439      	str	r1, [r7, #64]	@ 0x40
 8008190:	4629      	mov	r1, r5
 8008192:	eb63 0301 	sbc.w	r3, r3, r1
 8008196:	647b      	str	r3, [r7, #68]	@ 0x44
 8008198:	f04f 0200 	mov.w	r2, #0
 800819c:	f04f 0300 	mov.w	r3, #0
 80081a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80081a4:	4649      	mov	r1, r9
 80081a6:	018b      	lsls	r3, r1, #6
 80081a8:	4641      	mov	r1, r8
 80081aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80081ae:	4641      	mov	r1, r8
 80081b0:	018a      	lsls	r2, r1, #6
 80081b2:	4641      	mov	r1, r8
 80081b4:	1a51      	subs	r1, r2, r1
 80081b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80081b8:	4649      	mov	r1, r9
 80081ba:	eb63 0301 	sbc.w	r3, r3, r1
 80081be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081c0:	f04f 0200 	mov.w	r2, #0
 80081c4:	f04f 0300 	mov.w	r3, #0
 80081c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80081cc:	4649      	mov	r1, r9
 80081ce:	00cb      	lsls	r3, r1, #3
 80081d0:	4641      	mov	r1, r8
 80081d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081d6:	4641      	mov	r1, r8
 80081d8:	00ca      	lsls	r2, r1, #3
 80081da:	4610      	mov	r0, r2
 80081dc:	4619      	mov	r1, r3
 80081de:	4603      	mov	r3, r0
 80081e0:	4622      	mov	r2, r4
 80081e2:	189b      	adds	r3, r3, r2
 80081e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80081e6:	462b      	mov	r3, r5
 80081e8:	460a      	mov	r2, r1
 80081ea:	eb42 0303 	adc.w	r3, r2, r3
 80081ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80081f0:	f04f 0200 	mov.w	r2, #0
 80081f4:	f04f 0300 	mov.w	r3, #0
 80081f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80081fc:	4629      	mov	r1, r5
 80081fe:	024b      	lsls	r3, r1, #9
 8008200:	4621      	mov	r1, r4
 8008202:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008206:	4621      	mov	r1, r4
 8008208:	024a      	lsls	r2, r1, #9
 800820a:	4610      	mov	r0, r2
 800820c:	4619      	mov	r1, r3
 800820e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008212:	2200      	movs	r2, #0
 8008214:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008218:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800821c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008220:	f7f8 fd32 	bl	8000c88 <__aeabi_uldivmod>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4613      	mov	r3, r2
 800822a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800822e:	e067      	b.n	8008300 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008230:	4b75      	ldr	r3, [pc, #468]	@ (8008408 <HAL_RCC_GetSysClockFreq+0x354>)
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	099b      	lsrs	r3, r3, #6
 8008236:	2200      	movs	r2, #0
 8008238:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800823c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008240:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008248:	67bb      	str	r3, [r7, #120]	@ 0x78
 800824a:	2300      	movs	r3, #0
 800824c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800824e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8008252:	4622      	mov	r2, r4
 8008254:	462b      	mov	r3, r5
 8008256:	f04f 0000 	mov.w	r0, #0
 800825a:	f04f 0100 	mov.w	r1, #0
 800825e:	0159      	lsls	r1, r3, #5
 8008260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008264:	0150      	lsls	r0, r2, #5
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	4621      	mov	r1, r4
 800826c:	1a51      	subs	r1, r2, r1
 800826e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008270:	4629      	mov	r1, r5
 8008272:	eb63 0301 	sbc.w	r3, r3, r1
 8008276:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008278:	f04f 0200 	mov.w	r2, #0
 800827c:	f04f 0300 	mov.w	r3, #0
 8008280:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8008284:	4649      	mov	r1, r9
 8008286:	018b      	lsls	r3, r1, #6
 8008288:	4641      	mov	r1, r8
 800828a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800828e:	4641      	mov	r1, r8
 8008290:	018a      	lsls	r2, r1, #6
 8008292:	4641      	mov	r1, r8
 8008294:	ebb2 0a01 	subs.w	sl, r2, r1
 8008298:	4649      	mov	r1, r9
 800829a:	eb63 0b01 	sbc.w	fp, r3, r1
 800829e:	f04f 0200 	mov.w	r2, #0
 80082a2:	f04f 0300 	mov.w	r3, #0
 80082a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082b2:	4692      	mov	sl, r2
 80082b4:	469b      	mov	fp, r3
 80082b6:	4623      	mov	r3, r4
 80082b8:	eb1a 0303 	adds.w	r3, sl, r3
 80082bc:	623b      	str	r3, [r7, #32]
 80082be:	462b      	mov	r3, r5
 80082c0:	eb4b 0303 	adc.w	r3, fp, r3
 80082c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80082c6:	f04f 0200 	mov.w	r2, #0
 80082ca:	f04f 0300 	mov.w	r3, #0
 80082ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80082d2:	4629      	mov	r1, r5
 80082d4:	028b      	lsls	r3, r1, #10
 80082d6:	4621      	mov	r1, r4
 80082d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80082dc:	4621      	mov	r1, r4
 80082de:	028a      	lsls	r2, r1, #10
 80082e0:	4610      	mov	r0, r2
 80082e2:	4619      	mov	r1, r3
 80082e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80082e8:	2200      	movs	r2, #0
 80082ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80082ec:	677a      	str	r2, [r7, #116]	@ 0x74
 80082ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80082f2:	f7f8 fcc9 	bl	8000c88 <__aeabi_uldivmod>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	4613      	mov	r3, r2
 80082fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008300:	4b41      	ldr	r3, [pc, #260]	@ (8008408 <HAL_RCC_GetSysClockFreq+0x354>)
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	0c1b      	lsrs	r3, r3, #16
 8008306:	f003 0303 	and.w	r3, r3, #3
 800830a:	3301      	adds	r3, #1
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8008312:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008316:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800831a:	fbb2 f3f3 	udiv	r3, r2, r3
 800831e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008322:	e0eb      	b.n	80084fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008324:	4b38      	ldr	r3, [pc, #224]	@ (8008408 <HAL_RCC_GetSysClockFreq+0x354>)
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800832c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008330:	4b35      	ldr	r3, [pc, #212]	@ (8008408 <HAL_RCC_GetSysClockFreq+0x354>)
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d06b      	beq.n	8008414 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800833c:	4b32      	ldr	r3, [pc, #200]	@ (8008408 <HAL_RCC_GetSysClockFreq+0x354>)
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	099b      	lsrs	r3, r3, #6
 8008342:	2200      	movs	r2, #0
 8008344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008346:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008348:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800834a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008350:	2300      	movs	r3, #0
 8008352:	667b      	str	r3, [r7, #100]	@ 0x64
 8008354:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8008358:	4622      	mov	r2, r4
 800835a:	462b      	mov	r3, r5
 800835c:	f04f 0000 	mov.w	r0, #0
 8008360:	f04f 0100 	mov.w	r1, #0
 8008364:	0159      	lsls	r1, r3, #5
 8008366:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800836a:	0150      	lsls	r0, r2, #5
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4621      	mov	r1, r4
 8008372:	1a51      	subs	r1, r2, r1
 8008374:	61b9      	str	r1, [r7, #24]
 8008376:	4629      	mov	r1, r5
 8008378:	eb63 0301 	sbc.w	r3, r3, r1
 800837c:	61fb      	str	r3, [r7, #28]
 800837e:	f04f 0200 	mov.w	r2, #0
 8008382:	f04f 0300 	mov.w	r3, #0
 8008386:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800838a:	4659      	mov	r1, fp
 800838c:	018b      	lsls	r3, r1, #6
 800838e:	4651      	mov	r1, sl
 8008390:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008394:	4651      	mov	r1, sl
 8008396:	018a      	lsls	r2, r1, #6
 8008398:	4651      	mov	r1, sl
 800839a:	ebb2 0801 	subs.w	r8, r2, r1
 800839e:	4659      	mov	r1, fp
 80083a0:	eb63 0901 	sbc.w	r9, r3, r1
 80083a4:	f04f 0200 	mov.w	r2, #0
 80083a8:	f04f 0300 	mov.w	r3, #0
 80083ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083b8:	4690      	mov	r8, r2
 80083ba:	4699      	mov	r9, r3
 80083bc:	4623      	mov	r3, r4
 80083be:	eb18 0303 	adds.w	r3, r8, r3
 80083c2:	613b      	str	r3, [r7, #16]
 80083c4:	462b      	mov	r3, r5
 80083c6:	eb49 0303 	adc.w	r3, r9, r3
 80083ca:	617b      	str	r3, [r7, #20]
 80083cc:	f04f 0200 	mov.w	r2, #0
 80083d0:	f04f 0300 	mov.w	r3, #0
 80083d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80083d8:	4629      	mov	r1, r5
 80083da:	024b      	lsls	r3, r1, #9
 80083dc:	4621      	mov	r1, r4
 80083de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80083e2:	4621      	mov	r1, r4
 80083e4:	024a      	lsls	r2, r1, #9
 80083e6:	4610      	mov	r0, r2
 80083e8:	4619      	mov	r1, r3
 80083ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083ee:	2200      	movs	r2, #0
 80083f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083f2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80083f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80083f8:	f7f8 fc46 	bl	8000c88 <__aeabi_uldivmod>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4613      	mov	r3, r2
 8008402:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008406:	e065      	b.n	80084d4 <HAL_RCC_GetSysClockFreq+0x420>
 8008408:	40023800 	.word	0x40023800
 800840c:	00f42400 	.word	0x00f42400
 8008410:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008414:	4b3d      	ldr	r3, [pc, #244]	@ (800850c <HAL_RCC_GetSysClockFreq+0x458>)
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	099b      	lsrs	r3, r3, #6
 800841a:	2200      	movs	r2, #0
 800841c:	4618      	mov	r0, r3
 800841e:	4611      	mov	r1, r2
 8008420:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008424:	653b      	str	r3, [r7, #80]	@ 0x50
 8008426:	2300      	movs	r3, #0
 8008428:	657b      	str	r3, [r7, #84]	@ 0x54
 800842a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800842e:	4642      	mov	r2, r8
 8008430:	464b      	mov	r3, r9
 8008432:	f04f 0000 	mov.w	r0, #0
 8008436:	f04f 0100 	mov.w	r1, #0
 800843a:	0159      	lsls	r1, r3, #5
 800843c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008440:	0150      	lsls	r0, r2, #5
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4641      	mov	r1, r8
 8008448:	1a51      	subs	r1, r2, r1
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	4649      	mov	r1, r9
 800844e:	eb63 0301 	sbc.w	r3, r3, r1
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	f04f 0200 	mov.w	r2, #0
 8008458:	f04f 0300 	mov.w	r3, #0
 800845c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008460:	4659      	mov	r1, fp
 8008462:	018b      	lsls	r3, r1, #6
 8008464:	4651      	mov	r1, sl
 8008466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800846a:	4651      	mov	r1, sl
 800846c:	018a      	lsls	r2, r1, #6
 800846e:	4651      	mov	r1, sl
 8008470:	1a54      	subs	r4, r2, r1
 8008472:	4659      	mov	r1, fp
 8008474:	eb63 0501 	sbc.w	r5, r3, r1
 8008478:	f04f 0200 	mov.w	r2, #0
 800847c:	f04f 0300 	mov.w	r3, #0
 8008480:	00eb      	lsls	r3, r5, #3
 8008482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008486:	00e2      	lsls	r2, r4, #3
 8008488:	4614      	mov	r4, r2
 800848a:	461d      	mov	r5, r3
 800848c:	4643      	mov	r3, r8
 800848e:	18e3      	adds	r3, r4, r3
 8008490:	603b      	str	r3, [r7, #0]
 8008492:	464b      	mov	r3, r9
 8008494:	eb45 0303 	adc.w	r3, r5, r3
 8008498:	607b      	str	r3, [r7, #4]
 800849a:	f04f 0200 	mov.w	r2, #0
 800849e:	f04f 0300 	mov.w	r3, #0
 80084a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084a6:	4629      	mov	r1, r5
 80084a8:	028b      	lsls	r3, r1, #10
 80084aa:	4621      	mov	r1, r4
 80084ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80084b0:	4621      	mov	r1, r4
 80084b2:	028a      	lsls	r2, r1, #10
 80084b4:	4610      	mov	r0, r2
 80084b6:	4619      	mov	r1, r3
 80084b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084bc:	2200      	movs	r2, #0
 80084be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084c0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80084c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80084c6:	f7f8 fbdf 	bl	8000c88 <__aeabi_uldivmod>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	4613      	mov	r3, r2
 80084d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80084d4:	4b0d      	ldr	r3, [pc, #52]	@ (800850c <HAL_RCC_GetSysClockFreq+0x458>)
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	0f1b      	lsrs	r3, r3, #28
 80084da:	f003 0307 	and.w	r3, r3, #7
 80084de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80084e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80084ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80084f2:	e003      	b.n	80084fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80084f4:	4b06      	ldr	r3, [pc, #24]	@ (8008510 <HAL_RCC_GetSysClockFreq+0x45c>)
 80084f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80084fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80084fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8008500:	4618      	mov	r0, r3
 8008502:	37b8      	adds	r7, #184	@ 0xb8
 8008504:	46bd      	mov	sp, r7
 8008506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800850a:	bf00      	nop
 800850c:	40023800 	.word	0x40023800
 8008510:	00f42400 	.word	0x00f42400

08008514 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e28d      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 8083 	beq.w	800863a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008534:	4b94      	ldr	r3, [pc, #592]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f003 030c 	and.w	r3, r3, #12
 800853c:	2b04      	cmp	r3, #4
 800853e:	d019      	beq.n	8008574 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008540:	4b91      	ldr	r3, [pc, #580]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f003 030c 	and.w	r3, r3, #12
        || \
 8008548:	2b08      	cmp	r3, #8
 800854a:	d106      	bne.n	800855a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800854c:	4b8e      	ldr	r3, [pc, #568]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008554:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008558:	d00c      	beq.n	8008574 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800855a:	4b8b      	ldr	r3, [pc, #556]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008562:	2b0c      	cmp	r3, #12
 8008564:	d112      	bne.n	800858c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008566:	4b88      	ldr	r3, [pc, #544]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800856e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008572:	d10b      	bne.n	800858c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008574:	4b84      	ldr	r3, [pc, #528]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d05b      	beq.n	8008638 <HAL_RCC_OscConfig+0x124>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d157      	bne.n	8008638 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e25a      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008594:	d106      	bne.n	80085a4 <HAL_RCC_OscConfig+0x90>
 8008596:	4b7c      	ldr	r3, [pc, #496]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a7b      	ldr	r2, [pc, #492]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 800859c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	e01d      	b.n	80085e0 <HAL_RCC_OscConfig+0xcc>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085ac:	d10c      	bne.n	80085c8 <HAL_RCC_OscConfig+0xb4>
 80085ae:	4b76      	ldr	r3, [pc, #472]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a75      	ldr	r2, [pc, #468]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 80085b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085b8:	6013      	str	r3, [r2, #0]
 80085ba:	4b73      	ldr	r3, [pc, #460]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a72      	ldr	r2, [pc, #456]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 80085c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	e00b      	b.n	80085e0 <HAL_RCC_OscConfig+0xcc>
 80085c8:	4b6f      	ldr	r3, [pc, #444]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a6e      	ldr	r2, [pc, #440]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 80085ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	4b6c      	ldr	r3, [pc, #432]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a6b      	ldr	r2, [pc, #428]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 80085da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d013      	beq.n	8008610 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e8:	f7fc fc04 	bl	8004df4 <HAL_GetTick>
 80085ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085ee:	e008      	b.n	8008602 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085f0:	f7fc fc00 	bl	8004df4 <HAL_GetTick>
 80085f4:	4602      	mov	r2, r0
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	2b64      	cmp	r3, #100	@ 0x64
 80085fc:	d901      	bls.n	8008602 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e21f      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008602:	4b61      	ldr	r3, [pc, #388]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d0f0      	beq.n	80085f0 <HAL_RCC_OscConfig+0xdc>
 800860e:	e014      	b.n	800863a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008610:	f7fc fbf0 	bl	8004df4 <HAL_GetTick>
 8008614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008616:	e008      	b.n	800862a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008618:	f7fc fbec 	bl	8004df4 <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	2b64      	cmp	r3, #100	@ 0x64
 8008624:	d901      	bls.n	800862a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e20b      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800862a:	4b57      	ldr	r3, [pc, #348]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1f0      	bne.n	8008618 <HAL_RCC_OscConfig+0x104>
 8008636:	e000      	b.n	800863a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0302 	and.w	r3, r3, #2
 8008642:	2b00      	cmp	r3, #0
 8008644:	d06f      	beq.n	8008726 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008646:	4b50      	ldr	r3, [pc, #320]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f003 030c 	and.w	r3, r3, #12
 800864e:	2b00      	cmp	r3, #0
 8008650:	d017      	beq.n	8008682 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008652:	4b4d      	ldr	r3, [pc, #308]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f003 030c 	and.w	r3, r3, #12
        || \
 800865a:	2b08      	cmp	r3, #8
 800865c:	d105      	bne.n	800866a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800865e:	4b4a      	ldr	r3, [pc, #296]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00b      	beq.n	8008682 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800866a:	4b47      	ldr	r3, [pc, #284]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008672:	2b0c      	cmp	r3, #12
 8008674:	d11c      	bne.n	80086b0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008676:	4b44      	ldr	r3, [pc, #272]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d116      	bne.n	80086b0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008682:	4b41      	ldr	r3, [pc, #260]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b00      	cmp	r3, #0
 800868c:	d005      	beq.n	800869a <HAL_RCC_OscConfig+0x186>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d001      	beq.n	800869a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e1d3      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800869a:	4b3b      	ldr	r3, [pc, #236]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	4937      	ldr	r1, [pc, #220]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 80086aa:	4313      	orrs	r3, r2
 80086ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086ae:	e03a      	b.n	8008726 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d020      	beq.n	80086fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086b8:	4b34      	ldr	r3, [pc, #208]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80086ba:	2201      	movs	r2, #1
 80086bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086be:	f7fc fb99 	bl	8004df4 <HAL_GetTick>
 80086c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086c4:	e008      	b.n	80086d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086c6:	f7fc fb95 	bl	8004df4 <HAL_GetTick>
 80086ca:	4602      	mov	r2, r0
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d901      	bls.n	80086d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e1b4      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086d8:	4b2b      	ldr	r3, [pc, #172]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0302 	and.w	r3, r3, #2
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d0f0      	beq.n	80086c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086e4:	4b28      	ldr	r3, [pc, #160]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	00db      	lsls	r3, r3, #3
 80086f2:	4925      	ldr	r1, [pc, #148]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	600b      	str	r3, [r1, #0]
 80086f8:	e015      	b.n	8008726 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086fa:	4b24      	ldr	r3, [pc, #144]	@ (800878c <HAL_RCC_OscConfig+0x278>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008700:	f7fc fb78 	bl	8004df4 <HAL_GetTick>
 8008704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008706:	e008      	b.n	800871a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008708:	f7fc fb74 	bl	8004df4 <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	2b02      	cmp	r3, #2
 8008714:	d901      	bls.n	800871a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e193      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800871a:	4b1b      	ldr	r3, [pc, #108]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1f0      	bne.n	8008708 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 0308 	and.w	r3, r3, #8
 800872e:	2b00      	cmp	r3, #0
 8008730:	d036      	beq.n	80087a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d016      	beq.n	8008768 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800873a:	4b15      	ldr	r3, [pc, #84]	@ (8008790 <HAL_RCC_OscConfig+0x27c>)
 800873c:	2201      	movs	r2, #1
 800873e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008740:	f7fc fb58 	bl	8004df4 <HAL_GetTick>
 8008744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008746:	e008      	b.n	800875a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008748:	f7fc fb54 	bl	8004df4 <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	2b02      	cmp	r3, #2
 8008754:	d901      	bls.n	800875a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e173      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800875a:	4b0b      	ldr	r3, [pc, #44]	@ (8008788 <HAL_RCC_OscConfig+0x274>)
 800875c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0f0      	beq.n	8008748 <HAL_RCC_OscConfig+0x234>
 8008766:	e01b      	b.n	80087a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008768:	4b09      	ldr	r3, [pc, #36]	@ (8008790 <HAL_RCC_OscConfig+0x27c>)
 800876a:	2200      	movs	r2, #0
 800876c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800876e:	f7fc fb41 	bl	8004df4 <HAL_GetTick>
 8008772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008774:	e00e      	b.n	8008794 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008776:	f7fc fb3d 	bl	8004df4 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	2b02      	cmp	r3, #2
 8008782:	d907      	bls.n	8008794 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e15c      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
 8008788:	40023800 	.word	0x40023800
 800878c:	42470000 	.word	0x42470000
 8008790:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008794:	4b8a      	ldr	r3, [pc, #552]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 8008796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008798:	f003 0302 	and.w	r3, r3, #2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1ea      	bne.n	8008776 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 0304 	and.w	r3, r3, #4
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 8097 	beq.w	80088dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087ae:	2300      	movs	r3, #0
 80087b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087b2:	4b83      	ldr	r3, [pc, #524]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 80087b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10f      	bne.n	80087de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087be:	2300      	movs	r3, #0
 80087c0:	60bb      	str	r3, [r7, #8]
 80087c2:	4b7f      	ldr	r3, [pc, #508]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 80087c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c6:	4a7e      	ldr	r2, [pc, #504]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 80087c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80087ce:	4b7c      	ldr	r3, [pc, #496]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 80087d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087d6:	60bb      	str	r3, [r7, #8]
 80087d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087da:	2301      	movs	r3, #1
 80087dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087de:	4b79      	ldr	r3, [pc, #484]	@ (80089c4 <HAL_RCC_OscConfig+0x4b0>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d118      	bne.n	800881c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087ea:	4b76      	ldr	r3, [pc, #472]	@ (80089c4 <HAL_RCC_OscConfig+0x4b0>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a75      	ldr	r2, [pc, #468]	@ (80089c4 <HAL_RCC_OscConfig+0x4b0>)
 80087f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087f6:	f7fc fafd 	bl	8004df4 <HAL_GetTick>
 80087fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087fc:	e008      	b.n	8008810 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087fe:	f7fc faf9 	bl	8004df4 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	2b02      	cmp	r3, #2
 800880a:	d901      	bls.n	8008810 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e118      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008810:	4b6c      	ldr	r3, [pc, #432]	@ (80089c4 <HAL_RCC_OscConfig+0x4b0>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008818:	2b00      	cmp	r3, #0
 800881a:	d0f0      	beq.n	80087fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d106      	bne.n	8008832 <HAL_RCC_OscConfig+0x31e>
 8008824:	4b66      	ldr	r3, [pc, #408]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 8008826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008828:	4a65      	ldr	r2, [pc, #404]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 800882a:	f043 0301 	orr.w	r3, r3, #1
 800882e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008830:	e01c      	b.n	800886c <HAL_RCC_OscConfig+0x358>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	2b05      	cmp	r3, #5
 8008838:	d10c      	bne.n	8008854 <HAL_RCC_OscConfig+0x340>
 800883a:	4b61      	ldr	r3, [pc, #388]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 800883c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800883e:	4a60      	ldr	r2, [pc, #384]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 8008840:	f043 0304 	orr.w	r3, r3, #4
 8008844:	6713      	str	r3, [r2, #112]	@ 0x70
 8008846:	4b5e      	ldr	r3, [pc, #376]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 8008848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800884a:	4a5d      	ldr	r2, [pc, #372]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 800884c:	f043 0301 	orr.w	r3, r3, #1
 8008850:	6713      	str	r3, [r2, #112]	@ 0x70
 8008852:	e00b      	b.n	800886c <HAL_RCC_OscConfig+0x358>
 8008854:	4b5a      	ldr	r3, [pc, #360]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 8008856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008858:	4a59      	ldr	r2, [pc, #356]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 800885a:	f023 0301 	bic.w	r3, r3, #1
 800885e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008860:	4b57      	ldr	r3, [pc, #348]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 8008862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008864:	4a56      	ldr	r2, [pc, #344]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 8008866:	f023 0304 	bic.w	r3, r3, #4
 800886a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d015      	beq.n	80088a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008874:	f7fc fabe 	bl	8004df4 <HAL_GetTick>
 8008878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800887a:	e00a      	b.n	8008892 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800887c:	f7fc faba 	bl	8004df4 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800888a:	4293      	cmp	r3, r2
 800888c:	d901      	bls.n	8008892 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e0d7      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008892:	4b4b      	ldr	r3, [pc, #300]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 8008894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008896:	f003 0302 	and.w	r3, r3, #2
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0ee      	beq.n	800887c <HAL_RCC_OscConfig+0x368>
 800889e:	e014      	b.n	80088ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088a0:	f7fc faa8 	bl	8004df4 <HAL_GetTick>
 80088a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088a6:	e00a      	b.n	80088be <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088a8:	f7fc faa4 	bl	8004df4 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d901      	bls.n	80088be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e0c1      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088be:	4b40      	ldr	r3, [pc, #256]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 80088c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1ee      	bne.n	80088a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d105      	bne.n	80088dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088d0:	4b3b      	ldr	r3, [pc, #236]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 80088d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d4:	4a3a      	ldr	r2, [pc, #232]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 80088d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 80ad 	beq.w	8008a40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80088e6:	4b36      	ldr	r3, [pc, #216]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f003 030c 	and.w	r3, r3, #12
 80088ee:	2b08      	cmp	r3, #8
 80088f0:	d060      	beq.n	80089b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d145      	bne.n	8008986 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088fa:	4b33      	ldr	r3, [pc, #204]	@ (80089c8 <HAL_RCC_OscConfig+0x4b4>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008900:	f7fc fa78 	bl	8004df4 <HAL_GetTick>
 8008904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008906:	e008      	b.n	800891a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008908:	f7fc fa74 	bl	8004df4 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	2b02      	cmp	r3, #2
 8008914:	d901      	bls.n	800891a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e093      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800891a:	4b29      	ldr	r3, [pc, #164]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1f0      	bne.n	8008908 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	69da      	ldr	r2, [r3, #28]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008934:	019b      	lsls	r3, r3, #6
 8008936:	431a      	orrs	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800893c:	085b      	lsrs	r3, r3, #1
 800893e:	3b01      	subs	r3, #1
 8008940:	041b      	lsls	r3, r3, #16
 8008942:	431a      	orrs	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008948:	061b      	lsls	r3, r3, #24
 800894a:	431a      	orrs	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008950:	071b      	lsls	r3, r3, #28
 8008952:	491b      	ldr	r1, [pc, #108]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 8008954:	4313      	orrs	r3, r2
 8008956:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008958:	4b1b      	ldr	r3, [pc, #108]	@ (80089c8 <HAL_RCC_OscConfig+0x4b4>)
 800895a:	2201      	movs	r2, #1
 800895c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800895e:	f7fc fa49 	bl	8004df4 <HAL_GetTick>
 8008962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008964:	e008      	b.n	8008978 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008966:	f7fc fa45 	bl	8004df4 <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	2b02      	cmp	r3, #2
 8008972:	d901      	bls.n	8008978 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e064      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008978:	4b11      	ldr	r3, [pc, #68]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d0f0      	beq.n	8008966 <HAL_RCC_OscConfig+0x452>
 8008984:	e05c      	b.n	8008a40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008986:	4b10      	ldr	r3, [pc, #64]	@ (80089c8 <HAL_RCC_OscConfig+0x4b4>)
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800898c:	f7fc fa32 	bl	8004df4 <HAL_GetTick>
 8008990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008992:	e008      	b.n	80089a6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008994:	f7fc fa2e 	bl	8004df4 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e04d      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089a6:	4b06      	ldr	r3, [pc, #24]	@ (80089c0 <HAL_RCC_OscConfig+0x4ac>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1f0      	bne.n	8008994 <HAL_RCC_OscConfig+0x480>
 80089b2:	e045      	b.n	8008a40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d107      	bne.n	80089cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e040      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
 80089c0:	40023800 	.word	0x40023800
 80089c4:	40007000 	.word	0x40007000
 80089c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80089cc:	4b1f      	ldr	r3, [pc, #124]	@ (8008a4c <HAL_RCC_OscConfig+0x538>)
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d030      	beq.n	8008a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d129      	bne.n	8008a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d122      	bne.n	8008a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80089fc:	4013      	ands	r3, r2
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008a02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d119      	bne.n	8008a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a12:	085b      	lsrs	r3, r3, #1
 8008a14:	3b01      	subs	r3, #1
 8008a16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d10f      	bne.n	8008a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d107      	bne.n	8008a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d001      	beq.n	8008a40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e000      	b.n	8008a42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	40023800 	.word	0x40023800

08008a50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e07b      	b.n	8008b5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d108      	bne.n	8008a7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a72:	d009      	beq.n	8008a88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	61da      	str	r2, [r3, #28]
 8008a7a:	e005      	b.n	8008a88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d106      	bne.n	8008aa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f7fb fce6 	bl	8004474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008abe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008ad0:	431a      	orrs	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ada:	431a      	orrs	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	f003 0302 	and.w	r3, r3, #2
 8008ae4:	431a      	orrs	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008af8:	431a      	orrs	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a1b      	ldr	r3, [r3, #32]
 8008b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b0c:	ea42 0103 	orr.w	r1, r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b14:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	0c1b      	lsrs	r3, r3, #16
 8008b26:	f003 0104 	and.w	r1, r3, #4
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2e:	f003 0210 	and.w	r2, r3, #16
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	69da      	ldr	r2, [r3, #28]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b088      	sub	sp, #32
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	603b      	str	r3, [r7, #0]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b72:	f7fc f93f 	bl	8004df4 <HAL_GetTick>
 8008b76:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008b78:	88fb      	ldrh	r3, [r7, #6]
 8008b7a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d001      	beq.n	8008b8c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	e12a      	b.n	8008de2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d002      	beq.n	8008b98 <HAL_SPI_Transmit+0x36>
 8008b92:	88fb      	ldrh	r3, [r7, #6]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e122      	b.n	8008de2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d101      	bne.n	8008baa <HAL_SPI_Transmit+0x48>
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e11b      	b.n	8008de2 <HAL_SPI_Transmit+0x280>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2203      	movs	r2, #3
 8008bb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	88fa      	ldrh	r2, [r7, #6]
 8008bca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	88fa      	ldrh	r2, [r7, #6]
 8008bd0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bf8:	d10f      	bne.n	8008c1a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c24:	2b40      	cmp	r3, #64	@ 0x40
 8008c26:	d007      	beq.n	8008c38 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c40:	d152      	bne.n	8008ce8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <HAL_SPI_Transmit+0xee>
 8008c4a:	8b7b      	ldrh	r3, [r7, #26]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d145      	bne.n	8008cdc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c54:	881a      	ldrh	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c60:	1c9a      	adds	r2, r3, #2
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008c74:	e032      	b.n	8008cdc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f003 0302 	and.w	r3, r3, #2
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d112      	bne.n	8008caa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c88:	881a      	ldrh	r2, [r3, #0]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c94:	1c9a      	adds	r2, r3, #2
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008ca8:	e018      	b.n	8008cdc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008caa:	f7fc f8a3 	bl	8004df4 <HAL_GetTick>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d803      	bhi.n	8008cc2 <HAL_SPI_Transmit+0x160>
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc0:	d102      	bne.n	8008cc8 <HAL_SPI_Transmit+0x166>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d109      	bne.n	8008cdc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e082      	b.n	8008de2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1c7      	bne.n	8008c76 <HAL_SPI_Transmit+0x114>
 8008ce6:	e053      	b.n	8008d90 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <HAL_SPI_Transmit+0x194>
 8008cf0:	8b7b      	ldrh	r3, [r7, #26]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d147      	bne.n	8008d86 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	330c      	adds	r3, #12
 8008d00:	7812      	ldrb	r2, [r2, #0]
 8008d02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	3b01      	subs	r3, #1
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008d1c:	e033      	b.n	8008d86 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f003 0302 	and.w	r3, r3, #2
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d113      	bne.n	8008d54 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	330c      	adds	r3, #12
 8008d36:	7812      	ldrb	r2, [r2, #0]
 8008d38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008d52:	e018      	b.n	8008d86 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d54:	f7fc f84e 	bl	8004df4 <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d803      	bhi.n	8008d6c <HAL_SPI_Transmit+0x20a>
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6a:	d102      	bne.n	8008d72 <HAL_SPI_Transmit+0x210>
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d109      	bne.n	8008d86 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e02d      	b.n	8008de2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1c6      	bne.n	8008d1e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d90:	69fa      	ldr	r2, [r7, #28]
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 fe3f 	bl	8009a18 <SPI_EndRxTxTransaction>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2220      	movs	r2, #32
 8008da4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10a      	bne.n	8008dc4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008dae:	2300      	movs	r3, #0
 8008db0:	617b      	str	r3, [r7, #20]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	617b      	str	r3, [r7, #20]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	617b      	str	r3, [r7, #20]
 8008dc2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d001      	beq.n	8008de0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e000      	b.n	8008de2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008de0:	2300      	movs	r3, #0
  }
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3720      	adds	r7, #32
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b088      	sub	sp, #32
 8008dee:	af02      	add	r7, sp, #8
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	603b      	str	r3, [r7, #0]
 8008df6:	4613      	mov	r3, r2
 8008df8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d001      	beq.n	8008e0a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008e06:	2302      	movs	r3, #2
 8008e08:	e104      	b.n	8009014 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <HAL_SPI_Receive+0x2c>
 8008e10:	88fb      	ldrh	r3, [r7, #6]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e0fc      	b.n	8009014 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e22:	d112      	bne.n	8008e4a <HAL_SPI_Receive+0x60>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10e      	bne.n	8008e4a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2204      	movs	r2, #4
 8008e30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008e34:	88fa      	ldrh	r2, [r7, #6]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	68b9      	ldr	r1, [r7, #8]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f8eb 	bl	800901c <HAL_SPI_TransmitReceive>
 8008e46:	4603      	mov	r3, r0
 8008e48:	e0e4      	b.n	8009014 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e4a:	f7fb ffd3 	bl	8004df4 <HAL_GetTick>
 8008e4e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d101      	bne.n	8008e5e <HAL_SPI_Receive+0x74>
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	e0da      	b.n	8009014 <HAL_SPI_Receive+0x22a>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2204      	movs	r2, #4
 8008e6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	88fa      	ldrh	r2, [r7, #6]
 8008e7e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	88fa      	ldrh	r2, [r7, #6]
 8008e84:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008eac:	d10f      	bne.n	8008ece <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ebc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008ecc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ed8:	2b40      	cmp	r3, #64	@ 0x40
 8008eda:	d007      	beq.n	8008eec <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008eea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d170      	bne.n	8008fd6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008ef4:	e035      	b.n	8008f62 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d115      	bne.n	8008f30 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f103 020c 	add.w	r2, r3, #12
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f10:	7812      	ldrb	r2, [r2, #0]
 8008f12:	b2d2      	uxtb	r2, r2
 8008f14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	3b01      	subs	r3, #1
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008f2e:	e018      	b.n	8008f62 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f30:	f7fb ff60 	bl	8004df4 <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d803      	bhi.n	8008f48 <HAL_SPI_Receive+0x15e>
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f46:	d102      	bne.n	8008f4e <HAL_SPI_Receive+0x164>
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d109      	bne.n	8008f62 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e058      	b.n	8009014 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1c4      	bne.n	8008ef6 <HAL_SPI_Receive+0x10c>
 8008f6c:	e038      	b.n	8008fe0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d113      	bne.n	8008fa4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68da      	ldr	r2, [r3, #12]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f86:	b292      	uxth	r2, r2
 8008f88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f8e:	1c9a      	adds	r2, r3, #2
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008fa2:	e018      	b.n	8008fd6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fa4:	f7fb ff26 	bl	8004df4 <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d803      	bhi.n	8008fbc <HAL_SPI_Receive+0x1d2>
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fba:	d102      	bne.n	8008fc2 <HAL_SPI_Receive+0x1d8>
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d109      	bne.n	8008fd6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e01e      	b.n	8009014 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1c6      	bne.n	8008f6e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f000 fcb1 	bl	800994c <SPI_EndRxTransaction>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2220      	movs	r2, #32
 8008ff4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e000      	b.n	8009014 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8009012:	2300      	movs	r3, #0
  }
}
 8009014:	4618      	mov	r0, r3
 8009016:	3718      	adds	r7, #24
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b08a      	sub	sp, #40	@ 0x28
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
 8009028:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800902a:	2301      	movs	r3, #1
 800902c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800902e:	f7fb fee1 	bl	8004df4 <HAL_GetTick>
 8009032:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800903a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009042:	887b      	ldrh	r3, [r7, #2]
 8009044:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009046:	7ffb      	ldrb	r3, [r7, #31]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d00c      	beq.n	8009066 <HAL_SPI_TransmitReceive+0x4a>
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009052:	d106      	bne.n	8009062 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d102      	bne.n	8009062 <HAL_SPI_TransmitReceive+0x46>
 800905c:	7ffb      	ldrb	r3, [r7, #31]
 800905e:	2b04      	cmp	r3, #4
 8009060:	d001      	beq.n	8009066 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009062:	2302      	movs	r3, #2
 8009064:	e17f      	b.n	8009366 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d005      	beq.n	8009078 <HAL_SPI_TransmitReceive+0x5c>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <HAL_SPI_TransmitReceive+0x5c>
 8009072:	887b      	ldrh	r3, [r7, #2]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e174      	b.n	8009366 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009082:	2b01      	cmp	r3, #1
 8009084:	d101      	bne.n	800908a <HAL_SPI_TransmitReceive+0x6e>
 8009086:	2302      	movs	r3, #2
 8009088:	e16d      	b.n	8009366 <HAL_SPI_TransmitReceive+0x34a>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b04      	cmp	r3, #4
 800909c:	d003      	beq.n	80090a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2205      	movs	r2, #5
 80090a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	887a      	ldrh	r2, [r7, #2]
 80090b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	887a      	ldrh	r2, [r7, #2]
 80090bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	887a      	ldrh	r2, [r7, #2]
 80090c8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	887a      	ldrh	r2, [r7, #2]
 80090ce:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090e6:	2b40      	cmp	r3, #64	@ 0x40
 80090e8:	d007      	beq.n	80090fa <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009102:	d17e      	bne.n	8009202 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <HAL_SPI_TransmitReceive+0xf6>
 800910c:	8afb      	ldrh	r3, [r7, #22]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d16c      	bne.n	80091ec <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009116:	881a      	ldrh	r2, [r3, #0]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009122:	1c9a      	adds	r2, r3, #2
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800912c:	b29b      	uxth	r3, r3
 800912e:	3b01      	subs	r3, #1
 8009130:	b29a      	uxth	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009136:	e059      	b.n	80091ec <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f003 0302 	and.w	r3, r3, #2
 8009142:	2b02      	cmp	r3, #2
 8009144:	d11b      	bne.n	800917e <HAL_SPI_TransmitReceive+0x162>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800914a:	b29b      	uxth	r3, r3
 800914c:	2b00      	cmp	r3, #0
 800914e:	d016      	beq.n	800917e <HAL_SPI_TransmitReceive+0x162>
 8009150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009152:	2b01      	cmp	r3, #1
 8009154:	d113      	bne.n	800917e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800915a:	881a      	ldrh	r2, [r3, #0]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009166:	1c9a      	adds	r2, r3, #2
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009170:	b29b      	uxth	r3, r3
 8009172:	3b01      	subs	r3, #1
 8009174:	b29a      	uxth	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800917a:	2300      	movs	r3, #0
 800917c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f003 0301 	and.w	r3, r3, #1
 8009188:	2b01      	cmp	r3, #1
 800918a:	d119      	bne.n	80091c0 <HAL_SPI_TransmitReceive+0x1a4>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009190:	b29b      	uxth	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d014      	beq.n	80091c0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68da      	ldr	r2, [r3, #12]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a0:	b292      	uxth	r2, r2
 80091a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a8:	1c9a      	adds	r2, r3, #2
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	3b01      	subs	r3, #1
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80091bc:	2301      	movs	r3, #1
 80091be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80091c0:	f7fb fe18 	bl	8004df4 <HAL_GetTick>
 80091c4:	4602      	mov	r2, r0
 80091c6:	6a3b      	ldr	r3, [r7, #32]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d80d      	bhi.n	80091ec <HAL_SPI_TransmitReceive+0x1d0>
 80091d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d6:	d009      	beq.n	80091ec <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e0bc      	b.n	8009366 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1a0      	bne.n	8009138 <HAL_SPI_TransmitReceive+0x11c>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d19b      	bne.n	8009138 <HAL_SPI_TransmitReceive+0x11c>
 8009200:	e082      	b.n	8009308 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <HAL_SPI_TransmitReceive+0x1f4>
 800920a:	8afb      	ldrh	r3, [r7, #22]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d171      	bne.n	80092f4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	330c      	adds	r3, #12
 800921a:	7812      	ldrb	r2, [r2, #0]
 800921c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800922c:	b29b      	uxth	r3, r3
 800922e:	3b01      	subs	r3, #1
 8009230:	b29a      	uxth	r2, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009236:	e05d      	b.n	80092f4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	f003 0302 	and.w	r3, r3, #2
 8009242:	2b02      	cmp	r3, #2
 8009244:	d11c      	bne.n	8009280 <HAL_SPI_TransmitReceive+0x264>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800924a:	b29b      	uxth	r3, r3
 800924c:	2b00      	cmp	r3, #0
 800924e:	d017      	beq.n	8009280 <HAL_SPI_TransmitReceive+0x264>
 8009250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009252:	2b01      	cmp	r3, #1
 8009254:	d114      	bne.n	8009280 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	330c      	adds	r3, #12
 8009260:	7812      	ldrb	r2, [r2, #0]
 8009262:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009268:	1c5a      	adds	r2, r3, #1
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009272:	b29b      	uxth	r3, r3
 8009274:	3b01      	subs	r3, #1
 8009276:	b29a      	uxth	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b01      	cmp	r3, #1
 800928c:	d119      	bne.n	80092c2 <HAL_SPI_TransmitReceive+0x2a6>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009292:	b29b      	uxth	r3, r3
 8009294:	2b00      	cmp	r3, #0
 8009296:	d014      	beq.n	80092c2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68da      	ldr	r2, [r3, #12]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a2:	b2d2      	uxtb	r2, r2
 80092a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092aa:	1c5a      	adds	r2, r3, #1
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	3b01      	subs	r3, #1
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80092be:	2301      	movs	r3, #1
 80092c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80092c2:	f7fb fd97 	bl	8004df4 <HAL_GetTick>
 80092c6:	4602      	mov	r2, r0
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d803      	bhi.n	80092da <HAL_SPI_TransmitReceive+0x2be>
 80092d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d8:	d102      	bne.n	80092e0 <HAL_SPI_TransmitReceive+0x2c4>
 80092da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d109      	bne.n	80092f4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e038      	b.n	8009366 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d19c      	bne.n	8009238 <HAL_SPI_TransmitReceive+0x21c>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009302:	b29b      	uxth	r3, r3
 8009304:	2b00      	cmp	r3, #0
 8009306:	d197      	bne.n	8009238 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009308:	6a3a      	ldr	r2, [r7, #32]
 800930a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f000 fb83 	bl	8009a18 <SPI_EndRxTxTransaction>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d008      	beq.n	800932a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2220      	movs	r2, #32
 800931c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e01d      	b.n	8009366 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10a      	bne.n	8009348 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009332:	2300      	movs	r3, #0
 8009334:	613b      	str	r3, [r7, #16]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	613b      	str	r3, [r7, #16]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e000      	b.n	8009366 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8009364:	2300      	movs	r3, #0
  }
}
 8009366:	4618      	mov	r0, r3
 8009368:	3728      	adds	r7, #40	@ 0x28
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
	...

08009370 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b01      	cmp	r3, #1
 8009388:	d001      	beq.n	800938e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800938a:	2302      	movs	r3, #2
 800938c:	e097      	b.n	80094be <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <HAL_SPI_Transmit_DMA+0x2a>
 8009394:	88fb      	ldrh	r3, [r7, #6]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e08f      	b.n	80094be <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d101      	bne.n	80093ac <HAL_SPI_Transmit_DMA+0x3c>
 80093a8:	2302      	movs	r3, #2
 80093aa:	e088      	b.n	80094be <HAL_SPI_Transmit_DMA+0x14e>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2203      	movs	r2, #3
 80093b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	88fa      	ldrh	r2, [r7, #6]
 80093cc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	88fa      	ldrh	r2, [r7, #6]
 80093d2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093fa:	d10f      	bne.n	800941c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800940a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800941a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009420:	4a29      	ldr	r2, [pc, #164]	@ (80094c8 <HAL_SPI_Transmit_DMA+0x158>)
 8009422:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009428:	4a28      	ldr	r2, [pc, #160]	@ (80094cc <HAL_SPI_Transmit_DMA+0x15c>)
 800942a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009430:	4a27      	ldr	r2, [pc, #156]	@ (80094d0 <HAL_SPI_Transmit_DMA+0x160>)
 8009432:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009438:	2200      	movs	r2, #0
 800943a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009444:	4619      	mov	r1, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	330c      	adds	r3, #12
 800944c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009452:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009454:	f7fc f9b2 	bl	80057bc <HAL_DMA_Start_IT>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00b      	beq.n	8009476 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009462:	f043 0210 	orr.w	r2, r3, #16
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e023      	b.n	80094be <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009480:	2b40      	cmp	r3, #64	@ 0x40
 8009482:	d007      	beq.n	8009494 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009492:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f042 0220 	orr.w	r2, r2, #32
 80094aa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f042 0202 	orr.w	r2, r2, #2
 80094ba:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	080097b9 	.word	0x080097b9
 80094cc:	08009711 	.word	0x08009711
 80094d0:	080097d5 	.word	0x080097d5

080094d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b088      	sub	sp, #32
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	099b      	lsrs	r3, r3, #6
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10f      	bne.n	8009518 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00a      	beq.n	8009518 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	099b      	lsrs	r3, r3, #6
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	2b00      	cmp	r3, #0
 800950c:	d004      	beq.n	8009518 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	4798      	blx	r3
    return;
 8009516:	e0d7      	b.n	80096c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	085b      	lsrs	r3, r3, #1
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00a      	beq.n	800953a <HAL_SPI_IRQHandler+0x66>
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	09db      	lsrs	r3, r3, #7
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	2b00      	cmp	r3, #0
 800952e:	d004      	beq.n	800953a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	4798      	blx	r3
    return;
 8009538:	e0c6      	b.n	80096c8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	095b      	lsrs	r3, r3, #5
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10c      	bne.n	8009560 <HAL_SPI_IRQHandler+0x8c>
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	099b      	lsrs	r3, r3, #6
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d106      	bne.n	8009560 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	0a1b      	lsrs	r3, r3, #8
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 80b4 	beq.w	80096c8 <HAL_SPI_IRQHandler+0x1f4>
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	095b      	lsrs	r3, r3, #5
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 80ad 	beq.w	80096c8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	099b      	lsrs	r3, r3, #6
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	d023      	beq.n	80095c2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b03      	cmp	r3, #3
 8009584:	d011      	beq.n	80095aa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800958a:	f043 0204 	orr.w	r2, r3, #4
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009592:	2300      	movs	r3, #0
 8009594:	617b      	str	r3, [r7, #20]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	617b      	str	r3, [r7, #20]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	617b      	str	r3, [r7, #20]
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	e00b      	b.n	80095c2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095aa:	2300      	movs	r3, #0
 80095ac:	613b      	str	r3, [r7, #16]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	613b      	str	r3, [r7, #16]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	613b      	str	r3, [r7, #16]
 80095be:	693b      	ldr	r3, [r7, #16]
        return;
 80095c0:	e082      	b.n	80096c8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	095b      	lsrs	r3, r3, #5
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d014      	beq.n	80095f8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d2:	f043 0201 	orr.w	r2, r3, #1
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80095da:	2300      	movs	r3, #0
 80095dc:	60fb      	str	r3, [r7, #12]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	60fb      	str	r3, [r7, #12]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095f4:	601a      	str	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	0a1b      	lsrs	r3, r3, #8
 80095fc:	f003 0301 	and.w	r3, r3, #1
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00c      	beq.n	800961e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009608:	f043 0208 	orr.w	r2, r3, #8
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009610:	2300      	movs	r3, #0
 8009612:	60bb      	str	r3, [r7, #8]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	60bb      	str	r3, [r7, #8]
 800961c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009622:	2b00      	cmp	r3, #0
 8009624:	d04f      	beq.n	80096c6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009634:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	f003 0302 	and.w	r3, r3, #2
 8009644:	2b00      	cmp	r3, #0
 8009646:	d104      	bne.n	8009652 <HAL_SPI_IRQHandler+0x17e>
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	2b00      	cmp	r3, #0
 8009650:	d034      	beq.n	80096bc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f022 0203 	bic.w	r2, r2, #3
 8009660:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009666:	2b00      	cmp	r3, #0
 8009668:	d011      	beq.n	800968e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800966e:	4a18      	ldr	r2, [pc, #96]	@ (80096d0 <HAL_SPI_IRQHandler+0x1fc>)
 8009670:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009676:	4618      	mov	r0, r3
 8009678:	f7fc f968 	bl	800594c <HAL_DMA_Abort_IT>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d005      	beq.n	800968e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009686:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009692:	2b00      	cmp	r3, #0
 8009694:	d016      	beq.n	80096c4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800969a:	4a0d      	ldr	r2, [pc, #52]	@ (80096d0 <HAL_SPI_IRQHandler+0x1fc>)
 800969c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fc f952 	bl	800594c <HAL_DMA_Abort_IT>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00a      	beq.n	80096c4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80096ba:	e003      	b.n	80096c4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f81d 	bl	80096fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80096c2:	e000      	b.n	80096c6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80096c4:	bf00      	nop
    return;
 80096c6:	bf00      	nop
  }
}
 80096c8:	3720      	adds	r7, #32
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	08009815 	.word	0x08009815

080096d4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800971e:	f7fb fb69 	bl	8004df4 <HAL_GetTick>
 8009722:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800972e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009732:	d03b      	beq.n	80097ac <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 0220 	bic.w	r2, r2, #32
 8009742:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685a      	ldr	r2, [r3, #4]
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 0202 	bic.w	r2, r2, #2
 8009752:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	2164      	movs	r1, #100	@ 0x64
 8009758:	6978      	ldr	r0, [r7, #20]
 800975a:	f000 f95d 	bl	8009a18 <SPI_EndRxTxTransaction>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d005      	beq.n	8009770 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009768:	f043 0220 	orr.w	r2, r3, #32
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d10a      	bne.n	800978e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009778:	2300      	movs	r3, #0
 800977a:	60fb      	str	r3, [r7, #12]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	60fb      	str	r3, [r7, #12]
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	2200      	movs	r2, #0
 8009792:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d003      	beq.n	80097ac <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80097a4:	6978      	ldr	r0, [r7, #20]
 80097a6:	f7ff ffa9 	bl	80096fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80097aa:	e002      	b.n	80097b2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80097ac:	6978      	ldr	r0, [r7, #20]
 80097ae:	f7ff ff91 	bl	80096d4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f7ff ff8e 	bl	80096e8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097cc:	bf00      	nop
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f022 0203 	bic.w	r2, r2, #3
 80097f0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f6:	f043 0210 	orr.w	r2, r3, #16
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f7ff ff78 	bl	80096fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800980c:	bf00      	nop
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009820:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f7ff ff64 	bl	80096fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009834:	bf00      	nop
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b088      	sub	sp, #32
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	603b      	str	r3, [r7, #0]
 8009848:	4613      	mov	r3, r2
 800984a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800984c:	f7fb fad2 	bl	8004df4 <HAL_GetTick>
 8009850:	4602      	mov	r2, r0
 8009852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009854:	1a9b      	subs	r3, r3, r2
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	4413      	add	r3, r2
 800985a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800985c:	f7fb faca 	bl	8004df4 <HAL_GetTick>
 8009860:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009862:	4b39      	ldr	r3, [pc, #228]	@ (8009948 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	015b      	lsls	r3, r3, #5
 8009868:	0d1b      	lsrs	r3, r3, #20
 800986a:	69fa      	ldr	r2, [r7, #28]
 800986c:	fb02 f303 	mul.w	r3, r2, r3
 8009870:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009872:	e055      	b.n	8009920 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987a:	d051      	beq.n	8009920 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800987c:	f7fb faba 	bl	8004df4 <HAL_GetTick>
 8009880:	4602      	mov	r2, r0
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	69fa      	ldr	r2, [r7, #28]
 8009888:	429a      	cmp	r2, r3
 800988a:	d902      	bls.n	8009892 <SPI_WaitFlagStateUntilTimeout+0x56>
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d13d      	bne.n	800990e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80098a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80098aa:	d111      	bne.n	80098d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098b4:	d004      	beq.n	80098c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098be:	d107      	bne.n	80098d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098d8:	d10f      	bne.n	80098fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80098e8:	601a      	str	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80098f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e018      	b.n	8009940 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d102      	bne.n	800991a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009914:	2300      	movs	r3, #0
 8009916:	61fb      	str	r3, [r7, #28]
 8009918:	e002      	b.n	8009920 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	3b01      	subs	r3, #1
 800991e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689a      	ldr	r2, [r3, #8]
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	4013      	ands	r3, r2
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	429a      	cmp	r2, r3
 800992e:	bf0c      	ite	eq
 8009930:	2301      	moveq	r3, #1
 8009932:	2300      	movne	r3, #0
 8009934:	b2db      	uxtb	r3, r3
 8009936:	461a      	mov	r2, r3
 8009938:	79fb      	ldrb	r3, [r7, #7]
 800993a:	429a      	cmp	r2, r3
 800993c:	d19a      	bne.n	8009874 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3720      	adds	r7, #32
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	20000000 	.word	0x20000000

0800994c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af02      	add	r7, sp, #8
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009960:	d111      	bne.n	8009986 <SPI_EndRxTransaction+0x3a>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800996a:	d004      	beq.n	8009976 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009974:	d107      	bne.n	8009986 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009984:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800998e:	d12a      	bne.n	80099e6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009998:	d012      	beq.n	80099c0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2200      	movs	r2, #0
 80099a2:	2180      	movs	r1, #128	@ 0x80
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f7ff ff49 	bl	800983c <SPI_WaitFlagStateUntilTimeout>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d02d      	beq.n	8009a0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099b4:	f043 0220 	orr.w	r2, r3, #32
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e026      	b.n	8009a0e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	2200      	movs	r2, #0
 80099c8:	2101      	movs	r1, #1
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f7ff ff36 	bl	800983c <SPI_WaitFlagStateUntilTimeout>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d01a      	beq.n	8009a0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099da:	f043 0220 	orr.w	r2, r3, #32
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e013      	b.n	8009a0e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	2200      	movs	r2, #0
 80099ee:	2101      	movs	r1, #1
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f7ff ff23 	bl	800983c <SPI_WaitFlagStateUntilTimeout>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d007      	beq.n	8009a0c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a00:	f043 0220 	orr.w	r2, r3, #32
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e000      	b.n	8009a0e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
	...

08009a18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	af02      	add	r7, sp, #8
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	2102      	movs	r1, #2
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f7ff ff04 	bl	800983c <SPI_WaitFlagStateUntilTimeout>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d007      	beq.n	8009a4a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a3e:	f043 0220 	orr.w	r2, r3, #32
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e032      	b.n	8009ab0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8009ab8 <SPI_EndRxTxTransaction+0xa0>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8009abc <SPI_EndRxTxTransaction+0xa4>)
 8009a50:	fba2 2303 	umull	r2, r3, r2, r3
 8009a54:	0d5b      	lsrs	r3, r3, #21
 8009a56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009a5a:	fb02 f303 	mul.w	r3, r2, r3
 8009a5e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a68:	d112      	bne.n	8009a90 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	2200      	movs	r2, #0
 8009a72:	2180      	movs	r1, #128	@ 0x80
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f7ff fee1 	bl	800983c <SPI_WaitFlagStateUntilTimeout>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d016      	beq.n	8009aae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a84:	f043 0220 	orr.w	r2, r3, #32
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e00f      	b.n	8009ab0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00a      	beq.n	8009aac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aa6:	2b80      	cmp	r3, #128	@ 0x80
 8009aa8:	d0f2      	beq.n	8009a90 <SPI_EndRxTxTransaction+0x78>
 8009aaa:	e000      	b.n	8009aae <SPI_EndRxTxTransaction+0x96>
        break;
 8009aac:	bf00      	nop
  }

  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3718      	adds	r7, #24
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	20000000 	.word	0x20000000
 8009abc:	165e9f81 	.word	0x165e9f81

08009ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e041      	b.n	8009b56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d106      	bne.n	8009aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7fa fd7a 	bl	80045e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2202      	movs	r2, #2
 8009af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	3304      	adds	r3, #4
 8009afc:	4619      	mov	r1, r3
 8009afe:	4610      	mov	r0, r2
 8009b00:	f000 fc28 	bl	800a354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b082      	sub	sp, #8
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d101      	bne.n	8009b70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e041      	b.n	8009bf4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d106      	bne.n	8009b8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f839 	bl	8009bfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2202      	movs	r2, #2
 8009b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	f000 fbd9 	bl	800a354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e041      	b.n	8009ca6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d106      	bne.n	8009c3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 f839 	bl	8009cae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2202      	movs	r2, #2
 8009c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4610      	mov	r0, r2
 8009c50:	f000 fb80 	bl	800a354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b083      	sub	sp, #12
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009cb6:	bf00      	nop
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b084      	sub	sp, #16
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f003 0302 	and.w	r3, r3, #2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d020      	beq.n	8009d26 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f003 0302 	and.w	r3, r3, #2
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d01b      	beq.n	8009d26 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f06f 0202 	mvn.w	r2, #2
 8009cf6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	f003 0303 	and.w	r3, r3, #3
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d003      	beq.n	8009d14 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fb02 	bl	800a316 <HAL_TIM_IC_CaptureCallback>
 8009d12:	e005      	b.n	8009d20 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 faf4 	bl	800a302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fb05 	bl	800a32a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	f003 0304 	and.w	r3, r3, #4
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d020      	beq.n	8009d72 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f003 0304 	and.w	r3, r3, #4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d01b      	beq.n	8009d72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f06f 0204 	mvn.w	r2, #4
 8009d42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2202      	movs	r2, #2
 8009d48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	699b      	ldr	r3, [r3, #24]
 8009d50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d003      	beq.n	8009d60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fadc 	bl	800a316 <HAL_TIM_IC_CaptureCallback>
 8009d5e:	e005      	b.n	8009d6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 face 	bl	800a302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fadf 	bl	800a32a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	f003 0308 	and.w	r3, r3, #8
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d020      	beq.n	8009dbe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f003 0308 	and.w	r3, r3, #8
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d01b      	beq.n	8009dbe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f06f 0208 	mvn.w	r2, #8
 8009d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2204      	movs	r2, #4
 8009d94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	69db      	ldr	r3, [r3, #28]
 8009d9c:	f003 0303 	and.w	r3, r3, #3
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d003      	beq.n	8009dac <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fab6 	bl	800a316 <HAL_TIM_IC_CaptureCallback>
 8009daa:	e005      	b.n	8009db8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 faa8 	bl	800a302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fab9 	bl	800a32a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	f003 0310 	and.w	r3, r3, #16
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d020      	beq.n	8009e0a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f003 0310 	and.w	r3, r3, #16
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d01b      	beq.n	8009e0a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f06f 0210 	mvn.w	r2, #16
 8009dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2208      	movs	r2, #8
 8009de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	69db      	ldr	r3, [r3, #28]
 8009de8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d003      	beq.n	8009df8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 fa90 	bl	800a316 <HAL_TIM_IC_CaptureCallback>
 8009df6:	e005      	b.n	8009e04 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fa82 	bl	800a302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fa93 	bl	800a32a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00c      	beq.n	8009e2e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f003 0301 	and.w	r3, r3, #1
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d007      	beq.n	8009e2e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f06f 0201 	mvn.w	r2, #1
 8009e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 fa60 	bl	800a2ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00c      	beq.n	8009e52 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d007      	beq.n	8009e52 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 ff73 	bl	800ad38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00c      	beq.n	8009e76 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d007      	beq.n	8009e76 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fa64 	bl	800a33e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	f003 0320 	and.w	r3, r3, #32
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00c      	beq.n	8009e9a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f003 0320 	and.w	r3, r3, #32
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d007      	beq.n	8009e9a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f06f 0220 	mvn.w	r2, #32
 8009e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 ff45 	bl	800ad24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e9a:	bf00      	nop
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b086      	sub	sp, #24
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	60f8      	str	r0, [r7, #12]
 8009eaa:	60b9      	str	r1, [r7, #8]
 8009eac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d101      	bne.n	8009ec0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	e088      	b.n	8009fd2 <HAL_TIM_IC_ConfigChannel+0x130>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d11b      	bne.n	8009f06 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009ede:	f000 fc8f 	bl	800a800 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	699a      	ldr	r2, [r3, #24]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f022 020c 	bic.w	r2, r2, #12
 8009ef0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6999      	ldr	r1, [r3, #24]
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	689a      	ldr	r2, [r3, #8]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	430a      	orrs	r2, r1
 8009f02:	619a      	str	r2, [r3, #24]
 8009f04:	e060      	b.n	8009fc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	d11c      	bne.n	8009f46 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009f1c:	f000 fd13 	bl	800a946 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	699a      	ldr	r2, [r3, #24]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009f2e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	6999      	ldr	r1, [r3, #24]
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	021a      	lsls	r2, r3, #8
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	430a      	orrs	r2, r1
 8009f42:	619a      	str	r2, [r3, #24]
 8009f44:	e040      	b.n	8009fc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2b08      	cmp	r3, #8
 8009f4a:	d11b      	bne.n	8009f84 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009f5c:	f000 fd60 	bl	800aa20 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	69da      	ldr	r2, [r3, #28]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f022 020c 	bic.w	r2, r2, #12
 8009f6e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	69d9      	ldr	r1, [r3, #28]
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	689a      	ldr	r2, [r3, #8]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	430a      	orrs	r2, r1
 8009f80:	61da      	str	r2, [r3, #28]
 8009f82:	e021      	b.n	8009fc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2b0c      	cmp	r3, #12
 8009f88:	d11c      	bne.n	8009fc4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009f9a:	f000 fd7d 	bl	800aa98 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	69da      	ldr	r2, [r3, #28]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009fac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	69d9      	ldr	r1, [r3, #28]
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	021a      	lsls	r2, r3, #8
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	61da      	str	r2, [r3, #28]
 8009fc2:	e001      	b.n	8009fc8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
	...

08009fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d101      	bne.n	8009ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	e0ae      	b.n	800a158 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b0c      	cmp	r3, #12
 800a006:	f200 809f 	bhi.w	800a148 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a00a:	a201      	add	r2, pc, #4	@ (adr r2, 800a010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a010:	0800a045 	.word	0x0800a045
 800a014:	0800a149 	.word	0x0800a149
 800a018:	0800a149 	.word	0x0800a149
 800a01c:	0800a149 	.word	0x0800a149
 800a020:	0800a085 	.word	0x0800a085
 800a024:	0800a149 	.word	0x0800a149
 800a028:	0800a149 	.word	0x0800a149
 800a02c:	0800a149 	.word	0x0800a149
 800a030:	0800a0c7 	.word	0x0800a0c7
 800a034:	0800a149 	.word	0x0800a149
 800a038:	0800a149 	.word	0x0800a149
 800a03c:	0800a149 	.word	0x0800a149
 800a040:	0800a107 	.word	0x0800a107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	68b9      	ldr	r1, [r7, #8]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 fa28 	bl	800a4a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	699a      	ldr	r2, [r3, #24]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f042 0208 	orr.w	r2, r2, #8
 800a05e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	699a      	ldr	r2, [r3, #24]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f022 0204 	bic.w	r2, r2, #4
 800a06e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6999      	ldr	r1, [r3, #24]
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	691a      	ldr	r2, [r3, #16]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	430a      	orrs	r2, r1
 800a080:	619a      	str	r2, [r3, #24]
      break;
 800a082:	e064      	b.n	800a14e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68b9      	ldr	r1, [r7, #8]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 fa78 	bl	800a580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	699a      	ldr	r2, [r3, #24]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a09e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	699a      	ldr	r2, [r3, #24]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6999      	ldr	r1, [r3, #24]
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	021a      	lsls	r2, r3, #8
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	430a      	orrs	r2, r1
 800a0c2:	619a      	str	r2, [r3, #24]
      break;
 800a0c4:	e043      	b.n	800a14e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68b9      	ldr	r1, [r7, #8]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 facd 	bl	800a66c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	69da      	ldr	r2, [r3, #28]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f042 0208 	orr.w	r2, r2, #8
 800a0e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	69da      	ldr	r2, [r3, #28]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f022 0204 	bic.w	r2, r2, #4
 800a0f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	69d9      	ldr	r1, [r3, #28]
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	691a      	ldr	r2, [r3, #16]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	430a      	orrs	r2, r1
 800a102:	61da      	str	r2, [r3, #28]
      break;
 800a104:	e023      	b.n	800a14e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	68b9      	ldr	r1, [r7, #8]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 fb21 	bl	800a754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	69da      	ldr	r2, [r3, #28]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	69da      	ldr	r2, [r3, #28]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	69d9      	ldr	r1, [r3, #28]
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	021a      	lsls	r2, r3, #8
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	430a      	orrs	r2, r1
 800a144:	61da      	str	r2, [r3, #28]
      break;
 800a146:	e002      	b.n	800a14e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	75fb      	strb	r3, [r7, #23]
      break;
 800a14c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a156:	7dfb      	ldrb	r3, [r7, #23]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a174:	2b01      	cmp	r3, #1
 800a176:	d101      	bne.n	800a17c <HAL_TIM_ConfigClockSource+0x1c>
 800a178:	2302      	movs	r3, #2
 800a17a:	e0b4      	b.n	800a2e6 <HAL_TIM_ConfigClockSource+0x186>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a19a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1b4:	d03e      	beq.n	800a234 <HAL_TIM_ConfigClockSource+0xd4>
 800a1b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1ba:	f200 8087 	bhi.w	800a2cc <HAL_TIM_ConfigClockSource+0x16c>
 800a1be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1c2:	f000 8086 	beq.w	800a2d2 <HAL_TIM_ConfigClockSource+0x172>
 800a1c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1ca:	d87f      	bhi.n	800a2cc <HAL_TIM_ConfigClockSource+0x16c>
 800a1cc:	2b70      	cmp	r3, #112	@ 0x70
 800a1ce:	d01a      	beq.n	800a206 <HAL_TIM_ConfigClockSource+0xa6>
 800a1d0:	2b70      	cmp	r3, #112	@ 0x70
 800a1d2:	d87b      	bhi.n	800a2cc <HAL_TIM_ConfigClockSource+0x16c>
 800a1d4:	2b60      	cmp	r3, #96	@ 0x60
 800a1d6:	d050      	beq.n	800a27a <HAL_TIM_ConfigClockSource+0x11a>
 800a1d8:	2b60      	cmp	r3, #96	@ 0x60
 800a1da:	d877      	bhi.n	800a2cc <HAL_TIM_ConfigClockSource+0x16c>
 800a1dc:	2b50      	cmp	r3, #80	@ 0x50
 800a1de:	d03c      	beq.n	800a25a <HAL_TIM_ConfigClockSource+0xfa>
 800a1e0:	2b50      	cmp	r3, #80	@ 0x50
 800a1e2:	d873      	bhi.n	800a2cc <HAL_TIM_ConfigClockSource+0x16c>
 800a1e4:	2b40      	cmp	r3, #64	@ 0x40
 800a1e6:	d058      	beq.n	800a29a <HAL_TIM_ConfigClockSource+0x13a>
 800a1e8:	2b40      	cmp	r3, #64	@ 0x40
 800a1ea:	d86f      	bhi.n	800a2cc <HAL_TIM_ConfigClockSource+0x16c>
 800a1ec:	2b30      	cmp	r3, #48	@ 0x30
 800a1ee:	d064      	beq.n	800a2ba <HAL_TIM_ConfigClockSource+0x15a>
 800a1f0:	2b30      	cmp	r3, #48	@ 0x30
 800a1f2:	d86b      	bhi.n	800a2cc <HAL_TIM_ConfigClockSource+0x16c>
 800a1f4:	2b20      	cmp	r3, #32
 800a1f6:	d060      	beq.n	800a2ba <HAL_TIM_ConfigClockSource+0x15a>
 800a1f8:	2b20      	cmp	r3, #32
 800a1fa:	d867      	bhi.n	800a2cc <HAL_TIM_ConfigClockSource+0x16c>
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d05c      	beq.n	800a2ba <HAL_TIM_ConfigClockSource+0x15a>
 800a200:	2b10      	cmp	r3, #16
 800a202:	d05a      	beq.n	800a2ba <HAL_TIM_ConfigClockSource+0x15a>
 800a204:	e062      	b.n	800a2cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a216:	f000 fc97 	bl	800ab48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a228:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	609a      	str	r2, [r3, #8]
      break;
 800a232:	e04f      	b.n	800a2d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a244:	f000 fc80 	bl	800ab48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	689a      	ldr	r2, [r3, #8]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a256:	609a      	str	r2, [r3, #8]
      break;
 800a258:	e03c      	b.n	800a2d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a266:	461a      	mov	r2, r3
 800a268:	f000 fb3e 	bl	800a8e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2150      	movs	r1, #80	@ 0x50
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fc4d 	bl	800ab12 <TIM_ITRx_SetConfig>
      break;
 800a278:	e02c      	b.n	800a2d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a286:	461a      	mov	r2, r3
 800a288:	f000 fb9a 	bl	800a9c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2160      	movs	r1, #96	@ 0x60
 800a292:	4618      	mov	r0, r3
 800a294:	f000 fc3d 	bl	800ab12 <TIM_ITRx_SetConfig>
      break;
 800a298:	e01c      	b.n	800a2d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	f000 fb1e 	bl	800a8e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2140      	movs	r1, #64	@ 0x40
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 fc2d 	bl	800ab12 <TIM_ITRx_SetConfig>
      break;
 800a2b8:	e00c      	b.n	800a2d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	f000 fc24 	bl	800ab12 <TIM_ITRx_SetConfig>
      break;
 800a2ca:	e003      	b.n	800a2d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a2d0:	e000      	b.n	800a2d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a2d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a2f6:	bf00      	nop
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a302:	b480      	push	{r7}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a30a:	bf00      	nop
 800a30c:	370c      	adds	r7, #12
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a316:	b480      	push	{r7}
 800a318:	b083      	sub	sp, #12
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a31e:	bf00      	nop
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b083      	sub	sp, #12
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a332:	bf00      	nop
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a33e:	b480      	push	{r7}
 800a340:	b083      	sub	sp, #12
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a346:	bf00      	nop
 800a348:	370c      	adds	r7, #12
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
	...

0800a354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4a43      	ldr	r2, [pc, #268]	@ (800a474 <TIM_Base_SetConfig+0x120>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d013      	beq.n	800a394 <TIM_Base_SetConfig+0x40>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a372:	d00f      	beq.n	800a394 <TIM_Base_SetConfig+0x40>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a40      	ldr	r2, [pc, #256]	@ (800a478 <TIM_Base_SetConfig+0x124>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d00b      	beq.n	800a394 <TIM_Base_SetConfig+0x40>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a3f      	ldr	r2, [pc, #252]	@ (800a47c <TIM_Base_SetConfig+0x128>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d007      	beq.n	800a394 <TIM_Base_SetConfig+0x40>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a3e      	ldr	r2, [pc, #248]	@ (800a480 <TIM_Base_SetConfig+0x12c>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d003      	beq.n	800a394 <TIM_Base_SetConfig+0x40>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4a3d      	ldr	r2, [pc, #244]	@ (800a484 <TIM_Base_SetConfig+0x130>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d108      	bne.n	800a3a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a39a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a32      	ldr	r2, [pc, #200]	@ (800a474 <TIM_Base_SetConfig+0x120>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d02b      	beq.n	800a406 <TIM_Base_SetConfig+0xb2>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3b4:	d027      	beq.n	800a406 <TIM_Base_SetConfig+0xb2>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a2f      	ldr	r2, [pc, #188]	@ (800a478 <TIM_Base_SetConfig+0x124>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d023      	beq.n	800a406 <TIM_Base_SetConfig+0xb2>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a2e      	ldr	r2, [pc, #184]	@ (800a47c <TIM_Base_SetConfig+0x128>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d01f      	beq.n	800a406 <TIM_Base_SetConfig+0xb2>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a2d      	ldr	r2, [pc, #180]	@ (800a480 <TIM_Base_SetConfig+0x12c>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d01b      	beq.n	800a406 <TIM_Base_SetConfig+0xb2>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a2c      	ldr	r2, [pc, #176]	@ (800a484 <TIM_Base_SetConfig+0x130>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d017      	beq.n	800a406 <TIM_Base_SetConfig+0xb2>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a2b      	ldr	r2, [pc, #172]	@ (800a488 <TIM_Base_SetConfig+0x134>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d013      	beq.n	800a406 <TIM_Base_SetConfig+0xb2>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a2a      	ldr	r2, [pc, #168]	@ (800a48c <TIM_Base_SetConfig+0x138>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d00f      	beq.n	800a406 <TIM_Base_SetConfig+0xb2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a29      	ldr	r2, [pc, #164]	@ (800a490 <TIM_Base_SetConfig+0x13c>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d00b      	beq.n	800a406 <TIM_Base_SetConfig+0xb2>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a28      	ldr	r2, [pc, #160]	@ (800a494 <TIM_Base_SetConfig+0x140>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d007      	beq.n	800a406 <TIM_Base_SetConfig+0xb2>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a27      	ldr	r2, [pc, #156]	@ (800a498 <TIM_Base_SetConfig+0x144>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d003      	beq.n	800a406 <TIM_Base_SetConfig+0xb2>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a26      	ldr	r2, [pc, #152]	@ (800a49c <TIM_Base_SetConfig+0x148>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d108      	bne.n	800a418 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a40c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	4313      	orrs	r3, r2
 800a416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	4313      	orrs	r3, r2
 800a424:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	689a      	ldr	r2, [r3, #8]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a0e      	ldr	r2, [pc, #56]	@ (800a474 <TIM_Base_SetConfig+0x120>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d003      	beq.n	800a446 <TIM_Base_SetConfig+0xf2>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a10      	ldr	r2, [pc, #64]	@ (800a484 <TIM_Base_SetConfig+0x130>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d103      	bne.n	800a44e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	691a      	ldr	r2, [r3, #16]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f043 0204 	orr.w	r2, r3, #4
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	601a      	str	r2, [r3, #0]
}
 800a466:	bf00      	nop
 800a468:	3714      	adds	r7, #20
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	40010000 	.word	0x40010000
 800a478:	40000400 	.word	0x40000400
 800a47c:	40000800 	.word	0x40000800
 800a480:	40000c00 	.word	0x40000c00
 800a484:	40010400 	.word	0x40010400
 800a488:	40014000 	.word	0x40014000
 800a48c:	40014400 	.word	0x40014400
 800a490:	40014800 	.word	0x40014800
 800a494:	40001800 	.word	0x40001800
 800a498:	40001c00 	.word	0x40001c00
 800a49c:	40002000 	.word	0x40002000

0800a4a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b087      	sub	sp, #28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a1b      	ldr	r3, [r3, #32]
 800a4ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a1b      	ldr	r3, [r3, #32]
 800a4b4:	f023 0201 	bic.w	r2, r3, #1
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f023 0303 	bic.w	r3, r3, #3
 800a4d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	f023 0302 	bic.w	r3, r3, #2
 800a4e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a20      	ldr	r2, [pc, #128]	@ (800a578 <TIM_OC1_SetConfig+0xd8>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d003      	beq.n	800a504 <TIM_OC1_SetConfig+0x64>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a1f      	ldr	r2, [pc, #124]	@ (800a57c <TIM_OC1_SetConfig+0xdc>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d10c      	bne.n	800a51e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	f023 0308 	bic.w	r3, r3, #8
 800a50a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	4313      	orrs	r3, r2
 800a514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f023 0304 	bic.w	r3, r3, #4
 800a51c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a15      	ldr	r2, [pc, #84]	@ (800a578 <TIM_OC1_SetConfig+0xd8>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d003      	beq.n	800a52e <TIM_OC1_SetConfig+0x8e>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a14      	ldr	r2, [pc, #80]	@ (800a57c <TIM_OC1_SetConfig+0xdc>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d111      	bne.n	800a552 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a53c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	4313      	orrs	r3, r2
 800a546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	4313      	orrs	r3, r2
 800a550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	697a      	ldr	r2, [r7, #20]
 800a56a:	621a      	str	r2, [r3, #32]
}
 800a56c:	bf00      	nop
 800a56e:	371c      	adds	r7, #28
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	40010000 	.word	0x40010000
 800a57c:	40010400 	.word	0x40010400

0800a580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a580:	b480      	push	{r7}
 800a582:	b087      	sub	sp, #28
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a1b      	ldr	r3, [r3, #32]
 800a58e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a1b      	ldr	r3, [r3, #32]
 800a594:	f023 0210 	bic.w	r2, r3, #16
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	699b      	ldr	r3, [r3, #24]
 800a5a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	021b      	lsls	r3, r3, #8
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f023 0320 	bic.w	r3, r3, #32
 800a5ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	011b      	lsls	r3, r3, #4
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4a22      	ldr	r2, [pc, #136]	@ (800a664 <TIM_OC2_SetConfig+0xe4>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d003      	beq.n	800a5e8 <TIM_OC2_SetConfig+0x68>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	4a21      	ldr	r2, [pc, #132]	@ (800a668 <TIM_OC2_SetConfig+0xe8>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d10d      	bne.n	800a604 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	011b      	lsls	r3, r3, #4
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a602:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a17      	ldr	r2, [pc, #92]	@ (800a664 <TIM_OC2_SetConfig+0xe4>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d003      	beq.n	800a614 <TIM_OC2_SetConfig+0x94>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a16      	ldr	r2, [pc, #88]	@ (800a668 <TIM_OC2_SetConfig+0xe8>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d113      	bne.n	800a63c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a61a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	695b      	ldr	r3, [r3, #20]
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	693a      	ldr	r2, [r7, #16]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	4313      	orrs	r3, r2
 800a63a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	693a      	ldr	r2, [r7, #16]
 800a640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	697a      	ldr	r2, [r7, #20]
 800a654:	621a      	str	r2, [r3, #32]
}
 800a656:	bf00      	nop
 800a658:	371c      	adds	r7, #28
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	40010000 	.word	0x40010000
 800a668:	40010400 	.word	0x40010400

0800a66c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b087      	sub	sp, #28
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a1b      	ldr	r3, [r3, #32]
 800a680:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	69db      	ldr	r3, [r3, #28]
 800a692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a69a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f023 0303 	bic.w	r3, r3, #3
 800a6a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a6b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	021b      	lsls	r3, r3, #8
 800a6bc:	697a      	ldr	r2, [r7, #20]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a21      	ldr	r2, [pc, #132]	@ (800a74c <TIM_OC3_SetConfig+0xe0>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d003      	beq.n	800a6d2 <TIM_OC3_SetConfig+0x66>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a20      	ldr	r2, [pc, #128]	@ (800a750 <TIM_OC3_SetConfig+0xe4>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d10d      	bne.n	800a6ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a6d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	021b      	lsls	r3, r3, #8
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a6ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a16      	ldr	r2, [pc, #88]	@ (800a74c <TIM_OC3_SetConfig+0xe0>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d003      	beq.n	800a6fe <TIM_OC3_SetConfig+0x92>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a15      	ldr	r2, [pc, #84]	@ (800a750 <TIM_OC3_SetConfig+0xe4>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d113      	bne.n	800a726 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a70c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	011b      	lsls	r3, r3, #4
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	4313      	orrs	r3, r2
 800a718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	011b      	lsls	r3, r3, #4
 800a720:	693a      	ldr	r2, [r7, #16]
 800a722:	4313      	orrs	r3, r2
 800a724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	693a      	ldr	r2, [r7, #16]
 800a72a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	685a      	ldr	r2, [r3, #4]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	621a      	str	r2, [r3, #32]
}
 800a740:	bf00      	nop
 800a742:	371c      	adds	r7, #28
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr
 800a74c:	40010000 	.word	0x40010000
 800a750:	40010400 	.word	0x40010400

0800a754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a754:	b480      	push	{r7}
 800a756:	b087      	sub	sp, #28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a1b      	ldr	r3, [r3, #32]
 800a768:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	69db      	ldr	r3, [r3, #28]
 800a77a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a78a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	021b      	lsls	r3, r3, #8
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	4313      	orrs	r3, r2
 800a796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a79e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	031b      	lsls	r3, r3, #12
 800a7a6:	693a      	ldr	r2, [r7, #16]
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a12      	ldr	r2, [pc, #72]	@ (800a7f8 <TIM_OC4_SetConfig+0xa4>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d003      	beq.n	800a7bc <TIM_OC4_SetConfig+0x68>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a11      	ldr	r2, [pc, #68]	@ (800a7fc <TIM_OC4_SetConfig+0xa8>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d109      	bne.n	800a7d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a7c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	019b      	lsls	r3, r3, #6
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	693a      	ldr	r2, [r7, #16]
 800a7e8:	621a      	str	r2, [r3, #32]
}
 800a7ea:	bf00      	nop
 800a7ec:	371c      	adds	r7, #28
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	40010000 	.word	0x40010000
 800a7fc:	40010400 	.word	0x40010400

0800a800 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a800:	b480      	push	{r7}
 800a802:	b087      	sub	sp, #28
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
 800a80c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6a1b      	ldr	r3, [r3, #32]
 800a818:	f023 0201 	bic.w	r2, r3, #1
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	699b      	ldr	r3, [r3, #24]
 800a824:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	4a28      	ldr	r2, [pc, #160]	@ (800a8cc <TIM_TI1_SetConfig+0xcc>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d01b      	beq.n	800a866 <TIM_TI1_SetConfig+0x66>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a834:	d017      	beq.n	800a866 <TIM_TI1_SetConfig+0x66>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	4a25      	ldr	r2, [pc, #148]	@ (800a8d0 <TIM_TI1_SetConfig+0xd0>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d013      	beq.n	800a866 <TIM_TI1_SetConfig+0x66>
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	4a24      	ldr	r2, [pc, #144]	@ (800a8d4 <TIM_TI1_SetConfig+0xd4>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d00f      	beq.n	800a866 <TIM_TI1_SetConfig+0x66>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	4a23      	ldr	r2, [pc, #140]	@ (800a8d8 <TIM_TI1_SetConfig+0xd8>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d00b      	beq.n	800a866 <TIM_TI1_SetConfig+0x66>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	4a22      	ldr	r2, [pc, #136]	@ (800a8dc <TIM_TI1_SetConfig+0xdc>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d007      	beq.n	800a866 <TIM_TI1_SetConfig+0x66>
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	4a21      	ldr	r2, [pc, #132]	@ (800a8e0 <TIM_TI1_SetConfig+0xe0>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d003      	beq.n	800a866 <TIM_TI1_SetConfig+0x66>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	4a20      	ldr	r2, [pc, #128]	@ (800a8e4 <TIM_TI1_SetConfig+0xe4>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d101      	bne.n	800a86a <TIM_TI1_SetConfig+0x6a>
 800a866:	2301      	movs	r3, #1
 800a868:	e000      	b.n	800a86c <TIM_TI1_SetConfig+0x6c>
 800a86a:	2300      	movs	r3, #0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d008      	beq.n	800a882 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	f023 0303 	bic.w	r3, r3, #3
 800a876:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	617b      	str	r3, [r7, #20]
 800a880:	e003      	b.n	800a88a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f043 0301 	orr.w	r3, r3, #1
 800a888:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a890:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	011b      	lsls	r3, r3, #4
 800a896:	b2db      	uxtb	r3, r3
 800a898:	697a      	ldr	r2, [r7, #20]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	f023 030a 	bic.w	r3, r3, #10
 800a8a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	f003 030a 	and.w	r3, r3, #10
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	621a      	str	r2, [r3, #32]
}
 800a8be:	bf00      	nop
 800a8c0:	371c      	adds	r7, #28
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	40010000 	.word	0x40010000
 800a8d0:	40000400 	.word	0x40000400
 800a8d4:	40000800 	.word	0x40000800
 800a8d8:	40000c00 	.word	0x40000c00
 800a8dc:	40010400 	.word	0x40010400
 800a8e0:	40014000 	.word	0x40014000
 800a8e4:	40001800 	.word	0x40001800

0800a8e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b087      	sub	sp, #28
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6a1b      	ldr	r3, [r3, #32]
 800a8f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	f023 0201 	bic.w	r2, r3, #1
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	011b      	lsls	r3, r3, #4
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f023 030a 	bic.w	r3, r3, #10
 800a924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	693a      	ldr	r2, [r7, #16]
 800a932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	697a      	ldr	r2, [r7, #20]
 800a938:	621a      	str	r2, [r3, #32]
}
 800a93a:	bf00      	nop
 800a93c:	371c      	adds	r7, #28
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a946:	b480      	push	{r7}
 800a948:	b087      	sub	sp, #28
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	60f8      	str	r0, [r7, #12]
 800a94e:	60b9      	str	r1, [r7, #8]
 800a950:	607a      	str	r2, [r7, #4]
 800a952:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6a1b      	ldr	r3, [r3, #32]
 800a958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	6a1b      	ldr	r3, [r3, #32]
 800a95e:	f023 0210 	bic.w	r2, r3, #16
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	699b      	ldr	r3, [r3, #24]
 800a96a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	021b      	lsls	r3, r3, #8
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a984:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	031b      	lsls	r3, r3, #12
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	4313      	orrs	r3, r2
 800a990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a998:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	011b      	lsls	r3, r3, #4
 800a99e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	693a      	ldr	r2, [r7, #16]
 800a9ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	697a      	ldr	r2, [r7, #20]
 800a9b2:	621a      	str	r2, [r3, #32]
}
 800a9b4:	bf00      	nop
 800a9b6:	371c      	adds	r7, #28
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6a1b      	ldr	r3, [r3, #32]
 800a9d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6a1b      	ldr	r3, [r3, #32]
 800a9d6:	f023 0210 	bic.w	r2, r3, #16
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a9ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	031b      	lsls	r3, r3, #12
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a9fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	011b      	lsls	r3, r3, #4
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	621a      	str	r2, [r3, #32]
}
 800aa14:	bf00      	nop
 800aa16:	371c      	adds	r7, #28
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6a1b      	ldr	r3, [r3, #32]
 800aa32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6a1b      	ldr	r3, [r3, #32]
 800aa38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	69db      	ldr	r3, [r3, #28]
 800aa44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	f023 0303 	bic.w	r3, r3, #3
 800aa4c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800aa4e:	693a      	ldr	r2, [r7, #16]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aa5c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	011b      	lsls	r3, r3, #4
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800aa70:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	021b      	lsls	r3, r3, #8
 800aa76:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800aa7a:	697a      	ldr	r2, [r7, #20]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	621a      	str	r2, [r3, #32]
}
 800aa8c:	bf00      	nop
 800aa8e:	371c      	adds	r7, #28
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b087      	sub	sp, #28
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	607a      	str	r2, [r7, #4]
 800aaa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6a1b      	ldr	r3, [r3, #32]
 800aaaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6a1b      	ldr	r3, [r3, #32]
 800aab0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	69db      	ldr	r3, [r3, #28]
 800aabc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aac4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	021b      	lsls	r3, r3, #8
 800aaca:	693a      	ldr	r2, [r7, #16]
 800aacc:	4313      	orrs	r3, r2
 800aace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aad6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	031b      	lsls	r3, r3, #12
 800aadc:	b29b      	uxth	r3, r3
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800aaea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	031b      	lsls	r3, r3, #12
 800aaf0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	693a      	ldr	r2, [r7, #16]
 800aafe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	697a      	ldr	r2, [r7, #20]
 800ab04:	621a      	str	r2, [r3, #32]
}
 800ab06:	bf00      	nop
 800ab08:	371c      	adds	r7, #28
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b085      	sub	sp, #20
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	f043 0307 	orr.w	r3, r3, #7
 800ab34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	609a      	str	r2, [r3, #8]
}
 800ab3c:	bf00      	nop
 800ab3e:	3714      	adds	r7, #20
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
 800ab54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	021a      	lsls	r2, r3, #8
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	431a      	orrs	r2, r3
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	697a      	ldr	r2, [r7, #20]
 800ab7a:	609a      	str	r2, [r3, #8]
}
 800ab7c:	bf00      	nop
 800ab7e:	371c      	adds	r7, #28
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d101      	bne.n	800aba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	e05a      	b.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2202      	movs	r2, #2
 800abac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	4313      	orrs	r3, r2
 800abd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a21      	ldr	r2, [pc, #132]	@ (800ac64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d022      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abec:	d01d      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a1d      	ldr	r2, [pc, #116]	@ (800ac68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d018      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a1b      	ldr	r2, [pc, #108]	@ (800ac6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d013      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a1a      	ldr	r2, [pc, #104]	@ (800ac70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d00e      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a18      	ldr	r2, [pc, #96]	@ (800ac74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d009      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a17      	ldr	r2, [pc, #92]	@ (800ac78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d004      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a15      	ldr	r2, [pc, #84]	@ (800ac7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d10c      	bne.n	800ac44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	40010000 	.word	0x40010000
 800ac68:	40000400 	.word	0x40000400
 800ac6c:	40000800 	.word	0x40000800
 800ac70:	40000c00 	.word	0x40000c00
 800ac74:	40010400 	.word	0x40010400
 800ac78:	40014000 	.word	0x40014000
 800ac7c:	40001800 	.word	0x40001800

0800ac80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d101      	bne.n	800ac9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ac98:	2302      	movs	r3, #2
 800ac9a:	e03d      	b.n	800ad18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	4313      	orrs	r3, r2
 800acb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	4313      	orrs	r3, r2
 800accc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4313      	orrs	r3, r2
 800acda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	695b      	ldr	r3, [r3, #20]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	69db      	ldr	r3, [r3, #28]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3714      	adds	r7, #20
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad2c:	bf00      	nop
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad40:	bf00      	nop
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d101      	bne.n	800ad5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e042      	b.n	800ade4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d106      	bne.n	800ad78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7f9 fd22 	bl	80047bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2224      	movs	r2, #36	@ 0x24
 800ad7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68da      	ldr	r2, [r3, #12]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ad8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 fc99 	bl	800b6c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	691a      	ldr	r2, [r3, #16]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ada4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	695a      	ldr	r2, [r3, #20]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800adb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68da      	ldr	r2, [r3, #12]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800adc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2220      	movs	r2, #32
 800add0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2220      	movs	r2, #32
 800add8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b0ba      	sub	sp, #232	@ 0xe8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	695b      	ldr	r3, [r3, #20]
 800ae0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ae12:	2300      	movs	r3, #0
 800ae14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae22:	f003 030f 	and.w	r3, r3, #15
 800ae26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ae2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10f      	bne.n	800ae52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae36:	f003 0320 	and.w	r3, r3, #32
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d009      	beq.n	800ae52 <HAL_UART_IRQHandler+0x66>
 800ae3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae42:	f003 0320 	and.w	r3, r3, #32
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fb7e 	bl	800b54c <UART_Receive_IT>
      return;
 800ae50:	e273      	b.n	800b33a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ae52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f000 80de 	beq.w	800b018 <HAL_UART_IRQHandler+0x22c>
 800ae5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae60:	f003 0301 	and.w	r3, r3, #1
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d106      	bne.n	800ae76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ae68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f000 80d1 	beq.w	800b018 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ae76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00b      	beq.n	800ae9a <HAL_UART_IRQHandler+0xae>
 800ae82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d005      	beq.n	800ae9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae92:	f043 0201 	orr.w	r2, r3, #1
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ae9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae9e:	f003 0304 	and.w	r3, r3, #4
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00b      	beq.n	800aebe <HAL_UART_IRQHandler+0xd2>
 800aea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aeaa:	f003 0301 	and.w	r3, r3, #1
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d005      	beq.n	800aebe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeb6:	f043 0202 	orr.w	r2, r3, #2
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aec2:	f003 0302 	and.w	r3, r3, #2
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00b      	beq.n	800aee2 <HAL_UART_IRQHandler+0xf6>
 800aeca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aece:	f003 0301 	and.w	r3, r3, #1
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d005      	beq.n	800aee2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeda:	f043 0204 	orr.w	r2, r3, #4
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aee6:	f003 0308 	and.w	r3, r3, #8
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d011      	beq.n	800af12 <HAL_UART_IRQHandler+0x126>
 800aeee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aef2:	f003 0320 	and.w	r3, r3, #32
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d105      	bne.n	800af06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aefa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aefe:	f003 0301 	and.w	r3, r3, #1
 800af02:	2b00      	cmp	r3, #0
 800af04:	d005      	beq.n	800af12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af0a:	f043 0208 	orr.w	r2, r3, #8
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af16:	2b00      	cmp	r3, #0
 800af18:	f000 820a 	beq.w	800b330 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af20:	f003 0320 	and.w	r3, r3, #32
 800af24:	2b00      	cmp	r3, #0
 800af26:	d008      	beq.n	800af3a <HAL_UART_IRQHandler+0x14e>
 800af28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af2c:	f003 0320 	and.w	r3, r3, #32
 800af30:	2b00      	cmp	r3, #0
 800af32:	d002      	beq.n	800af3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 fb09 	bl	800b54c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	695b      	ldr	r3, [r3, #20]
 800af40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af44:	2b40      	cmp	r3, #64	@ 0x40
 800af46:	bf0c      	ite	eq
 800af48:	2301      	moveq	r3, #1
 800af4a:	2300      	movne	r3, #0
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af56:	f003 0308 	and.w	r3, r3, #8
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d103      	bne.n	800af66 <HAL_UART_IRQHandler+0x17a>
 800af5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800af62:	2b00      	cmp	r3, #0
 800af64:	d04f      	beq.n	800b006 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fa14 	bl	800b394 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af76:	2b40      	cmp	r3, #64	@ 0x40
 800af78:	d141      	bne.n	800affe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	3314      	adds	r3, #20
 800af80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800af88:	e853 3f00 	ldrex	r3, [r3]
 800af8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800af90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	3314      	adds	r3, #20
 800afa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800afa6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800afaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800afb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800afb6:	e841 2300 	strex	r3, r2, [r1]
 800afba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800afbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1d9      	bne.n	800af7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d013      	beq.n	800aff6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afd2:	4a8a      	ldr	r2, [pc, #552]	@ (800b1fc <HAL_UART_IRQHandler+0x410>)
 800afd4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fa fcb6 	bl	800594c <HAL_DMA_Abort_IT>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d016      	beq.n	800b014 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800aff0:	4610      	mov	r0, r2
 800aff2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff4:	e00e      	b.n	800b014 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 f9b6 	bl	800b368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800affc:	e00a      	b.n	800b014 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f9b2 	bl	800b368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b004:	e006      	b.n	800b014 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f9ae 	bl	800b368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b012:	e18d      	b.n	800b330 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b014:	bf00      	nop
    return;
 800b016:	e18b      	b.n	800b330 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	f040 8167 	bne.w	800b2f0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b026:	f003 0310 	and.w	r3, r3, #16
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f000 8160 	beq.w	800b2f0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b034:	f003 0310 	and.w	r3, r3, #16
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f000 8159 	beq.w	800b2f0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b03e:	2300      	movs	r3, #0
 800b040:	60bb      	str	r3, [r7, #8]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	60bb      	str	r3, [r7, #8]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	60bb      	str	r3, [r7, #8]
 800b052:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b05e:	2b40      	cmp	r3, #64	@ 0x40
 800b060:	f040 80ce 	bne.w	800b200 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b070:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 80a9 	beq.w	800b1cc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b07e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b082:	429a      	cmp	r2, r3
 800b084:	f080 80a2 	bcs.w	800b1cc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b08e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b094:	69db      	ldr	r3, [r3, #28]
 800b096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b09a:	f000 8088 	beq.w	800b1ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	330c      	adds	r3, #12
 800b0a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b0ac:	e853 3f00 	ldrex	r3, [r3]
 800b0b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b0b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b0b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	330c      	adds	r3, #12
 800b0c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b0ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b0ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b0d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b0da:	e841 2300 	strex	r3, r2, [r1]
 800b0de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b0e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1d9      	bne.n	800b09e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	3314      	adds	r3, #20
 800b0f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0f4:	e853 3f00 	ldrex	r3, [r3]
 800b0f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b0fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0fc:	f023 0301 	bic.w	r3, r3, #1
 800b100:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3314      	adds	r3, #20
 800b10a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b10e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b112:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b114:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b116:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b11a:	e841 2300 	strex	r3, r2, [r1]
 800b11e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b120:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1e1      	bne.n	800b0ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3314      	adds	r3, #20
 800b12c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b130:	e853 3f00 	ldrex	r3, [r3]
 800b134:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b136:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b138:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b13c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	3314      	adds	r3, #20
 800b146:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b14a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b14c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b150:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b152:	e841 2300 	strex	r3, r2, [r1]
 800b156:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b158:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1e3      	bne.n	800b126 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2220      	movs	r2, #32
 800b162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	330c      	adds	r3, #12
 800b172:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b176:	e853 3f00 	ldrex	r3, [r3]
 800b17a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b17c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b17e:	f023 0310 	bic.w	r3, r3, #16
 800b182:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	330c      	adds	r3, #12
 800b18c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b190:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b192:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b194:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b196:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b198:	e841 2300 	strex	r3, r2, [r1]
 800b19c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b19e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1e3      	bne.n	800b16c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7fa fb5f 	bl	800586c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2202      	movs	r2, #2
 800b1b2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f8d9 	bl	800b37c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b1ca:	e0b3      	b.n	800b334 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b1d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	f040 80ad 	bne.w	800b334 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1de:	69db      	ldr	r3, [r3, #28]
 800b1e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1e4:	f040 80a6 	bne.w	800b334 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 f8c1 	bl	800b37c <HAL_UARTEx_RxEventCallback>
      return;
 800b1fa:	e09b      	b.n	800b334 <HAL_UART_IRQHandler+0x548>
 800b1fc:	0800b45b 	.word	0x0800b45b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b208:	b29b      	uxth	r3, r3
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b214:	b29b      	uxth	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	f000 808e 	beq.w	800b338 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b21c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b220:	2b00      	cmp	r3, #0
 800b222:	f000 8089 	beq.w	800b338 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	330c      	adds	r3, #12
 800b22c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b230:	e853 3f00 	ldrex	r3, [r3]
 800b234:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b238:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b23c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	330c      	adds	r3, #12
 800b246:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b24a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b24c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b250:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b252:	e841 2300 	strex	r3, r2, [r1]
 800b256:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1e3      	bne.n	800b226 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	3314      	adds	r3, #20
 800b264:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b268:	e853 3f00 	ldrex	r3, [r3]
 800b26c:	623b      	str	r3, [r7, #32]
   return(result);
 800b26e:	6a3b      	ldr	r3, [r7, #32]
 800b270:	f023 0301 	bic.w	r3, r3, #1
 800b274:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	3314      	adds	r3, #20
 800b27e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b282:	633a      	str	r2, [r7, #48]	@ 0x30
 800b284:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b28a:	e841 2300 	strex	r3, r2, [r1]
 800b28e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e3      	bne.n	800b25e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2220      	movs	r2, #32
 800b29a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	330c      	adds	r3, #12
 800b2aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	e853 3f00 	ldrex	r3, [r3]
 800b2b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f023 0310 	bic.w	r3, r3, #16
 800b2ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	330c      	adds	r3, #12
 800b2c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b2c8:	61fa      	str	r2, [r7, #28]
 800b2ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2cc:	69b9      	ldr	r1, [r7, #24]
 800b2ce:	69fa      	ldr	r2, [r7, #28]
 800b2d0:	e841 2300 	strex	r3, r2, [r1]
 800b2d4:	617b      	str	r3, [r7, #20]
   return(result);
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1e3      	bne.n	800b2a4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2202      	movs	r2, #2
 800b2e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b2e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f847 	bl	800b37c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b2ee:	e023      	b.n	800b338 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d009      	beq.n	800b310 <HAL_UART_IRQHandler+0x524>
 800b2fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b304:	2b00      	cmp	r3, #0
 800b306:	d003      	beq.n	800b310 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f8b7 	bl	800b47c <UART_Transmit_IT>
    return;
 800b30e:	e014      	b.n	800b33a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00e      	beq.n	800b33a <HAL_UART_IRQHandler+0x54e>
 800b31c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b324:	2b00      	cmp	r3, #0
 800b326:	d008      	beq.n	800b33a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f8f7 	bl	800b51c <UART_EndTransmit_IT>
    return;
 800b32e:	e004      	b.n	800b33a <HAL_UART_IRQHandler+0x54e>
    return;
 800b330:	bf00      	nop
 800b332:	e002      	b.n	800b33a <HAL_UART_IRQHandler+0x54e>
      return;
 800b334:	bf00      	nop
 800b336:	e000      	b.n	800b33a <HAL_UART_IRQHandler+0x54e>
      return;
 800b338:	bf00      	nop
  }
}
 800b33a:	37e8      	adds	r7, #232	@ 0xe8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b394:	b480      	push	{r7}
 800b396:	b095      	sub	sp, #84	@ 0x54
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	330c      	adds	r3, #12
 800b3a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3a6:	e853 3f00 	ldrex	r3, [r3]
 800b3aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	330c      	adds	r3, #12
 800b3ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3bc:	643a      	str	r2, [r7, #64]	@ 0x40
 800b3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b3c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b3c4:	e841 2300 	strex	r3, r2, [r1]
 800b3c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1e5      	bne.n	800b39c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3314      	adds	r3, #20
 800b3d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d8:	6a3b      	ldr	r3, [r7, #32]
 800b3da:	e853 3f00 	ldrex	r3, [r3]
 800b3de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	f023 0301 	bic.w	r3, r3, #1
 800b3e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3314      	adds	r3, #20
 800b3ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3f8:	e841 2300 	strex	r3, r2, [r1]
 800b3fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1e5      	bne.n	800b3d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d119      	bne.n	800b440 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	330c      	adds	r3, #12
 800b412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	e853 3f00 	ldrex	r3, [r3]
 800b41a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	f023 0310 	bic.w	r3, r3, #16
 800b422:	647b      	str	r3, [r7, #68]	@ 0x44
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	330c      	adds	r3, #12
 800b42a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b42c:	61ba      	str	r2, [r7, #24]
 800b42e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b430:	6979      	ldr	r1, [r7, #20]
 800b432:	69ba      	ldr	r2, [r7, #24]
 800b434:	e841 2300 	strex	r3, r2, [r1]
 800b438:	613b      	str	r3, [r7, #16]
   return(result);
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1e5      	bne.n	800b40c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2220      	movs	r2, #32
 800b444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b44e:	bf00      	nop
 800b450:	3754      	adds	r7, #84	@ 0x54
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr

0800b45a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b084      	sub	sp, #16
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b466:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f7ff ff7a 	bl	800b368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b474:	bf00      	nop
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	2b21      	cmp	r3, #33	@ 0x21
 800b48e:	d13e      	bne.n	800b50e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b498:	d114      	bne.n	800b4c4 <UART_Transmit_IT+0x48>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d110      	bne.n	800b4c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a1b      	ldr	r3, [r3, #32]
 800b4a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	881b      	ldrh	r3, [r3, #0]
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6a1b      	ldr	r3, [r3, #32]
 800b4bc:	1c9a      	adds	r2, r3, #2
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	621a      	str	r2, [r3, #32]
 800b4c2:	e008      	b.n	800b4d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a1b      	ldr	r3, [r3, #32]
 800b4c8:	1c59      	adds	r1, r3, #1
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	6211      	str	r1, [r2, #32]
 800b4ce:	781a      	ldrb	r2, [r3, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d10f      	bne.n	800b50a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68da      	ldr	r2, [r3, #12]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b4f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	68da      	ldr	r2, [r3, #12]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b508:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b50a:	2300      	movs	r3, #0
 800b50c:	e000      	b.n	800b510 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b50e:	2302      	movs	r3, #2
  }
}
 800b510:	4618      	mov	r0, r3
 800b512:	3714      	adds	r7, #20
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68da      	ldr	r2, [r3, #12]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b532:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2220      	movs	r2, #32
 800b538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff feff 	bl	800b340 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08c      	sub	sp, #48	@ 0x30
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800b554:	2300      	movs	r3, #0
 800b556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800b558:	2300      	movs	r3, #0
 800b55a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b562:	b2db      	uxtb	r3, r3
 800b564:	2b22      	cmp	r3, #34	@ 0x22
 800b566:	f040 80aa 	bne.w	800b6be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b572:	d115      	bne.n	800b5a0 <UART_Receive_IT+0x54>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d111      	bne.n	800b5a0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b580:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	b29b      	uxth	r3, r3
 800b58a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b58e:	b29a      	uxth	r2, r3
 800b590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b592:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b598:	1c9a      	adds	r2, r3, #2
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	629a      	str	r2, [r3, #40]	@ 0x28
 800b59e:	e024      	b.n	800b5ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5ae:	d007      	beq.n	800b5c0 <UART_Receive_IT+0x74>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10a      	bne.n	800b5ce <UART_Receive_IT+0x82>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d106      	bne.n	800b5ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ca:	701a      	strb	r2, [r3, #0]
 800b5cc:	e008      	b.n	800b5e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5da:	b2da      	uxtb	r2, r3
 800b5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e4:	1c5a      	adds	r2, r3, #1
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d15d      	bne.n	800b6ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68da      	ldr	r2, [r3, #12]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f022 0220 	bic.w	r2, r2, #32
 800b60c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	68da      	ldr	r2, [r3, #12]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b61c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	695a      	ldr	r2, [r3, #20]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f022 0201 	bic.w	r2, r2, #1
 800b62c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2220      	movs	r2, #32
 800b632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b640:	2b01      	cmp	r3, #1
 800b642:	d135      	bne.n	800b6b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	330c      	adds	r3, #12
 800b650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	e853 3f00 	ldrex	r3, [r3]
 800b658:	613b      	str	r3, [r7, #16]
   return(result);
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	f023 0310 	bic.w	r3, r3, #16
 800b660:	627b      	str	r3, [r7, #36]	@ 0x24
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	330c      	adds	r3, #12
 800b668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b66a:	623a      	str	r2, [r7, #32]
 800b66c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66e:	69f9      	ldr	r1, [r7, #28]
 800b670:	6a3a      	ldr	r2, [r7, #32]
 800b672:	e841 2300 	strex	r3, r2, [r1]
 800b676:	61bb      	str	r3, [r7, #24]
   return(result);
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1e5      	bne.n	800b64a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f003 0310 	and.w	r3, r3, #16
 800b688:	2b10      	cmp	r3, #16
 800b68a:	d10a      	bne.n	800b6a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b68c:	2300      	movs	r3, #0
 800b68e:	60fb      	str	r3, [r7, #12]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	60fb      	str	r3, [r7, #12]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	60fb      	str	r3, [r7, #12]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7ff fe67 	bl	800b37c <HAL_UARTEx_RxEventCallback>
 800b6ae:	e002      	b.n	800b6b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7ff fe4f 	bl	800b354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	e002      	b.n	800b6c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e000      	b.n	800b6c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b6be:	2302      	movs	r3, #2
  }
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3730      	adds	r7, #48	@ 0x30
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6cc:	b0c0      	sub	sp, #256	@ 0x100
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	691b      	ldr	r3, [r3, #16]
 800b6dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b6e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6e4:	68d9      	ldr	r1, [r3, #12]
 800b6e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	ea40 0301 	orr.w	r3, r0, r1
 800b6f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b6f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6f6:	689a      	ldr	r2, [r3, #8]
 800b6f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	431a      	orrs	r2, r3
 800b700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b704:	695b      	ldr	r3, [r3, #20]
 800b706:	431a      	orrs	r2, r3
 800b708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b70c:	69db      	ldr	r3, [r3, #28]
 800b70e:	4313      	orrs	r3, r2
 800b710:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b720:	f021 010c 	bic.w	r1, r1, #12
 800b724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b72e:	430b      	orrs	r3, r1
 800b730:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	695b      	ldr	r3, [r3, #20]
 800b73a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b73e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b742:	6999      	ldr	r1, [r3, #24]
 800b744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	ea40 0301 	orr.w	r3, r0, r1
 800b74e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	4b8f      	ldr	r3, [pc, #572]	@ (800b994 <UART_SetConfig+0x2cc>)
 800b758:	429a      	cmp	r2, r3
 800b75a:	d005      	beq.n	800b768 <UART_SetConfig+0xa0>
 800b75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	4b8d      	ldr	r3, [pc, #564]	@ (800b998 <UART_SetConfig+0x2d0>)
 800b764:	429a      	cmp	r2, r3
 800b766:	d104      	bne.n	800b772 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b768:	f7fc fc90 	bl	800808c <HAL_RCC_GetPCLK2Freq>
 800b76c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b770:	e003      	b.n	800b77a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b772:	f7fc fc77 	bl	8008064 <HAL_RCC_GetPCLK1Freq>
 800b776:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b77a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b77e:	69db      	ldr	r3, [r3, #28]
 800b780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b784:	f040 810c 	bne.w	800b9a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b78c:	2200      	movs	r2, #0
 800b78e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b792:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b796:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b79a:	4622      	mov	r2, r4
 800b79c:	462b      	mov	r3, r5
 800b79e:	1891      	adds	r1, r2, r2
 800b7a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b7a2:	415b      	adcs	r3, r3
 800b7a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b7aa:	4621      	mov	r1, r4
 800b7ac:	eb12 0801 	adds.w	r8, r2, r1
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	eb43 0901 	adc.w	r9, r3, r1
 800b7b6:	f04f 0200 	mov.w	r2, #0
 800b7ba:	f04f 0300 	mov.w	r3, #0
 800b7be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b7c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b7c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b7ca:	4690      	mov	r8, r2
 800b7cc:	4699      	mov	r9, r3
 800b7ce:	4623      	mov	r3, r4
 800b7d0:	eb18 0303 	adds.w	r3, r8, r3
 800b7d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b7d8:	462b      	mov	r3, r5
 800b7da:	eb49 0303 	adc.w	r3, r9, r3
 800b7de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b7e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b7ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b7f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	18db      	adds	r3, r3, r3
 800b7fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	eb42 0303 	adc.w	r3, r2, r3
 800b802:	657b      	str	r3, [r7, #84]	@ 0x54
 800b804:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b808:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b80c:	f7f5 fa3c 	bl	8000c88 <__aeabi_uldivmod>
 800b810:	4602      	mov	r2, r0
 800b812:	460b      	mov	r3, r1
 800b814:	4b61      	ldr	r3, [pc, #388]	@ (800b99c <UART_SetConfig+0x2d4>)
 800b816:	fba3 2302 	umull	r2, r3, r3, r2
 800b81a:	095b      	lsrs	r3, r3, #5
 800b81c:	011c      	lsls	r4, r3, #4
 800b81e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b822:	2200      	movs	r2, #0
 800b824:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b828:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b82c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b830:	4642      	mov	r2, r8
 800b832:	464b      	mov	r3, r9
 800b834:	1891      	adds	r1, r2, r2
 800b836:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b838:	415b      	adcs	r3, r3
 800b83a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b83c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b840:	4641      	mov	r1, r8
 800b842:	eb12 0a01 	adds.w	sl, r2, r1
 800b846:	4649      	mov	r1, r9
 800b848:	eb43 0b01 	adc.w	fp, r3, r1
 800b84c:	f04f 0200 	mov.w	r2, #0
 800b850:	f04f 0300 	mov.w	r3, #0
 800b854:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b858:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b85c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b860:	4692      	mov	sl, r2
 800b862:	469b      	mov	fp, r3
 800b864:	4643      	mov	r3, r8
 800b866:	eb1a 0303 	adds.w	r3, sl, r3
 800b86a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b86e:	464b      	mov	r3, r9
 800b870:	eb4b 0303 	adc.w	r3, fp, r3
 800b874:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b884:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b888:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b88c:	460b      	mov	r3, r1
 800b88e:	18db      	adds	r3, r3, r3
 800b890:	643b      	str	r3, [r7, #64]	@ 0x40
 800b892:	4613      	mov	r3, r2
 800b894:	eb42 0303 	adc.w	r3, r2, r3
 800b898:	647b      	str	r3, [r7, #68]	@ 0x44
 800b89a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b89e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b8a2:	f7f5 f9f1 	bl	8000c88 <__aeabi_uldivmod>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	4b3b      	ldr	r3, [pc, #236]	@ (800b99c <UART_SetConfig+0x2d4>)
 800b8ae:	fba3 2301 	umull	r2, r3, r3, r1
 800b8b2:	095b      	lsrs	r3, r3, #5
 800b8b4:	2264      	movs	r2, #100	@ 0x64
 800b8b6:	fb02 f303 	mul.w	r3, r2, r3
 800b8ba:	1acb      	subs	r3, r1, r3
 800b8bc:	00db      	lsls	r3, r3, #3
 800b8be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b8c2:	4b36      	ldr	r3, [pc, #216]	@ (800b99c <UART_SetConfig+0x2d4>)
 800b8c4:	fba3 2302 	umull	r2, r3, r3, r2
 800b8c8:	095b      	lsrs	r3, r3, #5
 800b8ca:	005b      	lsls	r3, r3, #1
 800b8cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b8d0:	441c      	add	r4, r3
 800b8d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b8dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b8e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b8e4:	4642      	mov	r2, r8
 800b8e6:	464b      	mov	r3, r9
 800b8e8:	1891      	adds	r1, r2, r2
 800b8ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b8ec:	415b      	adcs	r3, r3
 800b8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b8f4:	4641      	mov	r1, r8
 800b8f6:	1851      	adds	r1, r2, r1
 800b8f8:	6339      	str	r1, [r7, #48]	@ 0x30
 800b8fa:	4649      	mov	r1, r9
 800b8fc:	414b      	adcs	r3, r1
 800b8fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b900:	f04f 0200 	mov.w	r2, #0
 800b904:	f04f 0300 	mov.w	r3, #0
 800b908:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b90c:	4659      	mov	r1, fp
 800b90e:	00cb      	lsls	r3, r1, #3
 800b910:	4651      	mov	r1, sl
 800b912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b916:	4651      	mov	r1, sl
 800b918:	00ca      	lsls	r2, r1, #3
 800b91a:	4610      	mov	r0, r2
 800b91c:	4619      	mov	r1, r3
 800b91e:	4603      	mov	r3, r0
 800b920:	4642      	mov	r2, r8
 800b922:	189b      	adds	r3, r3, r2
 800b924:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b928:	464b      	mov	r3, r9
 800b92a:	460a      	mov	r2, r1
 800b92c:	eb42 0303 	adc.w	r3, r2, r3
 800b930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b940:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b944:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b948:	460b      	mov	r3, r1
 800b94a:	18db      	adds	r3, r3, r3
 800b94c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b94e:	4613      	mov	r3, r2
 800b950:	eb42 0303 	adc.w	r3, r2, r3
 800b954:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b95a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b95e:	f7f5 f993 	bl	8000c88 <__aeabi_uldivmod>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	4b0d      	ldr	r3, [pc, #52]	@ (800b99c <UART_SetConfig+0x2d4>)
 800b968:	fba3 1302 	umull	r1, r3, r3, r2
 800b96c:	095b      	lsrs	r3, r3, #5
 800b96e:	2164      	movs	r1, #100	@ 0x64
 800b970:	fb01 f303 	mul.w	r3, r1, r3
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	3332      	adds	r3, #50	@ 0x32
 800b97a:	4a08      	ldr	r2, [pc, #32]	@ (800b99c <UART_SetConfig+0x2d4>)
 800b97c:	fba2 2303 	umull	r2, r3, r2, r3
 800b980:	095b      	lsrs	r3, r3, #5
 800b982:	f003 0207 	and.w	r2, r3, #7
 800b986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4422      	add	r2, r4
 800b98e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b990:	e106      	b.n	800bba0 <UART_SetConfig+0x4d8>
 800b992:	bf00      	nop
 800b994:	40011000 	.word	0x40011000
 800b998:	40011400 	.word	0x40011400
 800b99c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b9a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b9aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b9ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b9b2:	4642      	mov	r2, r8
 800b9b4:	464b      	mov	r3, r9
 800b9b6:	1891      	adds	r1, r2, r2
 800b9b8:	6239      	str	r1, [r7, #32]
 800b9ba:	415b      	adcs	r3, r3
 800b9bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b9c2:	4641      	mov	r1, r8
 800b9c4:	1854      	adds	r4, r2, r1
 800b9c6:	4649      	mov	r1, r9
 800b9c8:	eb43 0501 	adc.w	r5, r3, r1
 800b9cc:	f04f 0200 	mov.w	r2, #0
 800b9d0:	f04f 0300 	mov.w	r3, #0
 800b9d4:	00eb      	lsls	r3, r5, #3
 800b9d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b9da:	00e2      	lsls	r2, r4, #3
 800b9dc:	4614      	mov	r4, r2
 800b9de:	461d      	mov	r5, r3
 800b9e0:	4643      	mov	r3, r8
 800b9e2:	18e3      	adds	r3, r4, r3
 800b9e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b9e8:	464b      	mov	r3, r9
 800b9ea:	eb45 0303 	adc.w	r3, r5, r3
 800b9ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b9f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b9fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ba02:	f04f 0200 	mov.w	r2, #0
 800ba06:	f04f 0300 	mov.w	r3, #0
 800ba0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ba0e:	4629      	mov	r1, r5
 800ba10:	008b      	lsls	r3, r1, #2
 800ba12:	4621      	mov	r1, r4
 800ba14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba18:	4621      	mov	r1, r4
 800ba1a:	008a      	lsls	r2, r1, #2
 800ba1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ba20:	f7f5 f932 	bl	8000c88 <__aeabi_uldivmod>
 800ba24:	4602      	mov	r2, r0
 800ba26:	460b      	mov	r3, r1
 800ba28:	4b60      	ldr	r3, [pc, #384]	@ (800bbac <UART_SetConfig+0x4e4>)
 800ba2a:	fba3 2302 	umull	r2, r3, r3, r2
 800ba2e:	095b      	lsrs	r3, r3, #5
 800ba30:	011c      	lsls	r4, r3, #4
 800ba32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba36:	2200      	movs	r2, #0
 800ba38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ba3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ba40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ba44:	4642      	mov	r2, r8
 800ba46:	464b      	mov	r3, r9
 800ba48:	1891      	adds	r1, r2, r2
 800ba4a:	61b9      	str	r1, [r7, #24]
 800ba4c:	415b      	adcs	r3, r3
 800ba4e:	61fb      	str	r3, [r7, #28]
 800ba50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba54:	4641      	mov	r1, r8
 800ba56:	1851      	adds	r1, r2, r1
 800ba58:	6139      	str	r1, [r7, #16]
 800ba5a:	4649      	mov	r1, r9
 800ba5c:	414b      	adcs	r3, r1
 800ba5e:	617b      	str	r3, [r7, #20]
 800ba60:	f04f 0200 	mov.w	r2, #0
 800ba64:	f04f 0300 	mov.w	r3, #0
 800ba68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ba6c:	4659      	mov	r1, fp
 800ba6e:	00cb      	lsls	r3, r1, #3
 800ba70:	4651      	mov	r1, sl
 800ba72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba76:	4651      	mov	r1, sl
 800ba78:	00ca      	lsls	r2, r1, #3
 800ba7a:	4610      	mov	r0, r2
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4603      	mov	r3, r0
 800ba80:	4642      	mov	r2, r8
 800ba82:	189b      	adds	r3, r3, r2
 800ba84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba88:	464b      	mov	r3, r9
 800ba8a:	460a      	mov	r2, r1
 800ba8c:	eb42 0303 	adc.w	r3, r2, r3
 800ba90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ba9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800baa0:	f04f 0200 	mov.w	r2, #0
 800baa4:	f04f 0300 	mov.w	r3, #0
 800baa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800baac:	4649      	mov	r1, r9
 800baae:	008b      	lsls	r3, r1, #2
 800bab0:	4641      	mov	r1, r8
 800bab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bab6:	4641      	mov	r1, r8
 800bab8:	008a      	lsls	r2, r1, #2
 800baba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800babe:	f7f5 f8e3 	bl	8000c88 <__aeabi_uldivmod>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	4611      	mov	r1, r2
 800bac8:	4b38      	ldr	r3, [pc, #224]	@ (800bbac <UART_SetConfig+0x4e4>)
 800baca:	fba3 2301 	umull	r2, r3, r3, r1
 800bace:	095b      	lsrs	r3, r3, #5
 800bad0:	2264      	movs	r2, #100	@ 0x64
 800bad2:	fb02 f303 	mul.w	r3, r2, r3
 800bad6:	1acb      	subs	r3, r1, r3
 800bad8:	011b      	lsls	r3, r3, #4
 800bada:	3332      	adds	r3, #50	@ 0x32
 800badc:	4a33      	ldr	r2, [pc, #204]	@ (800bbac <UART_SetConfig+0x4e4>)
 800bade:	fba2 2303 	umull	r2, r3, r2, r3
 800bae2:	095b      	lsrs	r3, r3, #5
 800bae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bae8:	441c      	add	r4, r3
 800baea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800baee:	2200      	movs	r2, #0
 800baf0:	673b      	str	r3, [r7, #112]	@ 0x70
 800baf2:	677a      	str	r2, [r7, #116]	@ 0x74
 800baf4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800baf8:	4642      	mov	r2, r8
 800bafa:	464b      	mov	r3, r9
 800bafc:	1891      	adds	r1, r2, r2
 800bafe:	60b9      	str	r1, [r7, #8]
 800bb00:	415b      	adcs	r3, r3
 800bb02:	60fb      	str	r3, [r7, #12]
 800bb04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb08:	4641      	mov	r1, r8
 800bb0a:	1851      	adds	r1, r2, r1
 800bb0c:	6039      	str	r1, [r7, #0]
 800bb0e:	4649      	mov	r1, r9
 800bb10:	414b      	adcs	r3, r1
 800bb12:	607b      	str	r3, [r7, #4]
 800bb14:	f04f 0200 	mov.w	r2, #0
 800bb18:	f04f 0300 	mov.w	r3, #0
 800bb1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bb20:	4659      	mov	r1, fp
 800bb22:	00cb      	lsls	r3, r1, #3
 800bb24:	4651      	mov	r1, sl
 800bb26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb2a:	4651      	mov	r1, sl
 800bb2c:	00ca      	lsls	r2, r1, #3
 800bb2e:	4610      	mov	r0, r2
 800bb30:	4619      	mov	r1, r3
 800bb32:	4603      	mov	r3, r0
 800bb34:	4642      	mov	r2, r8
 800bb36:	189b      	adds	r3, r3, r2
 800bb38:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb3a:	464b      	mov	r3, r9
 800bb3c:	460a      	mov	r2, r1
 800bb3e:	eb42 0303 	adc.w	r3, r2, r3
 800bb42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bb44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb4e:	667a      	str	r2, [r7, #100]	@ 0x64
 800bb50:	f04f 0200 	mov.w	r2, #0
 800bb54:	f04f 0300 	mov.w	r3, #0
 800bb58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bb5c:	4649      	mov	r1, r9
 800bb5e:	008b      	lsls	r3, r1, #2
 800bb60:	4641      	mov	r1, r8
 800bb62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb66:	4641      	mov	r1, r8
 800bb68:	008a      	lsls	r2, r1, #2
 800bb6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bb6e:	f7f5 f88b 	bl	8000c88 <__aeabi_uldivmod>
 800bb72:	4602      	mov	r2, r0
 800bb74:	460b      	mov	r3, r1
 800bb76:	4b0d      	ldr	r3, [pc, #52]	@ (800bbac <UART_SetConfig+0x4e4>)
 800bb78:	fba3 1302 	umull	r1, r3, r3, r2
 800bb7c:	095b      	lsrs	r3, r3, #5
 800bb7e:	2164      	movs	r1, #100	@ 0x64
 800bb80:	fb01 f303 	mul.w	r3, r1, r3
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	011b      	lsls	r3, r3, #4
 800bb88:	3332      	adds	r3, #50	@ 0x32
 800bb8a:	4a08      	ldr	r2, [pc, #32]	@ (800bbac <UART_SetConfig+0x4e4>)
 800bb8c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb90:	095b      	lsrs	r3, r3, #5
 800bb92:	f003 020f 	and.w	r2, r3, #15
 800bb96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4422      	add	r2, r4
 800bb9e:	609a      	str	r2, [r3, #8]
}
 800bba0:	bf00      	nop
 800bba2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bba6:	46bd      	mov	sp, r7
 800bba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bbac:	51eb851f 	.word	0x51eb851f

0800bbb0 <_ZdlPvj>:
 800bbb0:	f000 b89c 	b.w	800bcec <_ZdlPv>

0800bbb4 <_Znwj>:
 800bbb4:	2801      	cmp	r0, #1
 800bbb6:	bf38      	it	cc
 800bbb8:	2001      	movcc	r0, #1
 800bbba:	b510      	push	{r4, lr}
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f001 f9ce 	bl	800cf60 <malloc>
 800bbc4:	b100      	cbz	r0, 800bbc8 <_Znwj+0x14>
 800bbc6:	bd10      	pop	{r4, pc}
 800bbc8:	f000 f892 	bl	800bcf0 <_ZSt15get_new_handlerv>
 800bbcc:	b908      	cbnz	r0, 800bbd2 <_Znwj+0x1e>
 800bbce:	f001 f9bf 	bl	800cf50 <abort>
 800bbd2:	4780      	blx	r0
 800bbd4:	e7f3      	b.n	800bbbe <_Znwj+0xa>

0800bbd6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800bbd6:	b10a      	cbz	r2, 800bbdc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800bbd8:	f002 b8af 	b.w	800dd3a <memcpy>
 800bbdc:	4770      	bx	lr

0800bbde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>:
 800bbde:	1e08      	subs	r0, r1, #0
 800bbe0:	b508      	push	{r3, lr}
 800bbe2:	da01      	bge.n	800bbe8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j+0xa>
 800bbe4:	f000 f88c 	bl	800bd00 <_ZSt17__throw_bad_allocv>
 800bbe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bbec:	f7ff bfe2 	b.w	800bbb4 <_Znwj>

0800bbf0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 800bbf0:	f850 3b08 	ldr.w	r3, [r0], #8
 800bbf4:	1a1b      	subs	r3, r3, r0
 800bbf6:	4258      	negs	r0, r3
 800bbf8:	4158      	adcs	r0, r3
 800bbfa:	4770      	bx	lr

0800bbfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800bbfc:	680b      	ldr	r3, [r1, #0]
 800bbfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc02:	b510      	push	{r4, lr}
 800bc04:	d302      	bcc.n	800bc0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800bc06:	480b      	ldr	r0, [pc, #44]	@ (800bc34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 800bc08:	f000 f880 	bl	800bd0c <_ZSt20__throw_length_errorPKc>
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d90b      	bls.n	800bc28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800bc10:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800bc14:	ea4f 0442 	mov.w	r4, r2, lsl #1
 800bc18:	d206      	bcs.n	800bc28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800bc1a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800bc1e:	bf2a      	itet	cs
 800bc20:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 800bc24:	600c      	strcc	r4, [r1, #0]
 800bc26:	600b      	strcs	r3, [r1, #0]
 800bc28:	6809      	ldr	r1, [r1, #0]
 800bc2a:	3101      	adds	r1, #1
 800bc2c:	f7ff ffd7 	bl	800bbde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>
 800bc30:	bd10      	pop	{r4, pc}
 800bc32:	bf00      	nop
 800bc34:	08010764 	.word	0x08010764

0800bc38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
 800bc38:	6800      	ldr	r0, [r0, #0]
 800bc3a:	f000 b857 	b.w	800bcec <_ZdlPv>

0800bc3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800bc3e:	b510      	push	{r4, lr}
 800bc40:	4604      	mov	r4, r0
 800bc42:	f7ff ffd5 	bl	800bbf0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800bc46:	b918      	cbnz	r0, 800bc50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x12>
 800bc48:	68a1      	ldr	r1, [r4, #8]
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f7ff fff4 	bl	800bc38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
 800bc50:	bd10      	pop	{r4, pc}

0800bc52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800bc52:	2a01      	cmp	r2, #1
 800bc54:	b410      	push	{r4}
 800bc56:	d104      	bne.n	800bc62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800bc58:	780a      	ldrb	r2, [r1, #0]
 800bc5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc5e:	7002      	strb	r2, [r0, #0]
 800bc60:	4770      	bx	lr
 800bc62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc66:	f7ff bfb6 	b.w	800bbd6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800bc6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800bc6a:	b508      	push	{r3, lr}
 800bc6c:	1a52      	subs	r2, r2, r1
 800bc6e:	f7ff fff0 	bl	800bc52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bc72:	bd08      	pop	{r3, pc}

0800bc74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800bc74:	b510      	push	{r4, lr}
 800bc76:	4604      	mov	r4, r0
 800bc78:	f7ff ffe1 	bl	800bc3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	bd10      	pop	{r4, pc}

0800bc80 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800bc80:	6800      	ldr	r0, [r0, #0]
 800bc82:	4770      	bx	lr

0800bc84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800bc84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc86:	1a53      	subs	r3, r2, r1
 800bc88:	2b0f      	cmp	r3, #15
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	460d      	mov	r5, r1
 800bc8e:	4616      	mov	r6, r2
 800bc90:	9301      	str	r3, [sp, #4]
 800bc92:	d906      	bls.n	800bca2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 800bc94:	2200      	movs	r2, #0
 800bc96:	a901      	add	r1, sp, #4
 800bc98:	f7ff ffb0 	bl	800bbfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800bc9c:	9b01      	ldr	r3, [sp, #4]
 800bc9e:	6020      	str	r0, [r4, #0]
 800bca0:	60a3      	str	r3, [r4, #8]
 800bca2:	4632      	mov	r2, r6
 800bca4:	4629      	mov	r1, r5
 800bca6:	6820      	ldr	r0, [r4, #0]
 800bca8:	f7ff ffdf 	bl	800bc6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800bcac:	9b01      	ldr	r3, [sp, #4]
 800bcae:	6822      	ldr	r2, [r4, #0]
 800bcb0:	6063      	str	r3, [r4, #4]
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	54d1      	strb	r1, [r2, r3]
 800bcb6:	b002      	add	sp, #8
 800bcb8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bcbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	f100 0308 	add.w	r3, r0, #8
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	6003      	str	r3, [r0, #0]
 800bcc6:	460d      	mov	r5, r1
 800bcc8:	b911      	cbnz	r1, 800bcd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 800bcca:	4807      	ldr	r0, [pc, #28]	@ (800bce8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 800bccc:	f000 f81b 	bl	800bd06 <_ZSt19__throw_logic_errorPKc>
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	f7f4 faed 	bl	80002b0 <strlen>
 800bcd6:	f04f 0300 	mov.w	r3, #0
 800bcda:	182a      	adds	r2, r5, r0
 800bcdc:	4629      	mov	r1, r5
 800bcde:	4620      	mov	r0, r4
 800bce0:	f7ff ffd0 	bl	800bc84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800bce4:	4620      	mov	r0, r4
 800bce6:	bd38      	pop	{r3, r4, r5, pc}
 800bce8:	0801077c 	.word	0x0801077c

0800bcec <_ZdlPv>:
 800bcec:	f001 b940 	b.w	800cf70 <free>

0800bcf0 <_ZSt15get_new_handlerv>:
 800bcf0:	4b02      	ldr	r3, [pc, #8]	@ (800bcfc <_ZSt15get_new_handlerv+0xc>)
 800bcf2:	6818      	ldr	r0, [r3, #0]
 800bcf4:	f3bf 8f5b 	dmb	ish
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	20000ea0 	.word	0x20000ea0

0800bd00 <_ZSt17__throw_bad_allocv>:
 800bd00:	b508      	push	{r3, lr}
 800bd02:	f001 f925 	bl	800cf50 <abort>

0800bd06 <_ZSt19__throw_logic_errorPKc>:
 800bd06:	b508      	push	{r3, lr}
 800bd08:	f001 f922 	bl	800cf50 <abort>

0800bd0c <_ZSt20__throw_length_errorPKc>:
 800bd0c:	b508      	push	{r3, lr}
 800bd0e:	f001 f91f 	bl	800cf50 <abort>
 800bd12:	0000      	movs	r0, r0
 800bd14:	0000      	movs	r0, r0
	...

0800bd18 <cos>:
 800bd18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd1a:	ec53 2b10 	vmov	r2, r3, d0
 800bd1e:	4826      	ldr	r0, [pc, #152]	@ (800bdb8 <cos+0xa0>)
 800bd20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bd24:	4281      	cmp	r1, r0
 800bd26:	d806      	bhi.n	800bd36 <cos+0x1e>
 800bd28:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800bdb0 <cos+0x98>
 800bd2c:	b005      	add	sp, #20
 800bd2e:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd32:	f000 b8b9 	b.w	800bea8 <__kernel_cos>
 800bd36:	4821      	ldr	r0, [pc, #132]	@ (800bdbc <cos+0xa4>)
 800bd38:	4281      	cmp	r1, r0
 800bd3a:	d908      	bls.n	800bd4e <cos+0x36>
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	4619      	mov	r1, r3
 800bd40:	f7f4 fac2 	bl	80002c8 <__aeabi_dsub>
 800bd44:	ec41 0b10 	vmov	d0, r0, r1
 800bd48:	b005      	add	sp, #20
 800bd4a:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd4e:	4668      	mov	r0, sp
 800bd50:	f000 fa2e 	bl	800c1b0 <__ieee754_rem_pio2>
 800bd54:	f000 0003 	and.w	r0, r0, #3
 800bd58:	2801      	cmp	r0, #1
 800bd5a:	d00b      	beq.n	800bd74 <cos+0x5c>
 800bd5c:	2802      	cmp	r0, #2
 800bd5e:	d015      	beq.n	800bd8c <cos+0x74>
 800bd60:	b9d8      	cbnz	r0, 800bd9a <cos+0x82>
 800bd62:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd66:	ed9d 0b00 	vldr	d0, [sp]
 800bd6a:	f000 f89d 	bl	800bea8 <__kernel_cos>
 800bd6e:	ec51 0b10 	vmov	r0, r1, d0
 800bd72:	e7e7      	b.n	800bd44 <cos+0x2c>
 800bd74:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd78:	ed9d 0b00 	vldr	d0, [sp]
 800bd7c:	f000 f95c 	bl	800c038 <__kernel_sin>
 800bd80:	ec53 2b10 	vmov	r2, r3, d0
 800bd84:	4610      	mov	r0, r2
 800bd86:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bd8a:	e7db      	b.n	800bd44 <cos+0x2c>
 800bd8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd90:	ed9d 0b00 	vldr	d0, [sp]
 800bd94:	f000 f888 	bl	800bea8 <__kernel_cos>
 800bd98:	e7f2      	b.n	800bd80 <cos+0x68>
 800bd9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd9e:	ed9d 0b00 	vldr	d0, [sp]
 800bda2:	2001      	movs	r0, #1
 800bda4:	f000 f948 	bl	800c038 <__kernel_sin>
 800bda8:	e7e1      	b.n	800bd6e <cos+0x56>
 800bdaa:	bf00      	nop
 800bdac:	f3af 8000 	nop.w
	...
 800bdb8:	3fe921fb 	.word	0x3fe921fb
 800bdbc:	7fefffff 	.word	0x7fefffff

0800bdc0 <sin>:
 800bdc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bdc2:	ec53 2b10 	vmov	r2, r3, d0
 800bdc6:	4826      	ldr	r0, [pc, #152]	@ (800be60 <sin+0xa0>)
 800bdc8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bdcc:	4281      	cmp	r1, r0
 800bdce:	d807      	bhi.n	800bde0 <sin+0x20>
 800bdd0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800be58 <sin+0x98>
 800bdd4:	2000      	movs	r0, #0
 800bdd6:	b005      	add	sp, #20
 800bdd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bddc:	f000 b92c 	b.w	800c038 <__kernel_sin>
 800bde0:	4820      	ldr	r0, [pc, #128]	@ (800be64 <sin+0xa4>)
 800bde2:	4281      	cmp	r1, r0
 800bde4:	d908      	bls.n	800bdf8 <sin+0x38>
 800bde6:	4610      	mov	r0, r2
 800bde8:	4619      	mov	r1, r3
 800bdea:	f7f4 fa6d 	bl	80002c8 <__aeabi_dsub>
 800bdee:	ec41 0b10 	vmov	d0, r0, r1
 800bdf2:	b005      	add	sp, #20
 800bdf4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdf8:	4668      	mov	r0, sp
 800bdfa:	f000 f9d9 	bl	800c1b0 <__ieee754_rem_pio2>
 800bdfe:	f000 0003 	and.w	r0, r0, #3
 800be02:	2801      	cmp	r0, #1
 800be04:	d00c      	beq.n	800be20 <sin+0x60>
 800be06:	2802      	cmp	r0, #2
 800be08:	d011      	beq.n	800be2e <sin+0x6e>
 800be0a:	b9e8      	cbnz	r0, 800be48 <sin+0x88>
 800be0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be10:	ed9d 0b00 	vldr	d0, [sp]
 800be14:	2001      	movs	r0, #1
 800be16:	f000 f90f 	bl	800c038 <__kernel_sin>
 800be1a:	ec51 0b10 	vmov	r0, r1, d0
 800be1e:	e7e6      	b.n	800bdee <sin+0x2e>
 800be20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be24:	ed9d 0b00 	vldr	d0, [sp]
 800be28:	f000 f83e 	bl	800bea8 <__kernel_cos>
 800be2c:	e7f5      	b.n	800be1a <sin+0x5a>
 800be2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be32:	ed9d 0b00 	vldr	d0, [sp]
 800be36:	2001      	movs	r0, #1
 800be38:	f000 f8fe 	bl	800c038 <__kernel_sin>
 800be3c:	ec53 2b10 	vmov	r2, r3, d0
 800be40:	4610      	mov	r0, r2
 800be42:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800be46:	e7d2      	b.n	800bdee <sin+0x2e>
 800be48:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be4c:	ed9d 0b00 	vldr	d0, [sp]
 800be50:	f000 f82a 	bl	800bea8 <__kernel_cos>
 800be54:	e7f2      	b.n	800be3c <sin+0x7c>
 800be56:	bf00      	nop
	...
 800be60:	3fe921fb 	.word	0x3fe921fb
 800be64:	7fefffff 	.word	0x7fefffff

0800be68 <fmodf>:
 800be68:	b508      	push	{r3, lr}
 800be6a:	ed2d 8b02 	vpush	{d8}
 800be6e:	eef0 8a40 	vmov.f32	s17, s0
 800be72:	eeb0 8a60 	vmov.f32	s16, s1
 800be76:	f000 fb9f 	bl	800c5b8 <__ieee754_fmodf>
 800be7a:	eef4 8a48 	vcmp.f32	s17, s16
 800be7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be82:	d60c      	bvs.n	800be9e <fmodf+0x36>
 800be84:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bea4 <fmodf+0x3c>
 800be88:	eeb4 8a68 	vcmp.f32	s16, s17
 800be8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be90:	d105      	bne.n	800be9e <fmodf+0x36>
 800be92:	f001 ff25 	bl	800dce0 <__errno>
 800be96:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800be9a:	2321      	movs	r3, #33	@ 0x21
 800be9c:	6003      	str	r3, [r0, #0]
 800be9e:	ecbd 8b02 	vpop	{d8}
 800bea2:	bd08      	pop	{r3, pc}
 800bea4:	00000000 	.word	0x00000000

0800bea8 <__kernel_cos>:
 800bea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	ec57 6b10 	vmov	r6, r7, d0
 800beb0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800beb4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800beb8:	ed8d 1b00 	vstr	d1, [sp]
 800bebc:	d206      	bcs.n	800becc <__kernel_cos+0x24>
 800bebe:	4630      	mov	r0, r6
 800bec0:	4639      	mov	r1, r7
 800bec2:	f7f4 fe69 	bl	8000b98 <__aeabi_d2iz>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	f000 8088 	beq.w	800bfdc <__kernel_cos+0x134>
 800becc:	4632      	mov	r2, r6
 800bece:	463b      	mov	r3, r7
 800bed0:	4630      	mov	r0, r6
 800bed2:	4639      	mov	r1, r7
 800bed4:	f7f4 fbb0 	bl	8000638 <__aeabi_dmul>
 800bed8:	4b51      	ldr	r3, [pc, #324]	@ (800c020 <__kernel_cos+0x178>)
 800beda:	2200      	movs	r2, #0
 800bedc:	4604      	mov	r4, r0
 800bede:	460d      	mov	r5, r1
 800bee0:	f7f4 fbaa 	bl	8000638 <__aeabi_dmul>
 800bee4:	a340      	add	r3, pc, #256	@ (adr r3, 800bfe8 <__kernel_cos+0x140>)
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	4682      	mov	sl, r0
 800beec:	468b      	mov	fp, r1
 800beee:	4620      	mov	r0, r4
 800bef0:	4629      	mov	r1, r5
 800bef2:	f7f4 fba1 	bl	8000638 <__aeabi_dmul>
 800bef6:	a33e      	add	r3, pc, #248	@ (adr r3, 800bff0 <__kernel_cos+0x148>)
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	f7f4 f9e6 	bl	80002cc <__adddf3>
 800bf00:	4622      	mov	r2, r4
 800bf02:	462b      	mov	r3, r5
 800bf04:	f7f4 fb98 	bl	8000638 <__aeabi_dmul>
 800bf08:	a33b      	add	r3, pc, #236	@ (adr r3, 800bff8 <__kernel_cos+0x150>)
 800bf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0e:	f7f4 f9db 	bl	80002c8 <__aeabi_dsub>
 800bf12:	4622      	mov	r2, r4
 800bf14:	462b      	mov	r3, r5
 800bf16:	f7f4 fb8f 	bl	8000638 <__aeabi_dmul>
 800bf1a:	a339      	add	r3, pc, #228	@ (adr r3, 800c000 <__kernel_cos+0x158>)
 800bf1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf20:	f7f4 f9d4 	bl	80002cc <__adddf3>
 800bf24:	4622      	mov	r2, r4
 800bf26:	462b      	mov	r3, r5
 800bf28:	f7f4 fb86 	bl	8000638 <__aeabi_dmul>
 800bf2c:	a336      	add	r3, pc, #216	@ (adr r3, 800c008 <__kernel_cos+0x160>)
 800bf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf32:	f7f4 f9c9 	bl	80002c8 <__aeabi_dsub>
 800bf36:	4622      	mov	r2, r4
 800bf38:	462b      	mov	r3, r5
 800bf3a:	f7f4 fb7d 	bl	8000638 <__aeabi_dmul>
 800bf3e:	a334      	add	r3, pc, #208	@ (adr r3, 800c010 <__kernel_cos+0x168>)
 800bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf44:	f7f4 f9c2 	bl	80002cc <__adddf3>
 800bf48:	4622      	mov	r2, r4
 800bf4a:	462b      	mov	r3, r5
 800bf4c:	f7f4 fb74 	bl	8000638 <__aeabi_dmul>
 800bf50:	4622      	mov	r2, r4
 800bf52:	462b      	mov	r3, r5
 800bf54:	f7f4 fb70 	bl	8000638 <__aeabi_dmul>
 800bf58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	460d      	mov	r5, r1
 800bf60:	4630      	mov	r0, r6
 800bf62:	4639      	mov	r1, r7
 800bf64:	f7f4 fb68 	bl	8000638 <__aeabi_dmul>
 800bf68:	460b      	mov	r3, r1
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	4629      	mov	r1, r5
 800bf6e:	4620      	mov	r0, r4
 800bf70:	f7f4 f9aa 	bl	80002c8 <__aeabi_dsub>
 800bf74:	4b2b      	ldr	r3, [pc, #172]	@ (800c024 <__kernel_cos+0x17c>)
 800bf76:	4598      	cmp	r8, r3
 800bf78:	4606      	mov	r6, r0
 800bf7a:	460f      	mov	r7, r1
 800bf7c:	d810      	bhi.n	800bfa0 <__kernel_cos+0xf8>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	4650      	mov	r0, sl
 800bf84:	4659      	mov	r1, fp
 800bf86:	f7f4 f99f 	bl	80002c8 <__aeabi_dsub>
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	4926      	ldr	r1, [pc, #152]	@ (800c028 <__kernel_cos+0x180>)
 800bf8e:	4602      	mov	r2, r0
 800bf90:	2000      	movs	r0, #0
 800bf92:	f7f4 f999 	bl	80002c8 <__aeabi_dsub>
 800bf96:	ec41 0b10 	vmov	d0, r0, r1
 800bf9a:	b003      	add	sp, #12
 800bf9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa0:	4b22      	ldr	r3, [pc, #136]	@ (800c02c <__kernel_cos+0x184>)
 800bfa2:	4921      	ldr	r1, [pc, #132]	@ (800c028 <__kernel_cos+0x180>)
 800bfa4:	4598      	cmp	r8, r3
 800bfa6:	bf8c      	ite	hi
 800bfa8:	4d21      	ldrhi	r5, [pc, #132]	@ (800c030 <__kernel_cos+0x188>)
 800bfaa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800bfae:	2400      	movs	r4, #0
 800bfb0:	4622      	mov	r2, r4
 800bfb2:	462b      	mov	r3, r5
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	f7f4 f987 	bl	80002c8 <__aeabi_dsub>
 800bfba:	4622      	mov	r2, r4
 800bfbc:	4680      	mov	r8, r0
 800bfbe:	4689      	mov	r9, r1
 800bfc0:	462b      	mov	r3, r5
 800bfc2:	4650      	mov	r0, sl
 800bfc4:	4659      	mov	r1, fp
 800bfc6:	f7f4 f97f 	bl	80002c8 <__aeabi_dsub>
 800bfca:	4632      	mov	r2, r6
 800bfcc:	463b      	mov	r3, r7
 800bfce:	f7f4 f97b 	bl	80002c8 <__aeabi_dsub>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	4640      	mov	r0, r8
 800bfd8:	4649      	mov	r1, r9
 800bfda:	e7da      	b.n	800bf92 <__kernel_cos+0xea>
 800bfdc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c018 <__kernel_cos+0x170>
 800bfe0:	e7db      	b.n	800bf9a <__kernel_cos+0xf2>
 800bfe2:	bf00      	nop
 800bfe4:	f3af 8000 	nop.w
 800bfe8:	be8838d4 	.word	0xbe8838d4
 800bfec:	bda8fae9 	.word	0xbda8fae9
 800bff0:	bdb4b1c4 	.word	0xbdb4b1c4
 800bff4:	3e21ee9e 	.word	0x3e21ee9e
 800bff8:	809c52ad 	.word	0x809c52ad
 800bffc:	3e927e4f 	.word	0x3e927e4f
 800c000:	19cb1590 	.word	0x19cb1590
 800c004:	3efa01a0 	.word	0x3efa01a0
 800c008:	16c15177 	.word	0x16c15177
 800c00c:	3f56c16c 	.word	0x3f56c16c
 800c010:	5555554c 	.word	0x5555554c
 800c014:	3fa55555 	.word	0x3fa55555
 800c018:	00000000 	.word	0x00000000
 800c01c:	3ff00000 	.word	0x3ff00000
 800c020:	3fe00000 	.word	0x3fe00000
 800c024:	3fd33332 	.word	0x3fd33332
 800c028:	3ff00000 	.word	0x3ff00000
 800c02c:	3fe90000 	.word	0x3fe90000
 800c030:	3fd20000 	.word	0x3fd20000
 800c034:	00000000 	.word	0x00000000

0800c038 <__kernel_sin>:
 800c038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03c:	ec55 4b10 	vmov	r4, r5, d0
 800c040:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c044:	b085      	sub	sp, #20
 800c046:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c04a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c04e:	4680      	mov	r8, r0
 800c050:	d205      	bcs.n	800c05e <__kernel_sin+0x26>
 800c052:	4620      	mov	r0, r4
 800c054:	4629      	mov	r1, r5
 800c056:	f7f4 fd9f 	bl	8000b98 <__aeabi_d2iz>
 800c05a:	2800      	cmp	r0, #0
 800c05c:	d052      	beq.n	800c104 <__kernel_sin+0xcc>
 800c05e:	4622      	mov	r2, r4
 800c060:	462b      	mov	r3, r5
 800c062:	4620      	mov	r0, r4
 800c064:	4629      	mov	r1, r5
 800c066:	f7f4 fae7 	bl	8000638 <__aeabi_dmul>
 800c06a:	4682      	mov	sl, r0
 800c06c:	468b      	mov	fp, r1
 800c06e:	4602      	mov	r2, r0
 800c070:	460b      	mov	r3, r1
 800c072:	4620      	mov	r0, r4
 800c074:	4629      	mov	r1, r5
 800c076:	f7f4 fadf 	bl	8000638 <__aeabi_dmul>
 800c07a:	a342      	add	r3, pc, #264	@ (adr r3, 800c184 <__kernel_sin+0x14c>)
 800c07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c080:	e9cd 0100 	strd	r0, r1, [sp]
 800c084:	4650      	mov	r0, sl
 800c086:	4659      	mov	r1, fp
 800c088:	f7f4 fad6 	bl	8000638 <__aeabi_dmul>
 800c08c:	a33f      	add	r3, pc, #252	@ (adr r3, 800c18c <__kernel_sin+0x154>)
 800c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c092:	f7f4 f919 	bl	80002c8 <__aeabi_dsub>
 800c096:	4652      	mov	r2, sl
 800c098:	465b      	mov	r3, fp
 800c09a:	f7f4 facd 	bl	8000638 <__aeabi_dmul>
 800c09e:	a33d      	add	r3, pc, #244	@ (adr r3, 800c194 <__kernel_sin+0x15c>)
 800c0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a4:	f7f4 f912 	bl	80002cc <__adddf3>
 800c0a8:	4652      	mov	r2, sl
 800c0aa:	465b      	mov	r3, fp
 800c0ac:	f7f4 fac4 	bl	8000638 <__aeabi_dmul>
 800c0b0:	a33a      	add	r3, pc, #232	@ (adr r3, 800c19c <__kernel_sin+0x164>)
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	f7f4 f907 	bl	80002c8 <__aeabi_dsub>
 800c0ba:	4652      	mov	r2, sl
 800c0bc:	465b      	mov	r3, fp
 800c0be:	f7f4 fabb 	bl	8000638 <__aeabi_dmul>
 800c0c2:	a338      	add	r3, pc, #224	@ (adr r3, 800c1a4 <__kernel_sin+0x16c>)
 800c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c8:	f7f4 f900 	bl	80002cc <__adddf3>
 800c0cc:	4606      	mov	r6, r0
 800c0ce:	460f      	mov	r7, r1
 800c0d0:	f1b8 0f00 	cmp.w	r8, #0
 800c0d4:	d11b      	bne.n	800c10e <__kernel_sin+0xd6>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	4650      	mov	r0, sl
 800c0dc:	4659      	mov	r1, fp
 800c0de:	f7f4 faab 	bl	8000638 <__aeabi_dmul>
 800c0e2:	a325      	add	r3, pc, #148	@ (adr r3, 800c178 <__kernel_sin+0x140>)
 800c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e8:	f7f4 f8ee 	bl	80002c8 <__aeabi_dsub>
 800c0ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0f0:	f7f4 faa2 	bl	8000638 <__aeabi_dmul>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	4629      	mov	r1, r5
 800c0fc:	f7f4 f8e6 	bl	80002cc <__adddf3>
 800c100:	4604      	mov	r4, r0
 800c102:	460d      	mov	r5, r1
 800c104:	ec45 4b10 	vmov	d0, r4, r5
 800c108:	b005      	add	sp, #20
 800c10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c112:	4b1b      	ldr	r3, [pc, #108]	@ (800c180 <__kernel_sin+0x148>)
 800c114:	2200      	movs	r2, #0
 800c116:	f7f4 fa8f 	bl	8000638 <__aeabi_dmul>
 800c11a:	4632      	mov	r2, r6
 800c11c:	4680      	mov	r8, r0
 800c11e:	4689      	mov	r9, r1
 800c120:	463b      	mov	r3, r7
 800c122:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c126:	f7f4 fa87 	bl	8000638 <__aeabi_dmul>
 800c12a:	4602      	mov	r2, r0
 800c12c:	460b      	mov	r3, r1
 800c12e:	4640      	mov	r0, r8
 800c130:	4649      	mov	r1, r9
 800c132:	f7f4 f8c9 	bl	80002c8 <__aeabi_dsub>
 800c136:	4652      	mov	r2, sl
 800c138:	465b      	mov	r3, fp
 800c13a:	f7f4 fa7d 	bl	8000638 <__aeabi_dmul>
 800c13e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c142:	f7f4 f8c1 	bl	80002c8 <__aeabi_dsub>
 800c146:	a30c      	add	r3, pc, #48	@ (adr r3, 800c178 <__kernel_sin+0x140>)
 800c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14c:	4606      	mov	r6, r0
 800c14e:	460f      	mov	r7, r1
 800c150:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c154:	f7f4 fa70 	bl	8000638 <__aeabi_dmul>
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4630      	mov	r0, r6
 800c15e:	4639      	mov	r1, r7
 800c160:	f7f4 f8b4 	bl	80002cc <__adddf3>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	4620      	mov	r0, r4
 800c16a:	4629      	mov	r1, r5
 800c16c:	f7f4 f8ac 	bl	80002c8 <__aeabi_dsub>
 800c170:	e7c6      	b.n	800c100 <__kernel_sin+0xc8>
 800c172:	bf00      	nop
 800c174:	f3af 8000 	nop.w
 800c178:	55555549 	.word	0x55555549
 800c17c:	3fc55555 	.word	0x3fc55555
 800c180:	3fe00000 	.word	0x3fe00000
 800c184:	5acfd57c 	.word	0x5acfd57c
 800c188:	3de5d93a 	.word	0x3de5d93a
 800c18c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c190:	3e5ae5e6 	.word	0x3e5ae5e6
 800c194:	57b1fe7d 	.word	0x57b1fe7d
 800c198:	3ec71de3 	.word	0x3ec71de3
 800c19c:	19c161d5 	.word	0x19c161d5
 800c1a0:	3f2a01a0 	.word	0x3f2a01a0
 800c1a4:	1110f8a6 	.word	0x1110f8a6
 800c1a8:	3f811111 	.word	0x3f811111
 800c1ac:	00000000 	.word	0x00000000

0800c1b0 <__ieee754_rem_pio2>:
 800c1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b4:	ec57 6b10 	vmov	r6, r7, d0
 800c1b8:	4bc5      	ldr	r3, [pc, #788]	@ (800c4d0 <__ieee754_rem_pio2+0x320>)
 800c1ba:	b08d      	sub	sp, #52	@ 0x34
 800c1bc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c1c0:	4598      	cmp	r8, r3
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	9704      	str	r7, [sp, #16]
 800c1c6:	d807      	bhi.n	800c1d8 <__ieee754_rem_pio2+0x28>
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	ed80 0b00 	vstr	d0, [r0]
 800c1d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c1d4:	2500      	movs	r5, #0
 800c1d6:	e028      	b.n	800c22a <__ieee754_rem_pio2+0x7a>
 800c1d8:	4bbe      	ldr	r3, [pc, #760]	@ (800c4d4 <__ieee754_rem_pio2+0x324>)
 800c1da:	4598      	cmp	r8, r3
 800c1dc:	d878      	bhi.n	800c2d0 <__ieee754_rem_pio2+0x120>
 800c1de:	9b04      	ldr	r3, [sp, #16]
 800c1e0:	4dbd      	ldr	r5, [pc, #756]	@ (800c4d8 <__ieee754_rem_pio2+0x328>)
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800c498 <__ieee754_rem_pio2+0x2e8>)
 800c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ec:	4639      	mov	r1, r7
 800c1ee:	dd38      	ble.n	800c262 <__ieee754_rem_pio2+0xb2>
 800c1f0:	f7f4 f86a 	bl	80002c8 <__aeabi_dsub>
 800c1f4:	45a8      	cmp	r8, r5
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	460f      	mov	r7, r1
 800c1fa:	d01a      	beq.n	800c232 <__ieee754_rem_pio2+0x82>
 800c1fc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800c4a0 <__ieee754_rem_pio2+0x2f0>)
 800c1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c202:	f7f4 f861 	bl	80002c8 <__aeabi_dsub>
 800c206:	4602      	mov	r2, r0
 800c208:	460b      	mov	r3, r1
 800c20a:	4680      	mov	r8, r0
 800c20c:	4689      	mov	r9, r1
 800c20e:	4630      	mov	r0, r6
 800c210:	4639      	mov	r1, r7
 800c212:	f7f4 f859 	bl	80002c8 <__aeabi_dsub>
 800c216:	a3a2      	add	r3, pc, #648	@ (adr r3, 800c4a0 <__ieee754_rem_pio2+0x2f0>)
 800c218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21c:	f7f4 f854 	bl	80002c8 <__aeabi_dsub>
 800c220:	e9c4 8900 	strd	r8, r9, [r4]
 800c224:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c228:	2501      	movs	r5, #1
 800c22a:	4628      	mov	r0, r5
 800c22c:	b00d      	add	sp, #52	@ 0x34
 800c22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c232:	a39d      	add	r3, pc, #628	@ (adr r3, 800c4a8 <__ieee754_rem_pio2+0x2f8>)
 800c234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c238:	f7f4 f846 	bl	80002c8 <__aeabi_dsub>
 800c23c:	a39c      	add	r3, pc, #624	@ (adr r3, 800c4b0 <__ieee754_rem_pio2+0x300>)
 800c23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c242:	4606      	mov	r6, r0
 800c244:	460f      	mov	r7, r1
 800c246:	f7f4 f83f 	bl	80002c8 <__aeabi_dsub>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	4680      	mov	r8, r0
 800c250:	4689      	mov	r9, r1
 800c252:	4630      	mov	r0, r6
 800c254:	4639      	mov	r1, r7
 800c256:	f7f4 f837 	bl	80002c8 <__aeabi_dsub>
 800c25a:	a395      	add	r3, pc, #596	@ (adr r3, 800c4b0 <__ieee754_rem_pio2+0x300>)
 800c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c260:	e7dc      	b.n	800c21c <__ieee754_rem_pio2+0x6c>
 800c262:	f7f4 f833 	bl	80002cc <__adddf3>
 800c266:	45a8      	cmp	r8, r5
 800c268:	4606      	mov	r6, r0
 800c26a:	460f      	mov	r7, r1
 800c26c:	d018      	beq.n	800c2a0 <__ieee754_rem_pio2+0xf0>
 800c26e:	a38c      	add	r3, pc, #560	@ (adr r3, 800c4a0 <__ieee754_rem_pio2+0x2f0>)
 800c270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c274:	f7f4 f82a 	bl	80002cc <__adddf3>
 800c278:	4602      	mov	r2, r0
 800c27a:	460b      	mov	r3, r1
 800c27c:	4680      	mov	r8, r0
 800c27e:	4689      	mov	r9, r1
 800c280:	4630      	mov	r0, r6
 800c282:	4639      	mov	r1, r7
 800c284:	f7f4 f820 	bl	80002c8 <__aeabi_dsub>
 800c288:	a385      	add	r3, pc, #532	@ (adr r3, 800c4a0 <__ieee754_rem_pio2+0x2f0>)
 800c28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28e:	f7f4 f81d 	bl	80002cc <__adddf3>
 800c292:	f04f 35ff 	mov.w	r5, #4294967295
 800c296:	e9c4 8900 	strd	r8, r9, [r4]
 800c29a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c29e:	e7c4      	b.n	800c22a <__ieee754_rem_pio2+0x7a>
 800c2a0:	a381      	add	r3, pc, #516	@ (adr r3, 800c4a8 <__ieee754_rem_pio2+0x2f8>)
 800c2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a6:	f7f4 f811 	bl	80002cc <__adddf3>
 800c2aa:	a381      	add	r3, pc, #516	@ (adr r3, 800c4b0 <__ieee754_rem_pio2+0x300>)
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	4606      	mov	r6, r0
 800c2b2:	460f      	mov	r7, r1
 800c2b4:	f7f4 f80a 	bl	80002cc <__adddf3>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	4680      	mov	r8, r0
 800c2be:	4689      	mov	r9, r1
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	4639      	mov	r1, r7
 800c2c4:	f7f4 f800 	bl	80002c8 <__aeabi_dsub>
 800c2c8:	a379      	add	r3, pc, #484	@ (adr r3, 800c4b0 <__ieee754_rem_pio2+0x300>)
 800c2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ce:	e7de      	b.n	800c28e <__ieee754_rem_pio2+0xde>
 800c2d0:	4b82      	ldr	r3, [pc, #520]	@ (800c4dc <__ieee754_rem_pio2+0x32c>)
 800c2d2:	4598      	cmp	r8, r3
 800c2d4:	f200 80d1 	bhi.w	800c47a <__ieee754_rem_pio2+0x2ca>
 800c2d8:	f000 f966 	bl	800c5a8 <fabs>
 800c2dc:	ec57 6b10 	vmov	r6, r7, d0
 800c2e0:	a375      	add	r3, pc, #468	@ (adr r3, 800c4b8 <__ieee754_rem_pio2+0x308>)
 800c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	4639      	mov	r1, r7
 800c2ea:	f7f4 f9a5 	bl	8000638 <__aeabi_dmul>
 800c2ee:	4b7c      	ldr	r3, [pc, #496]	@ (800c4e0 <__ieee754_rem_pio2+0x330>)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f7f3 ffeb 	bl	80002cc <__adddf3>
 800c2f6:	f7f4 fc4f 	bl	8000b98 <__aeabi_d2iz>
 800c2fa:	4605      	mov	r5, r0
 800c2fc:	f7f4 f932 	bl	8000564 <__aeabi_i2d>
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c308:	a363      	add	r3, pc, #396	@ (adr r3, 800c498 <__ieee754_rem_pio2+0x2e8>)
 800c30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30e:	f7f4 f993 	bl	8000638 <__aeabi_dmul>
 800c312:	4602      	mov	r2, r0
 800c314:	460b      	mov	r3, r1
 800c316:	4630      	mov	r0, r6
 800c318:	4639      	mov	r1, r7
 800c31a:	f7f3 ffd5 	bl	80002c8 <__aeabi_dsub>
 800c31e:	a360      	add	r3, pc, #384	@ (adr r3, 800c4a0 <__ieee754_rem_pio2+0x2f0>)
 800c320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c324:	4682      	mov	sl, r0
 800c326:	468b      	mov	fp, r1
 800c328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c32c:	f7f4 f984 	bl	8000638 <__aeabi_dmul>
 800c330:	2d1f      	cmp	r5, #31
 800c332:	4606      	mov	r6, r0
 800c334:	460f      	mov	r7, r1
 800c336:	dc0c      	bgt.n	800c352 <__ieee754_rem_pio2+0x1a2>
 800c338:	4b6a      	ldr	r3, [pc, #424]	@ (800c4e4 <__ieee754_rem_pio2+0x334>)
 800c33a:	1e6a      	subs	r2, r5, #1
 800c33c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c340:	4543      	cmp	r3, r8
 800c342:	d006      	beq.n	800c352 <__ieee754_rem_pio2+0x1a2>
 800c344:	4632      	mov	r2, r6
 800c346:	463b      	mov	r3, r7
 800c348:	4650      	mov	r0, sl
 800c34a:	4659      	mov	r1, fp
 800c34c:	f7f3 ffbc 	bl	80002c8 <__aeabi_dsub>
 800c350:	e00e      	b.n	800c370 <__ieee754_rem_pio2+0x1c0>
 800c352:	463b      	mov	r3, r7
 800c354:	4632      	mov	r2, r6
 800c356:	4650      	mov	r0, sl
 800c358:	4659      	mov	r1, fp
 800c35a:	f7f3 ffb5 	bl	80002c8 <__aeabi_dsub>
 800c35e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c362:	9305      	str	r3, [sp, #20]
 800c364:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c368:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c36c:	2b10      	cmp	r3, #16
 800c36e:	dc02      	bgt.n	800c376 <__ieee754_rem_pio2+0x1c6>
 800c370:	e9c4 0100 	strd	r0, r1, [r4]
 800c374:	e039      	b.n	800c3ea <__ieee754_rem_pio2+0x23a>
 800c376:	a34c      	add	r3, pc, #304	@ (adr r3, 800c4a8 <__ieee754_rem_pio2+0x2f8>)
 800c378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c380:	f7f4 f95a 	bl	8000638 <__aeabi_dmul>
 800c384:	4606      	mov	r6, r0
 800c386:	460f      	mov	r7, r1
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	4650      	mov	r0, sl
 800c38e:	4659      	mov	r1, fp
 800c390:	f7f3 ff9a 	bl	80002c8 <__aeabi_dsub>
 800c394:	4602      	mov	r2, r0
 800c396:	460b      	mov	r3, r1
 800c398:	4680      	mov	r8, r0
 800c39a:	4689      	mov	r9, r1
 800c39c:	4650      	mov	r0, sl
 800c39e:	4659      	mov	r1, fp
 800c3a0:	f7f3 ff92 	bl	80002c8 <__aeabi_dsub>
 800c3a4:	4632      	mov	r2, r6
 800c3a6:	463b      	mov	r3, r7
 800c3a8:	f7f3 ff8e 	bl	80002c8 <__aeabi_dsub>
 800c3ac:	a340      	add	r3, pc, #256	@ (adr r3, 800c4b0 <__ieee754_rem_pio2+0x300>)
 800c3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	460f      	mov	r7, r1
 800c3b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3ba:	f7f4 f93d 	bl	8000638 <__aeabi_dmul>
 800c3be:	4632      	mov	r2, r6
 800c3c0:	463b      	mov	r3, r7
 800c3c2:	f7f3 ff81 	bl	80002c8 <__aeabi_dsub>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	4606      	mov	r6, r0
 800c3cc:	460f      	mov	r7, r1
 800c3ce:	4640      	mov	r0, r8
 800c3d0:	4649      	mov	r1, r9
 800c3d2:	f7f3 ff79 	bl	80002c8 <__aeabi_dsub>
 800c3d6:	9a05      	ldr	r2, [sp, #20]
 800c3d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c3dc:	1ad3      	subs	r3, r2, r3
 800c3de:	2b31      	cmp	r3, #49	@ 0x31
 800c3e0:	dc20      	bgt.n	800c424 <__ieee754_rem_pio2+0x274>
 800c3e2:	e9c4 0100 	strd	r0, r1, [r4]
 800c3e6:	46c2      	mov	sl, r8
 800c3e8:	46cb      	mov	fp, r9
 800c3ea:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c3ee:	4650      	mov	r0, sl
 800c3f0:	4642      	mov	r2, r8
 800c3f2:	464b      	mov	r3, r9
 800c3f4:	4659      	mov	r1, fp
 800c3f6:	f7f3 ff67 	bl	80002c8 <__aeabi_dsub>
 800c3fa:	463b      	mov	r3, r7
 800c3fc:	4632      	mov	r2, r6
 800c3fe:	f7f3 ff63 	bl	80002c8 <__aeabi_dsub>
 800c402:	9b04      	ldr	r3, [sp, #16]
 800c404:	2b00      	cmp	r3, #0
 800c406:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c40a:	f6bf af0e 	bge.w	800c22a <__ieee754_rem_pio2+0x7a>
 800c40e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800c412:	6063      	str	r3, [r4, #4]
 800c414:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c418:	f8c4 8000 	str.w	r8, [r4]
 800c41c:	60a0      	str	r0, [r4, #8]
 800c41e:	60e3      	str	r3, [r4, #12]
 800c420:	426d      	negs	r5, r5
 800c422:	e702      	b.n	800c22a <__ieee754_rem_pio2+0x7a>
 800c424:	a326      	add	r3, pc, #152	@ (adr r3, 800c4c0 <__ieee754_rem_pio2+0x310>)
 800c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c42e:	f7f4 f903 	bl	8000638 <__aeabi_dmul>
 800c432:	4606      	mov	r6, r0
 800c434:	460f      	mov	r7, r1
 800c436:	4602      	mov	r2, r0
 800c438:	460b      	mov	r3, r1
 800c43a:	4640      	mov	r0, r8
 800c43c:	4649      	mov	r1, r9
 800c43e:	f7f3 ff43 	bl	80002c8 <__aeabi_dsub>
 800c442:	4602      	mov	r2, r0
 800c444:	460b      	mov	r3, r1
 800c446:	4682      	mov	sl, r0
 800c448:	468b      	mov	fp, r1
 800c44a:	4640      	mov	r0, r8
 800c44c:	4649      	mov	r1, r9
 800c44e:	f7f3 ff3b 	bl	80002c8 <__aeabi_dsub>
 800c452:	4632      	mov	r2, r6
 800c454:	463b      	mov	r3, r7
 800c456:	f7f3 ff37 	bl	80002c8 <__aeabi_dsub>
 800c45a:	a31b      	add	r3, pc, #108	@ (adr r3, 800c4c8 <__ieee754_rem_pio2+0x318>)
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	4606      	mov	r6, r0
 800c462:	460f      	mov	r7, r1
 800c464:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c468:	f7f4 f8e6 	bl	8000638 <__aeabi_dmul>
 800c46c:	4632      	mov	r2, r6
 800c46e:	463b      	mov	r3, r7
 800c470:	f7f3 ff2a 	bl	80002c8 <__aeabi_dsub>
 800c474:	4606      	mov	r6, r0
 800c476:	460f      	mov	r7, r1
 800c478:	e764      	b.n	800c344 <__ieee754_rem_pio2+0x194>
 800c47a:	4b1b      	ldr	r3, [pc, #108]	@ (800c4e8 <__ieee754_rem_pio2+0x338>)
 800c47c:	4598      	cmp	r8, r3
 800c47e:	d935      	bls.n	800c4ec <__ieee754_rem_pio2+0x33c>
 800c480:	4632      	mov	r2, r6
 800c482:	463b      	mov	r3, r7
 800c484:	4630      	mov	r0, r6
 800c486:	4639      	mov	r1, r7
 800c488:	f7f3 ff1e 	bl	80002c8 <__aeabi_dsub>
 800c48c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c490:	e9c4 0100 	strd	r0, r1, [r4]
 800c494:	e69e      	b.n	800c1d4 <__ieee754_rem_pio2+0x24>
 800c496:	bf00      	nop
 800c498:	54400000 	.word	0x54400000
 800c49c:	3ff921fb 	.word	0x3ff921fb
 800c4a0:	1a626331 	.word	0x1a626331
 800c4a4:	3dd0b461 	.word	0x3dd0b461
 800c4a8:	1a600000 	.word	0x1a600000
 800c4ac:	3dd0b461 	.word	0x3dd0b461
 800c4b0:	2e037073 	.word	0x2e037073
 800c4b4:	3ba3198a 	.word	0x3ba3198a
 800c4b8:	6dc9c883 	.word	0x6dc9c883
 800c4bc:	3fe45f30 	.word	0x3fe45f30
 800c4c0:	2e000000 	.word	0x2e000000
 800c4c4:	3ba3198a 	.word	0x3ba3198a
 800c4c8:	252049c1 	.word	0x252049c1
 800c4cc:	397b839a 	.word	0x397b839a
 800c4d0:	3fe921fb 	.word	0x3fe921fb
 800c4d4:	4002d97b 	.word	0x4002d97b
 800c4d8:	3ff921fb 	.word	0x3ff921fb
 800c4dc:	413921fb 	.word	0x413921fb
 800c4e0:	3fe00000 	.word	0x3fe00000
 800c4e4:	08010920 	.word	0x08010920
 800c4e8:	7fefffff 	.word	0x7fefffff
 800c4ec:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c4f0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800c4f4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	460f      	mov	r7, r1
 800c4fc:	f7f4 fb4c 	bl	8000b98 <__aeabi_d2iz>
 800c500:	f7f4 f830 	bl	8000564 <__aeabi_i2d>
 800c504:	4602      	mov	r2, r0
 800c506:	460b      	mov	r3, r1
 800c508:	4630      	mov	r0, r6
 800c50a:	4639      	mov	r1, r7
 800c50c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c510:	f7f3 feda 	bl	80002c8 <__aeabi_dsub>
 800c514:	4b22      	ldr	r3, [pc, #136]	@ (800c5a0 <__ieee754_rem_pio2+0x3f0>)
 800c516:	2200      	movs	r2, #0
 800c518:	f7f4 f88e 	bl	8000638 <__aeabi_dmul>
 800c51c:	460f      	mov	r7, r1
 800c51e:	4606      	mov	r6, r0
 800c520:	f7f4 fb3a 	bl	8000b98 <__aeabi_d2iz>
 800c524:	f7f4 f81e 	bl	8000564 <__aeabi_i2d>
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	4630      	mov	r0, r6
 800c52e:	4639      	mov	r1, r7
 800c530:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c534:	f7f3 fec8 	bl	80002c8 <__aeabi_dsub>
 800c538:	4b19      	ldr	r3, [pc, #100]	@ (800c5a0 <__ieee754_rem_pio2+0x3f0>)
 800c53a:	2200      	movs	r2, #0
 800c53c:	f7f4 f87c 	bl	8000638 <__aeabi_dmul>
 800c540:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c544:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800c548:	f04f 0803 	mov.w	r8, #3
 800c54c:	2600      	movs	r6, #0
 800c54e:	2700      	movs	r7, #0
 800c550:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c554:	4632      	mov	r2, r6
 800c556:	463b      	mov	r3, r7
 800c558:	46c2      	mov	sl, r8
 800c55a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c55e:	f7f4 fad3 	bl	8000b08 <__aeabi_dcmpeq>
 800c562:	2800      	cmp	r0, #0
 800c564:	d1f4      	bne.n	800c550 <__ieee754_rem_pio2+0x3a0>
 800c566:	4b0f      	ldr	r3, [pc, #60]	@ (800c5a4 <__ieee754_rem_pio2+0x3f4>)
 800c568:	9301      	str	r3, [sp, #4]
 800c56a:	2302      	movs	r3, #2
 800c56c:	9300      	str	r3, [sp, #0]
 800c56e:	462a      	mov	r2, r5
 800c570:	4653      	mov	r3, sl
 800c572:	4621      	mov	r1, r4
 800c574:	a806      	add	r0, sp, #24
 800c576:	f000 f8a3 	bl	800c6c0 <__kernel_rem_pio2>
 800c57a:	9b04      	ldr	r3, [sp, #16]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	4605      	mov	r5, r0
 800c580:	f6bf ae53 	bge.w	800c22a <__ieee754_rem_pio2+0x7a>
 800c584:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c588:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c58c:	e9c4 2300 	strd	r2, r3, [r4]
 800c590:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c594:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c598:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c59c:	e740      	b.n	800c420 <__ieee754_rem_pio2+0x270>
 800c59e:	bf00      	nop
 800c5a0:	41700000 	.word	0x41700000
 800c5a4:	080109a0 	.word	0x080109a0

0800c5a8 <fabs>:
 800c5a8:	ec51 0b10 	vmov	r0, r1, d0
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c5b2:	ec43 2b10 	vmov	d0, r2, r3
 800c5b6:	4770      	bx	lr

0800c5b8 <__ieee754_fmodf>:
 800c5b8:	b570      	push	{r4, r5, r6, lr}
 800c5ba:	ee10 6a90 	vmov	r6, s1
 800c5be:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c5c2:	1e5a      	subs	r2, r3, #1
 800c5c4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c5c8:	d206      	bcs.n	800c5d8 <__ieee754_fmodf+0x20>
 800c5ca:	ee10 4a10 	vmov	r4, s0
 800c5ce:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800c5d2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c5d6:	d304      	bcc.n	800c5e2 <__ieee754_fmodf+0x2a>
 800c5d8:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c5dc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800c5e0:	bd70      	pop	{r4, r5, r6, pc}
 800c5e2:	4299      	cmp	r1, r3
 800c5e4:	dbfc      	blt.n	800c5e0 <__ieee754_fmodf+0x28>
 800c5e6:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800c5ea:	d105      	bne.n	800c5f8 <__ieee754_fmodf+0x40>
 800c5ec:	4b32      	ldr	r3, [pc, #200]	@ (800c6b8 <__ieee754_fmodf+0x100>)
 800c5ee:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800c5f2:	ed93 0a00 	vldr	s0, [r3]
 800c5f6:	e7f3      	b.n	800c5e0 <__ieee754_fmodf+0x28>
 800c5f8:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800c5fc:	d146      	bne.n	800c68c <__ieee754_fmodf+0xd4>
 800c5fe:	020a      	lsls	r2, r1, #8
 800c600:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800c604:	2a00      	cmp	r2, #0
 800c606:	dc3e      	bgt.n	800c686 <__ieee754_fmodf+0xce>
 800c608:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800c60c:	bf01      	itttt	eq
 800c60e:	021a      	lsleq	r2, r3, #8
 800c610:	fab2 f282 	clzeq	r2, r2
 800c614:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800c618:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800c61c:	bf16      	itet	ne
 800c61e:	15da      	asrne	r2, r3, #23
 800c620:	3282      	addeq	r2, #130	@ 0x82
 800c622:	3a7f      	subne	r2, #127	@ 0x7f
 800c624:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800c628:	bfbb      	ittet	lt
 800c62a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800c62e:	1a24      	sublt	r4, r4, r0
 800c630:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800c634:	40a1      	lsllt	r1, r4
 800c636:	bfa8      	it	ge
 800c638:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800c63c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c640:	bfb5      	itete	lt
 800c642:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800c646:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800c64a:	1aa4      	sublt	r4, r4, r2
 800c64c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800c650:	bfb8      	it	lt
 800c652:	fa03 f404 	lsllt.w	r4, r3, r4
 800c656:	1a80      	subs	r0, r0, r2
 800c658:	1b0b      	subs	r3, r1, r4
 800c65a:	b9d0      	cbnz	r0, 800c692 <__ieee754_fmodf+0xda>
 800c65c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800c660:	bf28      	it	cs
 800c662:	460b      	movcs	r3, r1
 800c664:	2b00      	cmp	r3, #0
 800c666:	d0c1      	beq.n	800c5ec <__ieee754_fmodf+0x34>
 800c668:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c66c:	db19      	blt.n	800c6a2 <__ieee754_fmodf+0xea>
 800c66e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c672:	db19      	blt.n	800c6a8 <__ieee754_fmodf+0xf0>
 800c674:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800c678:	327f      	adds	r2, #127	@ 0x7f
 800c67a:	432b      	orrs	r3, r5
 800c67c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c680:	ee00 3a10 	vmov	s0, r3
 800c684:	e7ac      	b.n	800c5e0 <__ieee754_fmodf+0x28>
 800c686:	3801      	subs	r0, #1
 800c688:	0052      	lsls	r2, r2, #1
 800c68a:	e7bb      	b.n	800c604 <__ieee754_fmodf+0x4c>
 800c68c:	15c8      	asrs	r0, r1, #23
 800c68e:	387f      	subs	r0, #127	@ 0x7f
 800c690:	e7ba      	b.n	800c608 <__ieee754_fmodf+0x50>
 800c692:	2b00      	cmp	r3, #0
 800c694:	da02      	bge.n	800c69c <__ieee754_fmodf+0xe4>
 800c696:	0049      	lsls	r1, r1, #1
 800c698:	3801      	subs	r0, #1
 800c69a:	e7dd      	b.n	800c658 <__ieee754_fmodf+0xa0>
 800c69c:	d0a6      	beq.n	800c5ec <__ieee754_fmodf+0x34>
 800c69e:	0059      	lsls	r1, r3, #1
 800c6a0:	e7fa      	b.n	800c698 <__ieee754_fmodf+0xe0>
 800c6a2:	005b      	lsls	r3, r3, #1
 800c6a4:	3a01      	subs	r2, #1
 800c6a6:	e7df      	b.n	800c668 <__ieee754_fmodf+0xb0>
 800c6a8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800c6ac:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800c6b0:	3282      	adds	r2, #130	@ 0x82
 800c6b2:	4113      	asrs	r3, r2
 800c6b4:	432b      	orrs	r3, r5
 800c6b6:	e7e3      	b.n	800c680 <__ieee754_fmodf+0xc8>
 800c6b8:	08010aa8 	.word	0x08010aa8
 800c6bc:	00000000 	.word	0x00000000

0800c6c0 <__kernel_rem_pio2>:
 800c6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c4:	ed2d 8b02 	vpush	{d8}
 800c6c8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c6cc:	f112 0f14 	cmn.w	r2, #20
 800c6d0:	9306      	str	r3, [sp, #24]
 800c6d2:	9104      	str	r1, [sp, #16]
 800c6d4:	4bc2      	ldr	r3, [pc, #776]	@ (800c9e0 <__kernel_rem_pio2+0x320>)
 800c6d6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800c6d8:	9008      	str	r0, [sp, #32]
 800c6da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	9b06      	ldr	r3, [sp, #24]
 800c6e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c6e6:	bfa8      	it	ge
 800c6e8:	1ed4      	subge	r4, r2, #3
 800c6ea:	9305      	str	r3, [sp, #20]
 800c6ec:	bfb2      	itee	lt
 800c6ee:	2400      	movlt	r4, #0
 800c6f0:	2318      	movge	r3, #24
 800c6f2:	fb94 f4f3 	sdivge	r4, r4, r3
 800c6f6:	f06f 0317 	mvn.w	r3, #23
 800c6fa:	fb04 3303 	mla	r3, r4, r3, r3
 800c6fe:	eb03 0b02 	add.w	fp, r3, r2
 800c702:	9b00      	ldr	r3, [sp, #0]
 800c704:	9a05      	ldr	r2, [sp, #20]
 800c706:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800c9d0 <__kernel_rem_pio2+0x310>
 800c70a:	eb03 0802 	add.w	r8, r3, r2
 800c70e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c710:	1aa7      	subs	r7, r4, r2
 800c712:	ae20      	add	r6, sp, #128	@ 0x80
 800c714:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c718:	2500      	movs	r5, #0
 800c71a:	4545      	cmp	r5, r8
 800c71c:	dd12      	ble.n	800c744 <__kernel_rem_pio2+0x84>
 800c71e:	9b06      	ldr	r3, [sp, #24]
 800c720:	aa20      	add	r2, sp, #128	@ 0x80
 800c722:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c726:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800c72a:	2700      	movs	r7, #0
 800c72c:	9b00      	ldr	r3, [sp, #0]
 800c72e:	429f      	cmp	r7, r3
 800c730:	dc2e      	bgt.n	800c790 <__kernel_rem_pio2+0xd0>
 800c732:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800c9d0 <__kernel_rem_pio2+0x310>
 800c736:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c73a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c73e:	46a8      	mov	r8, r5
 800c740:	2600      	movs	r6, #0
 800c742:	e01b      	b.n	800c77c <__kernel_rem_pio2+0xbc>
 800c744:	42ef      	cmn	r7, r5
 800c746:	d407      	bmi.n	800c758 <__kernel_rem_pio2+0x98>
 800c748:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c74c:	f7f3 ff0a 	bl	8000564 <__aeabi_i2d>
 800c750:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c754:	3501      	adds	r5, #1
 800c756:	e7e0      	b.n	800c71a <__kernel_rem_pio2+0x5a>
 800c758:	ec51 0b18 	vmov	r0, r1, d8
 800c75c:	e7f8      	b.n	800c750 <__kernel_rem_pio2+0x90>
 800c75e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800c762:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c766:	f7f3 ff67 	bl	8000638 <__aeabi_dmul>
 800c76a:	4602      	mov	r2, r0
 800c76c:	460b      	mov	r3, r1
 800c76e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c772:	f7f3 fdab 	bl	80002cc <__adddf3>
 800c776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c77a:	3601      	adds	r6, #1
 800c77c:	9b05      	ldr	r3, [sp, #20]
 800c77e:	429e      	cmp	r6, r3
 800c780:	dded      	ble.n	800c75e <__kernel_rem_pio2+0x9e>
 800c782:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c786:	3701      	adds	r7, #1
 800c788:	ecaa 7b02 	vstmia	sl!, {d7}
 800c78c:	3508      	adds	r5, #8
 800c78e:	e7cd      	b.n	800c72c <__kernel_rem_pio2+0x6c>
 800c790:	9b00      	ldr	r3, [sp, #0]
 800c792:	f8dd 8000 	ldr.w	r8, [sp]
 800c796:	aa0c      	add	r2, sp, #48	@ 0x30
 800c798:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c79c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c79e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c7a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c7a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7a6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800c7aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7ac:	ab98      	add	r3, sp, #608	@ 0x260
 800c7ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c7b2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800c7b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c7ba:	ac0c      	add	r4, sp, #48	@ 0x30
 800c7bc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c7be:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800c7c2:	46a1      	mov	r9, r4
 800c7c4:	46c2      	mov	sl, r8
 800c7c6:	f1ba 0f00 	cmp.w	sl, #0
 800c7ca:	dc77      	bgt.n	800c8bc <__kernel_rem_pio2+0x1fc>
 800c7cc:	4658      	mov	r0, fp
 800c7ce:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c7d2:	f000 fac5 	bl	800cd60 <scalbn>
 800c7d6:	ec57 6b10 	vmov	r6, r7, d0
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	4639      	mov	r1, r7
 800c7e4:	f7f3 ff28 	bl	8000638 <__aeabi_dmul>
 800c7e8:	ec41 0b10 	vmov	d0, r0, r1
 800c7ec:	f000 fb34 	bl	800ce58 <floor>
 800c7f0:	4b7c      	ldr	r3, [pc, #496]	@ (800c9e4 <__kernel_rem_pio2+0x324>)
 800c7f2:	ec51 0b10 	vmov	r0, r1, d0
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f7f3 ff1e 	bl	8000638 <__aeabi_dmul>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	460b      	mov	r3, r1
 800c800:	4630      	mov	r0, r6
 800c802:	4639      	mov	r1, r7
 800c804:	f7f3 fd60 	bl	80002c8 <__aeabi_dsub>
 800c808:	460f      	mov	r7, r1
 800c80a:	4606      	mov	r6, r0
 800c80c:	f7f4 f9c4 	bl	8000b98 <__aeabi_d2iz>
 800c810:	9002      	str	r0, [sp, #8]
 800c812:	f7f3 fea7 	bl	8000564 <__aeabi_i2d>
 800c816:	4602      	mov	r2, r0
 800c818:	460b      	mov	r3, r1
 800c81a:	4630      	mov	r0, r6
 800c81c:	4639      	mov	r1, r7
 800c81e:	f7f3 fd53 	bl	80002c8 <__aeabi_dsub>
 800c822:	f1bb 0f00 	cmp.w	fp, #0
 800c826:	4606      	mov	r6, r0
 800c828:	460f      	mov	r7, r1
 800c82a:	dd6c      	ble.n	800c906 <__kernel_rem_pio2+0x246>
 800c82c:	f108 31ff 	add.w	r1, r8, #4294967295
 800c830:	ab0c      	add	r3, sp, #48	@ 0x30
 800c832:	9d02      	ldr	r5, [sp, #8]
 800c834:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c838:	f1cb 0018 	rsb	r0, fp, #24
 800c83c:	fa43 f200 	asr.w	r2, r3, r0
 800c840:	4415      	add	r5, r2
 800c842:	4082      	lsls	r2, r0
 800c844:	1a9b      	subs	r3, r3, r2
 800c846:	aa0c      	add	r2, sp, #48	@ 0x30
 800c848:	9502      	str	r5, [sp, #8]
 800c84a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c84e:	f1cb 0217 	rsb	r2, fp, #23
 800c852:	fa43 f902 	asr.w	r9, r3, r2
 800c856:	f1b9 0f00 	cmp.w	r9, #0
 800c85a:	dd64      	ble.n	800c926 <__kernel_rem_pio2+0x266>
 800c85c:	9b02      	ldr	r3, [sp, #8]
 800c85e:	2200      	movs	r2, #0
 800c860:	3301      	adds	r3, #1
 800c862:	9302      	str	r3, [sp, #8]
 800c864:	4615      	mov	r5, r2
 800c866:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c86a:	4590      	cmp	r8, r2
 800c86c:	f300 80a1 	bgt.w	800c9b2 <__kernel_rem_pio2+0x2f2>
 800c870:	f1bb 0f00 	cmp.w	fp, #0
 800c874:	dd07      	ble.n	800c886 <__kernel_rem_pio2+0x1c6>
 800c876:	f1bb 0f01 	cmp.w	fp, #1
 800c87a:	f000 80c1 	beq.w	800ca00 <__kernel_rem_pio2+0x340>
 800c87e:	f1bb 0f02 	cmp.w	fp, #2
 800c882:	f000 80c8 	beq.w	800ca16 <__kernel_rem_pio2+0x356>
 800c886:	f1b9 0f02 	cmp.w	r9, #2
 800c88a:	d14c      	bne.n	800c926 <__kernel_rem_pio2+0x266>
 800c88c:	4632      	mov	r2, r6
 800c88e:	463b      	mov	r3, r7
 800c890:	4955      	ldr	r1, [pc, #340]	@ (800c9e8 <__kernel_rem_pio2+0x328>)
 800c892:	2000      	movs	r0, #0
 800c894:	f7f3 fd18 	bl	80002c8 <__aeabi_dsub>
 800c898:	4606      	mov	r6, r0
 800c89a:	460f      	mov	r7, r1
 800c89c:	2d00      	cmp	r5, #0
 800c89e:	d042      	beq.n	800c926 <__kernel_rem_pio2+0x266>
 800c8a0:	4658      	mov	r0, fp
 800c8a2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800c9d8 <__kernel_rem_pio2+0x318>
 800c8a6:	f000 fa5b 	bl	800cd60 <scalbn>
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	4639      	mov	r1, r7
 800c8ae:	ec53 2b10 	vmov	r2, r3, d0
 800c8b2:	f7f3 fd09 	bl	80002c8 <__aeabi_dsub>
 800c8b6:	4606      	mov	r6, r0
 800c8b8:	460f      	mov	r7, r1
 800c8ba:	e034      	b.n	800c926 <__kernel_rem_pio2+0x266>
 800c8bc:	4b4b      	ldr	r3, [pc, #300]	@ (800c9ec <__kernel_rem_pio2+0x32c>)
 800c8be:	2200      	movs	r2, #0
 800c8c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8c4:	f7f3 feb8 	bl	8000638 <__aeabi_dmul>
 800c8c8:	f7f4 f966 	bl	8000b98 <__aeabi_d2iz>
 800c8cc:	f7f3 fe4a 	bl	8000564 <__aeabi_i2d>
 800c8d0:	4b47      	ldr	r3, [pc, #284]	@ (800c9f0 <__kernel_rem_pio2+0x330>)
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	4606      	mov	r6, r0
 800c8d6:	460f      	mov	r7, r1
 800c8d8:	f7f3 feae 	bl	8000638 <__aeabi_dmul>
 800c8dc:	4602      	mov	r2, r0
 800c8de:	460b      	mov	r3, r1
 800c8e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8e4:	f7f3 fcf0 	bl	80002c8 <__aeabi_dsub>
 800c8e8:	f7f4 f956 	bl	8000b98 <__aeabi_d2iz>
 800c8ec:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c8f0:	f849 0b04 	str.w	r0, [r9], #4
 800c8f4:	4639      	mov	r1, r7
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	f7f3 fce8 	bl	80002cc <__adddf3>
 800c8fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c904:	e75f      	b.n	800c7c6 <__kernel_rem_pio2+0x106>
 800c906:	d107      	bne.n	800c918 <__kernel_rem_pio2+0x258>
 800c908:	f108 33ff 	add.w	r3, r8, #4294967295
 800c90c:	aa0c      	add	r2, sp, #48	@ 0x30
 800c90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c912:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800c916:	e79e      	b.n	800c856 <__kernel_rem_pio2+0x196>
 800c918:	4b36      	ldr	r3, [pc, #216]	@ (800c9f4 <__kernel_rem_pio2+0x334>)
 800c91a:	2200      	movs	r2, #0
 800c91c:	f7f4 f912 	bl	8000b44 <__aeabi_dcmpge>
 800c920:	2800      	cmp	r0, #0
 800c922:	d143      	bne.n	800c9ac <__kernel_rem_pio2+0x2ec>
 800c924:	4681      	mov	r9, r0
 800c926:	2200      	movs	r2, #0
 800c928:	2300      	movs	r3, #0
 800c92a:	4630      	mov	r0, r6
 800c92c:	4639      	mov	r1, r7
 800c92e:	f7f4 f8eb 	bl	8000b08 <__aeabi_dcmpeq>
 800c932:	2800      	cmp	r0, #0
 800c934:	f000 80c1 	beq.w	800caba <__kernel_rem_pio2+0x3fa>
 800c938:	f108 33ff 	add.w	r3, r8, #4294967295
 800c93c:	2200      	movs	r2, #0
 800c93e:	9900      	ldr	r1, [sp, #0]
 800c940:	428b      	cmp	r3, r1
 800c942:	da70      	bge.n	800ca26 <__kernel_rem_pio2+0x366>
 800c944:	2a00      	cmp	r2, #0
 800c946:	f000 808b 	beq.w	800ca60 <__kernel_rem_pio2+0x3a0>
 800c94a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c94e:	ab0c      	add	r3, sp, #48	@ 0x30
 800c950:	f1ab 0b18 	sub.w	fp, fp, #24
 800c954:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d0f6      	beq.n	800c94a <__kernel_rem_pio2+0x28a>
 800c95c:	4658      	mov	r0, fp
 800c95e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800c9d8 <__kernel_rem_pio2+0x318>
 800c962:	f000 f9fd 	bl	800cd60 <scalbn>
 800c966:	f108 0301 	add.w	r3, r8, #1
 800c96a:	00da      	lsls	r2, r3, #3
 800c96c:	9205      	str	r2, [sp, #20]
 800c96e:	ec55 4b10 	vmov	r4, r5, d0
 800c972:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c974:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800c9ec <__kernel_rem_pio2+0x32c>
 800c978:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c97c:	4646      	mov	r6, r8
 800c97e:	f04f 0a00 	mov.w	sl, #0
 800c982:	2e00      	cmp	r6, #0
 800c984:	f280 80d1 	bge.w	800cb2a <__kernel_rem_pio2+0x46a>
 800c988:	4644      	mov	r4, r8
 800c98a:	2c00      	cmp	r4, #0
 800c98c:	f2c0 80ff 	blt.w	800cb8e <__kernel_rem_pio2+0x4ce>
 800c990:	4b19      	ldr	r3, [pc, #100]	@ (800c9f8 <__kernel_rem_pio2+0x338>)
 800c992:	461f      	mov	r7, r3
 800c994:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c996:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c99a:	9306      	str	r3, [sp, #24]
 800c99c:	f04f 0a00 	mov.w	sl, #0
 800c9a0:	f04f 0b00 	mov.w	fp, #0
 800c9a4:	2600      	movs	r6, #0
 800c9a6:	eba8 0504 	sub.w	r5, r8, r4
 800c9aa:	e0e4      	b.n	800cb76 <__kernel_rem_pio2+0x4b6>
 800c9ac:	f04f 0902 	mov.w	r9, #2
 800c9b0:	e754      	b.n	800c85c <__kernel_rem_pio2+0x19c>
 800c9b2:	f854 3b04 	ldr.w	r3, [r4], #4
 800c9b6:	bb0d      	cbnz	r5, 800c9fc <__kernel_rem_pio2+0x33c>
 800c9b8:	b123      	cbz	r3, 800c9c4 <__kernel_rem_pio2+0x304>
 800c9ba:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c9be:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	3201      	adds	r2, #1
 800c9c6:	461d      	mov	r5, r3
 800c9c8:	e74f      	b.n	800c86a <__kernel_rem_pio2+0x1aa>
 800c9ca:	bf00      	nop
 800c9cc:	f3af 8000 	nop.w
	...
 800c9dc:	3ff00000 	.word	0x3ff00000
 800c9e0:	08010af0 	.word	0x08010af0
 800c9e4:	40200000 	.word	0x40200000
 800c9e8:	3ff00000 	.word	0x3ff00000
 800c9ec:	3e700000 	.word	0x3e700000
 800c9f0:	41700000 	.word	0x41700000
 800c9f4:	3fe00000 	.word	0x3fe00000
 800c9f8:	08010ab0 	.word	0x08010ab0
 800c9fc:	1acb      	subs	r3, r1, r3
 800c9fe:	e7de      	b.n	800c9be <__kernel_rem_pio2+0x2fe>
 800ca00:	f108 32ff 	add.w	r2, r8, #4294967295
 800ca04:	ab0c      	add	r3, sp, #48	@ 0x30
 800ca06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca0a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ca0e:	a90c      	add	r1, sp, #48	@ 0x30
 800ca10:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ca14:	e737      	b.n	800c886 <__kernel_rem_pio2+0x1c6>
 800ca16:	f108 32ff 	add.w	r2, r8, #4294967295
 800ca1a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ca1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca20:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ca24:	e7f3      	b.n	800ca0e <__kernel_rem_pio2+0x34e>
 800ca26:	a90c      	add	r1, sp, #48	@ 0x30
 800ca28:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	430a      	orrs	r2, r1
 800ca30:	e785      	b.n	800c93e <__kernel_rem_pio2+0x27e>
 800ca32:	3401      	adds	r4, #1
 800ca34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ca38:	2a00      	cmp	r2, #0
 800ca3a:	d0fa      	beq.n	800ca32 <__kernel_rem_pio2+0x372>
 800ca3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca3e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ca42:	eb0d 0503 	add.w	r5, sp, r3
 800ca46:	9b06      	ldr	r3, [sp, #24]
 800ca48:	aa20      	add	r2, sp, #128	@ 0x80
 800ca4a:	4443      	add	r3, r8
 800ca4c:	f108 0701 	add.w	r7, r8, #1
 800ca50:	3d98      	subs	r5, #152	@ 0x98
 800ca52:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800ca56:	4444      	add	r4, r8
 800ca58:	42bc      	cmp	r4, r7
 800ca5a:	da04      	bge.n	800ca66 <__kernel_rem_pio2+0x3a6>
 800ca5c:	46a0      	mov	r8, r4
 800ca5e:	e6a2      	b.n	800c7a6 <__kernel_rem_pio2+0xe6>
 800ca60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca62:	2401      	movs	r4, #1
 800ca64:	e7e6      	b.n	800ca34 <__kernel_rem_pio2+0x374>
 800ca66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca68:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ca6c:	f7f3 fd7a 	bl	8000564 <__aeabi_i2d>
 800ca70:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800cd30 <__kernel_rem_pio2+0x670>
 800ca74:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ca78:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ca7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ca80:	46b2      	mov	sl, r6
 800ca82:	f04f 0800 	mov.w	r8, #0
 800ca86:	9b05      	ldr	r3, [sp, #20]
 800ca88:	4598      	cmp	r8, r3
 800ca8a:	dd05      	ble.n	800ca98 <__kernel_rem_pio2+0x3d8>
 800ca8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca90:	3701      	adds	r7, #1
 800ca92:	eca5 7b02 	vstmia	r5!, {d7}
 800ca96:	e7df      	b.n	800ca58 <__kernel_rem_pio2+0x398>
 800ca98:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800ca9c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800caa0:	f7f3 fdca 	bl	8000638 <__aeabi_dmul>
 800caa4:	4602      	mov	r2, r0
 800caa6:	460b      	mov	r3, r1
 800caa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caac:	f7f3 fc0e 	bl	80002cc <__adddf3>
 800cab0:	f108 0801 	add.w	r8, r8, #1
 800cab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cab8:	e7e5      	b.n	800ca86 <__kernel_rem_pio2+0x3c6>
 800caba:	f1cb 0000 	rsb	r0, fp, #0
 800cabe:	ec47 6b10 	vmov	d0, r6, r7
 800cac2:	f000 f94d 	bl	800cd60 <scalbn>
 800cac6:	ec55 4b10 	vmov	r4, r5, d0
 800caca:	4b9b      	ldr	r3, [pc, #620]	@ (800cd38 <__kernel_rem_pio2+0x678>)
 800cacc:	2200      	movs	r2, #0
 800cace:	4620      	mov	r0, r4
 800cad0:	4629      	mov	r1, r5
 800cad2:	f7f4 f837 	bl	8000b44 <__aeabi_dcmpge>
 800cad6:	b300      	cbz	r0, 800cb1a <__kernel_rem_pio2+0x45a>
 800cad8:	4b98      	ldr	r3, [pc, #608]	@ (800cd3c <__kernel_rem_pio2+0x67c>)
 800cada:	2200      	movs	r2, #0
 800cadc:	4620      	mov	r0, r4
 800cade:	4629      	mov	r1, r5
 800cae0:	f7f3 fdaa 	bl	8000638 <__aeabi_dmul>
 800cae4:	f7f4 f858 	bl	8000b98 <__aeabi_d2iz>
 800cae8:	4606      	mov	r6, r0
 800caea:	f7f3 fd3b 	bl	8000564 <__aeabi_i2d>
 800caee:	4b92      	ldr	r3, [pc, #584]	@ (800cd38 <__kernel_rem_pio2+0x678>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	f7f3 fda1 	bl	8000638 <__aeabi_dmul>
 800caf6:	460b      	mov	r3, r1
 800caf8:	4602      	mov	r2, r0
 800cafa:	4629      	mov	r1, r5
 800cafc:	4620      	mov	r0, r4
 800cafe:	f7f3 fbe3 	bl	80002c8 <__aeabi_dsub>
 800cb02:	f7f4 f849 	bl	8000b98 <__aeabi_d2iz>
 800cb06:	ab0c      	add	r3, sp, #48	@ 0x30
 800cb08:	f10b 0b18 	add.w	fp, fp, #24
 800cb0c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800cb10:	f108 0801 	add.w	r8, r8, #1
 800cb14:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800cb18:	e720      	b.n	800c95c <__kernel_rem_pio2+0x29c>
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	f7f4 f83b 	bl	8000b98 <__aeabi_d2iz>
 800cb22:	ab0c      	add	r3, sp, #48	@ 0x30
 800cb24:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800cb28:	e718      	b.n	800c95c <__kernel_rem_pio2+0x29c>
 800cb2a:	ab0c      	add	r3, sp, #48	@ 0x30
 800cb2c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cb30:	f7f3 fd18 	bl	8000564 <__aeabi_i2d>
 800cb34:	4622      	mov	r2, r4
 800cb36:	462b      	mov	r3, r5
 800cb38:	f7f3 fd7e 	bl	8000638 <__aeabi_dmul>
 800cb3c:	4652      	mov	r2, sl
 800cb3e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800cb42:	465b      	mov	r3, fp
 800cb44:	4620      	mov	r0, r4
 800cb46:	4629      	mov	r1, r5
 800cb48:	f7f3 fd76 	bl	8000638 <__aeabi_dmul>
 800cb4c:	3e01      	subs	r6, #1
 800cb4e:	4604      	mov	r4, r0
 800cb50:	460d      	mov	r5, r1
 800cb52:	e716      	b.n	800c982 <__kernel_rem_pio2+0x2c2>
 800cb54:	9906      	ldr	r1, [sp, #24]
 800cb56:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800cb5a:	9106      	str	r1, [sp, #24]
 800cb5c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800cb60:	f7f3 fd6a 	bl	8000638 <__aeabi_dmul>
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	4650      	mov	r0, sl
 800cb6a:	4659      	mov	r1, fp
 800cb6c:	f7f3 fbae 	bl	80002cc <__adddf3>
 800cb70:	3601      	adds	r6, #1
 800cb72:	4682      	mov	sl, r0
 800cb74:	468b      	mov	fp, r1
 800cb76:	9b00      	ldr	r3, [sp, #0]
 800cb78:	429e      	cmp	r6, r3
 800cb7a:	dc01      	bgt.n	800cb80 <__kernel_rem_pio2+0x4c0>
 800cb7c:	42ae      	cmp	r6, r5
 800cb7e:	dde9      	ble.n	800cb54 <__kernel_rem_pio2+0x494>
 800cb80:	ab48      	add	r3, sp, #288	@ 0x120
 800cb82:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cb86:	e9c5 ab00 	strd	sl, fp, [r5]
 800cb8a:	3c01      	subs	r4, #1
 800cb8c:	e6fd      	b.n	800c98a <__kernel_rem_pio2+0x2ca>
 800cb8e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800cb90:	2b02      	cmp	r3, #2
 800cb92:	dc0b      	bgt.n	800cbac <__kernel_rem_pio2+0x4ec>
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	dc35      	bgt.n	800cc04 <__kernel_rem_pio2+0x544>
 800cb98:	d059      	beq.n	800cc4e <__kernel_rem_pio2+0x58e>
 800cb9a:	9b02      	ldr	r3, [sp, #8]
 800cb9c:	f003 0007 	and.w	r0, r3, #7
 800cba0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800cba4:	ecbd 8b02 	vpop	{d8}
 800cba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800cbae:	2b03      	cmp	r3, #3
 800cbb0:	d1f3      	bne.n	800cb9a <__kernel_rem_pio2+0x4da>
 800cbb2:	9b05      	ldr	r3, [sp, #20]
 800cbb4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cbb8:	eb0d 0403 	add.w	r4, sp, r3
 800cbbc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800cbc0:	4625      	mov	r5, r4
 800cbc2:	46c2      	mov	sl, r8
 800cbc4:	f1ba 0f00 	cmp.w	sl, #0
 800cbc8:	dc69      	bgt.n	800cc9e <__kernel_rem_pio2+0x5de>
 800cbca:	4645      	mov	r5, r8
 800cbcc:	2d01      	cmp	r5, #1
 800cbce:	f300 8087 	bgt.w	800cce0 <__kernel_rem_pio2+0x620>
 800cbd2:	9c05      	ldr	r4, [sp, #20]
 800cbd4:	ab48      	add	r3, sp, #288	@ 0x120
 800cbd6:	441c      	add	r4, r3
 800cbd8:	2000      	movs	r0, #0
 800cbda:	2100      	movs	r1, #0
 800cbdc:	f1b8 0f01 	cmp.w	r8, #1
 800cbe0:	f300 809c 	bgt.w	800cd1c <__kernel_rem_pio2+0x65c>
 800cbe4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800cbe8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800cbec:	f1b9 0f00 	cmp.w	r9, #0
 800cbf0:	f040 80a6 	bne.w	800cd40 <__kernel_rem_pio2+0x680>
 800cbf4:	9b04      	ldr	r3, [sp, #16]
 800cbf6:	e9c3 5600 	strd	r5, r6, [r3]
 800cbfa:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800cbfe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cc02:	e7ca      	b.n	800cb9a <__kernel_rem_pio2+0x4da>
 800cc04:	9d05      	ldr	r5, [sp, #20]
 800cc06:	ab48      	add	r3, sp, #288	@ 0x120
 800cc08:	441d      	add	r5, r3
 800cc0a:	4644      	mov	r4, r8
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	2100      	movs	r1, #0
 800cc10:	2c00      	cmp	r4, #0
 800cc12:	da35      	bge.n	800cc80 <__kernel_rem_pio2+0x5c0>
 800cc14:	f1b9 0f00 	cmp.w	r9, #0
 800cc18:	d038      	beq.n	800cc8c <__kernel_rem_pio2+0x5cc>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc20:	9c04      	ldr	r4, [sp, #16]
 800cc22:	e9c4 2300 	strd	r2, r3, [r4]
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800cc2e:	f7f3 fb4b 	bl	80002c8 <__aeabi_dsub>
 800cc32:	ad4a      	add	r5, sp, #296	@ 0x128
 800cc34:	2401      	movs	r4, #1
 800cc36:	45a0      	cmp	r8, r4
 800cc38:	da2b      	bge.n	800cc92 <__kernel_rem_pio2+0x5d2>
 800cc3a:	f1b9 0f00 	cmp.w	r9, #0
 800cc3e:	d002      	beq.n	800cc46 <__kernel_rem_pio2+0x586>
 800cc40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc44:	4619      	mov	r1, r3
 800cc46:	9b04      	ldr	r3, [sp, #16]
 800cc48:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cc4c:	e7a5      	b.n	800cb9a <__kernel_rem_pio2+0x4da>
 800cc4e:	9c05      	ldr	r4, [sp, #20]
 800cc50:	ab48      	add	r3, sp, #288	@ 0x120
 800cc52:	441c      	add	r4, r3
 800cc54:	2000      	movs	r0, #0
 800cc56:	2100      	movs	r1, #0
 800cc58:	f1b8 0f00 	cmp.w	r8, #0
 800cc5c:	da09      	bge.n	800cc72 <__kernel_rem_pio2+0x5b2>
 800cc5e:	f1b9 0f00 	cmp.w	r9, #0
 800cc62:	d002      	beq.n	800cc6a <__kernel_rem_pio2+0x5aa>
 800cc64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc68:	4619      	mov	r1, r3
 800cc6a:	9b04      	ldr	r3, [sp, #16]
 800cc6c:	e9c3 0100 	strd	r0, r1, [r3]
 800cc70:	e793      	b.n	800cb9a <__kernel_rem_pio2+0x4da>
 800cc72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cc76:	f7f3 fb29 	bl	80002cc <__adddf3>
 800cc7a:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc7e:	e7eb      	b.n	800cc58 <__kernel_rem_pio2+0x598>
 800cc80:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800cc84:	f7f3 fb22 	bl	80002cc <__adddf3>
 800cc88:	3c01      	subs	r4, #1
 800cc8a:	e7c1      	b.n	800cc10 <__kernel_rem_pio2+0x550>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	e7c6      	b.n	800cc20 <__kernel_rem_pio2+0x560>
 800cc92:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800cc96:	f7f3 fb19 	bl	80002cc <__adddf3>
 800cc9a:	3401      	adds	r4, #1
 800cc9c:	e7cb      	b.n	800cc36 <__kernel_rem_pio2+0x576>
 800cc9e:	ed35 7b02 	vldmdb	r5!, {d7}
 800cca2:	ed8d 7b00 	vstr	d7, [sp]
 800cca6:	ed95 7b02 	vldr	d7, [r5, #8]
 800ccaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccae:	ec53 2b17 	vmov	r2, r3, d7
 800ccb2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ccb6:	f7f3 fb09 	bl	80002cc <__adddf3>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	4606      	mov	r6, r0
 800ccc0:	460f      	mov	r7, r1
 800ccc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccc6:	f7f3 faff 	bl	80002c8 <__aeabi_dsub>
 800ccca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ccce:	f7f3 fafd 	bl	80002cc <__adddf3>
 800ccd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ccd6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ccda:	e9c5 6700 	strd	r6, r7, [r5]
 800ccde:	e771      	b.n	800cbc4 <__kernel_rem_pio2+0x504>
 800cce0:	ed34 7b02 	vldmdb	r4!, {d7}
 800cce4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800cce8:	ec51 0b17 	vmov	r0, r1, d7
 800ccec:	4652      	mov	r2, sl
 800ccee:	465b      	mov	r3, fp
 800ccf0:	ed8d 7b00 	vstr	d7, [sp]
 800ccf4:	f7f3 faea 	bl	80002cc <__adddf3>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	4606      	mov	r6, r0
 800ccfe:	460f      	mov	r7, r1
 800cd00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd04:	f7f3 fae0 	bl	80002c8 <__aeabi_dsub>
 800cd08:	4652      	mov	r2, sl
 800cd0a:	465b      	mov	r3, fp
 800cd0c:	f7f3 fade 	bl	80002cc <__adddf3>
 800cd10:	3d01      	subs	r5, #1
 800cd12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cd16:	e9c4 6700 	strd	r6, r7, [r4]
 800cd1a:	e757      	b.n	800cbcc <__kernel_rem_pio2+0x50c>
 800cd1c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cd20:	f7f3 fad4 	bl	80002cc <__adddf3>
 800cd24:	f108 38ff 	add.w	r8, r8, #4294967295
 800cd28:	e758      	b.n	800cbdc <__kernel_rem_pio2+0x51c>
 800cd2a:	bf00      	nop
 800cd2c:	f3af 8000 	nop.w
	...
 800cd38:	41700000 	.word	0x41700000
 800cd3c:	3e700000 	.word	0x3e700000
 800cd40:	9b04      	ldr	r3, [sp, #16]
 800cd42:	9a04      	ldr	r2, [sp, #16]
 800cd44:	601d      	str	r5, [r3, #0]
 800cd46:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800cd4a:	605c      	str	r4, [r3, #4]
 800cd4c:	609f      	str	r7, [r3, #8]
 800cd4e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800cd52:	60d3      	str	r3, [r2, #12]
 800cd54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd58:	6110      	str	r0, [r2, #16]
 800cd5a:	6153      	str	r3, [r2, #20]
 800cd5c:	e71d      	b.n	800cb9a <__kernel_rem_pio2+0x4da>
 800cd5e:	bf00      	nop

0800cd60 <scalbn>:
 800cd60:	b570      	push	{r4, r5, r6, lr}
 800cd62:	ec55 4b10 	vmov	r4, r5, d0
 800cd66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	462b      	mov	r3, r5
 800cd6e:	b991      	cbnz	r1, 800cd96 <scalbn+0x36>
 800cd70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800cd74:	4323      	orrs	r3, r4
 800cd76:	d03b      	beq.n	800cdf0 <scalbn+0x90>
 800cd78:	4b33      	ldr	r3, [pc, #204]	@ (800ce48 <scalbn+0xe8>)
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	2200      	movs	r2, #0
 800cd80:	f7f3 fc5a 	bl	8000638 <__aeabi_dmul>
 800cd84:	4b31      	ldr	r3, [pc, #196]	@ (800ce4c <scalbn+0xec>)
 800cd86:	429e      	cmp	r6, r3
 800cd88:	4604      	mov	r4, r0
 800cd8a:	460d      	mov	r5, r1
 800cd8c:	da0f      	bge.n	800cdae <scalbn+0x4e>
 800cd8e:	a326      	add	r3, pc, #152	@ (adr r3, 800ce28 <scalbn+0xc8>)
 800cd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd94:	e01e      	b.n	800cdd4 <scalbn+0x74>
 800cd96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800cd9a:	4291      	cmp	r1, r2
 800cd9c:	d10b      	bne.n	800cdb6 <scalbn+0x56>
 800cd9e:	4622      	mov	r2, r4
 800cda0:	4620      	mov	r0, r4
 800cda2:	4629      	mov	r1, r5
 800cda4:	f7f3 fa92 	bl	80002cc <__adddf3>
 800cda8:	4604      	mov	r4, r0
 800cdaa:	460d      	mov	r5, r1
 800cdac:	e020      	b.n	800cdf0 <scalbn+0x90>
 800cdae:	460b      	mov	r3, r1
 800cdb0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cdb4:	3936      	subs	r1, #54	@ 0x36
 800cdb6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800cdba:	4296      	cmp	r6, r2
 800cdbc:	dd0d      	ble.n	800cdda <scalbn+0x7a>
 800cdbe:	2d00      	cmp	r5, #0
 800cdc0:	a11b      	add	r1, pc, #108	@ (adr r1, 800ce30 <scalbn+0xd0>)
 800cdc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdc6:	da02      	bge.n	800cdce <scalbn+0x6e>
 800cdc8:	a11b      	add	r1, pc, #108	@ (adr r1, 800ce38 <scalbn+0xd8>)
 800cdca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdce:	a318      	add	r3, pc, #96	@ (adr r3, 800ce30 <scalbn+0xd0>)
 800cdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd4:	f7f3 fc30 	bl	8000638 <__aeabi_dmul>
 800cdd8:	e7e6      	b.n	800cda8 <scalbn+0x48>
 800cdda:	1872      	adds	r2, r6, r1
 800cddc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800cde0:	428a      	cmp	r2, r1
 800cde2:	dcec      	bgt.n	800cdbe <scalbn+0x5e>
 800cde4:	2a00      	cmp	r2, #0
 800cde6:	dd06      	ble.n	800cdf6 <scalbn+0x96>
 800cde8:	f36f 531e 	bfc	r3, #20, #11
 800cdec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cdf0:	ec45 4b10 	vmov	d0, r4, r5
 800cdf4:	bd70      	pop	{r4, r5, r6, pc}
 800cdf6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800cdfa:	da08      	bge.n	800ce0e <scalbn+0xae>
 800cdfc:	2d00      	cmp	r5, #0
 800cdfe:	a10a      	add	r1, pc, #40	@ (adr r1, 800ce28 <scalbn+0xc8>)
 800ce00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce04:	dac3      	bge.n	800cd8e <scalbn+0x2e>
 800ce06:	a10e      	add	r1, pc, #56	@ (adr r1, 800ce40 <scalbn+0xe0>)
 800ce08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce0c:	e7bf      	b.n	800cd8e <scalbn+0x2e>
 800ce0e:	3236      	adds	r2, #54	@ 0x36
 800ce10:	f36f 531e 	bfc	r3, #20, #11
 800ce14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce18:	4620      	mov	r0, r4
 800ce1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce50 <scalbn+0xf0>)
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	2200      	movs	r2, #0
 800ce20:	e7d8      	b.n	800cdd4 <scalbn+0x74>
 800ce22:	bf00      	nop
 800ce24:	f3af 8000 	nop.w
 800ce28:	c2f8f359 	.word	0xc2f8f359
 800ce2c:	01a56e1f 	.word	0x01a56e1f
 800ce30:	8800759c 	.word	0x8800759c
 800ce34:	7e37e43c 	.word	0x7e37e43c
 800ce38:	8800759c 	.word	0x8800759c
 800ce3c:	fe37e43c 	.word	0xfe37e43c
 800ce40:	c2f8f359 	.word	0xc2f8f359
 800ce44:	81a56e1f 	.word	0x81a56e1f
 800ce48:	43500000 	.word	0x43500000
 800ce4c:	ffff3cb0 	.word	0xffff3cb0
 800ce50:	3c900000 	.word	0x3c900000
 800ce54:	00000000 	.word	0x00000000

0800ce58 <floor>:
 800ce58:	ec51 0b10 	vmov	r0, r1, d0
 800ce5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ce60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce64:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800ce68:	2e13      	cmp	r6, #19
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	4605      	mov	r5, r0
 800ce6e:	4680      	mov	r8, r0
 800ce70:	dc34      	bgt.n	800cedc <floor+0x84>
 800ce72:	2e00      	cmp	r6, #0
 800ce74:	da17      	bge.n	800cea6 <floor+0x4e>
 800ce76:	a332      	add	r3, pc, #200	@ (adr r3, 800cf40 <floor+0xe8>)
 800ce78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce7c:	f7f3 fa26 	bl	80002cc <__adddf3>
 800ce80:	2200      	movs	r2, #0
 800ce82:	2300      	movs	r3, #0
 800ce84:	f7f3 fe68 	bl	8000b58 <__aeabi_dcmpgt>
 800ce88:	b150      	cbz	r0, 800cea0 <floor+0x48>
 800ce8a:	2c00      	cmp	r4, #0
 800ce8c:	da55      	bge.n	800cf3a <floor+0xe2>
 800ce8e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ce92:	432c      	orrs	r4, r5
 800ce94:	2500      	movs	r5, #0
 800ce96:	42ac      	cmp	r4, r5
 800ce98:	4c2b      	ldr	r4, [pc, #172]	@ (800cf48 <floor+0xf0>)
 800ce9a:	bf08      	it	eq
 800ce9c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800cea0:	4621      	mov	r1, r4
 800cea2:	4628      	mov	r0, r5
 800cea4:	e023      	b.n	800ceee <floor+0x96>
 800cea6:	4f29      	ldr	r7, [pc, #164]	@ (800cf4c <floor+0xf4>)
 800cea8:	4137      	asrs	r7, r6
 800ceaa:	ea01 0307 	and.w	r3, r1, r7
 800ceae:	4303      	orrs	r3, r0
 800ceb0:	d01d      	beq.n	800ceee <floor+0x96>
 800ceb2:	a323      	add	r3, pc, #140	@ (adr r3, 800cf40 <floor+0xe8>)
 800ceb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb8:	f7f3 fa08 	bl	80002cc <__adddf3>
 800cebc:	2200      	movs	r2, #0
 800cebe:	2300      	movs	r3, #0
 800cec0:	f7f3 fe4a 	bl	8000b58 <__aeabi_dcmpgt>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d0eb      	beq.n	800cea0 <floor+0x48>
 800cec8:	2c00      	cmp	r4, #0
 800ceca:	bfbe      	ittt	lt
 800cecc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ced0:	4133      	asrlt	r3, r6
 800ced2:	18e4      	addlt	r4, r4, r3
 800ced4:	ea24 0407 	bic.w	r4, r4, r7
 800ced8:	2500      	movs	r5, #0
 800ceda:	e7e1      	b.n	800cea0 <floor+0x48>
 800cedc:	2e33      	cmp	r6, #51	@ 0x33
 800cede:	dd0a      	ble.n	800cef6 <floor+0x9e>
 800cee0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800cee4:	d103      	bne.n	800ceee <floor+0x96>
 800cee6:	4602      	mov	r2, r0
 800cee8:	460b      	mov	r3, r1
 800ceea:	f7f3 f9ef 	bl	80002cc <__adddf3>
 800ceee:	ec41 0b10 	vmov	d0, r0, r1
 800cef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cef6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800cefa:	f04f 37ff 	mov.w	r7, #4294967295
 800cefe:	40df      	lsrs	r7, r3
 800cf00:	4207      	tst	r7, r0
 800cf02:	d0f4      	beq.n	800ceee <floor+0x96>
 800cf04:	a30e      	add	r3, pc, #56	@ (adr r3, 800cf40 <floor+0xe8>)
 800cf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0a:	f7f3 f9df 	bl	80002cc <__adddf3>
 800cf0e:	2200      	movs	r2, #0
 800cf10:	2300      	movs	r3, #0
 800cf12:	f7f3 fe21 	bl	8000b58 <__aeabi_dcmpgt>
 800cf16:	2800      	cmp	r0, #0
 800cf18:	d0c2      	beq.n	800cea0 <floor+0x48>
 800cf1a:	2c00      	cmp	r4, #0
 800cf1c:	da0a      	bge.n	800cf34 <floor+0xdc>
 800cf1e:	2e14      	cmp	r6, #20
 800cf20:	d101      	bne.n	800cf26 <floor+0xce>
 800cf22:	3401      	adds	r4, #1
 800cf24:	e006      	b.n	800cf34 <floor+0xdc>
 800cf26:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	40b3      	lsls	r3, r6
 800cf2e:	441d      	add	r5, r3
 800cf30:	4545      	cmp	r5, r8
 800cf32:	d3f6      	bcc.n	800cf22 <floor+0xca>
 800cf34:	ea25 0507 	bic.w	r5, r5, r7
 800cf38:	e7b2      	b.n	800cea0 <floor+0x48>
 800cf3a:	2500      	movs	r5, #0
 800cf3c:	462c      	mov	r4, r5
 800cf3e:	e7af      	b.n	800cea0 <floor+0x48>
 800cf40:	8800759c 	.word	0x8800759c
 800cf44:	7e37e43c 	.word	0x7e37e43c
 800cf48:	bff00000 	.word	0xbff00000
 800cf4c:	000fffff 	.word	0x000fffff

0800cf50 <abort>:
 800cf50:	b508      	push	{r3, lr}
 800cf52:	2006      	movs	r0, #6
 800cf54:	f000 fe4e 	bl	800dbf4 <raise>
 800cf58:	2001      	movs	r0, #1
 800cf5a:	f7f7 fdfb 	bl	8004b54 <_exit>
	...

0800cf60 <malloc>:
 800cf60:	4b02      	ldr	r3, [pc, #8]	@ (800cf6c <malloc+0xc>)
 800cf62:	4601      	mov	r1, r0
 800cf64:	6818      	ldr	r0, [r3, #0]
 800cf66:	f000 b82d 	b.w	800cfc4 <_malloc_r>
 800cf6a:	bf00      	nop
 800cf6c:	20000018 	.word	0x20000018

0800cf70 <free>:
 800cf70:	4b02      	ldr	r3, [pc, #8]	@ (800cf7c <free+0xc>)
 800cf72:	4601      	mov	r1, r0
 800cf74:	6818      	ldr	r0, [r3, #0]
 800cf76:	f001 bd47 	b.w	800ea08 <_free_r>
 800cf7a:	bf00      	nop
 800cf7c:	20000018 	.word	0x20000018

0800cf80 <sbrk_aligned>:
 800cf80:	b570      	push	{r4, r5, r6, lr}
 800cf82:	4e0f      	ldr	r6, [pc, #60]	@ (800cfc0 <sbrk_aligned+0x40>)
 800cf84:	460c      	mov	r4, r1
 800cf86:	6831      	ldr	r1, [r6, #0]
 800cf88:	4605      	mov	r5, r0
 800cf8a:	b911      	cbnz	r1, 800cf92 <sbrk_aligned+0x12>
 800cf8c:	f000 fe86 	bl	800dc9c <_sbrk_r>
 800cf90:	6030      	str	r0, [r6, #0]
 800cf92:	4621      	mov	r1, r4
 800cf94:	4628      	mov	r0, r5
 800cf96:	f000 fe81 	bl	800dc9c <_sbrk_r>
 800cf9a:	1c43      	adds	r3, r0, #1
 800cf9c:	d103      	bne.n	800cfa6 <sbrk_aligned+0x26>
 800cf9e:	f04f 34ff 	mov.w	r4, #4294967295
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	bd70      	pop	{r4, r5, r6, pc}
 800cfa6:	1cc4      	adds	r4, r0, #3
 800cfa8:	f024 0403 	bic.w	r4, r4, #3
 800cfac:	42a0      	cmp	r0, r4
 800cfae:	d0f8      	beq.n	800cfa2 <sbrk_aligned+0x22>
 800cfb0:	1a21      	subs	r1, r4, r0
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	f000 fe72 	bl	800dc9c <_sbrk_r>
 800cfb8:	3001      	adds	r0, #1
 800cfba:	d1f2      	bne.n	800cfa2 <sbrk_aligned+0x22>
 800cfbc:	e7ef      	b.n	800cf9e <sbrk_aligned+0x1e>
 800cfbe:	bf00      	nop
 800cfc0:	20000ea4 	.word	0x20000ea4

0800cfc4 <_malloc_r>:
 800cfc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfc8:	1ccd      	adds	r5, r1, #3
 800cfca:	f025 0503 	bic.w	r5, r5, #3
 800cfce:	3508      	adds	r5, #8
 800cfd0:	2d0c      	cmp	r5, #12
 800cfd2:	bf38      	it	cc
 800cfd4:	250c      	movcc	r5, #12
 800cfd6:	2d00      	cmp	r5, #0
 800cfd8:	4606      	mov	r6, r0
 800cfda:	db01      	blt.n	800cfe0 <_malloc_r+0x1c>
 800cfdc:	42a9      	cmp	r1, r5
 800cfde:	d904      	bls.n	800cfea <_malloc_r+0x26>
 800cfe0:	230c      	movs	r3, #12
 800cfe2:	6033      	str	r3, [r6, #0]
 800cfe4:	2000      	movs	r0, #0
 800cfe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d0c0 <_malloc_r+0xfc>
 800cfee:	f000 f869 	bl	800d0c4 <__malloc_lock>
 800cff2:	f8d8 3000 	ldr.w	r3, [r8]
 800cff6:	461c      	mov	r4, r3
 800cff8:	bb44      	cbnz	r4, 800d04c <_malloc_r+0x88>
 800cffa:	4629      	mov	r1, r5
 800cffc:	4630      	mov	r0, r6
 800cffe:	f7ff ffbf 	bl	800cf80 <sbrk_aligned>
 800d002:	1c43      	adds	r3, r0, #1
 800d004:	4604      	mov	r4, r0
 800d006:	d158      	bne.n	800d0ba <_malloc_r+0xf6>
 800d008:	f8d8 4000 	ldr.w	r4, [r8]
 800d00c:	4627      	mov	r7, r4
 800d00e:	2f00      	cmp	r7, #0
 800d010:	d143      	bne.n	800d09a <_malloc_r+0xd6>
 800d012:	2c00      	cmp	r4, #0
 800d014:	d04b      	beq.n	800d0ae <_malloc_r+0xea>
 800d016:	6823      	ldr	r3, [r4, #0]
 800d018:	4639      	mov	r1, r7
 800d01a:	4630      	mov	r0, r6
 800d01c:	eb04 0903 	add.w	r9, r4, r3
 800d020:	f000 fe3c 	bl	800dc9c <_sbrk_r>
 800d024:	4581      	cmp	r9, r0
 800d026:	d142      	bne.n	800d0ae <_malloc_r+0xea>
 800d028:	6821      	ldr	r1, [r4, #0]
 800d02a:	1a6d      	subs	r5, r5, r1
 800d02c:	4629      	mov	r1, r5
 800d02e:	4630      	mov	r0, r6
 800d030:	f7ff ffa6 	bl	800cf80 <sbrk_aligned>
 800d034:	3001      	adds	r0, #1
 800d036:	d03a      	beq.n	800d0ae <_malloc_r+0xea>
 800d038:	6823      	ldr	r3, [r4, #0]
 800d03a:	442b      	add	r3, r5
 800d03c:	6023      	str	r3, [r4, #0]
 800d03e:	f8d8 3000 	ldr.w	r3, [r8]
 800d042:	685a      	ldr	r2, [r3, #4]
 800d044:	bb62      	cbnz	r2, 800d0a0 <_malloc_r+0xdc>
 800d046:	f8c8 7000 	str.w	r7, [r8]
 800d04a:	e00f      	b.n	800d06c <_malloc_r+0xa8>
 800d04c:	6822      	ldr	r2, [r4, #0]
 800d04e:	1b52      	subs	r2, r2, r5
 800d050:	d420      	bmi.n	800d094 <_malloc_r+0xd0>
 800d052:	2a0b      	cmp	r2, #11
 800d054:	d917      	bls.n	800d086 <_malloc_r+0xc2>
 800d056:	1961      	adds	r1, r4, r5
 800d058:	42a3      	cmp	r3, r4
 800d05a:	6025      	str	r5, [r4, #0]
 800d05c:	bf18      	it	ne
 800d05e:	6059      	strne	r1, [r3, #4]
 800d060:	6863      	ldr	r3, [r4, #4]
 800d062:	bf08      	it	eq
 800d064:	f8c8 1000 	streq.w	r1, [r8]
 800d068:	5162      	str	r2, [r4, r5]
 800d06a:	604b      	str	r3, [r1, #4]
 800d06c:	4630      	mov	r0, r6
 800d06e:	f000 f82f 	bl	800d0d0 <__malloc_unlock>
 800d072:	f104 000b 	add.w	r0, r4, #11
 800d076:	1d23      	adds	r3, r4, #4
 800d078:	f020 0007 	bic.w	r0, r0, #7
 800d07c:	1ac2      	subs	r2, r0, r3
 800d07e:	bf1c      	itt	ne
 800d080:	1a1b      	subne	r3, r3, r0
 800d082:	50a3      	strne	r3, [r4, r2]
 800d084:	e7af      	b.n	800cfe6 <_malloc_r+0x22>
 800d086:	6862      	ldr	r2, [r4, #4]
 800d088:	42a3      	cmp	r3, r4
 800d08a:	bf0c      	ite	eq
 800d08c:	f8c8 2000 	streq.w	r2, [r8]
 800d090:	605a      	strne	r2, [r3, #4]
 800d092:	e7eb      	b.n	800d06c <_malloc_r+0xa8>
 800d094:	4623      	mov	r3, r4
 800d096:	6864      	ldr	r4, [r4, #4]
 800d098:	e7ae      	b.n	800cff8 <_malloc_r+0x34>
 800d09a:	463c      	mov	r4, r7
 800d09c:	687f      	ldr	r7, [r7, #4]
 800d09e:	e7b6      	b.n	800d00e <_malloc_r+0x4a>
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	42a3      	cmp	r3, r4
 800d0a6:	d1fb      	bne.n	800d0a0 <_malloc_r+0xdc>
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	6053      	str	r3, [r2, #4]
 800d0ac:	e7de      	b.n	800d06c <_malloc_r+0xa8>
 800d0ae:	230c      	movs	r3, #12
 800d0b0:	6033      	str	r3, [r6, #0]
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	f000 f80c 	bl	800d0d0 <__malloc_unlock>
 800d0b8:	e794      	b.n	800cfe4 <_malloc_r+0x20>
 800d0ba:	6005      	str	r5, [r0, #0]
 800d0bc:	e7d6      	b.n	800d06c <_malloc_r+0xa8>
 800d0be:	bf00      	nop
 800d0c0:	20000ea8 	.word	0x20000ea8

0800d0c4 <__malloc_lock>:
 800d0c4:	4801      	ldr	r0, [pc, #4]	@ (800d0cc <__malloc_lock+0x8>)
 800d0c6:	f000 be36 	b.w	800dd36 <__retarget_lock_acquire_recursive>
 800d0ca:	bf00      	nop
 800d0cc:	20000fec 	.word	0x20000fec

0800d0d0 <__malloc_unlock>:
 800d0d0:	4801      	ldr	r0, [pc, #4]	@ (800d0d8 <__malloc_unlock+0x8>)
 800d0d2:	f000 be31 	b.w	800dd38 <__retarget_lock_release_recursive>
 800d0d6:	bf00      	nop
 800d0d8:	20000fec 	.word	0x20000fec

0800d0dc <__cvt>:
 800d0dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e0:	ec57 6b10 	vmov	r6, r7, d0
 800d0e4:	2f00      	cmp	r7, #0
 800d0e6:	460c      	mov	r4, r1
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	463b      	mov	r3, r7
 800d0ec:	bfbb      	ittet	lt
 800d0ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d0f2:	461f      	movlt	r7, r3
 800d0f4:	2300      	movge	r3, #0
 800d0f6:	232d      	movlt	r3, #45	@ 0x2d
 800d0f8:	700b      	strb	r3, [r1, #0]
 800d0fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d0fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d100:	4691      	mov	r9, r2
 800d102:	f023 0820 	bic.w	r8, r3, #32
 800d106:	bfbc      	itt	lt
 800d108:	4632      	movlt	r2, r6
 800d10a:	4616      	movlt	r6, r2
 800d10c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d110:	d005      	beq.n	800d11e <__cvt+0x42>
 800d112:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d116:	d100      	bne.n	800d11a <__cvt+0x3e>
 800d118:	3401      	adds	r4, #1
 800d11a:	2102      	movs	r1, #2
 800d11c:	e000      	b.n	800d120 <__cvt+0x44>
 800d11e:	2103      	movs	r1, #3
 800d120:	ab03      	add	r3, sp, #12
 800d122:	9301      	str	r3, [sp, #4]
 800d124:	ab02      	add	r3, sp, #8
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	ec47 6b10 	vmov	d0, r6, r7
 800d12c:	4653      	mov	r3, sl
 800d12e:	4622      	mov	r2, r4
 800d130:	f000 fe9a 	bl	800de68 <_dtoa_r>
 800d134:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d138:	4605      	mov	r5, r0
 800d13a:	d119      	bne.n	800d170 <__cvt+0x94>
 800d13c:	f019 0f01 	tst.w	r9, #1
 800d140:	d00e      	beq.n	800d160 <__cvt+0x84>
 800d142:	eb00 0904 	add.w	r9, r0, r4
 800d146:	2200      	movs	r2, #0
 800d148:	2300      	movs	r3, #0
 800d14a:	4630      	mov	r0, r6
 800d14c:	4639      	mov	r1, r7
 800d14e:	f7f3 fcdb 	bl	8000b08 <__aeabi_dcmpeq>
 800d152:	b108      	cbz	r0, 800d158 <__cvt+0x7c>
 800d154:	f8cd 900c 	str.w	r9, [sp, #12]
 800d158:	2230      	movs	r2, #48	@ 0x30
 800d15a:	9b03      	ldr	r3, [sp, #12]
 800d15c:	454b      	cmp	r3, r9
 800d15e:	d31e      	bcc.n	800d19e <__cvt+0xc2>
 800d160:	9b03      	ldr	r3, [sp, #12]
 800d162:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d164:	1b5b      	subs	r3, r3, r5
 800d166:	4628      	mov	r0, r5
 800d168:	6013      	str	r3, [r2, #0]
 800d16a:	b004      	add	sp, #16
 800d16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d170:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d174:	eb00 0904 	add.w	r9, r0, r4
 800d178:	d1e5      	bne.n	800d146 <__cvt+0x6a>
 800d17a:	7803      	ldrb	r3, [r0, #0]
 800d17c:	2b30      	cmp	r3, #48	@ 0x30
 800d17e:	d10a      	bne.n	800d196 <__cvt+0xba>
 800d180:	2200      	movs	r2, #0
 800d182:	2300      	movs	r3, #0
 800d184:	4630      	mov	r0, r6
 800d186:	4639      	mov	r1, r7
 800d188:	f7f3 fcbe 	bl	8000b08 <__aeabi_dcmpeq>
 800d18c:	b918      	cbnz	r0, 800d196 <__cvt+0xba>
 800d18e:	f1c4 0401 	rsb	r4, r4, #1
 800d192:	f8ca 4000 	str.w	r4, [sl]
 800d196:	f8da 3000 	ldr.w	r3, [sl]
 800d19a:	4499      	add	r9, r3
 800d19c:	e7d3      	b.n	800d146 <__cvt+0x6a>
 800d19e:	1c59      	adds	r1, r3, #1
 800d1a0:	9103      	str	r1, [sp, #12]
 800d1a2:	701a      	strb	r2, [r3, #0]
 800d1a4:	e7d9      	b.n	800d15a <__cvt+0x7e>

0800d1a6 <__exponent>:
 800d1a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1a8:	2900      	cmp	r1, #0
 800d1aa:	bfba      	itte	lt
 800d1ac:	4249      	neglt	r1, r1
 800d1ae:	232d      	movlt	r3, #45	@ 0x2d
 800d1b0:	232b      	movge	r3, #43	@ 0x2b
 800d1b2:	2909      	cmp	r1, #9
 800d1b4:	7002      	strb	r2, [r0, #0]
 800d1b6:	7043      	strb	r3, [r0, #1]
 800d1b8:	dd29      	ble.n	800d20e <__exponent+0x68>
 800d1ba:	f10d 0307 	add.w	r3, sp, #7
 800d1be:	461d      	mov	r5, r3
 800d1c0:	270a      	movs	r7, #10
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	fbb1 f6f7 	udiv	r6, r1, r7
 800d1c8:	fb07 1416 	mls	r4, r7, r6, r1
 800d1cc:	3430      	adds	r4, #48	@ 0x30
 800d1ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d1d2:	460c      	mov	r4, r1
 800d1d4:	2c63      	cmp	r4, #99	@ 0x63
 800d1d6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d1da:	4631      	mov	r1, r6
 800d1dc:	dcf1      	bgt.n	800d1c2 <__exponent+0x1c>
 800d1de:	3130      	adds	r1, #48	@ 0x30
 800d1e0:	1e94      	subs	r4, r2, #2
 800d1e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d1e6:	1c41      	adds	r1, r0, #1
 800d1e8:	4623      	mov	r3, r4
 800d1ea:	42ab      	cmp	r3, r5
 800d1ec:	d30a      	bcc.n	800d204 <__exponent+0x5e>
 800d1ee:	f10d 0309 	add.w	r3, sp, #9
 800d1f2:	1a9b      	subs	r3, r3, r2
 800d1f4:	42ac      	cmp	r4, r5
 800d1f6:	bf88      	it	hi
 800d1f8:	2300      	movhi	r3, #0
 800d1fa:	3302      	adds	r3, #2
 800d1fc:	4403      	add	r3, r0
 800d1fe:	1a18      	subs	r0, r3, r0
 800d200:	b003      	add	sp, #12
 800d202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d204:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d208:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d20c:	e7ed      	b.n	800d1ea <__exponent+0x44>
 800d20e:	2330      	movs	r3, #48	@ 0x30
 800d210:	3130      	adds	r1, #48	@ 0x30
 800d212:	7083      	strb	r3, [r0, #2]
 800d214:	70c1      	strb	r1, [r0, #3]
 800d216:	1d03      	adds	r3, r0, #4
 800d218:	e7f1      	b.n	800d1fe <__exponent+0x58>
	...

0800d21c <_printf_float>:
 800d21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d220:	b08d      	sub	sp, #52	@ 0x34
 800d222:	460c      	mov	r4, r1
 800d224:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d228:	4616      	mov	r6, r2
 800d22a:	461f      	mov	r7, r3
 800d22c:	4605      	mov	r5, r0
 800d22e:	f000 fce9 	bl	800dc04 <_localeconv_r>
 800d232:	6803      	ldr	r3, [r0, #0]
 800d234:	9304      	str	r3, [sp, #16]
 800d236:	4618      	mov	r0, r3
 800d238:	f7f3 f83a 	bl	80002b0 <strlen>
 800d23c:	2300      	movs	r3, #0
 800d23e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d240:	f8d8 3000 	ldr.w	r3, [r8]
 800d244:	9005      	str	r0, [sp, #20]
 800d246:	3307      	adds	r3, #7
 800d248:	f023 0307 	bic.w	r3, r3, #7
 800d24c:	f103 0208 	add.w	r2, r3, #8
 800d250:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d254:	f8d4 b000 	ldr.w	fp, [r4]
 800d258:	f8c8 2000 	str.w	r2, [r8]
 800d25c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d260:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d264:	9307      	str	r3, [sp, #28]
 800d266:	f8cd 8018 	str.w	r8, [sp, #24]
 800d26a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d26e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d272:	4b9c      	ldr	r3, [pc, #624]	@ (800d4e4 <_printf_float+0x2c8>)
 800d274:	f04f 32ff 	mov.w	r2, #4294967295
 800d278:	f7f3 fc78 	bl	8000b6c <__aeabi_dcmpun>
 800d27c:	bb70      	cbnz	r0, 800d2dc <_printf_float+0xc0>
 800d27e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d282:	4b98      	ldr	r3, [pc, #608]	@ (800d4e4 <_printf_float+0x2c8>)
 800d284:	f04f 32ff 	mov.w	r2, #4294967295
 800d288:	f7f3 fc52 	bl	8000b30 <__aeabi_dcmple>
 800d28c:	bb30      	cbnz	r0, 800d2dc <_printf_float+0xc0>
 800d28e:	2200      	movs	r2, #0
 800d290:	2300      	movs	r3, #0
 800d292:	4640      	mov	r0, r8
 800d294:	4649      	mov	r1, r9
 800d296:	f7f3 fc41 	bl	8000b1c <__aeabi_dcmplt>
 800d29a:	b110      	cbz	r0, 800d2a2 <_printf_float+0x86>
 800d29c:	232d      	movs	r3, #45	@ 0x2d
 800d29e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2a2:	4a91      	ldr	r2, [pc, #580]	@ (800d4e8 <_printf_float+0x2cc>)
 800d2a4:	4b91      	ldr	r3, [pc, #580]	@ (800d4ec <_printf_float+0x2d0>)
 800d2a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d2aa:	bf8c      	ite	hi
 800d2ac:	4690      	movhi	r8, r2
 800d2ae:	4698      	movls	r8, r3
 800d2b0:	2303      	movs	r3, #3
 800d2b2:	6123      	str	r3, [r4, #16]
 800d2b4:	f02b 0304 	bic.w	r3, fp, #4
 800d2b8:	6023      	str	r3, [r4, #0]
 800d2ba:	f04f 0900 	mov.w	r9, #0
 800d2be:	9700      	str	r7, [sp, #0]
 800d2c0:	4633      	mov	r3, r6
 800d2c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d2c4:	4621      	mov	r1, r4
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	f000 f9d2 	bl	800d670 <_printf_common>
 800d2cc:	3001      	adds	r0, #1
 800d2ce:	f040 808d 	bne.w	800d3ec <_printf_float+0x1d0>
 800d2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d6:	b00d      	add	sp, #52	@ 0x34
 800d2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2dc:	4642      	mov	r2, r8
 800d2de:	464b      	mov	r3, r9
 800d2e0:	4640      	mov	r0, r8
 800d2e2:	4649      	mov	r1, r9
 800d2e4:	f7f3 fc42 	bl	8000b6c <__aeabi_dcmpun>
 800d2e8:	b140      	cbz	r0, 800d2fc <_printf_float+0xe0>
 800d2ea:	464b      	mov	r3, r9
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	bfbc      	itt	lt
 800d2f0:	232d      	movlt	r3, #45	@ 0x2d
 800d2f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d2f6:	4a7e      	ldr	r2, [pc, #504]	@ (800d4f0 <_printf_float+0x2d4>)
 800d2f8:	4b7e      	ldr	r3, [pc, #504]	@ (800d4f4 <_printf_float+0x2d8>)
 800d2fa:	e7d4      	b.n	800d2a6 <_printf_float+0x8a>
 800d2fc:	6863      	ldr	r3, [r4, #4]
 800d2fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d302:	9206      	str	r2, [sp, #24]
 800d304:	1c5a      	adds	r2, r3, #1
 800d306:	d13b      	bne.n	800d380 <_printf_float+0x164>
 800d308:	2306      	movs	r3, #6
 800d30a:	6063      	str	r3, [r4, #4]
 800d30c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d310:	2300      	movs	r3, #0
 800d312:	6022      	str	r2, [r4, #0]
 800d314:	9303      	str	r3, [sp, #12]
 800d316:	ab0a      	add	r3, sp, #40	@ 0x28
 800d318:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d31c:	ab09      	add	r3, sp, #36	@ 0x24
 800d31e:	9300      	str	r3, [sp, #0]
 800d320:	6861      	ldr	r1, [r4, #4]
 800d322:	ec49 8b10 	vmov	d0, r8, r9
 800d326:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d32a:	4628      	mov	r0, r5
 800d32c:	f7ff fed6 	bl	800d0dc <__cvt>
 800d330:	9b06      	ldr	r3, [sp, #24]
 800d332:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d334:	2b47      	cmp	r3, #71	@ 0x47
 800d336:	4680      	mov	r8, r0
 800d338:	d129      	bne.n	800d38e <_printf_float+0x172>
 800d33a:	1cc8      	adds	r0, r1, #3
 800d33c:	db02      	blt.n	800d344 <_printf_float+0x128>
 800d33e:	6863      	ldr	r3, [r4, #4]
 800d340:	4299      	cmp	r1, r3
 800d342:	dd41      	ble.n	800d3c8 <_printf_float+0x1ac>
 800d344:	f1aa 0a02 	sub.w	sl, sl, #2
 800d348:	fa5f fa8a 	uxtb.w	sl, sl
 800d34c:	3901      	subs	r1, #1
 800d34e:	4652      	mov	r2, sl
 800d350:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d354:	9109      	str	r1, [sp, #36]	@ 0x24
 800d356:	f7ff ff26 	bl	800d1a6 <__exponent>
 800d35a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d35c:	1813      	adds	r3, r2, r0
 800d35e:	2a01      	cmp	r2, #1
 800d360:	4681      	mov	r9, r0
 800d362:	6123      	str	r3, [r4, #16]
 800d364:	dc02      	bgt.n	800d36c <_printf_float+0x150>
 800d366:	6822      	ldr	r2, [r4, #0]
 800d368:	07d2      	lsls	r2, r2, #31
 800d36a:	d501      	bpl.n	800d370 <_printf_float+0x154>
 800d36c:	3301      	adds	r3, #1
 800d36e:	6123      	str	r3, [r4, #16]
 800d370:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d374:	2b00      	cmp	r3, #0
 800d376:	d0a2      	beq.n	800d2be <_printf_float+0xa2>
 800d378:	232d      	movs	r3, #45	@ 0x2d
 800d37a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d37e:	e79e      	b.n	800d2be <_printf_float+0xa2>
 800d380:	9a06      	ldr	r2, [sp, #24]
 800d382:	2a47      	cmp	r2, #71	@ 0x47
 800d384:	d1c2      	bne.n	800d30c <_printf_float+0xf0>
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1c0      	bne.n	800d30c <_printf_float+0xf0>
 800d38a:	2301      	movs	r3, #1
 800d38c:	e7bd      	b.n	800d30a <_printf_float+0xee>
 800d38e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d392:	d9db      	bls.n	800d34c <_printf_float+0x130>
 800d394:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d398:	d118      	bne.n	800d3cc <_printf_float+0x1b0>
 800d39a:	2900      	cmp	r1, #0
 800d39c:	6863      	ldr	r3, [r4, #4]
 800d39e:	dd0b      	ble.n	800d3b8 <_printf_float+0x19c>
 800d3a0:	6121      	str	r1, [r4, #16]
 800d3a2:	b913      	cbnz	r3, 800d3aa <_printf_float+0x18e>
 800d3a4:	6822      	ldr	r2, [r4, #0]
 800d3a6:	07d0      	lsls	r0, r2, #31
 800d3a8:	d502      	bpl.n	800d3b0 <_printf_float+0x194>
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	440b      	add	r3, r1
 800d3ae:	6123      	str	r3, [r4, #16]
 800d3b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d3b2:	f04f 0900 	mov.w	r9, #0
 800d3b6:	e7db      	b.n	800d370 <_printf_float+0x154>
 800d3b8:	b913      	cbnz	r3, 800d3c0 <_printf_float+0x1a4>
 800d3ba:	6822      	ldr	r2, [r4, #0]
 800d3bc:	07d2      	lsls	r2, r2, #31
 800d3be:	d501      	bpl.n	800d3c4 <_printf_float+0x1a8>
 800d3c0:	3302      	adds	r3, #2
 800d3c2:	e7f4      	b.n	800d3ae <_printf_float+0x192>
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	e7f2      	b.n	800d3ae <_printf_float+0x192>
 800d3c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d3cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3ce:	4299      	cmp	r1, r3
 800d3d0:	db05      	blt.n	800d3de <_printf_float+0x1c2>
 800d3d2:	6823      	ldr	r3, [r4, #0]
 800d3d4:	6121      	str	r1, [r4, #16]
 800d3d6:	07d8      	lsls	r0, r3, #31
 800d3d8:	d5ea      	bpl.n	800d3b0 <_printf_float+0x194>
 800d3da:	1c4b      	adds	r3, r1, #1
 800d3dc:	e7e7      	b.n	800d3ae <_printf_float+0x192>
 800d3de:	2900      	cmp	r1, #0
 800d3e0:	bfd4      	ite	le
 800d3e2:	f1c1 0202 	rsble	r2, r1, #2
 800d3e6:	2201      	movgt	r2, #1
 800d3e8:	4413      	add	r3, r2
 800d3ea:	e7e0      	b.n	800d3ae <_printf_float+0x192>
 800d3ec:	6823      	ldr	r3, [r4, #0]
 800d3ee:	055a      	lsls	r2, r3, #21
 800d3f0:	d407      	bmi.n	800d402 <_printf_float+0x1e6>
 800d3f2:	6923      	ldr	r3, [r4, #16]
 800d3f4:	4642      	mov	r2, r8
 800d3f6:	4631      	mov	r1, r6
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	47b8      	blx	r7
 800d3fc:	3001      	adds	r0, #1
 800d3fe:	d12b      	bne.n	800d458 <_printf_float+0x23c>
 800d400:	e767      	b.n	800d2d2 <_printf_float+0xb6>
 800d402:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d406:	f240 80dd 	bls.w	800d5c4 <_printf_float+0x3a8>
 800d40a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d40e:	2200      	movs	r2, #0
 800d410:	2300      	movs	r3, #0
 800d412:	f7f3 fb79 	bl	8000b08 <__aeabi_dcmpeq>
 800d416:	2800      	cmp	r0, #0
 800d418:	d033      	beq.n	800d482 <_printf_float+0x266>
 800d41a:	4a37      	ldr	r2, [pc, #220]	@ (800d4f8 <_printf_float+0x2dc>)
 800d41c:	2301      	movs	r3, #1
 800d41e:	4631      	mov	r1, r6
 800d420:	4628      	mov	r0, r5
 800d422:	47b8      	blx	r7
 800d424:	3001      	adds	r0, #1
 800d426:	f43f af54 	beq.w	800d2d2 <_printf_float+0xb6>
 800d42a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d42e:	4543      	cmp	r3, r8
 800d430:	db02      	blt.n	800d438 <_printf_float+0x21c>
 800d432:	6823      	ldr	r3, [r4, #0]
 800d434:	07d8      	lsls	r0, r3, #31
 800d436:	d50f      	bpl.n	800d458 <_printf_float+0x23c>
 800d438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d43c:	4631      	mov	r1, r6
 800d43e:	4628      	mov	r0, r5
 800d440:	47b8      	blx	r7
 800d442:	3001      	adds	r0, #1
 800d444:	f43f af45 	beq.w	800d2d2 <_printf_float+0xb6>
 800d448:	f04f 0900 	mov.w	r9, #0
 800d44c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d450:	f104 0a1a 	add.w	sl, r4, #26
 800d454:	45c8      	cmp	r8, r9
 800d456:	dc09      	bgt.n	800d46c <_printf_float+0x250>
 800d458:	6823      	ldr	r3, [r4, #0]
 800d45a:	079b      	lsls	r3, r3, #30
 800d45c:	f100 8103 	bmi.w	800d666 <_printf_float+0x44a>
 800d460:	68e0      	ldr	r0, [r4, #12]
 800d462:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d464:	4298      	cmp	r0, r3
 800d466:	bfb8      	it	lt
 800d468:	4618      	movlt	r0, r3
 800d46a:	e734      	b.n	800d2d6 <_printf_float+0xba>
 800d46c:	2301      	movs	r3, #1
 800d46e:	4652      	mov	r2, sl
 800d470:	4631      	mov	r1, r6
 800d472:	4628      	mov	r0, r5
 800d474:	47b8      	blx	r7
 800d476:	3001      	adds	r0, #1
 800d478:	f43f af2b 	beq.w	800d2d2 <_printf_float+0xb6>
 800d47c:	f109 0901 	add.w	r9, r9, #1
 800d480:	e7e8      	b.n	800d454 <_printf_float+0x238>
 800d482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d484:	2b00      	cmp	r3, #0
 800d486:	dc39      	bgt.n	800d4fc <_printf_float+0x2e0>
 800d488:	4a1b      	ldr	r2, [pc, #108]	@ (800d4f8 <_printf_float+0x2dc>)
 800d48a:	2301      	movs	r3, #1
 800d48c:	4631      	mov	r1, r6
 800d48e:	4628      	mov	r0, r5
 800d490:	47b8      	blx	r7
 800d492:	3001      	adds	r0, #1
 800d494:	f43f af1d 	beq.w	800d2d2 <_printf_float+0xb6>
 800d498:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d49c:	ea59 0303 	orrs.w	r3, r9, r3
 800d4a0:	d102      	bne.n	800d4a8 <_printf_float+0x28c>
 800d4a2:	6823      	ldr	r3, [r4, #0]
 800d4a4:	07d9      	lsls	r1, r3, #31
 800d4a6:	d5d7      	bpl.n	800d458 <_printf_float+0x23c>
 800d4a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4ac:	4631      	mov	r1, r6
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	47b8      	blx	r7
 800d4b2:	3001      	adds	r0, #1
 800d4b4:	f43f af0d 	beq.w	800d2d2 <_printf_float+0xb6>
 800d4b8:	f04f 0a00 	mov.w	sl, #0
 800d4bc:	f104 0b1a 	add.w	fp, r4, #26
 800d4c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4c2:	425b      	negs	r3, r3
 800d4c4:	4553      	cmp	r3, sl
 800d4c6:	dc01      	bgt.n	800d4cc <_printf_float+0x2b0>
 800d4c8:	464b      	mov	r3, r9
 800d4ca:	e793      	b.n	800d3f4 <_printf_float+0x1d8>
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	465a      	mov	r2, fp
 800d4d0:	4631      	mov	r1, r6
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	47b8      	blx	r7
 800d4d6:	3001      	adds	r0, #1
 800d4d8:	f43f aefb 	beq.w	800d2d2 <_printf_float+0xb6>
 800d4dc:	f10a 0a01 	add.w	sl, sl, #1
 800d4e0:	e7ee      	b.n	800d4c0 <_printf_float+0x2a4>
 800d4e2:	bf00      	nop
 800d4e4:	7fefffff 	.word	0x7fefffff
 800d4e8:	080107b2 	.word	0x080107b2
 800d4ec:	080107ae 	.word	0x080107ae
 800d4f0:	080107ba 	.word	0x080107ba
 800d4f4:	080107b6 	.word	0x080107b6
 800d4f8:	080107be 	.word	0x080107be
 800d4fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d4fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d502:	4553      	cmp	r3, sl
 800d504:	bfa8      	it	ge
 800d506:	4653      	movge	r3, sl
 800d508:	2b00      	cmp	r3, #0
 800d50a:	4699      	mov	r9, r3
 800d50c:	dc36      	bgt.n	800d57c <_printf_float+0x360>
 800d50e:	f04f 0b00 	mov.w	fp, #0
 800d512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d516:	f104 021a 	add.w	r2, r4, #26
 800d51a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d51c:	9306      	str	r3, [sp, #24]
 800d51e:	eba3 0309 	sub.w	r3, r3, r9
 800d522:	455b      	cmp	r3, fp
 800d524:	dc31      	bgt.n	800d58a <_printf_float+0x36e>
 800d526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d528:	459a      	cmp	sl, r3
 800d52a:	dc3a      	bgt.n	800d5a2 <_printf_float+0x386>
 800d52c:	6823      	ldr	r3, [r4, #0]
 800d52e:	07da      	lsls	r2, r3, #31
 800d530:	d437      	bmi.n	800d5a2 <_printf_float+0x386>
 800d532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d534:	ebaa 0903 	sub.w	r9, sl, r3
 800d538:	9b06      	ldr	r3, [sp, #24]
 800d53a:	ebaa 0303 	sub.w	r3, sl, r3
 800d53e:	4599      	cmp	r9, r3
 800d540:	bfa8      	it	ge
 800d542:	4699      	movge	r9, r3
 800d544:	f1b9 0f00 	cmp.w	r9, #0
 800d548:	dc33      	bgt.n	800d5b2 <_printf_float+0x396>
 800d54a:	f04f 0800 	mov.w	r8, #0
 800d54e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d552:	f104 0b1a 	add.w	fp, r4, #26
 800d556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d558:	ebaa 0303 	sub.w	r3, sl, r3
 800d55c:	eba3 0309 	sub.w	r3, r3, r9
 800d560:	4543      	cmp	r3, r8
 800d562:	f77f af79 	ble.w	800d458 <_printf_float+0x23c>
 800d566:	2301      	movs	r3, #1
 800d568:	465a      	mov	r2, fp
 800d56a:	4631      	mov	r1, r6
 800d56c:	4628      	mov	r0, r5
 800d56e:	47b8      	blx	r7
 800d570:	3001      	adds	r0, #1
 800d572:	f43f aeae 	beq.w	800d2d2 <_printf_float+0xb6>
 800d576:	f108 0801 	add.w	r8, r8, #1
 800d57a:	e7ec      	b.n	800d556 <_printf_float+0x33a>
 800d57c:	4642      	mov	r2, r8
 800d57e:	4631      	mov	r1, r6
 800d580:	4628      	mov	r0, r5
 800d582:	47b8      	blx	r7
 800d584:	3001      	adds	r0, #1
 800d586:	d1c2      	bne.n	800d50e <_printf_float+0x2f2>
 800d588:	e6a3      	b.n	800d2d2 <_printf_float+0xb6>
 800d58a:	2301      	movs	r3, #1
 800d58c:	4631      	mov	r1, r6
 800d58e:	4628      	mov	r0, r5
 800d590:	9206      	str	r2, [sp, #24]
 800d592:	47b8      	blx	r7
 800d594:	3001      	adds	r0, #1
 800d596:	f43f ae9c 	beq.w	800d2d2 <_printf_float+0xb6>
 800d59a:	9a06      	ldr	r2, [sp, #24]
 800d59c:	f10b 0b01 	add.w	fp, fp, #1
 800d5a0:	e7bb      	b.n	800d51a <_printf_float+0x2fe>
 800d5a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5a6:	4631      	mov	r1, r6
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	47b8      	blx	r7
 800d5ac:	3001      	adds	r0, #1
 800d5ae:	d1c0      	bne.n	800d532 <_printf_float+0x316>
 800d5b0:	e68f      	b.n	800d2d2 <_printf_float+0xb6>
 800d5b2:	9a06      	ldr	r2, [sp, #24]
 800d5b4:	464b      	mov	r3, r9
 800d5b6:	4442      	add	r2, r8
 800d5b8:	4631      	mov	r1, r6
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	47b8      	blx	r7
 800d5be:	3001      	adds	r0, #1
 800d5c0:	d1c3      	bne.n	800d54a <_printf_float+0x32e>
 800d5c2:	e686      	b.n	800d2d2 <_printf_float+0xb6>
 800d5c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d5c8:	f1ba 0f01 	cmp.w	sl, #1
 800d5cc:	dc01      	bgt.n	800d5d2 <_printf_float+0x3b6>
 800d5ce:	07db      	lsls	r3, r3, #31
 800d5d0:	d536      	bpl.n	800d640 <_printf_float+0x424>
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	4642      	mov	r2, r8
 800d5d6:	4631      	mov	r1, r6
 800d5d8:	4628      	mov	r0, r5
 800d5da:	47b8      	blx	r7
 800d5dc:	3001      	adds	r0, #1
 800d5de:	f43f ae78 	beq.w	800d2d2 <_printf_float+0xb6>
 800d5e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5e6:	4631      	mov	r1, r6
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	47b8      	blx	r7
 800d5ec:	3001      	adds	r0, #1
 800d5ee:	f43f ae70 	beq.w	800d2d2 <_printf_float+0xb6>
 800d5f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5fe:	f7f3 fa83 	bl	8000b08 <__aeabi_dcmpeq>
 800d602:	b9c0      	cbnz	r0, 800d636 <_printf_float+0x41a>
 800d604:	4653      	mov	r3, sl
 800d606:	f108 0201 	add.w	r2, r8, #1
 800d60a:	4631      	mov	r1, r6
 800d60c:	4628      	mov	r0, r5
 800d60e:	47b8      	blx	r7
 800d610:	3001      	adds	r0, #1
 800d612:	d10c      	bne.n	800d62e <_printf_float+0x412>
 800d614:	e65d      	b.n	800d2d2 <_printf_float+0xb6>
 800d616:	2301      	movs	r3, #1
 800d618:	465a      	mov	r2, fp
 800d61a:	4631      	mov	r1, r6
 800d61c:	4628      	mov	r0, r5
 800d61e:	47b8      	blx	r7
 800d620:	3001      	adds	r0, #1
 800d622:	f43f ae56 	beq.w	800d2d2 <_printf_float+0xb6>
 800d626:	f108 0801 	add.w	r8, r8, #1
 800d62a:	45d0      	cmp	r8, sl
 800d62c:	dbf3      	blt.n	800d616 <_printf_float+0x3fa>
 800d62e:	464b      	mov	r3, r9
 800d630:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d634:	e6df      	b.n	800d3f6 <_printf_float+0x1da>
 800d636:	f04f 0800 	mov.w	r8, #0
 800d63a:	f104 0b1a 	add.w	fp, r4, #26
 800d63e:	e7f4      	b.n	800d62a <_printf_float+0x40e>
 800d640:	2301      	movs	r3, #1
 800d642:	4642      	mov	r2, r8
 800d644:	e7e1      	b.n	800d60a <_printf_float+0x3ee>
 800d646:	2301      	movs	r3, #1
 800d648:	464a      	mov	r2, r9
 800d64a:	4631      	mov	r1, r6
 800d64c:	4628      	mov	r0, r5
 800d64e:	47b8      	blx	r7
 800d650:	3001      	adds	r0, #1
 800d652:	f43f ae3e 	beq.w	800d2d2 <_printf_float+0xb6>
 800d656:	f108 0801 	add.w	r8, r8, #1
 800d65a:	68e3      	ldr	r3, [r4, #12]
 800d65c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d65e:	1a5b      	subs	r3, r3, r1
 800d660:	4543      	cmp	r3, r8
 800d662:	dcf0      	bgt.n	800d646 <_printf_float+0x42a>
 800d664:	e6fc      	b.n	800d460 <_printf_float+0x244>
 800d666:	f04f 0800 	mov.w	r8, #0
 800d66a:	f104 0919 	add.w	r9, r4, #25
 800d66e:	e7f4      	b.n	800d65a <_printf_float+0x43e>

0800d670 <_printf_common>:
 800d670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d674:	4616      	mov	r6, r2
 800d676:	4698      	mov	r8, r3
 800d678:	688a      	ldr	r2, [r1, #8]
 800d67a:	690b      	ldr	r3, [r1, #16]
 800d67c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d680:	4293      	cmp	r3, r2
 800d682:	bfb8      	it	lt
 800d684:	4613      	movlt	r3, r2
 800d686:	6033      	str	r3, [r6, #0]
 800d688:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d68c:	4607      	mov	r7, r0
 800d68e:	460c      	mov	r4, r1
 800d690:	b10a      	cbz	r2, 800d696 <_printf_common+0x26>
 800d692:	3301      	adds	r3, #1
 800d694:	6033      	str	r3, [r6, #0]
 800d696:	6823      	ldr	r3, [r4, #0]
 800d698:	0699      	lsls	r1, r3, #26
 800d69a:	bf42      	ittt	mi
 800d69c:	6833      	ldrmi	r3, [r6, #0]
 800d69e:	3302      	addmi	r3, #2
 800d6a0:	6033      	strmi	r3, [r6, #0]
 800d6a2:	6825      	ldr	r5, [r4, #0]
 800d6a4:	f015 0506 	ands.w	r5, r5, #6
 800d6a8:	d106      	bne.n	800d6b8 <_printf_common+0x48>
 800d6aa:	f104 0a19 	add.w	sl, r4, #25
 800d6ae:	68e3      	ldr	r3, [r4, #12]
 800d6b0:	6832      	ldr	r2, [r6, #0]
 800d6b2:	1a9b      	subs	r3, r3, r2
 800d6b4:	42ab      	cmp	r3, r5
 800d6b6:	dc26      	bgt.n	800d706 <_printf_common+0x96>
 800d6b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d6bc:	6822      	ldr	r2, [r4, #0]
 800d6be:	3b00      	subs	r3, #0
 800d6c0:	bf18      	it	ne
 800d6c2:	2301      	movne	r3, #1
 800d6c4:	0692      	lsls	r2, r2, #26
 800d6c6:	d42b      	bmi.n	800d720 <_printf_common+0xb0>
 800d6c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d6cc:	4641      	mov	r1, r8
 800d6ce:	4638      	mov	r0, r7
 800d6d0:	47c8      	blx	r9
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	d01e      	beq.n	800d714 <_printf_common+0xa4>
 800d6d6:	6823      	ldr	r3, [r4, #0]
 800d6d8:	6922      	ldr	r2, [r4, #16]
 800d6da:	f003 0306 	and.w	r3, r3, #6
 800d6de:	2b04      	cmp	r3, #4
 800d6e0:	bf02      	ittt	eq
 800d6e2:	68e5      	ldreq	r5, [r4, #12]
 800d6e4:	6833      	ldreq	r3, [r6, #0]
 800d6e6:	1aed      	subeq	r5, r5, r3
 800d6e8:	68a3      	ldr	r3, [r4, #8]
 800d6ea:	bf0c      	ite	eq
 800d6ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6f0:	2500      	movne	r5, #0
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	bfc4      	itt	gt
 800d6f6:	1a9b      	subgt	r3, r3, r2
 800d6f8:	18ed      	addgt	r5, r5, r3
 800d6fa:	2600      	movs	r6, #0
 800d6fc:	341a      	adds	r4, #26
 800d6fe:	42b5      	cmp	r5, r6
 800d700:	d11a      	bne.n	800d738 <_printf_common+0xc8>
 800d702:	2000      	movs	r0, #0
 800d704:	e008      	b.n	800d718 <_printf_common+0xa8>
 800d706:	2301      	movs	r3, #1
 800d708:	4652      	mov	r2, sl
 800d70a:	4641      	mov	r1, r8
 800d70c:	4638      	mov	r0, r7
 800d70e:	47c8      	blx	r9
 800d710:	3001      	adds	r0, #1
 800d712:	d103      	bne.n	800d71c <_printf_common+0xac>
 800d714:	f04f 30ff 	mov.w	r0, #4294967295
 800d718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d71c:	3501      	adds	r5, #1
 800d71e:	e7c6      	b.n	800d6ae <_printf_common+0x3e>
 800d720:	18e1      	adds	r1, r4, r3
 800d722:	1c5a      	adds	r2, r3, #1
 800d724:	2030      	movs	r0, #48	@ 0x30
 800d726:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d72a:	4422      	add	r2, r4
 800d72c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d730:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d734:	3302      	adds	r3, #2
 800d736:	e7c7      	b.n	800d6c8 <_printf_common+0x58>
 800d738:	2301      	movs	r3, #1
 800d73a:	4622      	mov	r2, r4
 800d73c:	4641      	mov	r1, r8
 800d73e:	4638      	mov	r0, r7
 800d740:	47c8      	blx	r9
 800d742:	3001      	adds	r0, #1
 800d744:	d0e6      	beq.n	800d714 <_printf_common+0xa4>
 800d746:	3601      	adds	r6, #1
 800d748:	e7d9      	b.n	800d6fe <_printf_common+0x8e>
	...

0800d74c <_printf_i>:
 800d74c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d750:	7e0f      	ldrb	r7, [r1, #24]
 800d752:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d754:	2f78      	cmp	r7, #120	@ 0x78
 800d756:	4691      	mov	r9, r2
 800d758:	4680      	mov	r8, r0
 800d75a:	460c      	mov	r4, r1
 800d75c:	469a      	mov	sl, r3
 800d75e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d762:	d807      	bhi.n	800d774 <_printf_i+0x28>
 800d764:	2f62      	cmp	r7, #98	@ 0x62
 800d766:	d80a      	bhi.n	800d77e <_printf_i+0x32>
 800d768:	2f00      	cmp	r7, #0
 800d76a:	f000 80d1 	beq.w	800d910 <_printf_i+0x1c4>
 800d76e:	2f58      	cmp	r7, #88	@ 0x58
 800d770:	f000 80b8 	beq.w	800d8e4 <_printf_i+0x198>
 800d774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d778:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d77c:	e03a      	b.n	800d7f4 <_printf_i+0xa8>
 800d77e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d782:	2b15      	cmp	r3, #21
 800d784:	d8f6      	bhi.n	800d774 <_printf_i+0x28>
 800d786:	a101      	add	r1, pc, #4	@ (adr r1, 800d78c <_printf_i+0x40>)
 800d788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d78c:	0800d7e5 	.word	0x0800d7e5
 800d790:	0800d7f9 	.word	0x0800d7f9
 800d794:	0800d775 	.word	0x0800d775
 800d798:	0800d775 	.word	0x0800d775
 800d79c:	0800d775 	.word	0x0800d775
 800d7a0:	0800d775 	.word	0x0800d775
 800d7a4:	0800d7f9 	.word	0x0800d7f9
 800d7a8:	0800d775 	.word	0x0800d775
 800d7ac:	0800d775 	.word	0x0800d775
 800d7b0:	0800d775 	.word	0x0800d775
 800d7b4:	0800d775 	.word	0x0800d775
 800d7b8:	0800d8f7 	.word	0x0800d8f7
 800d7bc:	0800d823 	.word	0x0800d823
 800d7c0:	0800d8b1 	.word	0x0800d8b1
 800d7c4:	0800d775 	.word	0x0800d775
 800d7c8:	0800d775 	.word	0x0800d775
 800d7cc:	0800d919 	.word	0x0800d919
 800d7d0:	0800d775 	.word	0x0800d775
 800d7d4:	0800d823 	.word	0x0800d823
 800d7d8:	0800d775 	.word	0x0800d775
 800d7dc:	0800d775 	.word	0x0800d775
 800d7e0:	0800d8b9 	.word	0x0800d8b9
 800d7e4:	6833      	ldr	r3, [r6, #0]
 800d7e6:	1d1a      	adds	r2, r3, #4
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	6032      	str	r2, [r6, #0]
 800d7ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	e09c      	b.n	800d932 <_printf_i+0x1e6>
 800d7f8:	6833      	ldr	r3, [r6, #0]
 800d7fa:	6820      	ldr	r0, [r4, #0]
 800d7fc:	1d19      	adds	r1, r3, #4
 800d7fe:	6031      	str	r1, [r6, #0]
 800d800:	0606      	lsls	r6, r0, #24
 800d802:	d501      	bpl.n	800d808 <_printf_i+0xbc>
 800d804:	681d      	ldr	r5, [r3, #0]
 800d806:	e003      	b.n	800d810 <_printf_i+0xc4>
 800d808:	0645      	lsls	r5, r0, #25
 800d80a:	d5fb      	bpl.n	800d804 <_printf_i+0xb8>
 800d80c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d810:	2d00      	cmp	r5, #0
 800d812:	da03      	bge.n	800d81c <_printf_i+0xd0>
 800d814:	232d      	movs	r3, #45	@ 0x2d
 800d816:	426d      	negs	r5, r5
 800d818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d81c:	4858      	ldr	r0, [pc, #352]	@ (800d980 <_printf_i+0x234>)
 800d81e:	230a      	movs	r3, #10
 800d820:	e011      	b.n	800d846 <_printf_i+0xfa>
 800d822:	6821      	ldr	r1, [r4, #0]
 800d824:	6833      	ldr	r3, [r6, #0]
 800d826:	0608      	lsls	r0, r1, #24
 800d828:	f853 5b04 	ldr.w	r5, [r3], #4
 800d82c:	d402      	bmi.n	800d834 <_printf_i+0xe8>
 800d82e:	0649      	lsls	r1, r1, #25
 800d830:	bf48      	it	mi
 800d832:	b2ad      	uxthmi	r5, r5
 800d834:	2f6f      	cmp	r7, #111	@ 0x6f
 800d836:	4852      	ldr	r0, [pc, #328]	@ (800d980 <_printf_i+0x234>)
 800d838:	6033      	str	r3, [r6, #0]
 800d83a:	bf14      	ite	ne
 800d83c:	230a      	movne	r3, #10
 800d83e:	2308      	moveq	r3, #8
 800d840:	2100      	movs	r1, #0
 800d842:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d846:	6866      	ldr	r6, [r4, #4]
 800d848:	60a6      	str	r6, [r4, #8]
 800d84a:	2e00      	cmp	r6, #0
 800d84c:	db05      	blt.n	800d85a <_printf_i+0x10e>
 800d84e:	6821      	ldr	r1, [r4, #0]
 800d850:	432e      	orrs	r6, r5
 800d852:	f021 0104 	bic.w	r1, r1, #4
 800d856:	6021      	str	r1, [r4, #0]
 800d858:	d04b      	beq.n	800d8f2 <_printf_i+0x1a6>
 800d85a:	4616      	mov	r6, r2
 800d85c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d860:	fb03 5711 	mls	r7, r3, r1, r5
 800d864:	5dc7      	ldrb	r7, [r0, r7]
 800d866:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d86a:	462f      	mov	r7, r5
 800d86c:	42bb      	cmp	r3, r7
 800d86e:	460d      	mov	r5, r1
 800d870:	d9f4      	bls.n	800d85c <_printf_i+0x110>
 800d872:	2b08      	cmp	r3, #8
 800d874:	d10b      	bne.n	800d88e <_printf_i+0x142>
 800d876:	6823      	ldr	r3, [r4, #0]
 800d878:	07df      	lsls	r7, r3, #31
 800d87a:	d508      	bpl.n	800d88e <_printf_i+0x142>
 800d87c:	6923      	ldr	r3, [r4, #16]
 800d87e:	6861      	ldr	r1, [r4, #4]
 800d880:	4299      	cmp	r1, r3
 800d882:	bfde      	ittt	le
 800d884:	2330      	movle	r3, #48	@ 0x30
 800d886:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d88a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d88e:	1b92      	subs	r2, r2, r6
 800d890:	6122      	str	r2, [r4, #16]
 800d892:	f8cd a000 	str.w	sl, [sp]
 800d896:	464b      	mov	r3, r9
 800d898:	aa03      	add	r2, sp, #12
 800d89a:	4621      	mov	r1, r4
 800d89c:	4640      	mov	r0, r8
 800d89e:	f7ff fee7 	bl	800d670 <_printf_common>
 800d8a2:	3001      	adds	r0, #1
 800d8a4:	d14a      	bne.n	800d93c <_printf_i+0x1f0>
 800d8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8aa:	b004      	add	sp, #16
 800d8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8b0:	6823      	ldr	r3, [r4, #0]
 800d8b2:	f043 0320 	orr.w	r3, r3, #32
 800d8b6:	6023      	str	r3, [r4, #0]
 800d8b8:	4832      	ldr	r0, [pc, #200]	@ (800d984 <_printf_i+0x238>)
 800d8ba:	2778      	movs	r7, #120	@ 0x78
 800d8bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d8c0:	6823      	ldr	r3, [r4, #0]
 800d8c2:	6831      	ldr	r1, [r6, #0]
 800d8c4:	061f      	lsls	r7, r3, #24
 800d8c6:	f851 5b04 	ldr.w	r5, [r1], #4
 800d8ca:	d402      	bmi.n	800d8d2 <_printf_i+0x186>
 800d8cc:	065f      	lsls	r7, r3, #25
 800d8ce:	bf48      	it	mi
 800d8d0:	b2ad      	uxthmi	r5, r5
 800d8d2:	6031      	str	r1, [r6, #0]
 800d8d4:	07d9      	lsls	r1, r3, #31
 800d8d6:	bf44      	itt	mi
 800d8d8:	f043 0320 	orrmi.w	r3, r3, #32
 800d8dc:	6023      	strmi	r3, [r4, #0]
 800d8de:	b11d      	cbz	r5, 800d8e8 <_printf_i+0x19c>
 800d8e0:	2310      	movs	r3, #16
 800d8e2:	e7ad      	b.n	800d840 <_printf_i+0xf4>
 800d8e4:	4826      	ldr	r0, [pc, #152]	@ (800d980 <_printf_i+0x234>)
 800d8e6:	e7e9      	b.n	800d8bc <_printf_i+0x170>
 800d8e8:	6823      	ldr	r3, [r4, #0]
 800d8ea:	f023 0320 	bic.w	r3, r3, #32
 800d8ee:	6023      	str	r3, [r4, #0]
 800d8f0:	e7f6      	b.n	800d8e0 <_printf_i+0x194>
 800d8f2:	4616      	mov	r6, r2
 800d8f4:	e7bd      	b.n	800d872 <_printf_i+0x126>
 800d8f6:	6833      	ldr	r3, [r6, #0]
 800d8f8:	6825      	ldr	r5, [r4, #0]
 800d8fa:	6961      	ldr	r1, [r4, #20]
 800d8fc:	1d18      	adds	r0, r3, #4
 800d8fe:	6030      	str	r0, [r6, #0]
 800d900:	062e      	lsls	r6, r5, #24
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	d501      	bpl.n	800d90a <_printf_i+0x1be>
 800d906:	6019      	str	r1, [r3, #0]
 800d908:	e002      	b.n	800d910 <_printf_i+0x1c4>
 800d90a:	0668      	lsls	r0, r5, #25
 800d90c:	d5fb      	bpl.n	800d906 <_printf_i+0x1ba>
 800d90e:	8019      	strh	r1, [r3, #0]
 800d910:	2300      	movs	r3, #0
 800d912:	6123      	str	r3, [r4, #16]
 800d914:	4616      	mov	r6, r2
 800d916:	e7bc      	b.n	800d892 <_printf_i+0x146>
 800d918:	6833      	ldr	r3, [r6, #0]
 800d91a:	1d1a      	adds	r2, r3, #4
 800d91c:	6032      	str	r2, [r6, #0]
 800d91e:	681e      	ldr	r6, [r3, #0]
 800d920:	6862      	ldr	r2, [r4, #4]
 800d922:	2100      	movs	r1, #0
 800d924:	4630      	mov	r0, r6
 800d926:	f7f2 fc73 	bl	8000210 <memchr>
 800d92a:	b108      	cbz	r0, 800d930 <_printf_i+0x1e4>
 800d92c:	1b80      	subs	r0, r0, r6
 800d92e:	6060      	str	r0, [r4, #4]
 800d930:	6863      	ldr	r3, [r4, #4]
 800d932:	6123      	str	r3, [r4, #16]
 800d934:	2300      	movs	r3, #0
 800d936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d93a:	e7aa      	b.n	800d892 <_printf_i+0x146>
 800d93c:	6923      	ldr	r3, [r4, #16]
 800d93e:	4632      	mov	r2, r6
 800d940:	4649      	mov	r1, r9
 800d942:	4640      	mov	r0, r8
 800d944:	47d0      	blx	sl
 800d946:	3001      	adds	r0, #1
 800d948:	d0ad      	beq.n	800d8a6 <_printf_i+0x15a>
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	079b      	lsls	r3, r3, #30
 800d94e:	d413      	bmi.n	800d978 <_printf_i+0x22c>
 800d950:	68e0      	ldr	r0, [r4, #12]
 800d952:	9b03      	ldr	r3, [sp, #12]
 800d954:	4298      	cmp	r0, r3
 800d956:	bfb8      	it	lt
 800d958:	4618      	movlt	r0, r3
 800d95a:	e7a6      	b.n	800d8aa <_printf_i+0x15e>
 800d95c:	2301      	movs	r3, #1
 800d95e:	4632      	mov	r2, r6
 800d960:	4649      	mov	r1, r9
 800d962:	4640      	mov	r0, r8
 800d964:	47d0      	blx	sl
 800d966:	3001      	adds	r0, #1
 800d968:	d09d      	beq.n	800d8a6 <_printf_i+0x15a>
 800d96a:	3501      	adds	r5, #1
 800d96c:	68e3      	ldr	r3, [r4, #12]
 800d96e:	9903      	ldr	r1, [sp, #12]
 800d970:	1a5b      	subs	r3, r3, r1
 800d972:	42ab      	cmp	r3, r5
 800d974:	dcf2      	bgt.n	800d95c <_printf_i+0x210>
 800d976:	e7eb      	b.n	800d950 <_printf_i+0x204>
 800d978:	2500      	movs	r5, #0
 800d97a:	f104 0619 	add.w	r6, r4, #25
 800d97e:	e7f5      	b.n	800d96c <_printf_i+0x220>
 800d980:	080107c0 	.word	0x080107c0
 800d984:	080107d1 	.word	0x080107d1

0800d988 <std>:
 800d988:	2300      	movs	r3, #0
 800d98a:	b510      	push	{r4, lr}
 800d98c:	4604      	mov	r4, r0
 800d98e:	e9c0 3300 	strd	r3, r3, [r0]
 800d992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d996:	6083      	str	r3, [r0, #8]
 800d998:	8181      	strh	r1, [r0, #12]
 800d99a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d99c:	81c2      	strh	r2, [r0, #14]
 800d99e:	6183      	str	r3, [r0, #24]
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	2208      	movs	r2, #8
 800d9a4:	305c      	adds	r0, #92	@ 0x5c
 800d9a6:	f000 f8f4 	bl	800db92 <memset>
 800d9aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d9e0 <std+0x58>)
 800d9ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800d9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d9e4 <std+0x5c>)
 800d9b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d9b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d9e8 <std+0x60>)
 800d9b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d9b6:	4b0d      	ldr	r3, [pc, #52]	@ (800d9ec <std+0x64>)
 800d9b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800d9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d9f0 <std+0x68>)
 800d9bc:	6224      	str	r4, [r4, #32]
 800d9be:	429c      	cmp	r4, r3
 800d9c0:	d006      	beq.n	800d9d0 <std+0x48>
 800d9c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d9c6:	4294      	cmp	r4, r2
 800d9c8:	d002      	beq.n	800d9d0 <std+0x48>
 800d9ca:	33d0      	adds	r3, #208	@ 0xd0
 800d9cc:	429c      	cmp	r4, r3
 800d9ce:	d105      	bne.n	800d9dc <std+0x54>
 800d9d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9d8:	f000 b9ac 	b.w	800dd34 <__retarget_lock_init_recursive>
 800d9dc:	bd10      	pop	{r4, pc}
 800d9de:	bf00      	nop
 800d9e0:	0800db0d 	.word	0x0800db0d
 800d9e4:	0800db2f 	.word	0x0800db2f
 800d9e8:	0800db67 	.word	0x0800db67
 800d9ec:	0800db8b 	.word	0x0800db8b
 800d9f0:	20000eac 	.word	0x20000eac

0800d9f4 <stdio_exit_handler>:
 800d9f4:	4a02      	ldr	r2, [pc, #8]	@ (800da00 <stdio_exit_handler+0xc>)
 800d9f6:	4903      	ldr	r1, [pc, #12]	@ (800da04 <stdio_exit_handler+0x10>)
 800d9f8:	4803      	ldr	r0, [pc, #12]	@ (800da08 <stdio_exit_handler+0x14>)
 800d9fa:	f000 b869 	b.w	800dad0 <_fwalk_sglue>
 800d9fe:	bf00      	nop
 800da00:	2000000c 	.word	0x2000000c
 800da04:	0800f299 	.word	0x0800f299
 800da08:	2000001c 	.word	0x2000001c

0800da0c <cleanup_stdio>:
 800da0c:	6841      	ldr	r1, [r0, #4]
 800da0e:	4b0c      	ldr	r3, [pc, #48]	@ (800da40 <cleanup_stdio+0x34>)
 800da10:	4299      	cmp	r1, r3
 800da12:	b510      	push	{r4, lr}
 800da14:	4604      	mov	r4, r0
 800da16:	d001      	beq.n	800da1c <cleanup_stdio+0x10>
 800da18:	f001 fc3e 	bl	800f298 <_fflush_r>
 800da1c:	68a1      	ldr	r1, [r4, #8]
 800da1e:	4b09      	ldr	r3, [pc, #36]	@ (800da44 <cleanup_stdio+0x38>)
 800da20:	4299      	cmp	r1, r3
 800da22:	d002      	beq.n	800da2a <cleanup_stdio+0x1e>
 800da24:	4620      	mov	r0, r4
 800da26:	f001 fc37 	bl	800f298 <_fflush_r>
 800da2a:	68e1      	ldr	r1, [r4, #12]
 800da2c:	4b06      	ldr	r3, [pc, #24]	@ (800da48 <cleanup_stdio+0x3c>)
 800da2e:	4299      	cmp	r1, r3
 800da30:	d004      	beq.n	800da3c <cleanup_stdio+0x30>
 800da32:	4620      	mov	r0, r4
 800da34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da38:	f001 bc2e 	b.w	800f298 <_fflush_r>
 800da3c:	bd10      	pop	{r4, pc}
 800da3e:	bf00      	nop
 800da40:	20000eac 	.word	0x20000eac
 800da44:	20000f14 	.word	0x20000f14
 800da48:	20000f7c 	.word	0x20000f7c

0800da4c <global_stdio_init.part.0>:
 800da4c:	b510      	push	{r4, lr}
 800da4e:	4b0b      	ldr	r3, [pc, #44]	@ (800da7c <global_stdio_init.part.0+0x30>)
 800da50:	4c0b      	ldr	r4, [pc, #44]	@ (800da80 <global_stdio_init.part.0+0x34>)
 800da52:	4a0c      	ldr	r2, [pc, #48]	@ (800da84 <global_stdio_init.part.0+0x38>)
 800da54:	601a      	str	r2, [r3, #0]
 800da56:	4620      	mov	r0, r4
 800da58:	2200      	movs	r2, #0
 800da5a:	2104      	movs	r1, #4
 800da5c:	f7ff ff94 	bl	800d988 <std>
 800da60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800da64:	2201      	movs	r2, #1
 800da66:	2109      	movs	r1, #9
 800da68:	f7ff ff8e 	bl	800d988 <std>
 800da6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800da70:	2202      	movs	r2, #2
 800da72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da76:	2112      	movs	r1, #18
 800da78:	f7ff bf86 	b.w	800d988 <std>
 800da7c:	20000fe4 	.word	0x20000fe4
 800da80:	20000eac 	.word	0x20000eac
 800da84:	0800d9f5 	.word	0x0800d9f5

0800da88 <__sfp_lock_acquire>:
 800da88:	4801      	ldr	r0, [pc, #4]	@ (800da90 <__sfp_lock_acquire+0x8>)
 800da8a:	f000 b954 	b.w	800dd36 <__retarget_lock_acquire_recursive>
 800da8e:	bf00      	nop
 800da90:	20000fed 	.word	0x20000fed

0800da94 <__sfp_lock_release>:
 800da94:	4801      	ldr	r0, [pc, #4]	@ (800da9c <__sfp_lock_release+0x8>)
 800da96:	f000 b94f 	b.w	800dd38 <__retarget_lock_release_recursive>
 800da9a:	bf00      	nop
 800da9c:	20000fed 	.word	0x20000fed

0800daa0 <__sinit>:
 800daa0:	b510      	push	{r4, lr}
 800daa2:	4604      	mov	r4, r0
 800daa4:	f7ff fff0 	bl	800da88 <__sfp_lock_acquire>
 800daa8:	6a23      	ldr	r3, [r4, #32]
 800daaa:	b11b      	cbz	r3, 800dab4 <__sinit+0x14>
 800daac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dab0:	f7ff bff0 	b.w	800da94 <__sfp_lock_release>
 800dab4:	4b04      	ldr	r3, [pc, #16]	@ (800dac8 <__sinit+0x28>)
 800dab6:	6223      	str	r3, [r4, #32]
 800dab8:	4b04      	ldr	r3, [pc, #16]	@ (800dacc <__sinit+0x2c>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d1f5      	bne.n	800daac <__sinit+0xc>
 800dac0:	f7ff ffc4 	bl	800da4c <global_stdio_init.part.0>
 800dac4:	e7f2      	b.n	800daac <__sinit+0xc>
 800dac6:	bf00      	nop
 800dac8:	0800da0d 	.word	0x0800da0d
 800dacc:	20000fe4 	.word	0x20000fe4

0800dad0 <_fwalk_sglue>:
 800dad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dad4:	4607      	mov	r7, r0
 800dad6:	4688      	mov	r8, r1
 800dad8:	4614      	mov	r4, r2
 800dada:	2600      	movs	r6, #0
 800dadc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dae0:	f1b9 0901 	subs.w	r9, r9, #1
 800dae4:	d505      	bpl.n	800daf2 <_fwalk_sglue+0x22>
 800dae6:	6824      	ldr	r4, [r4, #0]
 800dae8:	2c00      	cmp	r4, #0
 800daea:	d1f7      	bne.n	800dadc <_fwalk_sglue+0xc>
 800daec:	4630      	mov	r0, r6
 800daee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daf2:	89ab      	ldrh	r3, [r5, #12]
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d907      	bls.n	800db08 <_fwalk_sglue+0x38>
 800daf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dafc:	3301      	adds	r3, #1
 800dafe:	d003      	beq.n	800db08 <_fwalk_sglue+0x38>
 800db00:	4629      	mov	r1, r5
 800db02:	4638      	mov	r0, r7
 800db04:	47c0      	blx	r8
 800db06:	4306      	orrs	r6, r0
 800db08:	3568      	adds	r5, #104	@ 0x68
 800db0a:	e7e9      	b.n	800dae0 <_fwalk_sglue+0x10>

0800db0c <__sread>:
 800db0c:	b510      	push	{r4, lr}
 800db0e:	460c      	mov	r4, r1
 800db10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db14:	f000 f89c 	bl	800dc50 <_read_r>
 800db18:	2800      	cmp	r0, #0
 800db1a:	bfab      	itete	ge
 800db1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db1e:	89a3      	ldrhlt	r3, [r4, #12]
 800db20:	181b      	addge	r3, r3, r0
 800db22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800db26:	bfac      	ite	ge
 800db28:	6563      	strge	r3, [r4, #84]	@ 0x54
 800db2a:	81a3      	strhlt	r3, [r4, #12]
 800db2c:	bd10      	pop	{r4, pc}

0800db2e <__swrite>:
 800db2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db32:	461f      	mov	r7, r3
 800db34:	898b      	ldrh	r3, [r1, #12]
 800db36:	05db      	lsls	r3, r3, #23
 800db38:	4605      	mov	r5, r0
 800db3a:	460c      	mov	r4, r1
 800db3c:	4616      	mov	r6, r2
 800db3e:	d505      	bpl.n	800db4c <__swrite+0x1e>
 800db40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db44:	2302      	movs	r3, #2
 800db46:	2200      	movs	r2, #0
 800db48:	f000 f870 	bl	800dc2c <_lseek_r>
 800db4c:	89a3      	ldrh	r3, [r4, #12]
 800db4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db56:	81a3      	strh	r3, [r4, #12]
 800db58:	4632      	mov	r2, r6
 800db5a:	463b      	mov	r3, r7
 800db5c:	4628      	mov	r0, r5
 800db5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db62:	f000 b8ab 	b.w	800dcbc <_write_r>

0800db66 <__sseek>:
 800db66:	b510      	push	{r4, lr}
 800db68:	460c      	mov	r4, r1
 800db6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db6e:	f000 f85d 	bl	800dc2c <_lseek_r>
 800db72:	1c43      	adds	r3, r0, #1
 800db74:	89a3      	ldrh	r3, [r4, #12]
 800db76:	bf15      	itete	ne
 800db78:	6560      	strne	r0, [r4, #84]	@ 0x54
 800db7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800db7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800db82:	81a3      	strheq	r3, [r4, #12]
 800db84:	bf18      	it	ne
 800db86:	81a3      	strhne	r3, [r4, #12]
 800db88:	bd10      	pop	{r4, pc}

0800db8a <__sclose>:
 800db8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db8e:	f000 b83d 	b.w	800dc0c <_close_r>

0800db92 <memset>:
 800db92:	4402      	add	r2, r0
 800db94:	4603      	mov	r3, r0
 800db96:	4293      	cmp	r3, r2
 800db98:	d100      	bne.n	800db9c <memset+0xa>
 800db9a:	4770      	bx	lr
 800db9c:	f803 1b01 	strb.w	r1, [r3], #1
 800dba0:	e7f9      	b.n	800db96 <memset+0x4>

0800dba2 <_raise_r>:
 800dba2:	291f      	cmp	r1, #31
 800dba4:	b538      	push	{r3, r4, r5, lr}
 800dba6:	4605      	mov	r5, r0
 800dba8:	460c      	mov	r4, r1
 800dbaa:	d904      	bls.n	800dbb6 <_raise_r+0x14>
 800dbac:	2316      	movs	r3, #22
 800dbae:	6003      	str	r3, [r0, #0]
 800dbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb4:	bd38      	pop	{r3, r4, r5, pc}
 800dbb6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dbb8:	b112      	cbz	r2, 800dbc0 <_raise_r+0x1e>
 800dbba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbbe:	b94b      	cbnz	r3, 800dbd4 <_raise_r+0x32>
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	f000 f869 	bl	800dc98 <_getpid_r>
 800dbc6:	4622      	mov	r2, r4
 800dbc8:	4601      	mov	r1, r0
 800dbca:	4628      	mov	r0, r5
 800dbcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbd0:	f000 b850 	b.w	800dc74 <_kill_r>
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	d00a      	beq.n	800dbee <_raise_r+0x4c>
 800dbd8:	1c59      	adds	r1, r3, #1
 800dbda:	d103      	bne.n	800dbe4 <_raise_r+0x42>
 800dbdc:	2316      	movs	r3, #22
 800dbde:	6003      	str	r3, [r0, #0]
 800dbe0:	2001      	movs	r0, #1
 800dbe2:	e7e7      	b.n	800dbb4 <_raise_r+0x12>
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dbea:	4620      	mov	r0, r4
 800dbec:	4798      	blx	r3
 800dbee:	2000      	movs	r0, #0
 800dbf0:	e7e0      	b.n	800dbb4 <_raise_r+0x12>
	...

0800dbf4 <raise>:
 800dbf4:	4b02      	ldr	r3, [pc, #8]	@ (800dc00 <raise+0xc>)
 800dbf6:	4601      	mov	r1, r0
 800dbf8:	6818      	ldr	r0, [r3, #0]
 800dbfa:	f7ff bfd2 	b.w	800dba2 <_raise_r>
 800dbfe:	bf00      	nop
 800dc00:	20000018 	.word	0x20000018

0800dc04 <_localeconv_r>:
 800dc04:	4800      	ldr	r0, [pc, #0]	@ (800dc08 <_localeconv_r+0x4>)
 800dc06:	4770      	bx	lr
 800dc08:	20000158 	.word	0x20000158

0800dc0c <_close_r>:
 800dc0c:	b538      	push	{r3, r4, r5, lr}
 800dc0e:	4d06      	ldr	r5, [pc, #24]	@ (800dc28 <_close_r+0x1c>)
 800dc10:	2300      	movs	r3, #0
 800dc12:	4604      	mov	r4, r0
 800dc14:	4608      	mov	r0, r1
 800dc16:	602b      	str	r3, [r5, #0]
 800dc18:	f7f6 ffe0 	bl	8004bdc <_close>
 800dc1c:	1c43      	adds	r3, r0, #1
 800dc1e:	d102      	bne.n	800dc26 <_close_r+0x1a>
 800dc20:	682b      	ldr	r3, [r5, #0]
 800dc22:	b103      	cbz	r3, 800dc26 <_close_r+0x1a>
 800dc24:	6023      	str	r3, [r4, #0]
 800dc26:	bd38      	pop	{r3, r4, r5, pc}
 800dc28:	20000fe8 	.word	0x20000fe8

0800dc2c <_lseek_r>:
 800dc2c:	b538      	push	{r3, r4, r5, lr}
 800dc2e:	4d07      	ldr	r5, [pc, #28]	@ (800dc4c <_lseek_r+0x20>)
 800dc30:	4604      	mov	r4, r0
 800dc32:	4608      	mov	r0, r1
 800dc34:	4611      	mov	r1, r2
 800dc36:	2200      	movs	r2, #0
 800dc38:	602a      	str	r2, [r5, #0]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	f7f6 fff5 	bl	8004c2a <_lseek>
 800dc40:	1c43      	adds	r3, r0, #1
 800dc42:	d102      	bne.n	800dc4a <_lseek_r+0x1e>
 800dc44:	682b      	ldr	r3, [r5, #0]
 800dc46:	b103      	cbz	r3, 800dc4a <_lseek_r+0x1e>
 800dc48:	6023      	str	r3, [r4, #0]
 800dc4a:	bd38      	pop	{r3, r4, r5, pc}
 800dc4c:	20000fe8 	.word	0x20000fe8

0800dc50 <_read_r>:
 800dc50:	b538      	push	{r3, r4, r5, lr}
 800dc52:	4d07      	ldr	r5, [pc, #28]	@ (800dc70 <_read_r+0x20>)
 800dc54:	4604      	mov	r4, r0
 800dc56:	4608      	mov	r0, r1
 800dc58:	4611      	mov	r1, r2
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	602a      	str	r2, [r5, #0]
 800dc5e:	461a      	mov	r2, r3
 800dc60:	f7f6 ff83 	bl	8004b6a <_read>
 800dc64:	1c43      	adds	r3, r0, #1
 800dc66:	d102      	bne.n	800dc6e <_read_r+0x1e>
 800dc68:	682b      	ldr	r3, [r5, #0]
 800dc6a:	b103      	cbz	r3, 800dc6e <_read_r+0x1e>
 800dc6c:	6023      	str	r3, [r4, #0]
 800dc6e:	bd38      	pop	{r3, r4, r5, pc}
 800dc70:	20000fe8 	.word	0x20000fe8

0800dc74 <_kill_r>:
 800dc74:	b538      	push	{r3, r4, r5, lr}
 800dc76:	4d07      	ldr	r5, [pc, #28]	@ (800dc94 <_kill_r+0x20>)
 800dc78:	2300      	movs	r3, #0
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	4608      	mov	r0, r1
 800dc7e:	4611      	mov	r1, r2
 800dc80:	602b      	str	r3, [r5, #0]
 800dc82:	f7f6 ff57 	bl	8004b34 <_kill>
 800dc86:	1c43      	adds	r3, r0, #1
 800dc88:	d102      	bne.n	800dc90 <_kill_r+0x1c>
 800dc8a:	682b      	ldr	r3, [r5, #0]
 800dc8c:	b103      	cbz	r3, 800dc90 <_kill_r+0x1c>
 800dc8e:	6023      	str	r3, [r4, #0]
 800dc90:	bd38      	pop	{r3, r4, r5, pc}
 800dc92:	bf00      	nop
 800dc94:	20000fe8 	.word	0x20000fe8

0800dc98 <_getpid_r>:
 800dc98:	f7f6 bf44 	b.w	8004b24 <_getpid>

0800dc9c <_sbrk_r>:
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	4d06      	ldr	r5, [pc, #24]	@ (800dcb8 <_sbrk_r+0x1c>)
 800dca0:	2300      	movs	r3, #0
 800dca2:	4604      	mov	r4, r0
 800dca4:	4608      	mov	r0, r1
 800dca6:	602b      	str	r3, [r5, #0]
 800dca8:	f7f6 ffcc 	bl	8004c44 <_sbrk>
 800dcac:	1c43      	adds	r3, r0, #1
 800dcae:	d102      	bne.n	800dcb6 <_sbrk_r+0x1a>
 800dcb0:	682b      	ldr	r3, [r5, #0]
 800dcb2:	b103      	cbz	r3, 800dcb6 <_sbrk_r+0x1a>
 800dcb4:	6023      	str	r3, [r4, #0]
 800dcb6:	bd38      	pop	{r3, r4, r5, pc}
 800dcb8:	20000fe8 	.word	0x20000fe8

0800dcbc <_write_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4d07      	ldr	r5, [pc, #28]	@ (800dcdc <_write_r+0x20>)
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	4608      	mov	r0, r1
 800dcc4:	4611      	mov	r1, r2
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	602a      	str	r2, [r5, #0]
 800dcca:	461a      	mov	r2, r3
 800dccc:	f7f6 ff6a 	bl	8004ba4 <_write>
 800dcd0:	1c43      	adds	r3, r0, #1
 800dcd2:	d102      	bne.n	800dcda <_write_r+0x1e>
 800dcd4:	682b      	ldr	r3, [r5, #0]
 800dcd6:	b103      	cbz	r3, 800dcda <_write_r+0x1e>
 800dcd8:	6023      	str	r3, [r4, #0]
 800dcda:	bd38      	pop	{r3, r4, r5, pc}
 800dcdc:	20000fe8 	.word	0x20000fe8

0800dce0 <__errno>:
 800dce0:	4b01      	ldr	r3, [pc, #4]	@ (800dce8 <__errno+0x8>)
 800dce2:	6818      	ldr	r0, [r3, #0]
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	20000018 	.word	0x20000018

0800dcec <__libc_init_array>:
 800dcec:	b570      	push	{r4, r5, r6, lr}
 800dcee:	4d0d      	ldr	r5, [pc, #52]	@ (800dd24 <__libc_init_array+0x38>)
 800dcf0:	4c0d      	ldr	r4, [pc, #52]	@ (800dd28 <__libc_init_array+0x3c>)
 800dcf2:	1b64      	subs	r4, r4, r5
 800dcf4:	10a4      	asrs	r4, r4, #2
 800dcf6:	2600      	movs	r6, #0
 800dcf8:	42a6      	cmp	r6, r4
 800dcfa:	d109      	bne.n	800dd10 <__libc_init_array+0x24>
 800dcfc:	4d0b      	ldr	r5, [pc, #44]	@ (800dd2c <__libc_init_array+0x40>)
 800dcfe:	4c0c      	ldr	r4, [pc, #48]	@ (800dd30 <__libc_init_array+0x44>)
 800dd00:	f001 fdb0 	bl	800f864 <_init>
 800dd04:	1b64      	subs	r4, r4, r5
 800dd06:	10a4      	asrs	r4, r4, #2
 800dd08:	2600      	movs	r6, #0
 800dd0a:	42a6      	cmp	r6, r4
 800dd0c:	d105      	bne.n	800dd1a <__libc_init_array+0x2e>
 800dd0e:	bd70      	pop	{r4, r5, r6, pc}
 800dd10:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd14:	4798      	blx	r3
 800dd16:	3601      	adds	r6, #1
 800dd18:	e7ee      	b.n	800dcf8 <__libc_init_array+0xc>
 800dd1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd1e:	4798      	blx	r3
 800dd20:	3601      	adds	r6, #1
 800dd22:	e7f2      	b.n	800dd0a <__libc_init_array+0x1e>
 800dd24:	08010d0c 	.word	0x08010d0c
 800dd28:	08010d0c 	.word	0x08010d0c
 800dd2c:	08010d0c 	.word	0x08010d0c
 800dd30:	08010d14 	.word	0x08010d14

0800dd34 <__retarget_lock_init_recursive>:
 800dd34:	4770      	bx	lr

0800dd36 <__retarget_lock_acquire_recursive>:
 800dd36:	4770      	bx	lr

0800dd38 <__retarget_lock_release_recursive>:
 800dd38:	4770      	bx	lr

0800dd3a <memcpy>:
 800dd3a:	440a      	add	r2, r1
 800dd3c:	4291      	cmp	r1, r2
 800dd3e:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd42:	d100      	bne.n	800dd46 <memcpy+0xc>
 800dd44:	4770      	bx	lr
 800dd46:	b510      	push	{r4, lr}
 800dd48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd50:	4291      	cmp	r1, r2
 800dd52:	d1f9      	bne.n	800dd48 <memcpy+0xe>
 800dd54:	bd10      	pop	{r4, pc}

0800dd56 <quorem>:
 800dd56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5a:	6903      	ldr	r3, [r0, #16]
 800dd5c:	690c      	ldr	r4, [r1, #16]
 800dd5e:	42a3      	cmp	r3, r4
 800dd60:	4607      	mov	r7, r0
 800dd62:	db7e      	blt.n	800de62 <quorem+0x10c>
 800dd64:	3c01      	subs	r4, #1
 800dd66:	f101 0814 	add.w	r8, r1, #20
 800dd6a:	00a3      	lsls	r3, r4, #2
 800dd6c:	f100 0514 	add.w	r5, r0, #20
 800dd70:	9300      	str	r3, [sp, #0]
 800dd72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd76:	9301      	str	r3, [sp, #4]
 800dd78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd80:	3301      	adds	r3, #1
 800dd82:	429a      	cmp	r2, r3
 800dd84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dd88:	fbb2 f6f3 	udiv	r6, r2, r3
 800dd8c:	d32e      	bcc.n	800ddec <quorem+0x96>
 800dd8e:	f04f 0a00 	mov.w	sl, #0
 800dd92:	46c4      	mov	ip, r8
 800dd94:	46ae      	mov	lr, r5
 800dd96:	46d3      	mov	fp, sl
 800dd98:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dd9c:	b298      	uxth	r0, r3
 800dd9e:	fb06 a000 	mla	r0, r6, r0, sl
 800dda2:	0c02      	lsrs	r2, r0, #16
 800dda4:	0c1b      	lsrs	r3, r3, #16
 800dda6:	fb06 2303 	mla	r3, r6, r3, r2
 800ddaa:	f8de 2000 	ldr.w	r2, [lr]
 800ddae:	b280      	uxth	r0, r0
 800ddb0:	b292      	uxth	r2, r2
 800ddb2:	1a12      	subs	r2, r2, r0
 800ddb4:	445a      	add	r2, fp
 800ddb6:	f8de 0000 	ldr.w	r0, [lr]
 800ddba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ddc4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ddc8:	b292      	uxth	r2, r2
 800ddca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ddce:	45e1      	cmp	r9, ip
 800ddd0:	f84e 2b04 	str.w	r2, [lr], #4
 800ddd4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ddd8:	d2de      	bcs.n	800dd98 <quorem+0x42>
 800ddda:	9b00      	ldr	r3, [sp, #0]
 800dddc:	58eb      	ldr	r3, [r5, r3]
 800ddde:	b92b      	cbnz	r3, 800ddec <quorem+0x96>
 800dde0:	9b01      	ldr	r3, [sp, #4]
 800dde2:	3b04      	subs	r3, #4
 800dde4:	429d      	cmp	r5, r3
 800dde6:	461a      	mov	r2, r3
 800dde8:	d32f      	bcc.n	800de4a <quorem+0xf4>
 800ddea:	613c      	str	r4, [r7, #16]
 800ddec:	4638      	mov	r0, r7
 800ddee:	f001 f8c7 	bl	800ef80 <__mcmp>
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	db25      	blt.n	800de42 <quorem+0xec>
 800ddf6:	4629      	mov	r1, r5
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	f858 2b04 	ldr.w	r2, [r8], #4
 800ddfe:	f8d1 c000 	ldr.w	ip, [r1]
 800de02:	fa1f fe82 	uxth.w	lr, r2
 800de06:	fa1f f38c 	uxth.w	r3, ip
 800de0a:	eba3 030e 	sub.w	r3, r3, lr
 800de0e:	4403      	add	r3, r0
 800de10:	0c12      	lsrs	r2, r2, #16
 800de12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800de16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800de1a:	b29b      	uxth	r3, r3
 800de1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de20:	45c1      	cmp	r9, r8
 800de22:	f841 3b04 	str.w	r3, [r1], #4
 800de26:	ea4f 4022 	mov.w	r0, r2, asr #16
 800de2a:	d2e6      	bcs.n	800ddfa <quorem+0xa4>
 800de2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de34:	b922      	cbnz	r2, 800de40 <quorem+0xea>
 800de36:	3b04      	subs	r3, #4
 800de38:	429d      	cmp	r5, r3
 800de3a:	461a      	mov	r2, r3
 800de3c:	d30b      	bcc.n	800de56 <quorem+0x100>
 800de3e:	613c      	str	r4, [r7, #16]
 800de40:	3601      	adds	r6, #1
 800de42:	4630      	mov	r0, r6
 800de44:	b003      	add	sp, #12
 800de46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de4a:	6812      	ldr	r2, [r2, #0]
 800de4c:	3b04      	subs	r3, #4
 800de4e:	2a00      	cmp	r2, #0
 800de50:	d1cb      	bne.n	800ddea <quorem+0x94>
 800de52:	3c01      	subs	r4, #1
 800de54:	e7c6      	b.n	800dde4 <quorem+0x8e>
 800de56:	6812      	ldr	r2, [r2, #0]
 800de58:	3b04      	subs	r3, #4
 800de5a:	2a00      	cmp	r2, #0
 800de5c:	d1ef      	bne.n	800de3e <quorem+0xe8>
 800de5e:	3c01      	subs	r4, #1
 800de60:	e7ea      	b.n	800de38 <quorem+0xe2>
 800de62:	2000      	movs	r0, #0
 800de64:	e7ee      	b.n	800de44 <quorem+0xee>
	...

0800de68 <_dtoa_r>:
 800de68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6c:	69c7      	ldr	r7, [r0, #28]
 800de6e:	b097      	sub	sp, #92	@ 0x5c
 800de70:	ed8d 0b04 	vstr	d0, [sp, #16]
 800de74:	ec55 4b10 	vmov	r4, r5, d0
 800de78:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800de7a:	9107      	str	r1, [sp, #28]
 800de7c:	4681      	mov	r9, r0
 800de7e:	920c      	str	r2, [sp, #48]	@ 0x30
 800de80:	9311      	str	r3, [sp, #68]	@ 0x44
 800de82:	b97f      	cbnz	r7, 800dea4 <_dtoa_r+0x3c>
 800de84:	2010      	movs	r0, #16
 800de86:	f7ff f86b 	bl	800cf60 <malloc>
 800de8a:	4602      	mov	r2, r0
 800de8c:	f8c9 001c 	str.w	r0, [r9, #28]
 800de90:	b920      	cbnz	r0, 800de9c <_dtoa_r+0x34>
 800de92:	4ba9      	ldr	r3, [pc, #676]	@ (800e138 <_dtoa_r+0x2d0>)
 800de94:	21ef      	movs	r1, #239	@ 0xef
 800de96:	48a9      	ldr	r0, [pc, #676]	@ (800e13c <_dtoa_r+0x2d4>)
 800de98:	f001 fa26 	bl	800f2e8 <__assert_func>
 800de9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dea0:	6007      	str	r7, [r0, #0]
 800dea2:	60c7      	str	r7, [r0, #12]
 800dea4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dea8:	6819      	ldr	r1, [r3, #0]
 800deaa:	b159      	cbz	r1, 800dec4 <_dtoa_r+0x5c>
 800deac:	685a      	ldr	r2, [r3, #4]
 800deae:	604a      	str	r2, [r1, #4]
 800deb0:	2301      	movs	r3, #1
 800deb2:	4093      	lsls	r3, r2
 800deb4:	608b      	str	r3, [r1, #8]
 800deb6:	4648      	mov	r0, r9
 800deb8:	f000 fe30 	bl	800eb1c <_Bfree>
 800debc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dec0:	2200      	movs	r2, #0
 800dec2:	601a      	str	r2, [r3, #0]
 800dec4:	1e2b      	subs	r3, r5, #0
 800dec6:	bfb9      	ittee	lt
 800dec8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800decc:	9305      	strlt	r3, [sp, #20]
 800dece:	2300      	movge	r3, #0
 800ded0:	6033      	strge	r3, [r6, #0]
 800ded2:	9f05      	ldr	r7, [sp, #20]
 800ded4:	4b9a      	ldr	r3, [pc, #616]	@ (800e140 <_dtoa_r+0x2d8>)
 800ded6:	bfbc      	itt	lt
 800ded8:	2201      	movlt	r2, #1
 800deda:	6032      	strlt	r2, [r6, #0]
 800dedc:	43bb      	bics	r3, r7
 800dede:	d112      	bne.n	800df06 <_dtoa_r+0x9e>
 800dee0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dee2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dee6:	6013      	str	r3, [r2, #0]
 800dee8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800deec:	4323      	orrs	r3, r4
 800deee:	f000 855a 	beq.w	800e9a6 <_dtoa_r+0xb3e>
 800def2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800def4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e154 <_dtoa_r+0x2ec>
 800def8:	2b00      	cmp	r3, #0
 800defa:	f000 855c 	beq.w	800e9b6 <_dtoa_r+0xb4e>
 800defe:	f10a 0303 	add.w	r3, sl, #3
 800df02:	f000 bd56 	b.w	800e9b2 <_dtoa_r+0xb4a>
 800df06:	ed9d 7b04 	vldr	d7, [sp, #16]
 800df0a:	2200      	movs	r2, #0
 800df0c:	ec51 0b17 	vmov	r0, r1, d7
 800df10:	2300      	movs	r3, #0
 800df12:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800df16:	f7f2 fdf7 	bl	8000b08 <__aeabi_dcmpeq>
 800df1a:	4680      	mov	r8, r0
 800df1c:	b158      	cbz	r0, 800df36 <_dtoa_r+0xce>
 800df1e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800df20:	2301      	movs	r3, #1
 800df22:	6013      	str	r3, [r2, #0]
 800df24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800df26:	b113      	cbz	r3, 800df2e <_dtoa_r+0xc6>
 800df28:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800df2a:	4b86      	ldr	r3, [pc, #536]	@ (800e144 <_dtoa_r+0x2dc>)
 800df2c:	6013      	str	r3, [r2, #0]
 800df2e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e158 <_dtoa_r+0x2f0>
 800df32:	f000 bd40 	b.w	800e9b6 <_dtoa_r+0xb4e>
 800df36:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800df3a:	aa14      	add	r2, sp, #80	@ 0x50
 800df3c:	a915      	add	r1, sp, #84	@ 0x54
 800df3e:	4648      	mov	r0, r9
 800df40:	f001 f8ce 	bl	800f0e0 <__d2b>
 800df44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800df48:	9002      	str	r0, [sp, #8]
 800df4a:	2e00      	cmp	r6, #0
 800df4c:	d078      	beq.n	800e040 <_dtoa_r+0x1d8>
 800df4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df50:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800df54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800df5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800df60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800df64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800df68:	4619      	mov	r1, r3
 800df6a:	2200      	movs	r2, #0
 800df6c:	4b76      	ldr	r3, [pc, #472]	@ (800e148 <_dtoa_r+0x2e0>)
 800df6e:	f7f2 f9ab 	bl	80002c8 <__aeabi_dsub>
 800df72:	a36b      	add	r3, pc, #428	@ (adr r3, 800e120 <_dtoa_r+0x2b8>)
 800df74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df78:	f7f2 fb5e 	bl	8000638 <__aeabi_dmul>
 800df7c:	a36a      	add	r3, pc, #424	@ (adr r3, 800e128 <_dtoa_r+0x2c0>)
 800df7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df82:	f7f2 f9a3 	bl	80002cc <__adddf3>
 800df86:	4604      	mov	r4, r0
 800df88:	4630      	mov	r0, r6
 800df8a:	460d      	mov	r5, r1
 800df8c:	f7f2 faea 	bl	8000564 <__aeabi_i2d>
 800df90:	a367      	add	r3, pc, #412	@ (adr r3, 800e130 <_dtoa_r+0x2c8>)
 800df92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df96:	f7f2 fb4f 	bl	8000638 <__aeabi_dmul>
 800df9a:	4602      	mov	r2, r0
 800df9c:	460b      	mov	r3, r1
 800df9e:	4620      	mov	r0, r4
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	f7f2 f993 	bl	80002cc <__adddf3>
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	460d      	mov	r5, r1
 800dfaa:	f7f2 fdf5 	bl	8000b98 <__aeabi_d2iz>
 800dfae:	2200      	movs	r2, #0
 800dfb0:	4607      	mov	r7, r0
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	4629      	mov	r1, r5
 800dfb8:	f7f2 fdb0 	bl	8000b1c <__aeabi_dcmplt>
 800dfbc:	b140      	cbz	r0, 800dfd0 <_dtoa_r+0x168>
 800dfbe:	4638      	mov	r0, r7
 800dfc0:	f7f2 fad0 	bl	8000564 <__aeabi_i2d>
 800dfc4:	4622      	mov	r2, r4
 800dfc6:	462b      	mov	r3, r5
 800dfc8:	f7f2 fd9e 	bl	8000b08 <__aeabi_dcmpeq>
 800dfcc:	b900      	cbnz	r0, 800dfd0 <_dtoa_r+0x168>
 800dfce:	3f01      	subs	r7, #1
 800dfd0:	2f16      	cmp	r7, #22
 800dfd2:	d852      	bhi.n	800e07a <_dtoa_r+0x212>
 800dfd4:	4b5d      	ldr	r3, [pc, #372]	@ (800e14c <_dtoa_r+0x2e4>)
 800dfd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dfe2:	f7f2 fd9b 	bl	8000b1c <__aeabi_dcmplt>
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	d049      	beq.n	800e07e <_dtoa_r+0x216>
 800dfea:	3f01      	subs	r7, #1
 800dfec:	2300      	movs	r3, #0
 800dfee:	9310      	str	r3, [sp, #64]	@ 0x40
 800dff0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dff2:	1b9b      	subs	r3, r3, r6
 800dff4:	1e5a      	subs	r2, r3, #1
 800dff6:	bf45      	ittet	mi
 800dff8:	f1c3 0301 	rsbmi	r3, r3, #1
 800dffc:	9300      	strmi	r3, [sp, #0]
 800dffe:	2300      	movpl	r3, #0
 800e000:	2300      	movmi	r3, #0
 800e002:	9206      	str	r2, [sp, #24]
 800e004:	bf54      	ite	pl
 800e006:	9300      	strpl	r3, [sp, #0]
 800e008:	9306      	strmi	r3, [sp, #24]
 800e00a:	2f00      	cmp	r7, #0
 800e00c:	db39      	blt.n	800e082 <_dtoa_r+0x21a>
 800e00e:	9b06      	ldr	r3, [sp, #24]
 800e010:	970d      	str	r7, [sp, #52]	@ 0x34
 800e012:	443b      	add	r3, r7
 800e014:	9306      	str	r3, [sp, #24]
 800e016:	2300      	movs	r3, #0
 800e018:	9308      	str	r3, [sp, #32]
 800e01a:	9b07      	ldr	r3, [sp, #28]
 800e01c:	2b09      	cmp	r3, #9
 800e01e:	d863      	bhi.n	800e0e8 <_dtoa_r+0x280>
 800e020:	2b05      	cmp	r3, #5
 800e022:	bfc4      	itt	gt
 800e024:	3b04      	subgt	r3, #4
 800e026:	9307      	strgt	r3, [sp, #28]
 800e028:	9b07      	ldr	r3, [sp, #28]
 800e02a:	f1a3 0302 	sub.w	r3, r3, #2
 800e02e:	bfcc      	ite	gt
 800e030:	2400      	movgt	r4, #0
 800e032:	2401      	movle	r4, #1
 800e034:	2b03      	cmp	r3, #3
 800e036:	d863      	bhi.n	800e100 <_dtoa_r+0x298>
 800e038:	e8df f003 	tbb	[pc, r3]
 800e03c:	2b375452 	.word	0x2b375452
 800e040:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e044:	441e      	add	r6, r3
 800e046:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e04a:	2b20      	cmp	r3, #32
 800e04c:	bfc1      	itttt	gt
 800e04e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e052:	409f      	lslgt	r7, r3
 800e054:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e058:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e05c:	bfd6      	itet	le
 800e05e:	f1c3 0320 	rsble	r3, r3, #32
 800e062:	ea47 0003 	orrgt.w	r0, r7, r3
 800e066:	fa04 f003 	lslle.w	r0, r4, r3
 800e06a:	f7f2 fa6b 	bl	8000544 <__aeabi_ui2d>
 800e06e:	2201      	movs	r2, #1
 800e070:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e074:	3e01      	subs	r6, #1
 800e076:	9212      	str	r2, [sp, #72]	@ 0x48
 800e078:	e776      	b.n	800df68 <_dtoa_r+0x100>
 800e07a:	2301      	movs	r3, #1
 800e07c:	e7b7      	b.n	800dfee <_dtoa_r+0x186>
 800e07e:	9010      	str	r0, [sp, #64]	@ 0x40
 800e080:	e7b6      	b.n	800dff0 <_dtoa_r+0x188>
 800e082:	9b00      	ldr	r3, [sp, #0]
 800e084:	1bdb      	subs	r3, r3, r7
 800e086:	9300      	str	r3, [sp, #0]
 800e088:	427b      	negs	r3, r7
 800e08a:	9308      	str	r3, [sp, #32]
 800e08c:	2300      	movs	r3, #0
 800e08e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e090:	e7c3      	b.n	800e01a <_dtoa_r+0x1b2>
 800e092:	2301      	movs	r3, #1
 800e094:	9309      	str	r3, [sp, #36]	@ 0x24
 800e096:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e098:	eb07 0b03 	add.w	fp, r7, r3
 800e09c:	f10b 0301 	add.w	r3, fp, #1
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	9303      	str	r3, [sp, #12]
 800e0a4:	bfb8      	it	lt
 800e0a6:	2301      	movlt	r3, #1
 800e0a8:	e006      	b.n	800e0b8 <_dtoa_r+0x250>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	dd28      	ble.n	800e106 <_dtoa_r+0x29e>
 800e0b4:	469b      	mov	fp, r3
 800e0b6:	9303      	str	r3, [sp, #12]
 800e0b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e0bc:	2100      	movs	r1, #0
 800e0be:	2204      	movs	r2, #4
 800e0c0:	f102 0514 	add.w	r5, r2, #20
 800e0c4:	429d      	cmp	r5, r3
 800e0c6:	d926      	bls.n	800e116 <_dtoa_r+0x2ae>
 800e0c8:	6041      	str	r1, [r0, #4]
 800e0ca:	4648      	mov	r0, r9
 800e0cc:	f000 fce6 	bl	800ea9c <_Balloc>
 800e0d0:	4682      	mov	sl, r0
 800e0d2:	2800      	cmp	r0, #0
 800e0d4:	d142      	bne.n	800e15c <_dtoa_r+0x2f4>
 800e0d6:	4b1e      	ldr	r3, [pc, #120]	@ (800e150 <_dtoa_r+0x2e8>)
 800e0d8:	4602      	mov	r2, r0
 800e0da:	f240 11af 	movw	r1, #431	@ 0x1af
 800e0de:	e6da      	b.n	800de96 <_dtoa_r+0x2e>
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	e7e3      	b.n	800e0ac <_dtoa_r+0x244>
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	e7d5      	b.n	800e094 <_dtoa_r+0x22c>
 800e0e8:	2401      	movs	r4, #1
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	9307      	str	r3, [sp, #28]
 800e0ee:	9409      	str	r4, [sp, #36]	@ 0x24
 800e0f0:	f04f 3bff 	mov.w	fp, #4294967295
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	f8cd b00c 	str.w	fp, [sp, #12]
 800e0fa:	2312      	movs	r3, #18
 800e0fc:	920c      	str	r2, [sp, #48]	@ 0x30
 800e0fe:	e7db      	b.n	800e0b8 <_dtoa_r+0x250>
 800e100:	2301      	movs	r3, #1
 800e102:	9309      	str	r3, [sp, #36]	@ 0x24
 800e104:	e7f4      	b.n	800e0f0 <_dtoa_r+0x288>
 800e106:	f04f 0b01 	mov.w	fp, #1
 800e10a:	f8cd b00c 	str.w	fp, [sp, #12]
 800e10e:	465b      	mov	r3, fp
 800e110:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e114:	e7d0      	b.n	800e0b8 <_dtoa_r+0x250>
 800e116:	3101      	adds	r1, #1
 800e118:	0052      	lsls	r2, r2, #1
 800e11a:	e7d1      	b.n	800e0c0 <_dtoa_r+0x258>
 800e11c:	f3af 8000 	nop.w
 800e120:	636f4361 	.word	0x636f4361
 800e124:	3fd287a7 	.word	0x3fd287a7
 800e128:	8b60c8b3 	.word	0x8b60c8b3
 800e12c:	3fc68a28 	.word	0x3fc68a28
 800e130:	509f79fb 	.word	0x509f79fb
 800e134:	3fd34413 	.word	0x3fd34413
 800e138:	080107ef 	.word	0x080107ef
 800e13c:	08010806 	.word	0x08010806
 800e140:	7ff00000 	.word	0x7ff00000
 800e144:	080107bf 	.word	0x080107bf
 800e148:	3ff80000 	.word	0x3ff80000
 800e14c:	08010b38 	.word	0x08010b38
 800e150:	0801085e 	.word	0x0801085e
 800e154:	080107eb 	.word	0x080107eb
 800e158:	080107be 	.word	0x080107be
 800e15c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e160:	6018      	str	r0, [r3, #0]
 800e162:	9b03      	ldr	r3, [sp, #12]
 800e164:	2b0e      	cmp	r3, #14
 800e166:	f200 80a1 	bhi.w	800e2ac <_dtoa_r+0x444>
 800e16a:	2c00      	cmp	r4, #0
 800e16c:	f000 809e 	beq.w	800e2ac <_dtoa_r+0x444>
 800e170:	2f00      	cmp	r7, #0
 800e172:	dd33      	ble.n	800e1dc <_dtoa_r+0x374>
 800e174:	4b9c      	ldr	r3, [pc, #624]	@ (800e3e8 <_dtoa_r+0x580>)
 800e176:	f007 020f 	and.w	r2, r7, #15
 800e17a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e17e:	ed93 7b00 	vldr	d7, [r3]
 800e182:	05f8      	lsls	r0, r7, #23
 800e184:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e188:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e18c:	d516      	bpl.n	800e1bc <_dtoa_r+0x354>
 800e18e:	4b97      	ldr	r3, [pc, #604]	@ (800e3ec <_dtoa_r+0x584>)
 800e190:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e198:	f7f2 fb78 	bl	800088c <__aeabi_ddiv>
 800e19c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1a0:	f004 040f 	and.w	r4, r4, #15
 800e1a4:	2603      	movs	r6, #3
 800e1a6:	4d91      	ldr	r5, [pc, #580]	@ (800e3ec <_dtoa_r+0x584>)
 800e1a8:	b954      	cbnz	r4, 800e1c0 <_dtoa_r+0x358>
 800e1aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e1ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1b2:	f7f2 fb6b 	bl	800088c <__aeabi_ddiv>
 800e1b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1ba:	e028      	b.n	800e20e <_dtoa_r+0x3a6>
 800e1bc:	2602      	movs	r6, #2
 800e1be:	e7f2      	b.n	800e1a6 <_dtoa_r+0x33e>
 800e1c0:	07e1      	lsls	r1, r4, #31
 800e1c2:	d508      	bpl.n	800e1d6 <_dtoa_r+0x36e>
 800e1c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e1c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e1cc:	f7f2 fa34 	bl	8000638 <__aeabi_dmul>
 800e1d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e1d4:	3601      	adds	r6, #1
 800e1d6:	1064      	asrs	r4, r4, #1
 800e1d8:	3508      	adds	r5, #8
 800e1da:	e7e5      	b.n	800e1a8 <_dtoa_r+0x340>
 800e1dc:	f000 80af 	beq.w	800e33e <_dtoa_r+0x4d6>
 800e1e0:	427c      	negs	r4, r7
 800e1e2:	4b81      	ldr	r3, [pc, #516]	@ (800e3e8 <_dtoa_r+0x580>)
 800e1e4:	4d81      	ldr	r5, [pc, #516]	@ (800e3ec <_dtoa_r+0x584>)
 800e1e6:	f004 020f 	and.w	r2, r4, #15
 800e1ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e1f6:	f7f2 fa1f 	bl	8000638 <__aeabi_dmul>
 800e1fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1fe:	1124      	asrs	r4, r4, #4
 800e200:	2300      	movs	r3, #0
 800e202:	2602      	movs	r6, #2
 800e204:	2c00      	cmp	r4, #0
 800e206:	f040 808f 	bne.w	800e328 <_dtoa_r+0x4c0>
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d1d3      	bne.n	800e1b6 <_dtoa_r+0x34e>
 800e20e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e210:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e214:	2b00      	cmp	r3, #0
 800e216:	f000 8094 	beq.w	800e342 <_dtoa_r+0x4da>
 800e21a:	4b75      	ldr	r3, [pc, #468]	@ (800e3f0 <_dtoa_r+0x588>)
 800e21c:	2200      	movs	r2, #0
 800e21e:	4620      	mov	r0, r4
 800e220:	4629      	mov	r1, r5
 800e222:	f7f2 fc7b 	bl	8000b1c <__aeabi_dcmplt>
 800e226:	2800      	cmp	r0, #0
 800e228:	f000 808b 	beq.w	800e342 <_dtoa_r+0x4da>
 800e22c:	9b03      	ldr	r3, [sp, #12]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	f000 8087 	beq.w	800e342 <_dtoa_r+0x4da>
 800e234:	f1bb 0f00 	cmp.w	fp, #0
 800e238:	dd34      	ble.n	800e2a4 <_dtoa_r+0x43c>
 800e23a:	4620      	mov	r0, r4
 800e23c:	4b6d      	ldr	r3, [pc, #436]	@ (800e3f4 <_dtoa_r+0x58c>)
 800e23e:	2200      	movs	r2, #0
 800e240:	4629      	mov	r1, r5
 800e242:	f7f2 f9f9 	bl	8000638 <__aeabi_dmul>
 800e246:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e24a:	f107 38ff 	add.w	r8, r7, #4294967295
 800e24e:	3601      	adds	r6, #1
 800e250:	465c      	mov	r4, fp
 800e252:	4630      	mov	r0, r6
 800e254:	f7f2 f986 	bl	8000564 <__aeabi_i2d>
 800e258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e25c:	f7f2 f9ec 	bl	8000638 <__aeabi_dmul>
 800e260:	4b65      	ldr	r3, [pc, #404]	@ (800e3f8 <_dtoa_r+0x590>)
 800e262:	2200      	movs	r2, #0
 800e264:	f7f2 f832 	bl	80002cc <__adddf3>
 800e268:	4605      	mov	r5, r0
 800e26a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e26e:	2c00      	cmp	r4, #0
 800e270:	d16a      	bne.n	800e348 <_dtoa_r+0x4e0>
 800e272:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e276:	4b61      	ldr	r3, [pc, #388]	@ (800e3fc <_dtoa_r+0x594>)
 800e278:	2200      	movs	r2, #0
 800e27a:	f7f2 f825 	bl	80002c8 <__aeabi_dsub>
 800e27e:	4602      	mov	r2, r0
 800e280:	460b      	mov	r3, r1
 800e282:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e286:	462a      	mov	r2, r5
 800e288:	4633      	mov	r3, r6
 800e28a:	f7f2 fc65 	bl	8000b58 <__aeabi_dcmpgt>
 800e28e:	2800      	cmp	r0, #0
 800e290:	f040 8298 	bne.w	800e7c4 <_dtoa_r+0x95c>
 800e294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e298:	462a      	mov	r2, r5
 800e29a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e29e:	f7f2 fc3d 	bl	8000b1c <__aeabi_dcmplt>
 800e2a2:	bb38      	cbnz	r0, 800e2f4 <_dtoa_r+0x48c>
 800e2a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e2a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e2ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f2c0 8157 	blt.w	800e562 <_dtoa_r+0x6fa>
 800e2b4:	2f0e      	cmp	r7, #14
 800e2b6:	f300 8154 	bgt.w	800e562 <_dtoa_r+0x6fa>
 800e2ba:	4b4b      	ldr	r3, [pc, #300]	@ (800e3e8 <_dtoa_r+0x580>)
 800e2bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e2c0:	ed93 7b00 	vldr	d7, [r3]
 800e2c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	ed8d 7b00 	vstr	d7, [sp]
 800e2cc:	f280 80e5 	bge.w	800e49a <_dtoa_r+0x632>
 800e2d0:	9b03      	ldr	r3, [sp, #12]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	f300 80e1 	bgt.w	800e49a <_dtoa_r+0x632>
 800e2d8:	d10c      	bne.n	800e2f4 <_dtoa_r+0x48c>
 800e2da:	4b48      	ldr	r3, [pc, #288]	@ (800e3fc <_dtoa_r+0x594>)
 800e2dc:	2200      	movs	r2, #0
 800e2de:	ec51 0b17 	vmov	r0, r1, d7
 800e2e2:	f7f2 f9a9 	bl	8000638 <__aeabi_dmul>
 800e2e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2ea:	f7f2 fc2b 	bl	8000b44 <__aeabi_dcmpge>
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	f000 8266 	beq.w	800e7c0 <_dtoa_r+0x958>
 800e2f4:	2400      	movs	r4, #0
 800e2f6:	4625      	mov	r5, r4
 800e2f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e2fa:	4656      	mov	r6, sl
 800e2fc:	ea6f 0803 	mvn.w	r8, r3
 800e300:	2700      	movs	r7, #0
 800e302:	4621      	mov	r1, r4
 800e304:	4648      	mov	r0, r9
 800e306:	f000 fc09 	bl	800eb1c <_Bfree>
 800e30a:	2d00      	cmp	r5, #0
 800e30c:	f000 80bd 	beq.w	800e48a <_dtoa_r+0x622>
 800e310:	b12f      	cbz	r7, 800e31e <_dtoa_r+0x4b6>
 800e312:	42af      	cmp	r7, r5
 800e314:	d003      	beq.n	800e31e <_dtoa_r+0x4b6>
 800e316:	4639      	mov	r1, r7
 800e318:	4648      	mov	r0, r9
 800e31a:	f000 fbff 	bl	800eb1c <_Bfree>
 800e31e:	4629      	mov	r1, r5
 800e320:	4648      	mov	r0, r9
 800e322:	f000 fbfb 	bl	800eb1c <_Bfree>
 800e326:	e0b0      	b.n	800e48a <_dtoa_r+0x622>
 800e328:	07e2      	lsls	r2, r4, #31
 800e32a:	d505      	bpl.n	800e338 <_dtoa_r+0x4d0>
 800e32c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e330:	f7f2 f982 	bl	8000638 <__aeabi_dmul>
 800e334:	3601      	adds	r6, #1
 800e336:	2301      	movs	r3, #1
 800e338:	1064      	asrs	r4, r4, #1
 800e33a:	3508      	adds	r5, #8
 800e33c:	e762      	b.n	800e204 <_dtoa_r+0x39c>
 800e33e:	2602      	movs	r6, #2
 800e340:	e765      	b.n	800e20e <_dtoa_r+0x3a6>
 800e342:	9c03      	ldr	r4, [sp, #12]
 800e344:	46b8      	mov	r8, r7
 800e346:	e784      	b.n	800e252 <_dtoa_r+0x3ea>
 800e348:	4b27      	ldr	r3, [pc, #156]	@ (800e3e8 <_dtoa_r+0x580>)
 800e34a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e34c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e350:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e354:	4454      	add	r4, sl
 800e356:	2900      	cmp	r1, #0
 800e358:	d054      	beq.n	800e404 <_dtoa_r+0x59c>
 800e35a:	4929      	ldr	r1, [pc, #164]	@ (800e400 <_dtoa_r+0x598>)
 800e35c:	2000      	movs	r0, #0
 800e35e:	f7f2 fa95 	bl	800088c <__aeabi_ddiv>
 800e362:	4633      	mov	r3, r6
 800e364:	462a      	mov	r2, r5
 800e366:	f7f1 ffaf 	bl	80002c8 <__aeabi_dsub>
 800e36a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e36e:	4656      	mov	r6, sl
 800e370:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e374:	f7f2 fc10 	bl	8000b98 <__aeabi_d2iz>
 800e378:	4605      	mov	r5, r0
 800e37a:	f7f2 f8f3 	bl	8000564 <__aeabi_i2d>
 800e37e:	4602      	mov	r2, r0
 800e380:	460b      	mov	r3, r1
 800e382:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e386:	f7f1 ff9f 	bl	80002c8 <__aeabi_dsub>
 800e38a:	3530      	adds	r5, #48	@ 0x30
 800e38c:	4602      	mov	r2, r0
 800e38e:	460b      	mov	r3, r1
 800e390:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e394:	f806 5b01 	strb.w	r5, [r6], #1
 800e398:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e39c:	f7f2 fbbe 	bl	8000b1c <__aeabi_dcmplt>
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d172      	bne.n	800e48a <_dtoa_r+0x622>
 800e3a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3a8:	4911      	ldr	r1, [pc, #68]	@ (800e3f0 <_dtoa_r+0x588>)
 800e3aa:	2000      	movs	r0, #0
 800e3ac:	f7f1 ff8c 	bl	80002c8 <__aeabi_dsub>
 800e3b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e3b4:	f7f2 fbb2 	bl	8000b1c <__aeabi_dcmplt>
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	f040 80b4 	bne.w	800e526 <_dtoa_r+0x6be>
 800e3be:	42a6      	cmp	r6, r4
 800e3c0:	f43f af70 	beq.w	800e2a4 <_dtoa_r+0x43c>
 800e3c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e3c8:	4b0a      	ldr	r3, [pc, #40]	@ (800e3f4 <_dtoa_r+0x58c>)
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f7f2 f934 	bl	8000638 <__aeabi_dmul>
 800e3d0:	4b08      	ldr	r3, [pc, #32]	@ (800e3f4 <_dtoa_r+0x58c>)
 800e3d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3dc:	f7f2 f92c 	bl	8000638 <__aeabi_dmul>
 800e3e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3e4:	e7c4      	b.n	800e370 <_dtoa_r+0x508>
 800e3e6:	bf00      	nop
 800e3e8:	08010b38 	.word	0x08010b38
 800e3ec:	08010b10 	.word	0x08010b10
 800e3f0:	3ff00000 	.word	0x3ff00000
 800e3f4:	40240000 	.word	0x40240000
 800e3f8:	401c0000 	.word	0x401c0000
 800e3fc:	40140000 	.word	0x40140000
 800e400:	3fe00000 	.word	0x3fe00000
 800e404:	4631      	mov	r1, r6
 800e406:	4628      	mov	r0, r5
 800e408:	f7f2 f916 	bl	8000638 <__aeabi_dmul>
 800e40c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e410:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e412:	4656      	mov	r6, sl
 800e414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e418:	f7f2 fbbe 	bl	8000b98 <__aeabi_d2iz>
 800e41c:	4605      	mov	r5, r0
 800e41e:	f7f2 f8a1 	bl	8000564 <__aeabi_i2d>
 800e422:	4602      	mov	r2, r0
 800e424:	460b      	mov	r3, r1
 800e426:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e42a:	f7f1 ff4d 	bl	80002c8 <__aeabi_dsub>
 800e42e:	3530      	adds	r5, #48	@ 0x30
 800e430:	f806 5b01 	strb.w	r5, [r6], #1
 800e434:	4602      	mov	r2, r0
 800e436:	460b      	mov	r3, r1
 800e438:	42a6      	cmp	r6, r4
 800e43a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e43e:	f04f 0200 	mov.w	r2, #0
 800e442:	d124      	bne.n	800e48e <_dtoa_r+0x626>
 800e444:	4baf      	ldr	r3, [pc, #700]	@ (800e704 <_dtoa_r+0x89c>)
 800e446:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e44a:	f7f1 ff3f 	bl	80002cc <__adddf3>
 800e44e:	4602      	mov	r2, r0
 800e450:	460b      	mov	r3, r1
 800e452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e456:	f7f2 fb7f 	bl	8000b58 <__aeabi_dcmpgt>
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d163      	bne.n	800e526 <_dtoa_r+0x6be>
 800e45e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e462:	49a8      	ldr	r1, [pc, #672]	@ (800e704 <_dtoa_r+0x89c>)
 800e464:	2000      	movs	r0, #0
 800e466:	f7f1 ff2f 	bl	80002c8 <__aeabi_dsub>
 800e46a:	4602      	mov	r2, r0
 800e46c:	460b      	mov	r3, r1
 800e46e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e472:	f7f2 fb53 	bl	8000b1c <__aeabi_dcmplt>
 800e476:	2800      	cmp	r0, #0
 800e478:	f43f af14 	beq.w	800e2a4 <_dtoa_r+0x43c>
 800e47c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e47e:	1e73      	subs	r3, r6, #1
 800e480:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e482:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e486:	2b30      	cmp	r3, #48	@ 0x30
 800e488:	d0f8      	beq.n	800e47c <_dtoa_r+0x614>
 800e48a:	4647      	mov	r7, r8
 800e48c:	e03b      	b.n	800e506 <_dtoa_r+0x69e>
 800e48e:	4b9e      	ldr	r3, [pc, #632]	@ (800e708 <_dtoa_r+0x8a0>)
 800e490:	f7f2 f8d2 	bl	8000638 <__aeabi_dmul>
 800e494:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e498:	e7bc      	b.n	800e414 <_dtoa_r+0x5ac>
 800e49a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e49e:	4656      	mov	r6, sl
 800e4a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	4629      	mov	r1, r5
 800e4a8:	f7f2 f9f0 	bl	800088c <__aeabi_ddiv>
 800e4ac:	f7f2 fb74 	bl	8000b98 <__aeabi_d2iz>
 800e4b0:	4680      	mov	r8, r0
 800e4b2:	f7f2 f857 	bl	8000564 <__aeabi_i2d>
 800e4b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4ba:	f7f2 f8bd 	bl	8000638 <__aeabi_dmul>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	4629      	mov	r1, r5
 800e4c6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e4ca:	f7f1 fefd 	bl	80002c8 <__aeabi_dsub>
 800e4ce:	f806 4b01 	strb.w	r4, [r6], #1
 800e4d2:	9d03      	ldr	r5, [sp, #12]
 800e4d4:	eba6 040a 	sub.w	r4, r6, sl
 800e4d8:	42a5      	cmp	r5, r4
 800e4da:	4602      	mov	r2, r0
 800e4dc:	460b      	mov	r3, r1
 800e4de:	d133      	bne.n	800e548 <_dtoa_r+0x6e0>
 800e4e0:	f7f1 fef4 	bl	80002cc <__adddf3>
 800e4e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4e8:	4604      	mov	r4, r0
 800e4ea:	460d      	mov	r5, r1
 800e4ec:	f7f2 fb34 	bl	8000b58 <__aeabi_dcmpgt>
 800e4f0:	b9c0      	cbnz	r0, 800e524 <_dtoa_r+0x6bc>
 800e4f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	4629      	mov	r1, r5
 800e4fa:	f7f2 fb05 	bl	8000b08 <__aeabi_dcmpeq>
 800e4fe:	b110      	cbz	r0, 800e506 <_dtoa_r+0x69e>
 800e500:	f018 0f01 	tst.w	r8, #1
 800e504:	d10e      	bne.n	800e524 <_dtoa_r+0x6bc>
 800e506:	9902      	ldr	r1, [sp, #8]
 800e508:	4648      	mov	r0, r9
 800e50a:	f000 fb07 	bl	800eb1c <_Bfree>
 800e50e:	2300      	movs	r3, #0
 800e510:	7033      	strb	r3, [r6, #0]
 800e512:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e514:	3701      	adds	r7, #1
 800e516:	601f      	str	r7, [r3, #0]
 800e518:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	f000 824b 	beq.w	800e9b6 <_dtoa_r+0xb4e>
 800e520:	601e      	str	r6, [r3, #0]
 800e522:	e248      	b.n	800e9b6 <_dtoa_r+0xb4e>
 800e524:	46b8      	mov	r8, r7
 800e526:	4633      	mov	r3, r6
 800e528:	461e      	mov	r6, r3
 800e52a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e52e:	2a39      	cmp	r2, #57	@ 0x39
 800e530:	d106      	bne.n	800e540 <_dtoa_r+0x6d8>
 800e532:	459a      	cmp	sl, r3
 800e534:	d1f8      	bne.n	800e528 <_dtoa_r+0x6c0>
 800e536:	2230      	movs	r2, #48	@ 0x30
 800e538:	f108 0801 	add.w	r8, r8, #1
 800e53c:	f88a 2000 	strb.w	r2, [sl]
 800e540:	781a      	ldrb	r2, [r3, #0]
 800e542:	3201      	adds	r2, #1
 800e544:	701a      	strb	r2, [r3, #0]
 800e546:	e7a0      	b.n	800e48a <_dtoa_r+0x622>
 800e548:	4b6f      	ldr	r3, [pc, #444]	@ (800e708 <_dtoa_r+0x8a0>)
 800e54a:	2200      	movs	r2, #0
 800e54c:	f7f2 f874 	bl	8000638 <__aeabi_dmul>
 800e550:	2200      	movs	r2, #0
 800e552:	2300      	movs	r3, #0
 800e554:	4604      	mov	r4, r0
 800e556:	460d      	mov	r5, r1
 800e558:	f7f2 fad6 	bl	8000b08 <__aeabi_dcmpeq>
 800e55c:	2800      	cmp	r0, #0
 800e55e:	d09f      	beq.n	800e4a0 <_dtoa_r+0x638>
 800e560:	e7d1      	b.n	800e506 <_dtoa_r+0x69e>
 800e562:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e564:	2a00      	cmp	r2, #0
 800e566:	f000 80ea 	beq.w	800e73e <_dtoa_r+0x8d6>
 800e56a:	9a07      	ldr	r2, [sp, #28]
 800e56c:	2a01      	cmp	r2, #1
 800e56e:	f300 80cd 	bgt.w	800e70c <_dtoa_r+0x8a4>
 800e572:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e574:	2a00      	cmp	r2, #0
 800e576:	f000 80c1 	beq.w	800e6fc <_dtoa_r+0x894>
 800e57a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e57e:	9c08      	ldr	r4, [sp, #32]
 800e580:	9e00      	ldr	r6, [sp, #0]
 800e582:	9a00      	ldr	r2, [sp, #0]
 800e584:	441a      	add	r2, r3
 800e586:	9200      	str	r2, [sp, #0]
 800e588:	9a06      	ldr	r2, [sp, #24]
 800e58a:	2101      	movs	r1, #1
 800e58c:	441a      	add	r2, r3
 800e58e:	4648      	mov	r0, r9
 800e590:	9206      	str	r2, [sp, #24]
 800e592:	f000 fb77 	bl	800ec84 <__i2b>
 800e596:	4605      	mov	r5, r0
 800e598:	b166      	cbz	r6, 800e5b4 <_dtoa_r+0x74c>
 800e59a:	9b06      	ldr	r3, [sp, #24]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	dd09      	ble.n	800e5b4 <_dtoa_r+0x74c>
 800e5a0:	42b3      	cmp	r3, r6
 800e5a2:	9a00      	ldr	r2, [sp, #0]
 800e5a4:	bfa8      	it	ge
 800e5a6:	4633      	movge	r3, r6
 800e5a8:	1ad2      	subs	r2, r2, r3
 800e5aa:	9200      	str	r2, [sp, #0]
 800e5ac:	9a06      	ldr	r2, [sp, #24]
 800e5ae:	1af6      	subs	r6, r6, r3
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	9306      	str	r3, [sp, #24]
 800e5b4:	9b08      	ldr	r3, [sp, #32]
 800e5b6:	b30b      	cbz	r3, 800e5fc <_dtoa_r+0x794>
 800e5b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	f000 80c6 	beq.w	800e74c <_dtoa_r+0x8e4>
 800e5c0:	2c00      	cmp	r4, #0
 800e5c2:	f000 80c0 	beq.w	800e746 <_dtoa_r+0x8de>
 800e5c6:	4629      	mov	r1, r5
 800e5c8:	4622      	mov	r2, r4
 800e5ca:	4648      	mov	r0, r9
 800e5cc:	f000 fc12 	bl	800edf4 <__pow5mult>
 800e5d0:	9a02      	ldr	r2, [sp, #8]
 800e5d2:	4601      	mov	r1, r0
 800e5d4:	4605      	mov	r5, r0
 800e5d6:	4648      	mov	r0, r9
 800e5d8:	f000 fb6a 	bl	800ecb0 <__multiply>
 800e5dc:	9902      	ldr	r1, [sp, #8]
 800e5de:	4680      	mov	r8, r0
 800e5e0:	4648      	mov	r0, r9
 800e5e2:	f000 fa9b 	bl	800eb1c <_Bfree>
 800e5e6:	9b08      	ldr	r3, [sp, #32]
 800e5e8:	1b1b      	subs	r3, r3, r4
 800e5ea:	9308      	str	r3, [sp, #32]
 800e5ec:	f000 80b1 	beq.w	800e752 <_dtoa_r+0x8ea>
 800e5f0:	9a08      	ldr	r2, [sp, #32]
 800e5f2:	4641      	mov	r1, r8
 800e5f4:	4648      	mov	r0, r9
 800e5f6:	f000 fbfd 	bl	800edf4 <__pow5mult>
 800e5fa:	9002      	str	r0, [sp, #8]
 800e5fc:	2101      	movs	r1, #1
 800e5fe:	4648      	mov	r0, r9
 800e600:	f000 fb40 	bl	800ec84 <__i2b>
 800e604:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e606:	4604      	mov	r4, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	f000 81d8 	beq.w	800e9be <_dtoa_r+0xb56>
 800e60e:	461a      	mov	r2, r3
 800e610:	4601      	mov	r1, r0
 800e612:	4648      	mov	r0, r9
 800e614:	f000 fbee 	bl	800edf4 <__pow5mult>
 800e618:	9b07      	ldr	r3, [sp, #28]
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	4604      	mov	r4, r0
 800e61e:	f300 809f 	bgt.w	800e760 <_dtoa_r+0x8f8>
 800e622:	9b04      	ldr	r3, [sp, #16]
 800e624:	2b00      	cmp	r3, #0
 800e626:	f040 8097 	bne.w	800e758 <_dtoa_r+0x8f0>
 800e62a:	9b05      	ldr	r3, [sp, #20]
 800e62c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e630:	2b00      	cmp	r3, #0
 800e632:	f040 8093 	bne.w	800e75c <_dtoa_r+0x8f4>
 800e636:	9b05      	ldr	r3, [sp, #20]
 800e638:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e63c:	0d1b      	lsrs	r3, r3, #20
 800e63e:	051b      	lsls	r3, r3, #20
 800e640:	b133      	cbz	r3, 800e650 <_dtoa_r+0x7e8>
 800e642:	9b00      	ldr	r3, [sp, #0]
 800e644:	3301      	adds	r3, #1
 800e646:	9300      	str	r3, [sp, #0]
 800e648:	9b06      	ldr	r3, [sp, #24]
 800e64a:	3301      	adds	r3, #1
 800e64c:	9306      	str	r3, [sp, #24]
 800e64e:	2301      	movs	r3, #1
 800e650:	9308      	str	r3, [sp, #32]
 800e652:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e654:	2b00      	cmp	r3, #0
 800e656:	f000 81b8 	beq.w	800e9ca <_dtoa_r+0xb62>
 800e65a:	6923      	ldr	r3, [r4, #16]
 800e65c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e660:	6918      	ldr	r0, [r3, #16]
 800e662:	f000 fac3 	bl	800ebec <__hi0bits>
 800e666:	f1c0 0020 	rsb	r0, r0, #32
 800e66a:	9b06      	ldr	r3, [sp, #24]
 800e66c:	4418      	add	r0, r3
 800e66e:	f010 001f 	ands.w	r0, r0, #31
 800e672:	f000 8082 	beq.w	800e77a <_dtoa_r+0x912>
 800e676:	f1c0 0320 	rsb	r3, r0, #32
 800e67a:	2b04      	cmp	r3, #4
 800e67c:	dd73      	ble.n	800e766 <_dtoa_r+0x8fe>
 800e67e:	9b00      	ldr	r3, [sp, #0]
 800e680:	f1c0 001c 	rsb	r0, r0, #28
 800e684:	4403      	add	r3, r0
 800e686:	9300      	str	r3, [sp, #0]
 800e688:	9b06      	ldr	r3, [sp, #24]
 800e68a:	4403      	add	r3, r0
 800e68c:	4406      	add	r6, r0
 800e68e:	9306      	str	r3, [sp, #24]
 800e690:	9b00      	ldr	r3, [sp, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	dd05      	ble.n	800e6a2 <_dtoa_r+0x83a>
 800e696:	9902      	ldr	r1, [sp, #8]
 800e698:	461a      	mov	r2, r3
 800e69a:	4648      	mov	r0, r9
 800e69c:	f000 fc04 	bl	800eea8 <__lshift>
 800e6a0:	9002      	str	r0, [sp, #8]
 800e6a2:	9b06      	ldr	r3, [sp, #24]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	dd05      	ble.n	800e6b4 <_dtoa_r+0x84c>
 800e6a8:	4621      	mov	r1, r4
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	4648      	mov	r0, r9
 800e6ae:	f000 fbfb 	bl	800eea8 <__lshift>
 800e6b2:	4604      	mov	r4, r0
 800e6b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d061      	beq.n	800e77e <_dtoa_r+0x916>
 800e6ba:	9802      	ldr	r0, [sp, #8]
 800e6bc:	4621      	mov	r1, r4
 800e6be:	f000 fc5f 	bl	800ef80 <__mcmp>
 800e6c2:	2800      	cmp	r0, #0
 800e6c4:	da5b      	bge.n	800e77e <_dtoa_r+0x916>
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	9902      	ldr	r1, [sp, #8]
 800e6ca:	220a      	movs	r2, #10
 800e6cc:	4648      	mov	r0, r9
 800e6ce:	f000 fa47 	bl	800eb60 <__multadd>
 800e6d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6d4:	9002      	str	r0, [sp, #8]
 800e6d6:	f107 38ff 	add.w	r8, r7, #4294967295
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f000 8177 	beq.w	800e9ce <_dtoa_r+0xb66>
 800e6e0:	4629      	mov	r1, r5
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	220a      	movs	r2, #10
 800e6e6:	4648      	mov	r0, r9
 800e6e8:	f000 fa3a 	bl	800eb60 <__multadd>
 800e6ec:	f1bb 0f00 	cmp.w	fp, #0
 800e6f0:	4605      	mov	r5, r0
 800e6f2:	dc6f      	bgt.n	800e7d4 <_dtoa_r+0x96c>
 800e6f4:	9b07      	ldr	r3, [sp, #28]
 800e6f6:	2b02      	cmp	r3, #2
 800e6f8:	dc49      	bgt.n	800e78e <_dtoa_r+0x926>
 800e6fa:	e06b      	b.n	800e7d4 <_dtoa_r+0x96c>
 800e6fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e6fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e702:	e73c      	b.n	800e57e <_dtoa_r+0x716>
 800e704:	3fe00000 	.word	0x3fe00000
 800e708:	40240000 	.word	0x40240000
 800e70c:	9b03      	ldr	r3, [sp, #12]
 800e70e:	1e5c      	subs	r4, r3, #1
 800e710:	9b08      	ldr	r3, [sp, #32]
 800e712:	42a3      	cmp	r3, r4
 800e714:	db09      	blt.n	800e72a <_dtoa_r+0x8c2>
 800e716:	1b1c      	subs	r4, r3, r4
 800e718:	9b03      	ldr	r3, [sp, #12]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f6bf af30 	bge.w	800e580 <_dtoa_r+0x718>
 800e720:	9b00      	ldr	r3, [sp, #0]
 800e722:	9a03      	ldr	r2, [sp, #12]
 800e724:	1a9e      	subs	r6, r3, r2
 800e726:	2300      	movs	r3, #0
 800e728:	e72b      	b.n	800e582 <_dtoa_r+0x71a>
 800e72a:	9b08      	ldr	r3, [sp, #32]
 800e72c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e72e:	9408      	str	r4, [sp, #32]
 800e730:	1ae3      	subs	r3, r4, r3
 800e732:	441a      	add	r2, r3
 800e734:	9e00      	ldr	r6, [sp, #0]
 800e736:	9b03      	ldr	r3, [sp, #12]
 800e738:	920d      	str	r2, [sp, #52]	@ 0x34
 800e73a:	2400      	movs	r4, #0
 800e73c:	e721      	b.n	800e582 <_dtoa_r+0x71a>
 800e73e:	9c08      	ldr	r4, [sp, #32]
 800e740:	9e00      	ldr	r6, [sp, #0]
 800e742:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e744:	e728      	b.n	800e598 <_dtoa_r+0x730>
 800e746:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e74a:	e751      	b.n	800e5f0 <_dtoa_r+0x788>
 800e74c:	9a08      	ldr	r2, [sp, #32]
 800e74e:	9902      	ldr	r1, [sp, #8]
 800e750:	e750      	b.n	800e5f4 <_dtoa_r+0x78c>
 800e752:	f8cd 8008 	str.w	r8, [sp, #8]
 800e756:	e751      	b.n	800e5fc <_dtoa_r+0x794>
 800e758:	2300      	movs	r3, #0
 800e75a:	e779      	b.n	800e650 <_dtoa_r+0x7e8>
 800e75c:	9b04      	ldr	r3, [sp, #16]
 800e75e:	e777      	b.n	800e650 <_dtoa_r+0x7e8>
 800e760:	2300      	movs	r3, #0
 800e762:	9308      	str	r3, [sp, #32]
 800e764:	e779      	b.n	800e65a <_dtoa_r+0x7f2>
 800e766:	d093      	beq.n	800e690 <_dtoa_r+0x828>
 800e768:	9a00      	ldr	r2, [sp, #0]
 800e76a:	331c      	adds	r3, #28
 800e76c:	441a      	add	r2, r3
 800e76e:	9200      	str	r2, [sp, #0]
 800e770:	9a06      	ldr	r2, [sp, #24]
 800e772:	441a      	add	r2, r3
 800e774:	441e      	add	r6, r3
 800e776:	9206      	str	r2, [sp, #24]
 800e778:	e78a      	b.n	800e690 <_dtoa_r+0x828>
 800e77a:	4603      	mov	r3, r0
 800e77c:	e7f4      	b.n	800e768 <_dtoa_r+0x900>
 800e77e:	9b03      	ldr	r3, [sp, #12]
 800e780:	2b00      	cmp	r3, #0
 800e782:	46b8      	mov	r8, r7
 800e784:	dc20      	bgt.n	800e7c8 <_dtoa_r+0x960>
 800e786:	469b      	mov	fp, r3
 800e788:	9b07      	ldr	r3, [sp, #28]
 800e78a:	2b02      	cmp	r3, #2
 800e78c:	dd1e      	ble.n	800e7cc <_dtoa_r+0x964>
 800e78e:	f1bb 0f00 	cmp.w	fp, #0
 800e792:	f47f adb1 	bne.w	800e2f8 <_dtoa_r+0x490>
 800e796:	4621      	mov	r1, r4
 800e798:	465b      	mov	r3, fp
 800e79a:	2205      	movs	r2, #5
 800e79c:	4648      	mov	r0, r9
 800e79e:	f000 f9df 	bl	800eb60 <__multadd>
 800e7a2:	4601      	mov	r1, r0
 800e7a4:	4604      	mov	r4, r0
 800e7a6:	9802      	ldr	r0, [sp, #8]
 800e7a8:	f000 fbea 	bl	800ef80 <__mcmp>
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	f77f ada3 	ble.w	800e2f8 <_dtoa_r+0x490>
 800e7b2:	4656      	mov	r6, sl
 800e7b4:	2331      	movs	r3, #49	@ 0x31
 800e7b6:	f806 3b01 	strb.w	r3, [r6], #1
 800e7ba:	f108 0801 	add.w	r8, r8, #1
 800e7be:	e59f      	b.n	800e300 <_dtoa_r+0x498>
 800e7c0:	9c03      	ldr	r4, [sp, #12]
 800e7c2:	46b8      	mov	r8, r7
 800e7c4:	4625      	mov	r5, r4
 800e7c6:	e7f4      	b.n	800e7b2 <_dtoa_r+0x94a>
 800e7c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e7cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	f000 8101 	beq.w	800e9d6 <_dtoa_r+0xb6e>
 800e7d4:	2e00      	cmp	r6, #0
 800e7d6:	dd05      	ble.n	800e7e4 <_dtoa_r+0x97c>
 800e7d8:	4629      	mov	r1, r5
 800e7da:	4632      	mov	r2, r6
 800e7dc:	4648      	mov	r0, r9
 800e7de:	f000 fb63 	bl	800eea8 <__lshift>
 800e7e2:	4605      	mov	r5, r0
 800e7e4:	9b08      	ldr	r3, [sp, #32]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d05c      	beq.n	800e8a4 <_dtoa_r+0xa3c>
 800e7ea:	6869      	ldr	r1, [r5, #4]
 800e7ec:	4648      	mov	r0, r9
 800e7ee:	f000 f955 	bl	800ea9c <_Balloc>
 800e7f2:	4606      	mov	r6, r0
 800e7f4:	b928      	cbnz	r0, 800e802 <_dtoa_r+0x99a>
 800e7f6:	4b82      	ldr	r3, [pc, #520]	@ (800ea00 <_dtoa_r+0xb98>)
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e7fe:	f7ff bb4a 	b.w	800de96 <_dtoa_r+0x2e>
 800e802:	692a      	ldr	r2, [r5, #16]
 800e804:	3202      	adds	r2, #2
 800e806:	0092      	lsls	r2, r2, #2
 800e808:	f105 010c 	add.w	r1, r5, #12
 800e80c:	300c      	adds	r0, #12
 800e80e:	f7ff fa94 	bl	800dd3a <memcpy>
 800e812:	2201      	movs	r2, #1
 800e814:	4631      	mov	r1, r6
 800e816:	4648      	mov	r0, r9
 800e818:	f000 fb46 	bl	800eea8 <__lshift>
 800e81c:	f10a 0301 	add.w	r3, sl, #1
 800e820:	9300      	str	r3, [sp, #0]
 800e822:	eb0a 030b 	add.w	r3, sl, fp
 800e826:	9308      	str	r3, [sp, #32]
 800e828:	9b04      	ldr	r3, [sp, #16]
 800e82a:	f003 0301 	and.w	r3, r3, #1
 800e82e:	462f      	mov	r7, r5
 800e830:	9306      	str	r3, [sp, #24]
 800e832:	4605      	mov	r5, r0
 800e834:	9b00      	ldr	r3, [sp, #0]
 800e836:	9802      	ldr	r0, [sp, #8]
 800e838:	4621      	mov	r1, r4
 800e83a:	f103 3bff 	add.w	fp, r3, #4294967295
 800e83e:	f7ff fa8a 	bl	800dd56 <quorem>
 800e842:	4603      	mov	r3, r0
 800e844:	3330      	adds	r3, #48	@ 0x30
 800e846:	9003      	str	r0, [sp, #12]
 800e848:	4639      	mov	r1, r7
 800e84a:	9802      	ldr	r0, [sp, #8]
 800e84c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e84e:	f000 fb97 	bl	800ef80 <__mcmp>
 800e852:	462a      	mov	r2, r5
 800e854:	9004      	str	r0, [sp, #16]
 800e856:	4621      	mov	r1, r4
 800e858:	4648      	mov	r0, r9
 800e85a:	f000 fbad 	bl	800efb8 <__mdiff>
 800e85e:	68c2      	ldr	r2, [r0, #12]
 800e860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e862:	4606      	mov	r6, r0
 800e864:	bb02      	cbnz	r2, 800e8a8 <_dtoa_r+0xa40>
 800e866:	4601      	mov	r1, r0
 800e868:	9802      	ldr	r0, [sp, #8]
 800e86a:	f000 fb89 	bl	800ef80 <__mcmp>
 800e86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e870:	4602      	mov	r2, r0
 800e872:	4631      	mov	r1, r6
 800e874:	4648      	mov	r0, r9
 800e876:	920c      	str	r2, [sp, #48]	@ 0x30
 800e878:	9309      	str	r3, [sp, #36]	@ 0x24
 800e87a:	f000 f94f 	bl	800eb1c <_Bfree>
 800e87e:	9b07      	ldr	r3, [sp, #28]
 800e880:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e882:	9e00      	ldr	r6, [sp, #0]
 800e884:	ea42 0103 	orr.w	r1, r2, r3
 800e888:	9b06      	ldr	r3, [sp, #24]
 800e88a:	4319      	orrs	r1, r3
 800e88c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e88e:	d10d      	bne.n	800e8ac <_dtoa_r+0xa44>
 800e890:	2b39      	cmp	r3, #57	@ 0x39
 800e892:	d027      	beq.n	800e8e4 <_dtoa_r+0xa7c>
 800e894:	9a04      	ldr	r2, [sp, #16]
 800e896:	2a00      	cmp	r2, #0
 800e898:	dd01      	ble.n	800e89e <_dtoa_r+0xa36>
 800e89a:	9b03      	ldr	r3, [sp, #12]
 800e89c:	3331      	adds	r3, #49	@ 0x31
 800e89e:	f88b 3000 	strb.w	r3, [fp]
 800e8a2:	e52e      	b.n	800e302 <_dtoa_r+0x49a>
 800e8a4:	4628      	mov	r0, r5
 800e8a6:	e7b9      	b.n	800e81c <_dtoa_r+0x9b4>
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	e7e2      	b.n	800e872 <_dtoa_r+0xa0a>
 800e8ac:	9904      	ldr	r1, [sp, #16]
 800e8ae:	2900      	cmp	r1, #0
 800e8b0:	db04      	blt.n	800e8bc <_dtoa_r+0xa54>
 800e8b2:	9807      	ldr	r0, [sp, #28]
 800e8b4:	4301      	orrs	r1, r0
 800e8b6:	9806      	ldr	r0, [sp, #24]
 800e8b8:	4301      	orrs	r1, r0
 800e8ba:	d120      	bne.n	800e8fe <_dtoa_r+0xa96>
 800e8bc:	2a00      	cmp	r2, #0
 800e8be:	ddee      	ble.n	800e89e <_dtoa_r+0xa36>
 800e8c0:	9902      	ldr	r1, [sp, #8]
 800e8c2:	9300      	str	r3, [sp, #0]
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	4648      	mov	r0, r9
 800e8c8:	f000 faee 	bl	800eea8 <__lshift>
 800e8cc:	4621      	mov	r1, r4
 800e8ce:	9002      	str	r0, [sp, #8]
 800e8d0:	f000 fb56 	bl	800ef80 <__mcmp>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	9b00      	ldr	r3, [sp, #0]
 800e8d8:	dc02      	bgt.n	800e8e0 <_dtoa_r+0xa78>
 800e8da:	d1e0      	bne.n	800e89e <_dtoa_r+0xa36>
 800e8dc:	07da      	lsls	r2, r3, #31
 800e8de:	d5de      	bpl.n	800e89e <_dtoa_r+0xa36>
 800e8e0:	2b39      	cmp	r3, #57	@ 0x39
 800e8e2:	d1da      	bne.n	800e89a <_dtoa_r+0xa32>
 800e8e4:	2339      	movs	r3, #57	@ 0x39
 800e8e6:	f88b 3000 	strb.w	r3, [fp]
 800e8ea:	4633      	mov	r3, r6
 800e8ec:	461e      	mov	r6, r3
 800e8ee:	3b01      	subs	r3, #1
 800e8f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e8f4:	2a39      	cmp	r2, #57	@ 0x39
 800e8f6:	d04e      	beq.n	800e996 <_dtoa_r+0xb2e>
 800e8f8:	3201      	adds	r2, #1
 800e8fa:	701a      	strb	r2, [r3, #0]
 800e8fc:	e501      	b.n	800e302 <_dtoa_r+0x49a>
 800e8fe:	2a00      	cmp	r2, #0
 800e900:	dd03      	ble.n	800e90a <_dtoa_r+0xaa2>
 800e902:	2b39      	cmp	r3, #57	@ 0x39
 800e904:	d0ee      	beq.n	800e8e4 <_dtoa_r+0xa7c>
 800e906:	3301      	adds	r3, #1
 800e908:	e7c9      	b.n	800e89e <_dtoa_r+0xa36>
 800e90a:	9a00      	ldr	r2, [sp, #0]
 800e90c:	9908      	ldr	r1, [sp, #32]
 800e90e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e912:	428a      	cmp	r2, r1
 800e914:	d028      	beq.n	800e968 <_dtoa_r+0xb00>
 800e916:	9902      	ldr	r1, [sp, #8]
 800e918:	2300      	movs	r3, #0
 800e91a:	220a      	movs	r2, #10
 800e91c:	4648      	mov	r0, r9
 800e91e:	f000 f91f 	bl	800eb60 <__multadd>
 800e922:	42af      	cmp	r7, r5
 800e924:	9002      	str	r0, [sp, #8]
 800e926:	f04f 0300 	mov.w	r3, #0
 800e92a:	f04f 020a 	mov.w	r2, #10
 800e92e:	4639      	mov	r1, r7
 800e930:	4648      	mov	r0, r9
 800e932:	d107      	bne.n	800e944 <_dtoa_r+0xadc>
 800e934:	f000 f914 	bl	800eb60 <__multadd>
 800e938:	4607      	mov	r7, r0
 800e93a:	4605      	mov	r5, r0
 800e93c:	9b00      	ldr	r3, [sp, #0]
 800e93e:	3301      	adds	r3, #1
 800e940:	9300      	str	r3, [sp, #0]
 800e942:	e777      	b.n	800e834 <_dtoa_r+0x9cc>
 800e944:	f000 f90c 	bl	800eb60 <__multadd>
 800e948:	4629      	mov	r1, r5
 800e94a:	4607      	mov	r7, r0
 800e94c:	2300      	movs	r3, #0
 800e94e:	220a      	movs	r2, #10
 800e950:	4648      	mov	r0, r9
 800e952:	f000 f905 	bl	800eb60 <__multadd>
 800e956:	4605      	mov	r5, r0
 800e958:	e7f0      	b.n	800e93c <_dtoa_r+0xad4>
 800e95a:	f1bb 0f00 	cmp.w	fp, #0
 800e95e:	bfcc      	ite	gt
 800e960:	465e      	movgt	r6, fp
 800e962:	2601      	movle	r6, #1
 800e964:	4456      	add	r6, sl
 800e966:	2700      	movs	r7, #0
 800e968:	9902      	ldr	r1, [sp, #8]
 800e96a:	9300      	str	r3, [sp, #0]
 800e96c:	2201      	movs	r2, #1
 800e96e:	4648      	mov	r0, r9
 800e970:	f000 fa9a 	bl	800eea8 <__lshift>
 800e974:	4621      	mov	r1, r4
 800e976:	9002      	str	r0, [sp, #8]
 800e978:	f000 fb02 	bl	800ef80 <__mcmp>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	dcb4      	bgt.n	800e8ea <_dtoa_r+0xa82>
 800e980:	d102      	bne.n	800e988 <_dtoa_r+0xb20>
 800e982:	9b00      	ldr	r3, [sp, #0]
 800e984:	07db      	lsls	r3, r3, #31
 800e986:	d4b0      	bmi.n	800e8ea <_dtoa_r+0xa82>
 800e988:	4633      	mov	r3, r6
 800e98a:	461e      	mov	r6, r3
 800e98c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e990:	2a30      	cmp	r2, #48	@ 0x30
 800e992:	d0fa      	beq.n	800e98a <_dtoa_r+0xb22>
 800e994:	e4b5      	b.n	800e302 <_dtoa_r+0x49a>
 800e996:	459a      	cmp	sl, r3
 800e998:	d1a8      	bne.n	800e8ec <_dtoa_r+0xa84>
 800e99a:	2331      	movs	r3, #49	@ 0x31
 800e99c:	f108 0801 	add.w	r8, r8, #1
 800e9a0:	f88a 3000 	strb.w	r3, [sl]
 800e9a4:	e4ad      	b.n	800e302 <_dtoa_r+0x49a>
 800e9a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e9a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ea04 <_dtoa_r+0xb9c>
 800e9ac:	b11b      	cbz	r3, 800e9b6 <_dtoa_r+0xb4e>
 800e9ae:	f10a 0308 	add.w	r3, sl, #8
 800e9b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e9b4:	6013      	str	r3, [r2, #0]
 800e9b6:	4650      	mov	r0, sl
 800e9b8:	b017      	add	sp, #92	@ 0x5c
 800e9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9be:	9b07      	ldr	r3, [sp, #28]
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	f77f ae2e 	ble.w	800e622 <_dtoa_r+0x7ba>
 800e9c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e9c8:	9308      	str	r3, [sp, #32]
 800e9ca:	2001      	movs	r0, #1
 800e9cc:	e64d      	b.n	800e66a <_dtoa_r+0x802>
 800e9ce:	f1bb 0f00 	cmp.w	fp, #0
 800e9d2:	f77f aed9 	ble.w	800e788 <_dtoa_r+0x920>
 800e9d6:	4656      	mov	r6, sl
 800e9d8:	9802      	ldr	r0, [sp, #8]
 800e9da:	4621      	mov	r1, r4
 800e9dc:	f7ff f9bb 	bl	800dd56 <quorem>
 800e9e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e9e4:	f806 3b01 	strb.w	r3, [r6], #1
 800e9e8:	eba6 020a 	sub.w	r2, r6, sl
 800e9ec:	4593      	cmp	fp, r2
 800e9ee:	ddb4      	ble.n	800e95a <_dtoa_r+0xaf2>
 800e9f0:	9902      	ldr	r1, [sp, #8]
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	220a      	movs	r2, #10
 800e9f6:	4648      	mov	r0, r9
 800e9f8:	f000 f8b2 	bl	800eb60 <__multadd>
 800e9fc:	9002      	str	r0, [sp, #8]
 800e9fe:	e7eb      	b.n	800e9d8 <_dtoa_r+0xb70>
 800ea00:	0801085e 	.word	0x0801085e
 800ea04:	080107e2 	.word	0x080107e2

0800ea08 <_free_r>:
 800ea08:	b538      	push	{r3, r4, r5, lr}
 800ea0a:	4605      	mov	r5, r0
 800ea0c:	2900      	cmp	r1, #0
 800ea0e:	d041      	beq.n	800ea94 <_free_r+0x8c>
 800ea10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea14:	1f0c      	subs	r4, r1, #4
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	bfb8      	it	lt
 800ea1a:	18e4      	addlt	r4, r4, r3
 800ea1c:	f7fe fb52 	bl	800d0c4 <__malloc_lock>
 800ea20:	4a1d      	ldr	r2, [pc, #116]	@ (800ea98 <_free_r+0x90>)
 800ea22:	6813      	ldr	r3, [r2, #0]
 800ea24:	b933      	cbnz	r3, 800ea34 <_free_r+0x2c>
 800ea26:	6063      	str	r3, [r4, #4]
 800ea28:	6014      	str	r4, [r2, #0]
 800ea2a:	4628      	mov	r0, r5
 800ea2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea30:	f7fe bb4e 	b.w	800d0d0 <__malloc_unlock>
 800ea34:	42a3      	cmp	r3, r4
 800ea36:	d908      	bls.n	800ea4a <_free_r+0x42>
 800ea38:	6820      	ldr	r0, [r4, #0]
 800ea3a:	1821      	adds	r1, r4, r0
 800ea3c:	428b      	cmp	r3, r1
 800ea3e:	bf01      	itttt	eq
 800ea40:	6819      	ldreq	r1, [r3, #0]
 800ea42:	685b      	ldreq	r3, [r3, #4]
 800ea44:	1809      	addeq	r1, r1, r0
 800ea46:	6021      	streq	r1, [r4, #0]
 800ea48:	e7ed      	b.n	800ea26 <_free_r+0x1e>
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	b10b      	cbz	r3, 800ea54 <_free_r+0x4c>
 800ea50:	42a3      	cmp	r3, r4
 800ea52:	d9fa      	bls.n	800ea4a <_free_r+0x42>
 800ea54:	6811      	ldr	r1, [r2, #0]
 800ea56:	1850      	adds	r0, r2, r1
 800ea58:	42a0      	cmp	r0, r4
 800ea5a:	d10b      	bne.n	800ea74 <_free_r+0x6c>
 800ea5c:	6820      	ldr	r0, [r4, #0]
 800ea5e:	4401      	add	r1, r0
 800ea60:	1850      	adds	r0, r2, r1
 800ea62:	4283      	cmp	r3, r0
 800ea64:	6011      	str	r1, [r2, #0]
 800ea66:	d1e0      	bne.n	800ea2a <_free_r+0x22>
 800ea68:	6818      	ldr	r0, [r3, #0]
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	6053      	str	r3, [r2, #4]
 800ea6e:	4408      	add	r0, r1
 800ea70:	6010      	str	r0, [r2, #0]
 800ea72:	e7da      	b.n	800ea2a <_free_r+0x22>
 800ea74:	d902      	bls.n	800ea7c <_free_r+0x74>
 800ea76:	230c      	movs	r3, #12
 800ea78:	602b      	str	r3, [r5, #0]
 800ea7a:	e7d6      	b.n	800ea2a <_free_r+0x22>
 800ea7c:	6820      	ldr	r0, [r4, #0]
 800ea7e:	1821      	adds	r1, r4, r0
 800ea80:	428b      	cmp	r3, r1
 800ea82:	bf04      	itt	eq
 800ea84:	6819      	ldreq	r1, [r3, #0]
 800ea86:	685b      	ldreq	r3, [r3, #4]
 800ea88:	6063      	str	r3, [r4, #4]
 800ea8a:	bf04      	itt	eq
 800ea8c:	1809      	addeq	r1, r1, r0
 800ea8e:	6021      	streq	r1, [r4, #0]
 800ea90:	6054      	str	r4, [r2, #4]
 800ea92:	e7ca      	b.n	800ea2a <_free_r+0x22>
 800ea94:	bd38      	pop	{r3, r4, r5, pc}
 800ea96:	bf00      	nop
 800ea98:	20000ea8 	.word	0x20000ea8

0800ea9c <_Balloc>:
 800ea9c:	b570      	push	{r4, r5, r6, lr}
 800ea9e:	69c6      	ldr	r6, [r0, #28]
 800eaa0:	4604      	mov	r4, r0
 800eaa2:	460d      	mov	r5, r1
 800eaa4:	b976      	cbnz	r6, 800eac4 <_Balloc+0x28>
 800eaa6:	2010      	movs	r0, #16
 800eaa8:	f7fe fa5a 	bl	800cf60 <malloc>
 800eaac:	4602      	mov	r2, r0
 800eaae:	61e0      	str	r0, [r4, #28]
 800eab0:	b920      	cbnz	r0, 800eabc <_Balloc+0x20>
 800eab2:	4b18      	ldr	r3, [pc, #96]	@ (800eb14 <_Balloc+0x78>)
 800eab4:	4818      	ldr	r0, [pc, #96]	@ (800eb18 <_Balloc+0x7c>)
 800eab6:	216b      	movs	r1, #107	@ 0x6b
 800eab8:	f000 fc16 	bl	800f2e8 <__assert_func>
 800eabc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eac0:	6006      	str	r6, [r0, #0]
 800eac2:	60c6      	str	r6, [r0, #12]
 800eac4:	69e6      	ldr	r6, [r4, #28]
 800eac6:	68f3      	ldr	r3, [r6, #12]
 800eac8:	b183      	cbz	r3, 800eaec <_Balloc+0x50>
 800eaca:	69e3      	ldr	r3, [r4, #28]
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ead2:	b9b8      	cbnz	r0, 800eb04 <_Balloc+0x68>
 800ead4:	2101      	movs	r1, #1
 800ead6:	fa01 f605 	lsl.w	r6, r1, r5
 800eada:	1d72      	adds	r2, r6, #5
 800eadc:	0092      	lsls	r2, r2, #2
 800eade:	4620      	mov	r0, r4
 800eae0:	f000 fc20 	bl	800f324 <_calloc_r>
 800eae4:	b160      	cbz	r0, 800eb00 <_Balloc+0x64>
 800eae6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eaea:	e00e      	b.n	800eb0a <_Balloc+0x6e>
 800eaec:	2221      	movs	r2, #33	@ 0x21
 800eaee:	2104      	movs	r1, #4
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	f000 fc17 	bl	800f324 <_calloc_r>
 800eaf6:	69e3      	ldr	r3, [r4, #28]
 800eaf8:	60f0      	str	r0, [r6, #12]
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d1e4      	bne.n	800eaca <_Balloc+0x2e>
 800eb00:	2000      	movs	r0, #0
 800eb02:	bd70      	pop	{r4, r5, r6, pc}
 800eb04:	6802      	ldr	r2, [r0, #0]
 800eb06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb10:	e7f7      	b.n	800eb02 <_Balloc+0x66>
 800eb12:	bf00      	nop
 800eb14:	080107ef 	.word	0x080107ef
 800eb18:	0801086f 	.word	0x0801086f

0800eb1c <_Bfree>:
 800eb1c:	b570      	push	{r4, r5, r6, lr}
 800eb1e:	69c6      	ldr	r6, [r0, #28]
 800eb20:	4605      	mov	r5, r0
 800eb22:	460c      	mov	r4, r1
 800eb24:	b976      	cbnz	r6, 800eb44 <_Bfree+0x28>
 800eb26:	2010      	movs	r0, #16
 800eb28:	f7fe fa1a 	bl	800cf60 <malloc>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	61e8      	str	r0, [r5, #28]
 800eb30:	b920      	cbnz	r0, 800eb3c <_Bfree+0x20>
 800eb32:	4b09      	ldr	r3, [pc, #36]	@ (800eb58 <_Bfree+0x3c>)
 800eb34:	4809      	ldr	r0, [pc, #36]	@ (800eb5c <_Bfree+0x40>)
 800eb36:	218f      	movs	r1, #143	@ 0x8f
 800eb38:	f000 fbd6 	bl	800f2e8 <__assert_func>
 800eb3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb40:	6006      	str	r6, [r0, #0]
 800eb42:	60c6      	str	r6, [r0, #12]
 800eb44:	b13c      	cbz	r4, 800eb56 <_Bfree+0x3a>
 800eb46:	69eb      	ldr	r3, [r5, #28]
 800eb48:	6862      	ldr	r2, [r4, #4]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb50:	6021      	str	r1, [r4, #0]
 800eb52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb56:	bd70      	pop	{r4, r5, r6, pc}
 800eb58:	080107ef 	.word	0x080107ef
 800eb5c:	0801086f 	.word	0x0801086f

0800eb60 <__multadd>:
 800eb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb64:	690d      	ldr	r5, [r1, #16]
 800eb66:	4607      	mov	r7, r0
 800eb68:	460c      	mov	r4, r1
 800eb6a:	461e      	mov	r6, r3
 800eb6c:	f101 0c14 	add.w	ip, r1, #20
 800eb70:	2000      	movs	r0, #0
 800eb72:	f8dc 3000 	ldr.w	r3, [ip]
 800eb76:	b299      	uxth	r1, r3
 800eb78:	fb02 6101 	mla	r1, r2, r1, r6
 800eb7c:	0c1e      	lsrs	r6, r3, #16
 800eb7e:	0c0b      	lsrs	r3, r1, #16
 800eb80:	fb02 3306 	mla	r3, r2, r6, r3
 800eb84:	b289      	uxth	r1, r1
 800eb86:	3001      	adds	r0, #1
 800eb88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eb8c:	4285      	cmp	r5, r0
 800eb8e:	f84c 1b04 	str.w	r1, [ip], #4
 800eb92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb96:	dcec      	bgt.n	800eb72 <__multadd+0x12>
 800eb98:	b30e      	cbz	r6, 800ebde <__multadd+0x7e>
 800eb9a:	68a3      	ldr	r3, [r4, #8]
 800eb9c:	42ab      	cmp	r3, r5
 800eb9e:	dc19      	bgt.n	800ebd4 <__multadd+0x74>
 800eba0:	6861      	ldr	r1, [r4, #4]
 800eba2:	4638      	mov	r0, r7
 800eba4:	3101      	adds	r1, #1
 800eba6:	f7ff ff79 	bl	800ea9c <_Balloc>
 800ebaa:	4680      	mov	r8, r0
 800ebac:	b928      	cbnz	r0, 800ebba <__multadd+0x5a>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	4b0c      	ldr	r3, [pc, #48]	@ (800ebe4 <__multadd+0x84>)
 800ebb2:	480d      	ldr	r0, [pc, #52]	@ (800ebe8 <__multadd+0x88>)
 800ebb4:	21ba      	movs	r1, #186	@ 0xba
 800ebb6:	f000 fb97 	bl	800f2e8 <__assert_func>
 800ebba:	6922      	ldr	r2, [r4, #16]
 800ebbc:	3202      	adds	r2, #2
 800ebbe:	f104 010c 	add.w	r1, r4, #12
 800ebc2:	0092      	lsls	r2, r2, #2
 800ebc4:	300c      	adds	r0, #12
 800ebc6:	f7ff f8b8 	bl	800dd3a <memcpy>
 800ebca:	4621      	mov	r1, r4
 800ebcc:	4638      	mov	r0, r7
 800ebce:	f7ff ffa5 	bl	800eb1c <_Bfree>
 800ebd2:	4644      	mov	r4, r8
 800ebd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ebd8:	3501      	adds	r5, #1
 800ebda:	615e      	str	r6, [r3, #20]
 800ebdc:	6125      	str	r5, [r4, #16]
 800ebde:	4620      	mov	r0, r4
 800ebe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebe4:	0801085e 	.word	0x0801085e
 800ebe8:	0801086f 	.word	0x0801086f

0800ebec <__hi0bits>:
 800ebec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	bf36      	itet	cc
 800ebf4:	0403      	lslcc	r3, r0, #16
 800ebf6:	2000      	movcs	r0, #0
 800ebf8:	2010      	movcc	r0, #16
 800ebfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ebfe:	bf3c      	itt	cc
 800ec00:	021b      	lslcc	r3, r3, #8
 800ec02:	3008      	addcc	r0, #8
 800ec04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec08:	bf3c      	itt	cc
 800ec0a:	011b      	lslcc	r3, r3, #4
 800ec0c:	3004      	addcc	r0, #4
 800ec0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec12:	bf3c      	itt	cc
 800ec14:	009b      	lslcc	r3, r3, #2
 800ec16:	3002      	addcc	r0, #2
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	db05      	blt.n	800ec28 <__hi0bits+0x3c>
 800ec1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ec20:	f100 0001 	add.w	r0, r0, #1
 800ec24:	bf08      	it	eq
 800ec26:	2020      	moveq	r0, #32
 800ec28:	4770      	bx	lr

0800ec2a <__lo0bits>:
 800ec2a:	6803      	ldr	r3, [r0, #0]
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	f013 0007 	ands.w	r0, r3, #7
 800ec32:	d00b      	beq.n	800ec4c <__lo0bits+0x22>
 800ec34:	07d9      	lsls	r1, r3, #31
 800ec36:	d421      	bmi.n	800ec7c <__lo0bits+0x52>
 800ec38:	0798      	lsls	r0, r3, #30
 800ec3a:	bf49      	itett	mi
 800ec3c:	085b      	lsrmi	r3, r3, #1
 800ec3e:	089b      	lsrpl	r3, r3, #2
 800ec40:	2001      	movmi	r0, #1
 800ec42:	6013      	strmi	r3, [r2, #0]
 800ec44:	bf5c      	itt	pl
 800ec46:	6013      	strpl	r3, [r2, #0]
 800ec48:	2002      	movpl	r0, #2
 800ec4a:	4770      	bx	lr
 800ec4c:	b299      	uxth	r1, r3
 800ec4e:	b909      	cbnz	r1, 800ec54 <__lo0bits+0x2a>
 800ec50:	0c1b      	lsrs	r3, r3, #16
 800ec52:	2010      	movs	r0, #16
 800ec54:	b2d9      	uxtb	r1, r3
 800ec56:	b909      	cbnz	r1, 800ec5c <__lo0bits+0x32>
 800ec58:	3008      	adds	r0, #8
 800ec5a:	0a1b      	lsrs	r3, r3, #8
 800ec5c:	0719      	lsls	r1, r3, #28
 800ec5e:	bf04      	itt	eq
 800ec60:	091b      	lsreq	r3, r3, #4
 800ec62:	3004      	addeq	r0, #4
 800ec64:	0799      	lsls	r1, r3, #30
 800ec66:	bf04      	itt	eq
 800ec68:	089b      	lsreq	r3, r3, #2
 800ec6a:	3002      	addeq	r0, #2
 800ec6c:	07d9      	lsls	r1, r3, #31
 800ec6e:	d403      	bmi.n	800ec78 <__lo0bits+0x4e>
 800ec70:	085b      	lsrs	r3, r3, #1
 800ec72:	f100 0001 	add.w	r0, r0, #1
 800ec76:	d003      	beq.n	800ec80 <__lo0bits+0x56>
 800ec78:	6013      	str	r3, [r2, #0]
 800ec7a:	4770      	bx	lr
 800ec7c:	2000      	movs	r0, #0
 800ec7e:	4770      	bx	lr
 800ec80:	2020      	movs	r0, #32
 800ec82:	4770      	bx	lr

0800ec84 <__i2b>:
 800ec84:	b510      	push	{r4, lr}
 800ec86:	460c      	mov	r4, r1
 800ec88:	2101      	movs	r1, #1
 800ec8a:	f7ff ff07 	bl	800ea9c <_Balloc>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	b928      	cbnz	r0, 800ec9e <__i2b+0x1a>
 800ec92:	4b05      	ldr	r3, [pc, #20]	@ (800eca8 <__i2b+0x24>)
 800ec94:	4805      	ldr	r0, [pc, #20]	@ (800ecac <__i2b+0x28>)
 800ec96:	f240 1145 	movw	r1, #325	@ 0x145
 800ec9a:	f000 fb25 	bl	800f2e8 <__assert_func>
 800ec9e:	2301      	movs	r3, #1
 800eca0:	6144      	str	r4, [r0, #20]
 800eca2:	6103      	str	r3, [r0, #16]
 800eca4:	bd10      	pop	{r4, pc}
 800eca6:	bf00      	nop
 800eca8:	0801085e 	.word	0x0801085e
 800ecac:	0801086f 	.word	0x0801086f

0800ecb0 <__multiply>:
 800ecb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb4:	4617      	mov	r7, r2
 800ecb6:	690a      	ldr	r2, [r1, #16]
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	bfa8      	it	ge
 800ecbe:	463b      	movge	r3, r7
 800ecc0:	4689      	mov	r9, r1
 800ecc2:	bfa4      	itt	ge
 800ecc4:	460f      	movge	r7, r1
 800ecc6:	4699      	movge	r9, r3
 800ecc8:	693d      	ldr	r5, [r7, #16]
 800ecca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	6879      	ldr	r1, [r7, #4]
 800ecd2:	eb05 060a 	add.w	r6, r5, sl
 800ecd6:	42b3      	cmp	r3, r6
 800ecd8:	b085      	sub	sp, #20
 800ecda:	bfb8      	it	lt
 800ecdc:	3101      	addlt	r1, #1
 800ecde:	f7ff fedd 	bl	800ea9c <_Balloc>
 800ece2:	b930      	cbnz	r0, 800ecf2 <__multiply+0x42>
 800ece4:	4602      	mov	r2, r0
 800ece6:	4b41      	ldr	r3, [pc, #260]	@ (800edec <__multiply+0x13c>)
 800ece8:	4841      	ldr	r0, [pc, #260]	@ (800edf0 <__multiply+0x140>)
 800ecea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ecee:	f000 fafb 	bl	800f2e8 <__assert_func>
 800ecf2:	f100 0414 	add.w	r4, r0, #20
 800ecf6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ecfa:	4623      	mov	r3, r4
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	4573      	cmp	r3, lr
 800ed00:	d320      	bcc.n	800ed44 <__multiply+0x94>
 800ed02:	f107 0814 	add.w	r8, r7, #20
 800ed06:	f109 0114 	add.w	r1, r9, #20
 800ed0a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ed0e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ed12:	9302      	str	r3, [sp, #8]
 800ed14:	1beb      	subs	r3, r5, r7
 800ed16:	3b15      	subs	r3, #21
 800ed18:	f023 0303 	bic.w	r3, r3, #3
 800ed1c:	3304      	adds	r3, #4
 800ed1e:	3715      	adds	r7, #21
 800ed20:	42bd      	cmp	r5, r7
 800ed22:	bf38      	it	cc
 800ed24:	2304      	movcc	r3, #4
 800ed26:	9301      	str	r3, [sp, #4]
 800ed28:	9b02      	ldr	r3, [sp, #8]
 800ed2a:	9103      	str	r1, [sp, #12]
 800ed2c:	428b      	cmp	r3, r1
 800ed2e:	d80c      	bhi.n	800ed4a <__multiply+0x9a>
 800ed30:	2e00      	cmp	r6, #0
 800ed32:	dd03      	ble.n	800ed3c <__multiply+0x8c>
 800ed34:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d055      	beq.n	800ede8 <__multiply+0x138>
 800ed3c:	6106      	str	r6, [r0, #16]
 800ed3e:	b005      	add	sp, #20
 800ed40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed44:	f843 2b04 	str.w	r2, [r3], #4
 800ed48:	e7d9      	b.n	800ecfe <__multiply+0x4e>
 800ed4a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ed4e:	f1ba 0f00 	cmp.w	sl, #0
 800ed52:	d01f      	beq.n	800ed94 <__multiply+0xe4>
 800ed54:	46c4      	mov	ip, r8
 800ed56:	46a1      	mov	r9, r4
 800ed58:	2700      	movs	r7, #0
 800ed5a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ed5e:	f8d9 3000 	ldr.w	r3, [r9]
 800ed62:	fa1f fb82 	uxth.w	fp, r2
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	fb0a 330b 	mla	r3, sl, fp, r3
 800ed6c:	443b      	add	r3, r7
 800ed6e:	f8d9 7000 	ldr.w	r7, [r9]
 800ed72:	0c12      	lsrs	r2, r2, #16
 800ed74:	0c3f      	lsrs	r7, r7, #16
 800ed76:	fb0a 7202 	mla	r2, sl, r2, r7
 800ed7a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed84:	4565      	cmp	r5, ip
 800ed86:	f849 3b04 	str.w	r3, [r9], #4
 800ed8a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ed8e:	d8e4      	bhi.n	800ed5a <__multiply+0xaa>
 800ed90:	9b01      	ldr	r3, [sp, #4]
 800ed92:	50e7      	str	r7, [r4, r3]
 800ed94:	9b03      	ldr	r3, [sp, #12]
 800ed96:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ed9a:	3104      	adds	r1, #4
 800ed9c:	f1b9 0f00 	cmp.w	r9, #0
 800eda0:	d020      	beq.n	800ede4 <__multiply+0x134>
 800eda2:	6823      	ldr	r3, [r4, #0]
 800eda4:	4647      	mov	r7, r8
 800eda6:	46a4      	mov	ip, r4
 800eda8:	f04f 0a00 	mov.w	sl, #0
 800edac:	f8b7 b000 	ldrh.w	fp, [r7]
 800edb0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800edb4:	fb09 220b 	mla	r2, r9, fp, r2
 800edb8:	4452      	add	r2, sl
 800edba:	b29b      	uxth	r3, r3
 800edbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800edc0:	f84c 3b04 	str.w	r3, [ip], #4
 800edc4:	f857 3b04 	ldr.w	r3, [r7], #4
 800edc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800edcc:	f8bc 3000 	ldrh.w	r3, [ip]
 800edd0:	fb09 330a 	mla	r3, r9, sl, r3
 800edd4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800edd8:	42bd      	cmp	r5, r7
 800edda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800edde:	d8e5      	bhi.n	800edac <__multiply+0xfc>
 800ede0:	9a01      	ldr	r2, [sp, #4]
 800ede2:	50a3      	str	r3, [r4, r2]
 800ede4:	3404      	adds	r4, #4
 800ede6:	e79f      	b.n	800ed28 <__multiply+0x78>
 800ede8:	3e01      	subs	r6, #1
 800edea:	e7a1      	b.n	800ed30 <__multiply+0x80>
 800edec:	0801085e 	.word	0x0801085e
 800edf0:	0801086f 	.word	0x0801086f

0800edf4 <__pow5mult>:
 800edf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edf8:	4615      	mov	r5, r2
 800edfa:	f012 0203 	ands.w	r2, r2, #3
 800edfe:	4607      	mov	r7, r0
 800ee00:	460e      	mov	r6, r1
 800ee02:	d007      	beq.n	800ee14 <__pow5mult+0x20>
 800ee04:	4c25      	ldr	r4, [pc, #148]	@ (800ee9c <__pow5mult+0xa8>)
 800ee06:	3a01      	subs	r2, #1
 800ee08:	2300      	movs	r3, #0
 800ee0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee0e:	f7ff fea7 	bl	800eb60 <__multadd>
 800ee12:	4606      	mov	r6, r0
 800ee14:	10ad      	asrs	r5, r5, #2
 800ee16:	d03d      	beq.n	800ee94 <__pow5mult+0xa0>
 800ee18:	69fc      	ldr	r4, [r7, #28]
 800ee1a:	b97c      	cbnz	r4, 800ee3c <__pow5mult+0x48>
 800ee1c:	2010      	movs	r0, #16
 800ee1e:	f7fe f89f 	bl	800cf60 <malloc>
 800ee22:	4602      	mov	r2, r0
 800ee24:	61f8      	str	r0, [r7, #28]
 800ee26:	b928      	cbnz	r0, 800ee34 <__pow5mult+0x40>
 800ee28:	4b1d      	ldr	r3, [pc, #116]	@ (800eea0 <__pow5mult+0xac>)
 800ee2a:	481e      	ldr	r0, [pc, #120]	@ (800eea4 <__pow5mult+0xb0>)
 800ee2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ee30:	f000 fa5a 	bl	800f2e8 <__assert_func>
 800ee34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee38:	6004      	str	r4, [r0, #0]
 800ee3a:	60c4      	str	r4, [r0, #12]
 800ee3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ee40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee44:	b94c      	cbnz	r4, 800ee5a <__pow5mult+0x66>
 800ee46:	f240 2171 	movw	r1, #625	@ 0x271
 800ee4a:	4638      	mov	r0, r7
 800ee4c:	f7ff ff1a 	bl	800ec84 <__i2b>
 800ee50:	2300      	movs	r3, #0
 800ee52:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee56:	4604      	mov	r4, r0
 800ee58:	6003      	str	r3, [r0, #0]
 800ee5a:	f04f 0900 	mov.w	r9, #0
 800ee5e:	07eb      	lsls	r3, r5, #31
 800ee60:	d50a      	bpl.n	800ee78 <__pow5mult+0x84>
 800ee62:	4631      	mov	r1, r6
 800ee64:	4622      	mov	r2, r4
 800ee66:	4638      	mov	r0, r7
 800ee68:	f7ff ff22 	bl	800ecb0 <__multiply>
 800ee6c:	4631      	mov	r1, r6
 800ee6e:	4680      	mov	r8, r0
 800ee70:	4638      	mov	r0, r7
 800ee72:	f7ff fe53 	bl	800eb1c <_Bfree>
 800ee76:	4646      	mov	r6, r8
 800ee78:	106d      	asrs	r5, r5, #1
 800ee7a:	d00b      	beq.n	800ee94 <__pow5mult+0xa0>
 800ee7c:	6820      	ldr	r0, [r4, #0]
 800ee7e:	b938      	cbnz	r0, 800ee90 <__pow5mult+0x9c>
 800ee80:	4622      	mov	r2, r4
 800ee82:	4621      	mov	r1, r4
 800ee84:	4638      	mov	r0, r7
 800ee86:	f7ff ff13 	bl	800ecb0 <__multiply>
 800ee8a:	6020      	str	r0, [r4, #0]
 800ee8c:	f8c0 9000 	str.w	r9, [r0]
 800ee90:	4604      	mov	r4, r0
 800ee92:	e7e4      	b.n	800ee5e <__pow5mult+0x6a>
 800ee94:	4630      	mov	r0, r6
 800ee96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee9a:	bf00      	nop
 800ee9c:	08010b00 	.word	0x08010b00
 800eea0:	080107ef 	.word	0x080107ef
 800eea4:	0801086f 	.word	0x0801086f

0800eea8 <__lshift>:
 800eea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeac:	460c      	mov	r4, r1
 800eeae:	6849      	ldr	r1, [r1, #4]
 800eeb0:	6923      	ldr	r3, [r4, #16]
 800eeb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eeb6:	68a3      	ldr	r3, [r4, #8]
 800eeb8:	4607      	mov	r7, r0
 800eeba:	4691      	mov	r9, r2
 800eebc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eec0:	f108 0601 	add.w	r6, r8, #1
 800eec4:	42b3      	cmp	r3, r6
 800eec6:	db0b      	blt.n	800eee0 <__lshift+0x38>
 800eec8:	4638      	mov	r0, r7
 800eeca:	f7ff fde7 	bl	800ea9c <_Balloc>
 800eece:	4605      	mov	r5, r0
 800eed0:	b948      	cbnz	r0, 800eee6 <__lshift+0x3e>
 800eed2:	4602      	mov	r2, r0
 800eed4:	4b28      	ldr	r3, [pc, #160]	@ (800ef78 <__lshift+0xd0>)
 800eed6:	4829      	ldr	r0, [pc, #164]	@ (800ef7c <__lshift+0xd4>)
 800eed8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eedc:	f000 fa04 	bl	800f2e8 <__assert_func>
 800eee0:	3101      	adds	r1, #1
 800eee2:	005b      	lsls	r3, r3, #1
 800eee4:	e7ee      	b.n	800eec4 <__lshift+0x1c>
 800eee6:	2300      	movs	r3, #0
 800eee8:	f100 0114 	add.w	r1, r0, #20
 800eeec:	f100 0210 	add.w	r2, r0, #16
 800eef0:	4618      	mov	r0, r3
 800eef2:	4553      	cmp	r3, sl
 800eef4:	db33      	blt.n	800ef5e <__lshift+0xb6>
 800eef6:	6920      	ldr	r0, [r4, #16]
 800eef8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eefc:	f104 0314 	add.w	r3, r4, #20
 800ef00:	f019 091f 	ands.w	r9, r9, #31
 800ef04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ef0c:	d02b      	beq.n	800ef66 <__lshift+0xbe>
 800ef0e:	f1c9 0e20 	rsb	lr, r9, #32
 800ef12:	468a      	mov	sl, r1
 800ef14:	2200      	movs	r2, #0
 800ef16:	6818      	ldr	r0, [r3, #0]
 800ef18:	fa00 f009 	lsl.w	r0, r0, r9
 800ef1c:	4310      	orrs	r0, r2
 800ef1e:	f84a 0b04 	str.w	r0, [sl], #4
 800ef22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef26:	459c      	cmp	ip, r3
 800ef28:	fa22 f20e 	lsr.w	r2, r2, lr
 800ef2c:	d8f3      	bhi.n	800ef16 <__lshift+0x6e>
 800ef2e:	ebac 0304 	sub.w	r3, ip, r4
 800ef32:	3b15      	subs	r3, #21
 800ef34:	f023 0303 	bic.w	r3, r3, #3
 800ef38:	3304      	adds	r3, #4
 800ef3a:	f104 0015 	add.w	r0, r4, #21
 800ef3e:	4560      	cmp	r0, ip
 800ef40:	bf88      	it	hi
 800ef42:	2304      	movhi	r3, #4
 800ef44:	50ca      	str	r2, [r1, r3]
 800ef46:	b10a      	cbz	r2, 800ef4c <__lshift+0xa4>
 800ef48:	f108 0602 	add.w	r6, r8, #2
 800ef4c:	3e01      	subs	r6, #1
 800ef4e:	4638      	mov	r0, r7
 800ef50:	612e      	str	r6, [r5, #16]
 800ef52:	4621      	mov	r1, r4
 800ef54:	f7ff fde2 	bl	800eb1c <_Bfree>
 800ef58:	4628      	mov	r0, r5
 800ef5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef62:	3301      	adds	r3, #1
 800ef64:	e7c5      	b.n	800eef2 <__lshift+0x4a>
 800ef66:	3904      	subs	r1, #4
 800ef68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef6c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef70:	459c      	cmp	ip, r3
 800ef72:	d8f9      	bhi.n	800ef68 <__lshift+0xc0>
 800ef74:	e7ea      	b.n	800ef4c <__lshift+0xa4>
 800ef76:	bf00      	nop
 800ef78:	0801085e 	.word	0x0801085e
 800ef7c:	0801086f 	.word	0x0801086f

0800ef80 <__mcmp>:
 800ef80:	690a      	ldr	r2, [r1, #16]
 800ef82:	4603      	mov	r3, r0
 800ef84:	6900      	ldr	r0, [r0, #16]
 800ef86:	1a80      	subs	r0, r0, r2
 800ef88:	b530      	push	{r4, r5, lr}
 800ef8a:	d10e      	bne.n	800efaa <__mcmp+0x2a>
 800ef8c:	3314      	adds	r3, #20
 800ef8e:	3114      	adds	r1, #20
 800ef90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ef94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ef98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ef9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800efa0:	4295      	cmp	r5, r2
 800efa2:	d003      	beq.n	800efac <__mcmp+0x2c>
 800efa4:	d205      	bcs.n	800efb2 <__mcmp+0x32>
 800efa6:	f04f 30ff 	mov.w	r0, #4294967295
 800efaa:	bd30      	pop	{r4, r5, pc}
 800efac:	42a3      	cmp	r3, r4
 800efae:	d3f3      	bcc.n	800ef98 <__mcmp+0x18>
 800efb0:	e7fb      	b.n	800efaa <__mcmp+0x2a>
 800efb2:	2001      	movs	r0, #1
 800efb4:	e7f9      	b.n	800efaa <__mcmp+0x2a>
	...

0800efb8 <__mdiff>:
 800efb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efbc:	4689      	mov	r9, r1
 800efbe:	4606      	mov	r6, r0
 800efc0:	4611      	mov	r1, r2
 800efc2:	4648      	mov	r0, r9
 800efc4:	4614      	mov	r4, r2
 800efc6:	f7ff ffdb 	bl	800ef80 <__mcmp>
 800efca:	1e05      	subs	r5, r0, #0
 800efcc:	d112      	bne.n	800eff4 <__mdiff+0x3c>
 800efce:	4629      	mov	r1, r5
 800efd0:	4630      	mov	r0, r6
 800efd2:	f7ff fd63 	bl	800ea9c <_Balloc>
 800efd6:	4602      	mov	r2, r0
 800efd8:	b928      	cbnz	r0, 800efe6 <__mdiff+0x2e>
 800efda:	4b3f      	ldr	r3, [pc, #252]	@ (800f0d8 <__mdiff+0x120>)
 800efdc:	f240 2137 	movw	r1, #567	@ 0x237
 800efe0:	483e      	ldr	r0, [pc, #248]	@ (800f0dc <__mdiff+0x124>)
 800efe2:	f000 f981 	bl	800f2e8 <__assert_func>
 800efe6:	2301      	movs	r3, #1
 800efe8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800efec:	4610      	mov	r0, r2
 800efee:	b003      	add	sp, #12
 800eff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff4:	bfbc      	itt	lt
 800eff6:	464b      	movlt	r3, r9
 800eff8:	46a1      	movlt	r9, r4
 800effa:	4630      	mov	r0, r6
 800effc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f000:	bfba      	itte	lt
 800f002:	461c      	movlt	r4, r3
 800f004:	2501      	movlt	r5, #1
 800f006:	2500      	movge	r5, #0
 800f008:	f7ff fd48 	bl	800ea9c <_Balloc>
 800f00c:	4602      	mov	r2, r0
 800f00e:	b918      	cbnz	r0, 800f018 <__mdiff+0x60>
 800f010:	4b31      	ldr	r3, [pc, #196]	@ (800f0d8 <__mdiff+0x120>)
 800f012:	f240 2145 	movw	r1, #581	@ 0x245
 800f016:	e7e3      	b.n	800efe0 <__mdiff+0x28>
 800f018:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f01c:	6926      	ldr	r6, [r4, #16]
 800f01e:	60c5      	str	r5, [r0, #12]
 800f020:	f109 0310 	add.w	r3, r9, #16
 800f024:	f109 0514 	add.w	r5, r9, #20
 800f028:	f104 0e14 	add.w	lr, r4, #20
 800f02c:	f100 0b14 	add.w	fp, r0, #20
 800f030:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f034:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f038:	9301      	str	r3, [sp, #4]
 800f03a:	46d9      	mov	r9, fp
 800f03c:	f04f 0c00 	mov.w	ip, #0
 800f040:	9b01      	ldr	r3, [sp, #4]
 800f042:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f046:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f04a:	9301      	str	r3, [sp, #4]
 800f04c:	fa1f f38a 	uxth.w	r3, sl
 800f050:	4619      	mov	r1, r3
 800f052:	b283      	uxth	r3, r0
 800f054:	1acb      	subs	r3, r1, r3
 800f056:	0c00      	lsrs	r0, r0, #16
 800f058:	4463      	add	r3, ip
 800f05a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f05e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f062:	b29b      	uxth	r3, r3
 800f064:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f068:	4576      	cmp	r6, lr
 800f06a:	f849 3b04 	str.w	r3, [r9], #4
 800f06e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f072:	d8e5      	bhi.n	800f040 <__mdiff+0x88>
 800f074:	1b33      	subs	r3, r6, r4
 800f076:	3b15      	subs	r3, #21
 800f078:	f023 0303 	bic.w	r3, r3, #3
 800f07c:	3415      	adds	r4, #21
 800f07e:	3304      	adds	r3, #4
 800f080:	42a6      	cmp	r6, r4
 800f082:	bf38      	it	cc
 800f084:	2304      	movcc	r3, #4
 800f086:	441d      	add	r5, r3
 800f088:	445b      	add	r3, fp
 800f08a:	461e      	mov	r6, r3
 800f08c:	462c      	mov	r4, r5
 800f08e:	4544      	cmp	r4, r8
 800f090:	d30e      	bcc.n	800f0b0 <__mdiff+0xf8>
 800f092:	f108 0103 	add.w	r1, r8, #3
 800f096:	1b49      	subs	r1, r1, r5
 800f098:	f021 0103 	bic.w	r1, r1, #3
 800f09c:	3d03      	subs	r5, #3
 800f09e:	45a8      	cmp	r8, r5
 800f0a0:	bf38      	it	cc
 800f0a2:	2100      	movcc	r1, #0
 800f0a4:	440b      	add	r3, r1
 800f0a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f0aa:	b191      	cbz	r1, 800f0d2 <__mdiff+0x11a>
 800f0ac:	6117      	str	r7, [r2, #16]
 800f0ae:	e79d      	b.n	800efec <__mdiff+0x34>
 800f0b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800f0b4:	46e6      	mov	lr, ip
 800f0b6:	0c08      	lsrs	r0, r1, #16
 800f0b8:	fa1c fc81 	uxtah	ip, ip, r1
 800f0bc:	4471      	add	r1, lr
 800f0be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f0c2:	b289      	uxth	r1, r1
 800f0c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f0c8:	f846 1b04 	str.w	r1, [r6], #4
 800f0cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f0d0:	e7dd      	b.n	800f08e <__mdiff+0xd6>
 800f0d2:	3f01      	subs	r7, #1
 800f0d4:	e7e7      	b.n	800f0a6 <__mdiff+0xee>
 800f0d6:	bf00      	nop
 800f0d8:	0801085e 	.word	0x0801085e
 800f0dc:	0801086f 	.word	0x0801086f

0800f0e0 <__d2b>:
 800f0e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0e4:	460f      	mov	r7, r1
 800f0e6:	2101      	movs	r1, #1
 800f0e8:	ec59 8b10 	vmov	r8, r9, d0
 800f0ec:	4616      	mov	r6, r2
 800f0ee:	f7ff fcd5 	bl	800ea9c <_Balloc>
 800f0f2:	4604      	mov	r4, r0
 800f0f4:	b930      	cbnz	r0, 800f104 <__d2b+0x24>
 800f0f6:	4602      	mov	r2, r0
 800f0f8:	4b23      	ldr	r3, [pc, #140]	@ (800f188 <__d2b+0xa8>)
 800f0fa:	4824      	ldr	r0, [pc, #144]	@ (800f18c <__d2b+0xac>)
 800f0fc:	f240 310f 	movw	r1, #783	@ 0x30f
 800f100:	f000 f8f2 	bl	800f2e8 <__assert_func>
 800f104:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f108:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f10c:	b10d      	cbz	r5, 800f112 <__d2b+0x32>
 800f10e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f112:	9301      	str	r3, [sp, #4]
 800f114:	f1b8 0300 	subs.w	r3, r8, #0
 800f118:	d023      	beq.n	800f162 <__d2b+0x82>
 800f11a:	4668      	mov	r0, sp
 800f11c:	9300      	str	r3, [sp, #0]
 800f11e:	f7ff fd84 	bl	800ec2a <__lo0bits>
 800f122:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f126:	b1d0      	cbz	r0, 800f15e <__d2b+0x7e>
 800f128:	f1c0 0320 	rsb	r3, r0, #32
 800f12c:	fa02 f303 	lsl.w	r3, r2, r3
 800f130:	430b      	orrs	r3, r1
 800f132:	40c2      	lsrs	r2, r0
 800f134:	6163      	str	r3, [r4, #20]
 800f136:	9201      	str	r2, [sp, #4]
 800f138:	9b01      	ldr	r3, [sp, #4]
 800f13a:	61a3      	str	r3, [r4, #24]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	bf0c      	ite	eq
 800f140:	2201      	moveq	r2, #1
 800f142:	2202      	movne	r2, #2
 800f144:	6122      	str	r2, [r4, #16]
 800f146:	b1a5      	cbz	r5, 800f172 <__d2b+0x92>
 800f148:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f14c:	4405      	add	r5, r0
 800f14e:	603d      	str	r5, [r7, #0]
 800f150:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f154:	6030      	str	r0, [r6, #0]
 800f156:	4620      	mov	r0, r4
 800f158:	b003      	add	sp, #12
 800f15a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f15e:	6161      	str	r1, [r4, #20]
 800f160:	e7ea      	b.n	800f138 <__d2b+0x58>
 800f162:	a801      	add	r0, sp, #4
 800f164:	f7ff fd61 	bl	800ec2a <__lo0bits>
 800f168:	9b01      	ldr	r3, [sp, #4]
 800f16a:	6163      	str	r3, [r4, #20]
 800f16c:	3020      	adds	r0, #32
 800f16e:	2201      	movs	r2, #1
 800f170:	e7e8      	b.n	800f144 <__d2b+0x64>
 800f172:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f176:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f17a:	6038      	str	r0, [r7, #0]
 800f17c:	6918      	ldr	r0, [r3, #16]
 800f17e:	f7ff fd35 	bl	800ebec <__hi0bits>
 800f182:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f186:	e7e5      	b.n	800f154 <__d2b+0x74>
 800f188:	0801085e 	.word	0x0801085e
 800f18c:	0801086f 	.word	0x0801086f

0800f190 <__sflush_r>:
 800f190:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f198:	0716      	lsls	r6, r2, #28
 800f19a:	4605      	mov	r5, r0
 800f19c:	460c      	mov	r4, r1
 800f19e:	d454      	bmi.n	800f24a <__sflush_r+0xba>
 800f1a0:	684b      	ldr	r3, [r1, #4]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	dc02      	bgt.n	800f1ac <__sflush_r+0x1c>
 800f1a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	dd48      	ble.n	800f23e <__sflush_r+0xae>
 800f1ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f1ae:	2e00      	cmp	r6, #0
 800f1b0:	d045      	beq.n	800f23e <__sflush_r+0xae>
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f1b8:	682f      	ldr	r7, [r5, #0]
 800f1ba:	6a21      	ldr	r1, [r4, #32]
 800f1bc:	602b      	str	r3, [r5, #0]
 800f1be:	d030      	beq.n	800f222 <__sflush_r+0x92>
 800f1c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f1c2:	89a3      	ldrh	r3, [r4, #12]
 800f1c4:	0759      	lsls	r1, r3, #29
 800f1c6:	d505      	bpl.n	800f1d4 <__sflush_r+0x44>
 800f1c8:	6863      	ldr	r3, [r4, #4]
 800f1ca:	1ad2      	subs	r2, r2, r3
 800f1cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f1ce:	b10b      	cbz	r3, 800f1d4 <__sflush_r+0x44>
 800f1d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f1d2:	1ad2      	subs	r2, r2, r3
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f1d8:	6a21      	ldr	r1, [r4, #32]
 800f1da:	4628      	mov	r0, r5
 800f1dc:	47b0      	blx	r6
 800f1de:	1c43      	adds	r3, r0, #1
 800f1e0:	89a3      	ldrh	r3, [r4, #12]
 800f1e2:	d106      	bne.n	800f1f2 <__sflush_r+0x62>
 800f1e4:	6829      	ldr	r1, [r5, #0]
 800f1e6:	291d      	cmp	r1, #29
 800f1e8:	d82b      	bhi.n	800f242 <__sflush_r+0xb2>
 800f1ea:	4a2a      	ldr	r2, [pc, #168]	@ (800f294 <__sflush_r+0x104>)
 800f1ec:	40ca      	lsrs	r2, r1
 800f1ee:	07d6      	lsls	r6, r2, #31
 800f1f0:	d527      	bpl.n	800f242 <__sflush_r+0xb2>
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	6062      	str	r2, [r4, #4]
 800f1f6:	04d9      	lsls	r1, r3, #19
 800f1f8:	6922      	ldr	r2, [r4, #16]
 800f1fa:	6022      	str	r2, [r4, #0]
 800f1fc:	d504      	bpl.n	800f208 <__sflush_r+0x78>
 800f1fe:	1c42      	adds	r2, r0, #1
 800f200:	d101      	bne.n	800f206 <__sflush_r+0x76>
 800f202:	682b      	ldr	r3, [r5, #0]
 800f204:	b903      	cbnz	r3, 800f208 <__sflush_r+0x78>
 800f206:	6560      	str	r0, [r4, #84]	@ 0x54
 800f208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f20a:	602f      	str	r7, [r5, #0]
 800f20c:	b1b9      	cbz	r1, 800f23e <__sflush_r+0xae>
 800f20e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f212:	4299      	cmp	r1, r3
 800f214:	d002      	beq.n	800f21c <__sflush_r+0x8c>
 800f216:	4628      	mov	r0, r5
 800f218:	f7ff fbf6 	bl	800ea08 <_free_r>
 800f21c:	2300      	movs	r3, #0
 800f21e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f220:	e00d      	b.n	800f23e <__sflush_r+0xae>
 800f222:	2301      	movs	r3, #1
 800f224:	4628      	mov	r0, r5
 800f226:	47b0      	blx	r6
 800f228:	4602      	mov	r2, r0
 800f22a:	1c50      	adds	r0, r2, #1
 800f22c:	d1c9      	bne.n	800f1c2 <__sflush_r+0x32>
 800f22e:	682b      	ldr	r3, [r5, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d0c6      	beq.n	800f1c2 <__sflush_r+0x32>
 800f234:	2b1d      	cmp	r3, #29
 800f236:	d001      	beq.n	800f23c <__sflush_r+0xac>
 800f238:	2b16      	cmp	r3, #22
 800f23a:	d11e      	bne.n	800f27a <__sflush_r+0xea>
 800f23c:	602f      	str	r7, [r5, #0]
 800f23e:	2000      	movs	r0, #0
 800f240:	e022      	b.n	800f288 <__sflush_r+0xf8>
 800f242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f246:	b21b      	sxth	r3, r3
 800f248:	e01b      	b.n	800f282 <__sflush_r+0xf2>
 800f24a:	690f      	ldr	r7, [r1, #16]
 800f24c:	2f00      	cmp	r7, #0
 800f24e:	d0f6      	beq.n	800f23e <__sflush_r+0xae>
 800f250:	0793      	lsls	r3, r2, #30
 800f252:	680e      	ldr	r6, [r1, #0]
 800f254:	bf08      	it	eq
 800f256:	694b      	ldreq	r3, [r1, #20]
 800f258:	600f      	str	r7, [r1, #0]
 800f25a:	bf18      	it	ne
 800f25c:	2300      	movne	r3, #0
 800f25e:	eba6 0807 	sub.w	r8, r6, r7
 800f262:	608b      	str	r3, [r1, #8]
 800f264:	f1b8 0f00 	cmp.w	r8, #0
 800f268:	dde9      	ble.n	800f23e <__sflush_r+0xae>
 800f26a:	6a21      	ldr	r1, [r4, #32]
 800f26c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f26e:	4643      	mov	r3, r8
 800f270:	463a      	mov	r2, r7
 800f272:	4628      	mov	r0, r5
 800f274:	47b0      	blx	r6
 800f276:	2800      	cmp	r0, #0
 800f278:	dc08      	bgt.n	800f28c <__sflush_r+0xfc>
 800f27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f27e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f282:	81a3      	strh	r3, [r4, #12]
 800f284:	f04f 30ff 	mov.w	r0, #4294967295
 800f288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f28c:	4407      	add	r7, r0
 800f28e:	eba8 0800 	sub.w	r8, r8, r0
 800f292:	e7e7      	b.n	800f264 <__sflush_r+0xd4>
 800f294:	20400001 	.word	0x20400001

0800f298 <_fflush_r>:
 800f298:	b538      	push	{r3, r4, r5, lr}
 800f29a:	690b      	ldr	r3, [r1, #16]
 800f29c:	4605      	mov	r5, r0
 800f29e:	460c      	mov	r4, r1
 800f2a0:	b913      	cbnz	r3, 800f2a8 <_fflush_r+0x10>
 800f2a2:	2500      	movs	r5, #0
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	bd38      	pop	{r3, r4, r5, pc}
 800f2a8:	b118      	cbz	r0, 800f2b2 <_fflush_r+0x1a>
 800f2aa:	6a03      	ldr	r3, [r0, #32]
 800f2ac:	b90b      	cbnz	r3, 800f2b2 <_fflush_r+0x1a>
 800f2ae:	f7fe fbf7 	bl	800daa0 <__sinit>
 800f2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d0f3      	beq.n	800f2a2 <_fflush_r+0xa>
 800f2ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f2bc:	07d0      	lsls	r0, r2, #31
 800f2be:	d404      	bmi.n	800f2ca <_fflush_r+0x32>
 800f2c0:	0599      	lsls	r1, r3, #22
 800f2c2:	d402      	bmi.n	800f2ca <_fflush_r+0x32>
 800f2c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2c6:	f7fe fd36 	bl	800dd36 <__retarget_lock_acquire_recursive>
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	4621      	mov	r1, r4
 800f2ce:	f7ff ff5f 	bl	800f190 <__sflush_r>
 800f2d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f2d4:	07da      	lsls	r2, r3, #31
 800f2d6:	4605      	mov	r5, r0
 800f2d8:	d4e4      	bmi.n	800f2a4 <_fflush_r+0xc>
 800f2da:	89a3      	ldrh	r3, [r4, #12]
 800f2dc:	059b      	lsls	r3, r3, #22
 800f2de:	d4e1      	bmi.n	800f2a4 <_fflush_r+0xc>
 800f2e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2e2:	f7fe fd29 	bl	800dd38 <__retarget_lock_release_recursive>
 800f2e6:	e7dd      	b.n	800f2a4 <_fflush_r+0xc>

0800f2e8 <__assert_func>:
 800f2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2ea:	4614      	mov	r4, r2
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	4b09      	ldr	r3, [pc, #36]	@ (800f314 <__assert_func+0x2c>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	68d8      	ldr	r0, [r3, #12]
 800f2f6:	b14c      	cbz	r4, 800f30c <__assert_func+0x24>
 800f2f8:	4b07      	ldr	r3, [pc, #28]	@ (800f318 <__assert_func+0x30>)
 800f2fa:	9100      	str	r1, [sp, #0]
 800f2fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f300:	4906      	ldr	r1, [pc, #24]	@ (800f31c <__assert_func+0x34>)
 800f302:	462b      	mov	r3, r5
 800f304:	f000 f842 	bl	800f38c <fiprintf>
 800f308:	f7fd fe22 	bl	800cf50 <abort>
 800f30c:	4b04      	ldr	r3, [pc, #16]	@ (800f320 <__assert_func+0x38>)
 800f30e:	461c      	mov	r4, r3
 800f310:	e7f3      	b.n	800f2fa <__assert_func+0x12>
 800f312:	bf00      	nop
 800f314:	20000018 	.word	0x20000018
 800f318:	080108d2 	.word	0x080108d2
 800f31c:	080108df 	.word	0x080108df
 800f320:	0801090d 	.word	0x0801090d

0800f324 <_calloc_r>:
 800f324:	b570      	push	{r4, r5, r6, lr}
 800f326:	fba1 5402 	umull	r5, r4, r1, r2
 800f32a:	b934      	cbnz	r4, 800f33a <_calloc_r+0x16>
 800f32c:	4629      	mov	r1, r5
 800f32e:	f7fd fe49 	bl	800cfc4 <_malloc_r>
 800f332:	4606      	mov	r6, r0
 800f334:	b928      	cbnz	r0, 800f342 <_calloc_r+0x1e>
 800f336:	4630      	mov	r0, r6
 800f338:	bd70      	pop	{r4, r5, r6, pc}
 800f33a:	220c      	movs	r2, #12
 800f33c:	6002      	str	r2, [r0, #0]
 800f33e:	2600      	movs	r6, #0
 800f340:	e7f9      	b.n	800f336 <_calloc_r+0x12>
 800f342:	462a      	mov	r2, r5
 800f344:	4621      	mov	r1, r4
 800f346:	f7fe fc24 	bl	800db92 <memset>
 800f34a:	e7f4      	b.n	800f336 <_calloc_r+0x12>

0800f34c <__ascii_mbtowc>:
 800f34c:	b082      	sub	sp, #8
 800f34e:	b901      	cbnz	r1, 800f352 <__ascii_mbtowc+0x6>
 800f350:	a901      	add	r1, sp, #4
 800f352:	b142      	cbz	r2, 800f366 <__ascii_mbtowc+0x1a>
 800f354:	b14b      	cbz	r3, 800f36a <__ascii_mbtowc+0x1e>
 800f356:	7813      	ldrb	r3, [r2, #0]
 800f358:	600b      	str	r3, [r1, #0]
 800f35a:	7812      	ldrb	r2, [r2, #0]
 800f35c:	1e10      	subs	r0, r2, #0
 800f35e:	bf18      	it	ne
 800f360:	2001      	movne	r0, #1
 800f362:	b002      	add	sp, #8
 800f364:	4770      	bx	lr
 800f366:	4610      	mov	r0, r2
 800f368:	e7fb      	b.n	800f362 <__ascii_mbtowc+0x16>
 800f36a:	f06f 0001 	mvn.w	r0, #1
 800f36e:	e7f8      	b.n	800f362 <__ascii_mbtowc+0x16>

0800f370 <__ascii_wctomb>:
 800f370:	4603      	mov	r3, r0
 800f372:	4608      	mov	r0, r1
 800f374:	b141      	cbz	r1, 800f388 <__ascii_wctomb+0x18>
 800f376:	2aff      	cmp	r2, #255	@ 0xff
 800f378:	d904      	bls.n	800f384 <__ascii_wctomb+0x14>
 800f37a:	228a      	movs	r2, #138	@ 0x8a
 800f37c:	601a      	str	r2, [r3, #0]
 800f37e:	f04f 30ff 	mov.w	r0, #4294967295
 800f382:	4770      	bx	lr
 800f384:	700a      	strb	r2, [r1, #0]
 800f386:	2001      	movs	r0, #1
 800f388:	4770      	bx	lr
	...

0800f38c <fiprintf>:
 800f38c:	b40e      	push	{r1, r2, r3}
 800f38e:	b503      	push	{r0, r1, lr}
 800f390:	4601      	mov	r1, r0
 800f392:	ab03      	add	r3, sp, #12
 800f394:	4805      	ldr	r0, [pc, #20]	@ (800f3ac <fiprintf+0x20>)
 800f396:	f853 2b04 	ldr.w	r2, [r3], #4
 800f39a:	6800      	ldr	r0, [r0, #0]
 800f39c:	9301      	str	r3, [sp, #4]
 800f39e:	f000 f831 	bl	800f404 <_vfiprintf_r>
 800f3a2:	b002      	add	sp, #8
 800f3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3a8:	b003      	add	sp, #12
 800f3aa:	4770      	bx	lr
 800f3ac:	20000018 	.word	0x20000018

0800f3b0 <__sfputc_r>:
 800f3b0:	6893      	ldr	r3, [r2, #8]
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	b410      	push	{r4}
 800f3b8:	6093      	str	r3, [r2, #8]
 800f3ba:	da08      	bge.n	800f3ce <__sfputc_r+0x1e>
 800f3bc:	6994      	ldr	r4, [r2, #24]
 800f3be:	42a3      	cmp	r3, r4
 800f3c0:	db01      	blt.n	800f3c6 <__sfputc_r+0x16>
 800f3c2:	290a      	cmp	r1, #10
 800f3c4:	d103      	bne.n	800f3ce <__sfputc_r+0x1e>
 800f3c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3ca:	f000 b933 	b.w	800f634 <__swbuf_r>
 800f3ce:	6813      	ldr	r3, [r2, #0]
 800f3d0:	1c58      	adds	r0, r3, #1
 800f3d2:	6010      	str	r0, [r2, #0]
 800f3d4:	7019      	strb	r1, [r3, #0]
 800f3d6:	4608      	mov	r0, r1
 800f3d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3dc:	4770      	bx	lr

0800f3de <__sfputs_r>:
 800f3de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3e0:	4606      	mov	r6, r0
 800f3e2:	460f      	mov	r7, r1
 800f3e4:	4614      	mov	r4, r2
 800f3e6:	18d5      	adds	r5, r2, r3
 800f3e8:	42ac      	cmp	r4, r5
 800f3ea:	d101      	bne.n	800f3f0 <__sfputs_r+0x12>
 800f3ec:	2000      	movs	r0, #0
 800f3ee:	e007      	b.n	800f400 <__sfputs_r+0x22>
 800f3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3f4:	463a      	mov	r2, r7
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	f7ff ffda 	bl	800f3b0 <__sfputc_r>
 800f3fc:	1c43      	adds	r3, r0, #1
 800f3fe:	d1f3      	bne.n	800f3e8 <__sfputs_r+0xa>
 800f400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f404 <_vfiprintf_r>:
 800f404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f408:	460d      	mov	r5, r1
 800f40a:	b09d      	sub	sp, #116	@ 0x74
 800f40c:	4614      	mov	r4, r2
 800f40e:	4698      	mov	r8, r3
 800f410:	4606      	mov	r6, r0
 800f412:	b118      	cbz	r0, 800f41c <_vfiprintf_r+0x18>
 800f414:	6a03      	ldr	r3, [r0, #32]
 800f416:	b90b      	cbnz	r3, 800f41c <_vfiprintf_r+0x18>
 800f418:	f7fe fb42 	bl	800daa0 <__sinit>
 800f41c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f41e:	07d9      	lsls	r1, r3, #31
 800f420:	d405      	bmi.n	800f42e <_vfiprintf_r+0x2a>
 800f422:	89ab      	ldrh	r3, [r5, #12]
 800f424:	059a      	lsls	r2, r3, #22
 800f426:	d402      	bmi.n	800f42e <_vfiprintf_r+0x2a>
 800f428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f42a:	f7fe fc84 	bl	800dd36 <__retarget_lock_acquire_recursive>
 800f42e:	89ab      	ldrh	r3, [r5, #12]
 800f430:	071b      	lsls	r3, r3, #28
 800f432:	d501      	bpl.n	800f438 <_vfiprintf_r+0x34>
 800f434:	692b      	ldr	r3, [r5, #16]
 800f436:	b99b      	cbnz	r3, 800f460 <_vfiprintf_r+0x5c>
 800f438:	4629      	mov	r1, r5
 800f43a:	4630      	mov	r0, r6
 800f43c:	f000 f938 	bl	800f6b0 <__swsetup_r>
 800f440:	b170      	cbz	r0, 800f460 <_vfiprintf_r+0x5c>
 800f442:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f444:	07dc      	lsls	r4, r3, #31
 800f446:	d504      	bpl.n	800f452 <_vfiprintf_r+0x4e>
 800f448:	f04f 30ff 	mov.w	r0, #4294967295
 800f44c:	b01d      	add	sp, #116	@ 0x74
 800f44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f452:	89ab      	ldrh	r3, [r5, #12]
 800f454:	0598      	lsls	r0, r3, #22
 800f456:	d4f7      	bmi.n	800f448 <_vfiprintf_r+0x44>
 800f458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f45a:	f7fe fc6d 	bl	800dd38 <__retarget_lock_release_recursive>
 800f45e:	e7f3      	b.n	800f448 <_vfiprintf_r+0x44>
 800f460:	2300      	movs	r3, #0
 800f462:	9309      	str	r3, [sp, #36]	@ 0x24
 800f464:	2320      	movs	r3, #32
 800f466:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f46a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f46e:	2330      	movs	r3, #48	@ 0x30
 800f470:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f620 <_vfiprintf_r+0x21c>
 800f474:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f478:	f04f 0901 	mov.w	r9, #1
 800f47c:	4623      	mov	r3, r4
 800f47e:	469a      	mov	sl, r3
 800f480:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f484:	b10a      	cbz	r2, 800f48a <_vfiprintf_r+0x86>
 800f486:	2a25      	cmp	r2, #37	@ 0x25
 800f488:	d1f9      	bne.n	800f47e <_vfiprintf_r+0x7a>
 800f48a:	ebba 0b04 	subs.w	fp, sl, r4
 800f48e:	d00b      	beq.n	800f4a8 <_vfiprintf_r+0xa4>
 800f490:	465b      	mov	r3, fp
 800f492:	4622      	mov	r2, r4
 800f494:	4629      	mov	r1, r5
 800f496:	4630      	mov	r0, r6
 800f498:	f7ff ffa1 	bl	800f3de <__sfputs_r>
 800f49c:	3001      	adds	r0, #1
 800f49e:	f000 80a7 	beq.w	800f5f0 <_vfiprintf_r+0x1ec>
 800f4a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4a4:	445a      	add	r2, fp
 800f4a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	f000 809f 	beq.w	800f5f0 <_vfiprintf_r+0x1ec>
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f4b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4bc:	f10a 0a01 	add.w	sl, sl, #1
 800f4c0:	9304      	str	r3, [sp, #16]
 800f4c2:	9307      	str	r3, [sp, #28]
 800f4c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f4c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800f4ca:	4654      	mov	r4, sl
 800f4cc:	2205      	movs	r2, #5
 800f4ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4d2:	4853      	ldr	r0, [pc, #332]	@ (800f620 <_vfiprintf_r+0x21c>)
 800f4d4:	f7f0 fe9c 	bl	8000210 <memchr>
 800f4d8:	9a04      	ldr	r2, [sp, #16]
 800f4da:	b9d8      	cbnz	r0, 800f514 <_vfiprintf_r+0x110>
 800f4dc:	06d1      	lsls	r1, r2, #27
 800f4de:	bf44      	itt	mi
 800f4e0:	2320      	movmi	r3, #32
 800f4e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4e6:	0713      	lsls	r3, r2, #28
 800f4e8:	bf44      	itt	mi
 800f4ea:	232b      	movmi	r3, #43	@ 0x2b
 800f4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4f0:	f89a 3000 	ldrb.w	r3, [sl]
 800f4f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4f6:	d015      	beq.n	800f524 <_vfiprintf_r+0x120>
 800f4f8:	9a07      	ldr	r2, [sp, #28]
 800f4fa:	4654      	mov	r4, sl
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	f04f 0c0a 	mov.w	ip, #10
 800f502:	4621      	mov	r1, r4
 800f504:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f508:	3b30      	subs	r3, #48	@ 0x30
 800f50a:	2b09      	cmp	r3, #9
 800f50c:	d94b      	bls.n	800f5a6 <_vfiprintf_r+0x1a2>
 800f50e:	b1b0      	cbz	r0, 800f53e <_vfiprintf_r+0x13a>
 800f510:	9207      	str	r2, [sp, #28]
 800f512:	e014      	b.n	800f53e <_vfiprintf_r+0x13a>
 800f514:	eba0 0308 	sub.w	r3, r0, r8
 800f518:	fa09 f303 	lsl.w	r3, r9, r3
 800f51c:	4313      	orrs	r3, r2
 800f51e:	9304      	str	r3, [sp, #16]
 800f520:	46a2      	mov	sl, r4
 800f522:	e7d2      	b.n	800f4ca <_vfiprintf_r+0xc6>
 800f524:	9b03      	ldr	r3, [sp, #12]
 800f526:	1d19      	adds	r1, r3, #4
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	9103      	str	r1, [sp, #12]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	bfbb      	ittet	lt
 800f530:	425b      	neglt	r3, r3
 800f532:	f042 0202 	orrlt.w	r2, r2, #2
 800f536:	9307      	strge	r3, [sp, #28]
 800f538:	9307      	strlt	r3, [sp, #28]
 800f53a:	bfb8      	it	lt
 800f53c:	9204      	strlt	r2, [sp, #16]
 800f53e:	7823      	ldrb	r3, [r4, #0]
 800f540:	2b2e      	cmp	r3, #46	@ 0x2e
 800f542:	d10a      	bne.n	800f55a <_vfiprintf_r+0x156>
 800f544:	7863      	ldrb	r3, [r4, #1]
 800f546:	2b2a      	cmp	r3, #42	@ 0x2a
 800f548:	d132      	bne.n	800f5b0 <_vfiprintf_r+0x1ac>
 800f54a:	9b03      	ldr	r3, [sp, #12]
 800f54c:	1d1a      	adds	r2, r3, #4
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	9203      	str	r2, [sp, #12]
 800f552:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f556:	3402      	adds	r4, #2
 800f558:	9305      	str	r3, [sp, #20]
 800f55a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f630 <_vfiprintf_r+0x22c>
 800f55e:	7821      	ldrb	r1, [r4, #0]
 800f560:	2203      	movs	r2, #3
 800f562:	4650      	mov	r0, sl
 800f564:	f7f0 fe54 	bl	8000210 <memchr>
 800f568:	b138      	cbz	r0, 800f57a <_vfiprintf_r+0x176>
 800f56a:	9b04      	ldr	r3, [sp, #16]
 800f56c:	eba0 000a 	sub.w	r0, r0, sl
 800f570:	2240      	movs	r2, #64	@ 0x40
 800f572:	4082      	lsls	r2, r0
 800f574:	4313      	orrs	r3, r2
 800f576:	3401      	adds	r4, #1
 800f578:	9304      	str	r3, [sp, #16]
 800f57a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f57e:	4829      	ldr	r0, [pc, #164]	@ (800f624 <_vfiprintf_r+0x220>)
 800f580:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f584:	2206      	movs	r2, #6
 800f586:	f7f0 fe43 	bl	8000210 <memchr>
 800f58a:	2800      	cmp	r0, #0
 800f58c:	d03f      	beq.n	800f60e <_vfiprintf_r+0x20a>
 800f58e:	4b26      	ldr	r3, [pc, #152]	@ (800f628 <_vfiprintf_r+0x224>)
 800f590:	bb1b      	cbnz	r3, 800f5da <_vfiprintf_r+0x1d6>
 800f592:	9b03      	ldr	r3, [sp, #12]
 800f594:	3307      	adds	r3, #7
 800f596:	f023 0307 	bic.w	r3, r3, #7
 800f59a:	3308      	adds	r3, #8
 800f59c:	9303      	str	r3, [sp, #12]
 800f59e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5a0:	443b      	add	r3, r7
 800f5a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5a4:	e76a      	b.n	800f47c <_vfiprintf_r+0x78>
 800f5a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5aa:	460c      	mov	r4, r1
 800f5ac:	2001      	movs	r0, #1
 800f5ae:	e7a8      	b.n	800f502 <_vfiprintf_r+0xfe>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	3401      	adds	r4, #1
 800f5b4:	9305      	str	r3, [sp, #20]
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	f04f 0c0a 	mov.w	ip, #10
 800f5bc:	4620      	mov	r0, r4
 800f5be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5c2:	3a30      	subs	r2, #48	@ 0x30
 800f5c4:	2a09      	cmp	r2, #9
 800f5c6:	d903      	bls.n	800f5d0 <_vfiprintf_r+0x1cc>
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d0c6      	beq.n	800f55a <_vfiprintf_r+0x156>
 800f5cc:	9105      	str	r1, [sp, #20]
 800f5ce:	e7c4      	b.n	800f55a <_vfiprintf_r+0x156>
 800f5d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5d4:	4604      	mov	r4, r0
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e7f0      	b.n	800f5bc <_vfiprintf_r+0x1b8>
 800f5da:	ab03      	add	r3, sp, #12
 800f5dc:	9300      	str	r3, [sp, #0]
 800f5de:	462a      	mov	r2, r5
 800f5e0:	4b12      	ldr	r3, [pc, #72]	@ (800f62c <_vfiprintf_r+0x228>)
 800f5e2:	a904      	add	r1, sp, #16
 800f5e4:	4630      	mov	r0, r6
 800f5e6:	f7fd fe19 	bl	800d21c <_printf_float>
 800f5ea:	4607      	mov	r7, r0
 800f5ec:	1c78      	adds	r0, r7, #1
 800f5ee:	d1d6      	bne.n	800f59e <_vfiprintf_r+0x19a>
 800f5f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5f2:	07d9      	lsls	r1, r3, #31
 800f5f4:	d405      	bmi.n	800f602 <_vfiprintf_r+0x1fe>
 800f5f6:	89ab      	ldrh	r3, [r5, #12]
 800f5f8:	059a      	lsls	r2, r3, #22
 800f5fa:	d402      	bmi.n	800f602 <_vfiprintf_r+0x1fe>
 800f5fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5fe:	f7fe fb9b 	bl	800dd38 <__retarget_lock_release_recursive>
 800f602:	89ab      	ldrh	r3, [r5, #12]
 800f604:	065b      	lsls	r3, r3, #25
 800f606:	f53f af1f 	bmi.w	800f448 <_vfiprintf_r+0x44>
 800f60a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f60c:	e71e      	b.n	800f44c <_vfiprintf_r+0x48>
 800f60e:	ab03      	add	r3, sp, #12
 800f610:	9300      	str	r3, [sp, #0]
 800f612:	462a      	mov	r2, r5
 800f614:	4b05      	ldr	r3, [pc, #20]	@ (800f62c <_vfiprintf_r+0x228>)
 800f616:	a904      	add	r1, sp, #16
 800f618:	4630      	mov	r0, r6
 800f61a:	f7fe f897 	bl	800d74c <_printf_i>
 800f61e:	e7e4      	b.n	800f5ea <_vfiprintf_r+0x1e6>
 800f620:	0801090e 	.word	0x0801090e
 800f624:	08010918 	.word	0x08010918
 800f628:	0800d21d 	.word	0x0800d21d
 800f62c:	0800f3df 	.word	0x0800f3df
 800f630:	08010914 	.word	0x08010914

0800f634 <__swbuf_r>:
 800f634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f636:	460e      	mov	r6, r1
 800f638:	4614      	mov	r4, r2
 800f63a:	4605      	mov	r5, r0
 800f63c:	b118      	cbz	r0, 800f646 <__swbuf_r+0x12>
 800f63e:	6a03      	ldr	r3, [r0, #32]
 800f640:	b90b      	cbnz	r3, 800f646 <__swbuf_r+0x12>
 800f642:	f7fe fa2d 	bl	800daa0 <__sinit>
 800f646:	69a3      	ldr	r3, [r4, #24]
 800f648:	60a3      	str	r3, [r4, #8]
 800f64a:	89a3      	ldrh	r3, [r4, #12]
 800f64c:	071a      	lsls	r2, r3, #28
 800f64e:	d501      	bpl.n	800f654 <__swbuf_r+0x20>
 800f650:	6923      	ldr	r3, [r4, #16]
 800f652:	b943      	cbnz	r3, 800f666 <__swbuf_r+0x32>
 800f654:	4621      	mov	r1, r4
 800f656:	4628      	mov	r0, r5
 800f658:	f000 f82a 	bl	800f6b0 <__swsetup_r>
 800f65c:	b118      	cbz	r0, 800f666 <__swbuf_r+0x32>
 800f65e:	f04f 37ff 	mov.w	r7, #4294967295
 800f662:	4638      	mov	r0, r7
 800f664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f666:	6823      	ldr	r3, [r4, #0]
 800f668:	6922      	ldr	r2, [r4, #16]
 800f66a:	1a98      	subs	r0, r3, r2
 800f66c:	6963      	ldr	r3, [r4, #20]
 800f66e:	b2f6      	uxtb	r6, r6
 800f670:	4283      	cmp	r3, r0
 800f672:	4637      	mov	r7, r6
 800f674:	dc05      	bgt.n	800f682 <__swbuf_r+0x4e>
 800f676:	4621      	mov	r1, r4
 800f678:	4628      	mov	r0, r5
 800f67a:	f7ff fe0d 	bl	800f298 <_fflush_r>
 800f67e:	2800      	cmp	r0, #0
 800f680:	d1ed      	bne.n	800f65e <__swbuf_r+0x2a>
 800f682:	68a3      	ldr	r3, [r4, #8]
 800f684:	3b01      	subs	r3, #1
 800f686:	60a3      	str	r3, [r4, #8]
 800f688:	6823      	ldr	r3, [r4, #0]
 800f68a:	1c5a      	adds	r2, r3, #1
 800f68c:	6022      	str	r2, [r4, #0]
 800f68e:	701e      	strb	r6, [r3, #0]
 800f690:	6962      	ldr	r2, [r4, #20]
 800f692:	1c43      	adds	r3, r0, #1
 800f694:	429a      	cmp	r2, r3
 800f696:	d004      	beq.n	800f6a2 <__swbuf_r+0x6e>
 800f698:	89a3      	ldrh	r3, [r4, #12]
 800f69a:	07db      	lsls	r3, r3, #31
 800f69c:	d5e1      	bpl.n	800f662 <__swbuf_r+0x2e>
 800f69e:	2e0a      	cmp	r6, #10
 800f6a0:	d1df      	bne.n	800f662 <__swbuf_r+0x2e>
 800f6a2:	4621      	mov	r1, r4
 800f6a4:	4628      	mov	r0, r5
 800f6a6:	f7ff fdf7 	bl	800f298 <_fflush_r>
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	d0d9      	beq.n	800f662 <__swbuf_r+0x2e>
 800f6ae:	e7d6      	b.n	800f65e <__swbuf_r+0x2a>

0800f6b0 <__swsetup_r>:
 800f6b0:	b538      	push	{r3, r4, r5, lr}
 800f6b2:	4b29      	ldr	r3, [pc, #164]	@ (800f758 <__swsetup_r+0xa8>)
 800f6b4:	4605      	mov	r5, r0
 800f6b6:	6818      	ldr	r0, [r3, #0]
 800f6b8:	460c      	mov	r4, r1
 800f6ba:	b118      	cbz	r0, 800f6c4 <__swsetup_r+0x14>
 800f6bc:	6a03      	ldr	r3, [r0, #32]
 800f6be:	b90b      	cbnz	r3, 800f6c4 <__swsetup_r+0x14>
 800f6c0:	f7fe f9ee 	bl	800daa0 <__sinit>
 800f6c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6c8:	0719      	lsls	r1, r3, #28
 800f6ca:	d422      	bmi.n	800f712 <__swsetup_r+0x62>
 800f6cc:	06da      	lsls	r2, r3, #27
 800f6ce:	d407      	bmi.n	800f6e0 <__swsetup_r+0x30>
 800f6d0:	2209      	movs	r2, #9
 800f6d2:	602a      	str	r2, [r5, #0]
 800f6d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6d8:	81a3      	strh	r3, [r4, #12]
 800f6da:	f04f 30ff 	mov.w	r0, #4294967295
 800f6de:	e033      	b.n	800f748 <__swsetup_r+0x98>
 800f6e0:	0758      	lsls	r0, r3, #29
 800f6e2:	d512      	bpl.n	800f70a <__swsetup_r+0x5a>
 800f6e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6e6:	b141      	cbz	r1, 800f6fa <__swsetup_r+0x4a>
 800f6e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6ec:	4299      	cmp	r1, r3
 800f6ee:	d002      	beq.n	800f6f6 <__swsetup_r+0x46>
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	f7ff f989 	bl	800ea08 <_free_r>
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6fa:	89a3      	ldrh	r3, [r4, #12]
 800f6fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f700:	81a3      	strh	r3, [r4, #12]
 800f702:	2300      	movs	r3, #0
 800f704:	6063      	str	r3, [r4, #4]
 800f706:	6923      	ldr	r3, [r4, #16]
 800f708:	6023      	str	r3, [r4, #0]
 800f70a:	89a3      	ldrh	r3, [r4, #12]
 800f70c:	f043 0308 	orr.w	r3, r3, #8
 800f710:	81a3      	strh	r3, [r4, #12]
 800f712:	6923      	ldr	r3, [r4, #16]
 800f714:	b94b      	cbnz	r3, 800f72a <__swsetup_r+0x7a>
 800f716:	89a3      	ldrh	r3, [r4, #12]
 800f718:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f71c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f720:	d003      	beq.n	800f72a <__swsetup_r+0x7a>
 800f722:	4621      	mov	r1, r4
 800f724:	4628      	mov	r0, r5
 800f726:	f000 f83f 	bl	800f7a8 <__smakebuf_r>
 800f72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f72e:	f013 0201 	ands.w	r2, r3, #1
 800f732:	d00a      	beq.n	800f74a <__swsetup_r+0x9a>
 800f734:	2200      	movs	r2, #0
 800f736:	60a2      	str	r2, [r4, #8]
 800f738:	6962      	ldr	r2, [r4, #20]
 800f73a:	4252      	negs	r2, r2
 800f73c:	61a2      	str	r2, [r4, #24]
 800f73e:	6922      	ldr	r2, [r4, #16]
 800f740:	b942      	cbnz	r2, 800f754 <__swsetup_r+0xa4>
 800f742:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f746:	d1c5      	bne.n	800f6d4 <__swsetup_r+0x24>
 800f748:	bd38      	pop	{r3, r4, r5, pc}
 800f74a:	0799      	lsls	r1, r3, #30
 800f74c:	bf58      	it	pl
 800f74e:	6962      	ldrpl	r2, [r4, #20]
 800f750:	60a2      	str	r2, [r4, #8]
 800f752:	e7f4      	b.n	800f73e <__swsetup_r+0x8e>
 800f754:	2000      	movs	r0, #0
 800f756:	e7f7      	b.n	800f748 <__swsetup_r+0x98>
 800f758:	20000018 	.word	0x20000018

0800f75c <__swhatbuf_r>:
 800f75c:	b570      	push	{r4, r5, r6, lr}
 800f75e:	460c      	mov	r4, r1
 800f760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f764:	2900      	cmp	r1, #0
 800f766:	b096      	sub	sp, #88	@ 0x58
 800f768:	4615      	mov	r5, r2
 800f76a:	461e      	mov	r6, r3
 800f76c:	da0d      	bge.n	800f78a <__swhatbuf_r+0x2e>
 800f76e:	89a3      	ldrh	r3, [r4, #12]
 800f770:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f774:	f04f 0100 	mov.w	r1, #0
 800f778:	bf14      	ite	ne
 800f77a:	2340      	movne	r3, #64	@ 0x40
 800f77c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f780:	2000      	movs	r0, #0
 800f782:	6031      	str	r1, [r6, #0]
 800f784:	602b      	str	r3, [r5, #0]
 800f786:	b016      	add	sp, #88	@ 0x58
 800f788:	bd70      	pop	{r4, r5, r6, pc}
 800f78a:	466a      	mov	r2, sp
 800f78c:	f000 f848 	bl	800f820 <_fstat_r>
 800f790:	2800      	cmp	r0, #0
 800f792:	dbec      	blt.n	800f76e <__swhatbuf_r+0x12>
 800f794:	9901      	ldr	r1, [sp, #4]
 800f796:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f79a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f79e:	4259      	negs	r1, r3
 800f7a0:	4159      	adcs	r1, r3
 800f7a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7a6:	e7eb      	b.n	800f780 <__swhatbuf_r+0x24>

0800f7a8 <__smakebuf_r>:
 800f7a8:	898b      	ldrh	r3, [r1, #12]
 800f7aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7ac:	079d      	lsls	r5, r3, #30
 800f7ae:	4606      	mov	r6, r0
 800f7b0:	460c      	mov	r4, r1
 800f7b2:	d507      	bpl.n	800f7c4 <__smakebuf_r+0x1c>
 800f7b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f7b8:	6023      	str	r3, [r4, #0]
 800f7ba:	6123      	str	r3, [r4, #16]
 800f7bc:	2301      	movs	r3, #1
 800f7be:	6163      	str	r3, [r4, #20]
 800f7c0:	b003      	add	sp, #12
 800f7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7c4:	ab01      	add	r3, sp, #4
 800f7c6:	466a      	mov	r2, sp
 800f7c8:	f7ff ffc8 	bl	800f75c <__swhatbuf_r>
 800f7cc:	9f00      	ldr	r7, [sp, #0]
 800f7ce:	4605      	mov	r5, r0
 800f7d0:	4639      	mov	r1, r7
 800f7d2:	4630      	mov	r0, r6
 800f7d4:	f7fd fbf6 	bl	800cfc4 <_malloc_r>
 800f7d8:	b948      	cbnz	r0, 800f7ee <__smakebuf_r+0x46>
 800f7da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7de:	059a      	lsls	r2, r3, #22
 800f7e0:	d4ee      	bmi.n	800f7c0 <__smakebuf_r+0x18>
 800f7e2:	f023 0303 	bic.w	r3, r3, #3
 800f7e6:	f043 0302 	orr.w	r3, r3, #2
 800f7ea:	81a3      	strh	r3, [r4, #12]
 800f7ec:	e7e2      	b.n	800f7b4 <__smakebuf_r+0xc>
 800f7ee:	89a3      	ldrh	r3, [r4, #12]
 800f7f0:	6020      	str	r0, [r4, #0]
 800f7f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7f6:	81a3      	strh	r3, [r4, #12]
 800f7f8:	9b01      	ldr	r3, [sp, #4]
 800f7fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f7fe:	b15b      	cbz	r3, 800f818 <__smakebuf_r+0x70>
 800f800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f804:	4630      	mov	r0, r6
 800f806:	f000 f81d 	bl	800f844 <_isatty_r>
 800f80a:	b128      	cbz	r0, 800f818 <__smakebuf_r+0x70>
 800f80c:	89a3      	ldrh	r3, [r4, #12]
 800f80e:	f023 0303 	bic.w	r3, r3, #3
 800f812:	f043 0301 	orr.w	r3, r3, #1
 800f816:	81a3      	strh	r3, [r4, #12]
 800f818:	89a3      	ldrh	r3, [r4, #12]
 800f81a:	431d      	orrs	r5, r3
 800f81c:	81a5      	strh	r5, [r4, #12]
 800f81e:	e7cf      	b.n	800f7c0 <__smakebuf_r+0x18>

0800f820 <_fstat_r>:
 800f820:	b538      	push	{r3, r4, r5, lr}
 800f822:	4d07      	ldr	r5, [pc, #28]	@ (800f840 <_fstat_r+0x20>)
 800f824:	2300      	movs	r3, #0
 800f826:	4604      	mov	r4, r0
 800f828:	4608      	mov	r0, r1
 800f82a:	4611      	mov	r1, r2
 800f82c:	602b      	str	r3, [r5, #0]
 800f82e:	f7f5 f9e1 	bl	8004bf4 <_fstat>
 800f832:	1c43      	adds	r3, r0, #1
 800f834:	d102      	bne.n	800f83c <_fstat_r+0x1c>
 800f836:	682b      	ldr	r3, [r5, #0]
 800f838:	b103      	cbz	r3, 800f83c <_fstat_r+0x1c>
 800f83a:	6023      	str	r3, [r4, #0]
 800f83c:	bd38      	pop	{r3, r4, r5, pc}
 800f83e:	bf00      	nop
 800f840:	20000fe8 	.word	0x20000fe8

0800f844 <_isatty_r>:
 800f844:	b538      	push	{r3, r4, r5, lr}
 800f846:	4d06      	ldr	r5, [pc, #24]	@ (800f860 <_isatty_r+0x1c>)
 800f848:	2300      	movs	r3, #0
 800f84a:	4604      	mov	r4, r0
 800f84c:	4608      	mov	r0, r1
 800f84e:	602b      	str	r3, [r5, #0]
 800f850:	f7f5 f9e0 	bl	8004c14 <_isatty>
 800f854:	1c43      	adds	r3, r0, #1
 800f856:	d102      	bne.n	800f85e <_isatty_r+0x1a>
 800f858:	682b      	ldr	r3, [r5, #0]
 800f85a:	b103      	cbz	r3, 800f85e <_isatty_r+0x1a>
 800f85c:	6023      	str	r3, [r4, #0]
 800f85e:	bd38      	pop	{r3, r4, r5, pc}
 800f860:	20000fe8 	.word	0x20000fe8

0800f864 <_init>:
 800f864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f866:	bf00      	nop
 800f868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f86a:	bc08      	pop	{r3}
 800f86c:	469e      	mov	lr, r3
 800f86e:	4770      	bx	lr

0800f870 <_fini>:
 800f870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f872:	bf00      	nop
 800f874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f876:	bc08      	pop	{r3}
 800f878:	469e      	mov	lr, r3
 800f87a:	4770      	bx	lr
